Unnamed: 0	sentence	label	university
0	 Server Date Wednesday GMT Sunday GMT Kenneth Li Home Page Kenneth Li The road of success is always under construction MENG from the Electrical Engineering Department Since working for Zabih of the CS Department have place in the CS Student Page This is where came from Engineering University of skl skl sli	student	cornell
1	 Server Date Wednesday GMT Monday GMT Lai Lai kuen kuen Master of Engineering Computer Science Department Cornell University Address Grove Street Apt Newton MA Telephone Welcome to visit my place This is my Project of Multimedia Systems course Would you like to read daily news of Taiwan my home country Enjoy it This page is still under construction	student	cornell
2	 Server Date Wednesday GMT Tuesday GMT Ankit Patel homepage ANKIT PATEL EAST STATE STREET ITHACA apatel Personal Photo Galleria Chronologia Curriculum Vitae Cornell University Resume Department of Computer Science and Courses Enrolled Graduate Research Assistant for Brian Smith in the Multimedia Group Project Zeno toolkit for interactive development of graphics in multimedia and virtual reality applications Virtual Reality Video Conferencing Multimedia Systems Readings Project and Assignments Project Kernel Endpoint for An Annotated Bibliography on Common Object Request Broker Architecture CORBA Critique on Understanding the limitations of Causally and Totally Ordered Communication by David Cheriton and Dale Skeen Summer School of Computer Science Web Technologies Course Link OS Support for Multimedia Maharaja Sayajirao University Academics Friends from Techo Reliance Industries Limited Job Profile Life at Reliance	student	cornell
3	 Server Date Wednesday GMT Monday GMT Pavel Naumov Welcome to my Home Page invite you to learn more about me and my location in the cyberspace and the real world Look at my work for Nuprl project and if you are tired take rest at my Art Gallery or visit my Cinema look at some of my photos or play game on Java that have written one Sunday Or just send me and go to some other place	student	cornell
4	 Server Date Wednesday GMT Tuesday GMT Lidong Zhou Homepage Welcome to Lidong Zhou Homepage Department of Computer Science Cornell University Ithaca NY Tel Fall Courses CS System Concepts only locally accessible CS Multimedia System Research Related Materials SIGOPS Papers OASIS from Cambridge DEC SRC Research Reports Adage Authorization for Distributed Applications and Groups The ARA Project Low Level Security in Java Safe Internet Programming Legion Project Sirac The Kerberos Network Authentication Service Massively Distributed Systems from IBM Ocaml Homepage Advanced materials on Internet and WWW Standard for Robot Exclusion Computer and Network Security Career WWW Documents Cornell Career Opportunities JobTrak College Grad Job Hunter Job opening in CS For Career Center Services CareerMosaic Page JobWeb Home Page Career Mag XJOBS Page My Friends Homepages Yingjun Yu Fudan classmates Friends at Cornell Information Resourses Tutorials on Computer languages and Tools Big Yellow Book Cornell ISSO Homepage CND SUNRISE Chinese Soccer World Edmund Automobile Buyer Guides AutoSite The Ultimate Auto Buyers Guide Auto insurance Basics Legal Survival Guide Other Links Travel Agencies Rank of CS departments How to Succeed in Graduate School Fudan Homepage Back to Index Last updated on This homepage is under construction	student	cornell
5	 Server Date Wednesday GMT Saturday GMT Todd Peskin Web Page Todd Peskin Web Page Here is picture of me Contents Who am Where am Where worked as Some of my favorite sites My resume Courses taken Who am am student in the program at Cornell University This joint degree program is offered jointly through the College of Engineering and the Johnson Graduate School of Management In May of will receive Master of Engineering in Computer Science The following year will receive Master of Business Administration am also currently the President of the Cornell Chapter of Acacia Fraternity If you are brother of the Cornell Chapter or any other chapter of Acacia and you would like to become part of our mailing list then please contact me through at and will add you as soon as can If you supply me with your chapter and your roll number then will be able to complete your request more quickly Where am Well the best way to reach me is through at check my mail year round so can always be contacted this way Since am an MEng student can also be found many times logged on to the CS department computers Where worked as The Fall semester of my Junior year and the following two semesters worked as intern with BDM International through the Engineering Cooperative Program at Cornell This program enables Cornell Undergraduate students in the College of Engineering to supplement their classroom knowledge with practical experience working for company in their field of experience At BDM worked on the development and enhancement of two national level database systems The server software is run on Sun Microsystem computers and the client software is run on PC running Windows Some of my favorite sites on the Web ESPN NHL Web Page Stock Quotes Online Sun Java page My final project for CS large mpeg file The Client Computers Web Page created for NBA have had visitors since February This page is still under construction hope to add some more content to this page possibly including some useful Java applets Oh in case you were wondering created the Ticker Tape applet at the top The construction applet was borrowed with permission from Sun Java Developer Kit Todd Peskin	student	cornell
6	 Server Date Wednesday GMT Friday GMT Ravi Kumar Ravi Kumar Department of Computer Science Cornell University Ithaca NY ravi Program Checking Approximate checking of polynomials and functional equations IEEE Foundations of Computer Science October Funda Erg uumln Ronitt Rubinfeld Efficient of linear recurrences IEEE Foundations of Computer Science October Sivakumar On without the generator bottleneck Foundations of Software Technology and Theoretical Computer Science LNCS pp December Sivakumar Learning Theory On learning branching programs ACM Conference on Computational Learning Theory pp July Funda Erg uumln Ronitt Rubinfeld Combinatorics Approximating latin square extensions Conference on Computation and Combinatorics LNCS pp June Alexander Russell Ravi Sundaram Parallel Processing Scalability study of the International Conference on Parallel Processing pp August Jeyakumar Muthukumarasamy Umakishore Ramachandran Gautam Shah	student	cornell
7	 Server Date Wednesday GMT Wednesday GMT Kaz Homepage Kazushi Ota kota kazushi currently Master of Engineering student in Computer Science at Cornell University received my BS in EE at the University of Tokyo way back in March work for Mitusbishi Electric Corporation in Japan and this is where return after get my degree For what it worth this page is under construction but then again so am This homepage started as an assignment to get acquainted with html for CS the Cornell CS department Information Superhighway course This homepage will get more interesting as try to get some PICTURES and MUSIC in it Moving Sale coming your way be taking off to Japan in February There are lot of things want to sell so think advertize them HERE Up to the Cornell Computer Science People Page	student	cornell
8	 Server Date Wednesday GMT Thursday GMT Dan Cyber Abode Dan Cyber Abode Greetings Ye travelers through digital space Welcome to mine humble home Prithee gentles all Surf no further than this shore Instead blink thy teary eyes Rest thy weary keys and borne hands And make thyselves home in mine abode About Myself Brief Autobiography Resume Project Deidre modeling of facial expressions Project Deidre II modeling six universal emotions Project SimNET game Faith They say that hardly is Faith prize in this age For sayings of wise men we scorn bending instead our ears to lawyer tones and scientists words What needs have we then of God unseen unheard and untouchable Yet in the silence of night how we dread the unknown how we question the uncertain how we yearn for true Faith Directions In the field of the Lord Love Warm Friendships Ah Mindless Infatuations Huh Sensual Romances Hmm Burning Passions Oh Love Love Love soft sigh Beloved Poetry Hope Myth favored not beauteous Pandora and ever did men place her at fault for her all too human role which released the dreaded demon Hope Many are those who were led astray by few pretty glimmers of false Hope They treaded the torturous broken roads amidst thorns darkness and filthy souls Disease pain and horrors they suffered only to reach feared end in tears Yet say that Pandora can not be blamed for ever as her deeds were told burning hope in our hearts take hold and the world would never be as of old ever frozen in sad sad Misery cold To that which springs eternal	student	cornell
9	 Server Date Wednesday GMT Tuesday GMT Karl Crary home page Karl Crary crary Office Address Upson Hall Office Phone Research Broadly speaking my primary research interests are in type theory and the design implementation and semantics of programming languages My recent emphasis has been in the areas of subtyping programming and modularity am implementing practical programming language KML which combines these features in functional programming language and formulating for it semantics An interesting view of programming languages is as tractable approximation to the intractably rich world of foundational type theories in which the whole of mathematics can be performed New programming language developments often result from mapping constructions through an approximation into programming language setting and conversely new paradigms in programming languages are often not well understood until they have been formulated am interested in deepening our understanding of this relationship between type theory and programming languages particularly the issues of tractability and approximation and how they can be mitigated am also interested in model of compilation that views it as series of translations into lower intermediate calculi where each intermediate calculus can be embedded into type theory and the corresponding interpretation of program is invariant under each translation Such model allows us to relate each stage of compilation to an original semantics which allows the use of standard compilation techniques and optimizations while guaranteeing safety and correctness Also careful formulation of such intermediate calculi make possible additional optimizations that are unavailable in other compilation strategies My work forms part of the Nuprl project here at Cornell The project name comes from the Nuprl system of formal mathematics and logic type theory based on the type theories of that is also implemented in an automated reasoning system My committee consists of Robert Constable Greg Morrisett and Dexter Kozen also work closely with Jason Hickey Selected papers Other Links Mark Leone maintains collection of programming language research resources You can search computer science technical reports online Cornell Grad Life Bible Studies home page The Lurker Guide to Babylon Of all the commandments which is the most important The most important one answered Jesus is this Israel the Lord our God the Lord is one Love the Lord your God with all your heart and with all your soul and with all your mind and with all your strength The second is this your neighbor as yourself There is no commandment greater than these Mark Cornell University home page Department of Computer Science home page	student	cornell
10	 Server Date Wednesday GMT Sunday GMT Deepak Balakrishna Deepak Balakrishna Master of Engineering Department of Computer Science Cornell University Resume Education Courses Personal Deepak Balakrishna gbd Resume HTML Postscript Back to the main page Education Undergraduate completed my undergraduate in June at Karnataka Regional Engineering College Surathkal India majored in Computer Science My major interest was in Multimedia Other courses related to Computer Science were Operating Systems Artificial Intelligence Compiler Construction Data Communications and Computer Graphics Graduate am presently at Cornell University pursuing Master of Engineering degree in Computer Science am specialising in Multimedia and after graduation want to be involved in projects dealing with multimedia and web server programming Back to the main page Courses The following courses listed are those have taken for the Fall semester CS Multimedia Systems Smith CS Advanced Database Systems Praveen Seshadri CS Engineering Computer Networks Srinivasan Keshav CS Software Engineering Michael Godfrey Back to the main page Personal Well Let see Where do start OK Here goes Once upon time long long ago actually on November in land they call Bharat India for the outside world at precise was born cute chubby little baby weighing approximately four pounds He took on the name Deepak meaning light and went on actually he still in the process to change the world Incidentally or probably out of divine interference Aishwarya Rai Miss World was born on the same day My Is she lucky to be born on the same day as me Leaving out the miniscule details of my earlier life let dive straight into high school Well lucky to have been to National Public School Bangalore for greater part of my schooling Now that the place for someone to be And college Nothings better than KREC Thats where majored in Computer Science wonder how long it will be before get another four year holiday To have been part of the Class of was joy never to be matched And here am at Cornell University pursuing masters degree in Computer Science Well just hope it gets me somewhere And finally heres link to my friends Ashish Aastha Indira Ankit Vineet Back to the main page	student	cornell
11	 Date Sunday GMT Server Tuesday GMT Jeff Baggett Jeff Baggett Center for Applied Mathematics Frank Rhodes Hall Cornell University Ithaca NY baggett Who am am sixth year graduate student in the Department of Mathematics at Cornell University under the supervision of Nick Trefethen expect to finish my thesis titled dynamics and applications in hydrodynamic stability by the summer of would like to continue my research so am seeking research position Here is detailed outline postscript pages of my thesis My curriculum vitae postscript pages Interests and Activities My interests and background are an unusual blend of scientific computing dynamical systems and fluid mechanics Here is research proposal postscript pages for some work would like to do in the next couple of years Papers mostly linear model of transition to turbulence postscript with Driscoll and Trefethen Physics of Fluids April Exponential type versus spectral abscissa the Hille and Phillips example postscript submitted to Integral Equations and Operator Theory Low dimensional models of subcritical transition to turbulence postscript with Trefethen submitted to Physics of Fluids Misc Links Satish	student	cornell
12	 Server Date Wednesday GMT Tuesday GMT Sugata Mukhopadhyay home page Sugata Mukhopadhyay Welcome to my home page am graduate student in the Department of Computer Science at Cornell University am working on Multimedia Systems with Brian Smith am married to the most wonderful person on earth Ritu Spring am taking CS High Performance Computer Systems and CS Compiler Design for High Performance Architectures am also taking NBA Advanced Option Pricing Theory am the czar of the Work in Progress Seminar Previous Semesters How to contact me Home phone Work phone sugata Address Hichory Estates Owego NY sugata	student	cornell
13	 Server Date Wednesday GMT Tuesday GMT Roderick Moten Home Page	student	cornell
14	 Server Date Wednesday GMT Tuesday GMT Bilth Gater and the Galactic Empire Bilth Gater and the Galactic Empire Written and Illustrated by Sumedh Kanetkar Email kanetkar This is series of weekly comic strips that drew while interning at Microsoft in the summer of The strips were posted weekly to the intern social alias and were read regularly by over people As the summer progressed noticed that my artwork had begun leaking to the employees as well Whether his highness Lord Gater Himself read them never found out Episode The First Day This was the first strip drew up within week of arriving in Redmond tried to persuade the Microsoft newsletter to print it but they perceived it as PR problem and declined They did want Microsoft to be portrayed as the evil empire can understand their viewpoint but as told them the comic strip was an attempt to show how the company is viewed by many in the outside world and personally had no bitter feelings towards either Bill Gates or his corporation Heck have really enjoyed my two summers of work there and strongly recommend the internship program to anyone interested in working in the industry This first strip makes fun of the New Employee Orientation NEO that every employee has to suffer through During this session they show you videos and fill you up with all kinds of MS trivia They also make you sign the agreeement NDA It would be fitting if they made everyone stand at the end of the day place their hands over their hearts and say the Microsoft Pledge of Alleigance computer on every desk in every home running Microsoft software but they do Anyway Episode The Space Rooster Episode The Rebel Threat Episode Flame On Episode Lord Gater Party Part Episode The Imperial Insignia Episode Lord Gater Party Part II Episode Lord Gater Party Part III	student	cornell
15	 Server Date Wednesday GMT Friday GMT Mishaal Home Page Mishaal Home Page Hi Kuwaiti student at Cornell University in the Master of Engineering in Computer Science program MEng CS graduated with double major in Electrical Engineering and Computer Science from Worcester Polytechnic Institute in Worcester MA The coolest place on Earth Here list of stuff involved or interested in Temporary Link to Cornell Services BearAccess Menu Links to courses taking Machine Vision Newgroup High Capacity Networks Newgroup Database Management Newgroup Optimal Video Transmission MEng Project CMT Extension Kuwait Home Page My Resume Check stock quotes Cooler Links My Public WWW Server hope to offer CoNote soon Weather in Ithaca CNN for the latest news Cannes International Film Festival Everything is wrong The reason why want to be kid again Ever been accused of being nerd Well now you can be sure Home Interests Cool Links CS Home Page Mishaal Almashan mishaal Cornell University	student	cornell
16	 Server Date Wednesday GMT Saturday GMT William Lee You Are Visitor No William Lee Hi am from New Jersey Exit minutes away from Princeton am Master student in Computer Science at Cornell University have BS degree in Computer Engineering and Science from Carneige Mellon University where did research projects for Engineering Design Research Center and Robotics Institue Then spent year writing an operating system XSROS on HPUX for Motorola at Lauderdale Florida Besides sleeping and school work on projects like Optimal Parallel MPEG Encoder CORNELLopoly Network Computer and Database Sector Analysis with my research partners at the Systems Lab compete in USTA tennis tournments in South Florida but could never win Somehow it is the parties that enjoy after weekly matches There are many very beautiful places to play tennis in South Florida Here are some of my faviorite ones Boca Raton Key West Gets very hot Coral Springs Where lived have collection of piano concertos from Beethoven Chopin Gershwin Liszt Mendelssohn Mozart Rachmaninoff Ravel Tchaikovsky also collect violin concertos As you can probably guess by now am concerto type of guy even wrote my graduate school application essay based on piano concerto That probably one of the reasons why got rejected by my own school Fall Classes Software Engineering Formal Methods Multimedia Systems Computer Science Colloquium Cool Software Tools Seminar Presentation Optimal Parallel MPEG Encoding Research Spring Classes Practical Distributed Computing Practicum in Distributed Computing and CORNELLopoly High Performance Systems and Network Computer Optimal Parallel MPEG Encoding Research Thriving on the Information Revolution and Database Sector Cool Links to copy frog Ski Server Identity Crisis Test Weather Underground Inktomi Search Engine Question Of The Week Archives Last Updated Nov Campus Address Maple Ave Apt Ithaca New York wwlee	student	cornell
17	 Date Sunday GMT Server Friday GMT Patty Hough Patty Hough Sandia National Laboratories Box MS Livermore CA ph Who am was student in the Center for Applied Mathematics which is housed in Frank Rhodes Hall at Cornell University My thesis advisor was Steve Vavasis Other members of my committee were Nick Trefethen and Al Schatz My research interests fall in the areas of numerical linear algebra scientific computing optimization am currently working as postdoc with Juan Meza in the Scientific Computing Department at Sandia National Laboratories in Livermore CA Here is my resume and statement of research goals Tech Reports Complete orthogonal decomposition for weighted least squares with Vavasis to appear in SIAM Matrix Anal App Stable and efficient solution of weighted problems with applications in interior point methods Thesis	student	cornell
18	 Server Date Wednesday GMT Monday GMT coming into the clearing stepping out of the forest what around the clearing looking around you you realize you must have walked much further than you planned to there wide variety of trees surrounding you on all sides but especially oak trees the weather seems fairly overcast but you somehow ca figure out if it going to rain or snow perhaps it will do both off in the distance you can see large mountain where it quite clear that it is snowing no question about it you hear birds chirping quite near to where you are of course they may be responding to the sounds inside the clearing but the much much louder sounds are coming from nearby waterfall you ca see it but it got ta be big you could follow the sound if you wanted there seems to be path leaving that direction there are two other paths leaving the clearing one is labeled with sign that says the hill school the other is labeled with the sign the hell school there also small wormhole which seems to connect to nearby house presumably there lot of traffic between the two places what inside the clearing inside the clearing are couple of structures there shack with door that falling off and completely modern glass house with no stones in front of it there pile of books scores magazines and random papers scattered all throughout the clearing as well it seems like there some vague rhyme and reason to it but glancing at the topics there seem to be few on all sorts of topics you figure that if you look at the most recently read books you probably have better idea of what makes the person in the clearing tick there also resume that you see it seems somewhat off in the corner presumably he has more important things to worry about he seems kind of strange the guy in the clearing he smiles over at you and says hello he about and is often described as being way too thin especially by his mother his most distinctive feature is his hair which is bright golden red and quite long he looks vaguely elfin but you seen more people before warning links in next paragraphs not yet written get there soon more obvious is that he always doing things at once he starts telling you story but then stops and hums tune then he starts telling you why nicholas negroponte is moron but if you never heard of him he starts talking to you about gay politics in late america then he pauses and starts talking about some obscure theorem from theoretical computer science it obvious that he rather well read from listening to him but he tends to go on bit much so you start looking at his appearance instead he wearing mostly two colors purple and dark turquoise everything he wearing seems to be either silk or linen and contrasts nicely with his hair he has on glasses as well there gold ring with an image of beaver on his right ring finger the beaver is pointing away from him on his left ring finger is silver ring with an ocean wave pattern on it he also wearing pewter pentacle around his neck and looks altogether more like than someone who as classically as he sounds like he is other people who visit the clearing dan starts talking about the people who occasionally visit and whom he has spent time with brian is an old friend from mit whom used to live with when was an undergrad nowadays he works for pointcast which is an internet news provider anca mosoiu pronounced schwa sh oi is my best friend from back when we were at mit used to eat with her many times week for two and half years and we went to europe together the summer after we graduated in oh and her inner child by the way she just quit working at one wave do blame her for that dreadful name actually it used to be business web and before that it was object power feh daniel is someone gotten to know quite bit better over the last several months think we met probably sometime last november but we became much better friends over the summer he switched out of the ee department quite wisely and is having much more fun as multimedia student in the dept of communications for some reason that in the ag school he also has small internet business he with friend of his there used to be link to perry finley page here but there not anymore instead brian has some pictures of perry on his pictures page my dad works for steelcase which is the largest manufacturer of office furniture in the world the server that they have on the web is kinda cheesy it used to just have the picture of the pyramid but it is still neat pic of the building dad works in tim is guy used to sing with here at cornell he just left for japan for program called jet which hired him to teach english to high school students there in an ideal world visit him next winter or so hani graduated from mit this june and it could have happened to someone who more needed to get out of that place ack but he great guy even so nick is good guy who met about year and half ago he lot cuter than the somewhat blurry picture on his web page would indicate we are the music makers and we are the dreamers of dreams aphex twin dan brown snowman last updated oct	student	cornell
19	 Server Date Wednesday GMT Thursday GMT Julia home page Julia Komissarchik juliak To be continued	student	cornell
20	 Server Date Wednesday GMT Tuesday GMT Divakar Home Page Divakar Viswanath divakar Address Upson Hall Cornell University Ithaca NY Off Res am graduate student in Computer Science My area of interest is Numerical Analysis My adviser home page is good place to find out about Numerical Analysis Cornell CS	student	cornell
21	 Server Date Wednesday GMT Wednesday GMT Indira Vidyaprakash Indira Vidyaprakash Master of Engineering Class of Dept of Computer Science Cornell University Welcome to my homepage Currently am student at the Computer Science Department at Cornell University in Ithaca NY have my degree in Computer Science and Engineering from PSG College of Technology Coimbatore INDIA Some information about the courses that have taken at Cornell University Fall Operating System Practicum in Operating System Project specification HOCA Operating System Software Engineering Multimedia Systems Project Audio Processing Toolkit Management Information Systems Policy Spring Computer Graphics Practicum in Computer Graphics Project Animation The Magic Carpet Computer Science Colloqium NCC Managerial Finance Summer Independent Research Ray Tracing in Computer Graphics Project Camera and Perspective Transforms in Java Click here to see postscript version of my Resume Click here to see the JAVA Applet for Camera and Perspective Transforms Some interesting WEB sites Some cool applets from Gamelan Directory Calvin and Hobbes Gallery GIFS Indian Recipes Chickering Wood Drive Nashville Tennessee indira Last Update August	student	cornell
22	 Server Date Wednesday GMT Wednesday GMT Tibor Tibor Welcome to my WWW Home Page Permanently Under Construction Office Upson Hall Cornell University Ithaca NY USA Office Phone Interesting Sites Project Zeno Tibor janosi	student	cornell
23	 Server Date Wednesday GMT Monday GMT Hani Home Page	student	cornell
24	 Server Date Wednesday GMT Wednesday GMT Sunil Srivastava Home Page Welcome to the Home Page of Sunil Srivastava Master of Engineering Student Computer Science Department Cornell University Academic Classes TA Classes Project Personal Information Useful Links Comments or questions about this web page Send mail to sxsrivas	student	cornell
25	 Server Date Wednesday GMT Thursday GMT Nobuhiko Mukai Nobuhiko Mukai This is home page of Nobuhiko Mukai Now it under construction We researched an effective JPEG compression on Multimedia systems last fall semester made an animation titled magic on Computer Graphics spring semester	student	cornell
26	 Server Date Wednesday GMT Friday GMT Huang Huang Defender of Truth Champion of Justice and Nice Guy all me Steven Some years ago nevermind how long exactly arrived as second son to set of proud parents If this sounds like Moby Dick to you then let me assure you have no intention of finding ship to hunt whale But digress Brought up in Taiwan until the tender age of seven my whole family migrated south to the tropical islands of the Philippines There we made our home and lived some fifteen years picture of Mom and me when was around six years old thus became quite fluently bilingual As love to read the poetry of the Tang Dynasty the Arabian Nights quite naturally the children version and host of other stories somewhat fulfilled the Wen in my name which means class in grade seven was to set the course of my life dove right into the marvel that was computer Four years later entered the University of the Philippines with that as my major and very likely my career had found talent in me that draws me to the art and science of computing and unabashedly knew was quite good at it Was also in College when met her and she met In whirlwind of happiness and peace three years and running woman has become the most important part of my life effortlessly defeating my hobbies of old with her love eeking career more ideal and higher paying to be blunt enrolled in the Cornell University graduate program Thus far have been rewarded with almost everything have ever wanted and worked for am lucky man September Welcome to my home page To segregate myself from your everyday geek like to think man of many interests Aside from actually writing program here what happily do in my spare time Read anything from Calvin and Hobbes to Unix Network Programming Internet Relay Chat can generally be found as steven on LinuxNet Building things Of course just practicing design Building plastic models of weapons of war Watching films Listening to the music of Sting and many others Watch Sesame or the Discovery Channel and Railroad models when get rich enough In the field of computers also have rather broad spectrum of interests though my studies have concentrated in the areas of computer graphics and networking If you wish to be offended by some blatant you may want to check out my also highly interested in Linux operating system for the Intel or compatible computer My Master of Engineering project is Modeler for Blobby Models or Metaballs under the supervision of Bruce Land am currently involved in another course project involving survey of techniques in modeling human faces and and portable audio effects editor Last Modified October Huang	student	cornell
27	 Server Date Wednesday GMT Thursday GMT Francis Chu Home Page Francis Chu CS Graduate Student University of California at Berkeley Mathematics Department Computer Science Department Cornell University Computer Science Department Humor fcc	student	cornell
28	 Server Date Wednesday GMT Monday GMT Vineets Home Page Vineet Ahuja Department of Computer Science Cornell University Ithaca NY Address Hasbrouck Ithaca NY ahuja Academics an Eng student in the department of Computer Science at Cornell University My main areas of interest lie in Parallel Processing Advanced Architectures Operating Systems and Object Oriented Programming Coursework at Cornell Fall Automata and Computability CS Engineering Computer CS Spring High Performance CS Final Project Report Software Design for High Performance CS Final Project Report Fall High Capacity Information EE Multimedia CS Resume PostScript the Postscript is more recent HTML This page has been accessed times since Feb	student	cornell
29	 Server Date Wednesday GMT Saturday GMT Min Stanley Huang Home Page Min Stanley Huang Master of Engineering Student mhuang Sheldon Court Cornell University Ithaca NY Tel Master of Engineering Computer Science Cornell University class of Bachelor of Science Computer Science University of Kentucky Kentucky Areas of Interests Operating Systems Distributed Systems Database Systems Information Retrieval Graphical User Interfaces Other Interests Movie Tennis Riding Travel Reading am working on my Project Distributed Computing in with my advisors Werner Vogels and Robbert van Renesse Objective of the Project is to integrate Horus into Here are few links related to the Project distribution Update FAQ Horus Final Exam Paper Collection Distributed Shared Memory Distributed Shared Memory Some Technical Papers am interested in Group and Communication Snapshot Network Interface Architecture JOBS Career Path Bay Area Jobs CybeRezumes Career Opportunities Useful stuff Technical Paper Fielded Search Bell Labs Java RFC Last Modified Fri Oct Min Stanley Huang mhuang	student	cornell
30	 Server Date Wednesday GMT Friday GMT Rosen Sharma Office Upson Hall Email sharma TA for came to Cornell from Stanford where spent couple of years as PhD student My work and research at Stanford was about streaming live media like audio and video over the internet As part of this modified IGMP one of the multicast protocols developed protocols for multicasting layered video and developed the Virtual Classroom system The initial prototype was deployed in the Spring and Fall quarters and used as an alternative to the Stanford Instructional Television Network SITN program which uses microwave links Students at remote sites used the software to asynchronously access class lectures and notes over the internet We also stumbled upon the fact that other media like text slides etc linked with portions of video enhanced its usefulness greatly This lead to the formation of company Vxtreme Palo Alto CA Vxtreme is new Silicon Valley start up develop client sever applications for streaming multimedia delivery over the internet Papers Signalling and Operating System Support for ATM Applications Rosen Sharma and Keshav Sigcomm Text Segmentation of Mixed Mode Images Navin Chaddha Rosen Sharma Avneesh Agarwal and Anoop Gupta Asilomar IGMP Internet Group Membership protocol designed by Rosen Sharma and Steve Deering release as part of IP multicast Internet draft written by Bill Fenner Optical Character Recognition Using statistical and structural methods Rosen Sharma and Niten Malhan Bachelors thesis Dept of Computer Science Indian Institute of Technology Delhi Unpublished Stuff Characterizing Variable bit Rate Sources Rosen Sharma term paper Preformance of Software Video Conferencing System Rosen Sharma Internal Report Cool Stuff Image and Video Manipulation Language This is language with video and images as first class data types It allows operators on images and sequences like blur speckle transforms like affine dct subband motion estmation It also makes manipulation of image and video data fast and efficient The implementation is writen in and currently has been tested on SGI machines it supports bit and display To give you flavour of what the language looks like set image image imageFrame if iframe if filename image putImageInCanvas imageFrame image if There is predecessor to this implementation if you hate which uses motif and has language interpreter written in yacc with limited shell like scripting Here is cool shell script that will generate TK widgets It generates all the files given the name of the widget The files compile and give you dummy widget snooper recorder and player consider this one of the coolest things ever did It does something similar to what from Microsoft does for Windows they just released it It doesnt have scripting language but just replays what is recorded with lots of kludges to fool the Some Postscript Fractals Creates file called in your directory This used to be hole but postscript viewers fixed it by dissalowing write calls Semantics of my Name Rosen not being an Indian name this question was often asked People gave the name their own interpretations Here are some of them Some of my chinese friends makes me wonder claim that it means small horse not smart In hindi my native tongue Sharm mean shyness Sharmila means shy And there is an actress called Sharmila Tagore So was nicknamed Sharmila Frozen Sharmila or Stupid Horse Some people claim that it is from one of the ealry Jewish leaders What is in name	student	cornell
31	 Server Date Wednesday GMT Thursday GMT Janeen homepage Janeen Reich Welcome to my home page Currently am at Cornell University where am completing the in Computer Science in August In September will join the Systems Group of Texas Instruments in Dallas Texas To send me email jreich My resume is currently being added to this page My Most Favorite Things	student	cornell
32	 Server Date Wednesday GMT Friday GMT David Pearson David Pearson Research Interests My thesis investigates highly scalable parallel computers consisting of very simple processors connected in mesh The guiding vision of this work is of time perhaps years hence in which materials science has taken the place of computer architecture and computers are crystals with each processor molecule in the lattice Long before this goal can be realized we can and should prepare for the ubiquitous parallelism it will offer Our algorithms must heed the laws of physics and pay attention as chip designers do now to spatial layout and the currently hidden cost of communication This can be accomplished by designing our algorithms for mesh To pursue this vision requires both theoretical and practical work So far my work could be characterized as feasibility study have produced cellular architecture which could be efficiently realized with current hardware simulator for this architecture algorithms programs and an operating system design for computing believe that computers not problems like protein structure are the grand challenge of parallel architecture Parallel computational power will not really succeed until it becomes commodity and is sold for desktop machines or video games Directions for future research include VLSI implementation of this architecture and the design of programming language Most languages hide the details of the machine instruction set but reflect the underlying Von Neumann architecture believe that this connection to the architecture has been good thing for algorithm design and to really exploit parallel machines we need language for which the costs of operations are as easy to estimate as they are for on Von Neumann machine Publications Dunten Pearson and Arms The Kiewit Network Campus Network In IEEE Computer Society International Conference IEEE COMPCON pp Fall Pearson Pillai and Lee An Algorithm for Placement of Sensor Elements IEEE Transactions on Information Theory pp Pearson and Vazirani Fast Parallel Algorithm for Finding Maximal Bipartite Set In Foundations of Software Technology and Theoretical Computer Science FST TCS pp Published as Lecture Notes in Computer Science Pearson and Vazirani Efficient Sequential and Parallel Algorithms for Maximal Bipartite Sets Journal of Algorithms pp Johnson Pearson and Pingali Finding Regions Fast Single Entry Single Exit and Control Regions in Linear Time Cornell CS Tech Report Johnson Pearson and Pingali The program structure tree Computing control regions in linear time In Proceedings of the Sigplan Conference on Programming Language Design and Implementation PLDI pp Published as ACM SIGPLAN Notices Pearson Algorithm for the Problem Cornell CS Tech Report Hao and Pearson Instruction Scheduling and Global Register Allocation for SIMD Multiprocessors In International Workshop on Parallel Algorithms for Irregularly Structured Problems Irregular pp Published as Lecture Notes in Computer Science Hao Pearson and Zippel Global Register Allocation for SIMD Multiprocessors Journal of Computer Science and Technology Allerton Press Pearson Parallel Implementation of RSA in Selected Areas in Cryptography SAC to appear Computer Science Department Upson Hall Cornell University Ithaca New York USA Email pearson Tel Fax	student	cornell
33	 Server Date Wednesday GMT Sunday GMT KOLLAs Home Ground Copyright No Rights Reserved will not be held responsible for any unwanted effects due to the usage of this applet or any derivative No warrantees for usability for any specific application are given or implied function scrollit seed var You have reached the page of Vivek The page that is viewed by millions and zillions var Wondering how var can be reached var var You can call me at var or send me mail at kolla var But dont expect me to get back to you var var out var if seed seed var scrollit seed else if seed seed for seed seed var scrollit seed else if seed if seed var scrollit seed else scrollit Hi there You are the visitor number to my home page Are you not happy with that My contact info to transmit your thoughts Friends Foes LINKS small collection of URL of relevance to my life used to maintain large list of my favorite links but now think that was waste of time If you are searching for something specific you might try Alta Vista Yahoo or the Inktomi RESUME In HTML In Postscript In Word Perfect In ASCII The current time here is Go get good browser Your browser does not know java Dont you have clock to see your time or do you wan na know what time it is around the world You will need Java capable browser to view the animation This Site is Under Construction Wondering why have so many images and heavy files Go get like me Note This home page uses both JAVA and animations No promises are made with regards to the quality of your visit using browser which does not fully support these technologies	student	cornell
34	 Server Date Wednesday GMT Tuesday GMT David Karr David Karr PhD Student Department of Computer Science Cornell University Upson Hall Ithaca NY Tel Fax karr am student in the Department of Computer Science at Cornell University am working on the Horus project layered architecture for reliable distributed systems with Professor Kenneth Birman and Robbert van Renesse My minor field is mathematics concentrating in statistics Research Interests Engineering layered communication protocols Weak consistency Performance Engineering layered communication protocols My research interests include the problems of specifying implementing and verifying applications to run on distributed computer systems My dissertation work has concentrated on the formal specification and verification of the properties of Horus protocol layers Using the Temporal Logic of Actions one can specify various interesting fundamental properties of the protocol layers used in Horus protocol stacks furthermore one can write formula in the style for each layer specifying the properties it might provide at its interfaces depending on the properties of the layers above and below it in the stack One can then employ straightforward techniques to verify that given stack provides certain desired properties at the top of the stack under specified conditions even for unusual combinations of layers or layers stacked in an atypical stacking order Ultimately users of Horus and other layered communications systems should be able to call on these verification techniques to help construct customized stacks that omit unnecessary layers avoiding their associated costs with the confidence that the included layers and their stacking order are sufficient to provide the desired guarantees This work is intended to be part of the basis for the Securing and Hardening Horus project have developed Java applet that gives rough demonstration of my proposed method of verifying the properties of Horus protocol stacks My initial interest in the Horus project stems from the promise of the Horus protocol suite to provide various guarantees of consistency to programmers in environments where hosts may crash and messages may be delayed or lost As software development engineer who has worked on distributed applications whose components were prone to failure feel the features of Horus offer considerable promise to application developers Weak consistency While at Cornell have become interested in the problems of distribution of computing over networks and have looked into the problems of revision control of files in environment and in general in distributed environment whose network is prone to be partitioned into disconnected portions More generally am interested in notions of weak consistency that would allow multiple temporarily disconnected sites to make progress concurrently Performance My research at Cornell has concentrated on correctness of protocols but other measures such as high availability low response time and efficient use of resources are clearly equally important large part of the problem is the apparently randomized timing of system loads and activity in distributed applications with the notable exception of those that run on dedicated parallel machines This behavior also should be susceptible to some mathematical analysis though of different kind which encouraged my interest in statistics HTML and Java The World Wide Web itself is an interesting distributed application with many possibilities to explore experimented with simple ways to use hypertext to navigate information most of these appear in my Web site about LEGO toys and been hacking Java applets executable code that Netscape browser can download and run for example birthday puzzle calculator and tool for verifying properties of Horus protocol stacks Professional Affiliations am member of IEEE ACM and MAA Other Information See my WWW links for other topics find interesting or useful Last updated June David Karr karr	student	cornell
35	 Server Date Wednesday GMT Tuesday GMT Seena Cherangara Seena Cherangara Master of Engineering Class of Dept of Computer Science Cornell University Welcome to my homepage Currently am an student at the Computer Science Department at Cornell University in Ithaca NY have my degree in Computer Science and Engineering from the College of Engineering Trivandrum Kerala INDIA Some information about the courses that have taken at Cornell University Fall Operating System Practicum in Operating System Project specification HOCA Operating System Software Engineering Multimedia Systems Project Algorithms for JPEG Artifact Reduction Spring Computer Graphics Practicum in Computer Graphics Project Animation The Magic Carpet Distributed Systems Computer Science Colloqium Summer Project Graphics Modeling in Java Parametric Equation Viewer Click here to see postscript version of my Resume Maple Ave Apt Ithaca New York seena Last Update June	student	cornell
36	 Server Date Wednesday GMT Tuesday GMT Home Page of Huang Huang Upson Hall Department of Computer Science Cornell University Ithaca NY Tel Fax Email ychuang am graduate student in the Department of Computer Science at Cornell University Favorite Links Online Documents Courses Project Accessed by Visitors Last modified Tue Nov Huang ychuang	student	cornell
37	 Server Date Wednesday GMT Wednesday GMT Mike Page This is my page Yeah Hi For more version of this page please use more recent browser Some stuff here may be quite out of date Would you like to sign my Guestbook That would be cool Here chance to make your opinion count bet it dark in Stockholm right now Take look and VOTE Or you can look at poll results Here are couple of links to some people know Cat guess she pretty cool Ryan But we call him Beavis Vitya That better be under construction Amy Dancing frogs and stuff Maria No no please do cry Mark Korby do really know him But he got my last name Andrew Corbett He may suck at cards but he got cool nickname Kevin This guy got dog that has my last name Complete with lovely picture Say Hi to Eryn She craves attention Want to see my movie We had to make it for graphics class Golf An amazing animation of guy playing golf MB MPEG Here are some links to other places Has the Universe stopped expanding Click here to find out What this world really needs is Beavis you can click This is my personal pick for Cool Site of the Day Look Mom made Online Top Ten Student Homepages list My lame list of Guttermouth links This page is now being brought to you by Just kidding member of the Internet Link Exchange This page is now connected to whole bunch of others on this line thing So like come on let all join hands now and sing together in the spirit of harmony Uh or something You visitor number these things keep resetting Or check out complete statistics for my page through this thing It pretty cool but not very accuarate And stuff Mike Korby Please send me mail at Basically this page is pretty much over but here couple of random images that do really relate to anything Thanks to everybody who web page ideas used to make this	student	cornell
38	 Server Date Wednesday GMT Tuesday GMT Simple Homepage Ben Hao Graduate Student bhao Cornell University Dept of Computer Science Upson Hall Ithaca NY Tel Fax From inside Cornell try the Net Flea student in Computer Science at Cornell working on code synthesis for massively parallel processors My advisor is Richard Zippel whom first heard from George Taylor when was at Sun Microsystems My family is in the San Francisco Bay Area You can find more information about the area by reading its local newspapers Do forget to check out its gorgeous weather Life at Cornell What to do at Cornell Where to eat Check Ithaca weather Go see movie Study in library CS dept home page Check these out Generally Neat Stuff MIT Stocks MIT Weather UT Maps Interactive Frog Dissection Magazines on the Net InterText magazine Wired Magazine Peek into the Galaxy Views of the Solar System Shoemaker Levy Art and Music Le WebLouvre Xmorphia Gallery of Interactive Geometry Kaleidospace Internet Underground Music Archive Network Navigation Global Network Navigator WWW Wanderers and Spiders The Web Edge Library Library of Congress Martial Art Scientific Computing info Tutorials Internet info NIH Internet course The InterNIC Info Guide CERN Web Seminar Last Modified Tue Mar EST Ben Hao bhao	student	cornell
39	 Server Date Wednesday GMT Monday GMT My Home Page Indira Malik Department of Computer Science Master of Engineering imalik Resume Post Script Courses Programming Engineering Advanced Database Systems Engineering Computer Networks Multimedia Systems Visit my High School TAPS This page is under construction	student	cornell
40	 Server Date Wednesday GMT Friday GMT Yoo Sun Chung Home Page Welcome Everybody My name is Yoo Sun Chung You are the th visitor since April What am doing now am studying Computer Science for Master degree at Cornell University now Please check my school Master of Engineering Computer Science Cornell University Where am from Originally came from Seoul Korea After graduated from high school in Korea came to America for studying The schools went in Korea Kindergarten Elementary School Mar Feb Junior High School Mar Jul Junior High School Aug Feb Women High School Mar Feb After came to America got degree for Computer Science at George Mason University in Virginia on May The happiest thing in my life married on April My wonderful husband Sok Hwa Chang works for SAIC in Virginia as computer programmer Here is my husband picture Would you like to see my beautiful moment Only if you have JAVA available browser Click Here What do do when am free play the keyboard Actually like to play the piano better than keyboard but my piano is in Korea not here listen to the music What kind of music like Korean pop music love Shin and Lee like classical music too And so on and so forth browse the World Wide Web Some Useful Links Are you interested in JAVA You can search what you want using this search engine Korean Online Newpaper Hangook Ilbo Chosun Ilbo Joongang Ilbo Would you like to hire me Here is my resume Resume for Word Perfect Version This is my MENG project am still working on it Title Image Processing Java Applet Yoosun Personal Infomation Rd Ithaca NY Phone Fax Emergency Sok Hwa Chang Email ychung This email is forwarded to and yooschung automatically This is under construction last modified on November	student	cornell
41	 Server Date Wednesday GMT Tuesday GMT Dan home page has moved Dan home page is now at http Please visit it by the millions	student	cornell
42	 Server Date Wednesday GMT Wednesday GMT Felix World	student	cornell
43	 Server Date Wednesday GMT Tuesday GMT Nikos Home Page Research Nikos Pitsianis Upson Hall Dept of Computer Science Cornell University Ithaca NY work fax home nikos Publications Lectures Teaching Java Vita Pointers Since May You are visitor number	student	cornell
44	 Server Date Wednesday GMT Friday GMT Jose Luis Fernandez Home Page Jose Luis Fernandez Jose Luis Fernandez Master of Engineering Department of Computer Science Cornell University Ithaca NY Home Address Maple Avenue Apt Ithaca NY joseluis If you were using browser you would see an animated scrolling text sign Resume Curriculum Vitae Interests My current interests are Distributed Systems Multimedia and Computer Graphics Projects Project Image and Video Transition FX for Rivl Examples Page Presentation Project Pyramania Game Spaceship battle Project Report Project Hoca Design and coding of Operating System implementing Multitasking and Virtual Memory MENG Project Project Distributed Vehicle Simulation Hobbies Photography Click to view some of my pictures Music Computers Writing and directing crazy movies with my Video and some actors recruited from my friends Current Time If you were using browser you would see an animated clock here Clock courtesy of Bill Giel You are visitor number This page is better if viewed with Browser	student	cornell
45	 Server Date Wednesday GMT Monday GMT Homepage of Nicholas Howe Nicholas Howe Click on photo for image Graduate Student Department of Computer Science Cornell University Ithaca NY email nihowe office Upson Hall phone Resume references Personal Info	student	cornell
46	 Server Date Wednesday GMT Tuesday GMT Fred Hsu the Software Engineer Fred Hsu The Software Engineer in current version only feet are shown my RESUME Some of my projects others will appear soon Distributed HTTP Server SCRAMO Animation Model postscript VPLA Visual Programming Language for Animation Links to current affiliations HP Massachusetts Language Lab HP Computer Languages Hewlett Packard Links to previous affiliations Cornell Computer Science Cornell Theory Center Visualization Group Cornell University Binghamton University Lawrence Berkeley Laboratory Interests and Hobbies this section will be developed soon maybe next year Photography Cello Guitar Aquarium Cornell Computer Science Cornell Theory Center home Burling MA work Chelmsford MA fax email fredhsu snail Apollo Drive MS Chelmsford MA http	student	cornell
47	 Server Date Wednesday GMT Saturday GMT Takako Hickey Homepage Takako Hickey Email takako Office Upson Hall Phone Fax am student in the Department of Computer Science at Cornell University am by Robbert van Renesse and Fred Schneider Research Interests Distributed Systems Programming Environment Resource Management The Horus Project Previous Life Other Interests Social Psychology Backcountry Hockey Quotes Last Modified Wed Nov	student	cornell
48	 Server Date Wednesday GMT Thursday GMT Ashvin Dsouza Ashvin Dsouza dsouza graduate student working with Bard Bloom The focus of my thesis research is the development of tools to support process algebraic methods for the specification and verification of concurrent systems By designing these tools with respect to metatheory of process algebras they become immediately available to wide class of process algebras This alleviates the problem of duplicated effort inherent in custom tools For example have designed and prototyped model checker for simple GSOS process algebras The semantics of the process algebra forms part of the input making this tool applicable to many commonly used process algebras including CCS CSP and basic LOTOS In addition am investigating the expressive power of process algebras in order to better understand and compare them Finally am exploring applications of these techniques Here some work on generating BDDs for process algebra terms in full postscipt and lite postscript versions also written up some expressiveness results for CCS postscript have presented the former at Computer Aided Verification LNCS and the latter at Foundations of Software Technology and Theoretical Computer Science LNCS This June will be presenting work on verifying SOS specifications at COMPASS	student	cornell
49	 Server Date Wednesday GMT Tuesday GMT Lin Hsian Wang This Page Is Under Major Construction Lin Hsian Wang am Master of Eng student in Computer Science at Cornell University have BS degree in Computer and Information Science at The University was born in Fangliao small village on the southern coast of Taiwan in Still constructing	student	cornell
50	 Server Date Wednesday GMT Thursday GMT Asif Uddin Ghias Asif Uddin Ghias Welcome to my WWW Home Page Me Warning Under Construction am PhD student in Computer Science and my areas of interest are Distributed Systems and Multimedia Systems did my Bachelor degree in Computer Systems Engineering from University of Engineering and Technology in Karachi Pakistan Since then which was in had been working in AT Global Information Solutions as Systems Engineer At present am on study leave for my master program here at Cornell My job responsibilities with AT included Programming Unix System Administration Support Education Network Management and Installation So far worked on number of interesting projects here at Cornell plan to put them up online some good day hopefully before year Publications The following interest me too Music Cricket Astronomy Asif Uddin Ghias ghias	student	cornell
51	 Server Date Wednesday GMT Monday GMT Jonathan Swartz Home Page Jonathan Swartz swartz student in the Department of Computer Science at Cornell University spend lot of my time here developing Rivl language for multimedia processing Here is my address phone number etc little humor to brighten your day Jon movie connection Cool web sites Last Modified Mon Jan EST Jonathan Swartz swartz	student	cornell
52	 Server Date Wednesday GMT Monday GMT Tsuneshi Hashimoto Tsuneshi Hashimoto This is home page of Tsuneshi Hashimoto Now constructing Tsuneshi Hashimoto hashi	student	cornell
53	 Server Date Wednesday GMT Thursday GMT Ioi Lam Homeless Page Ioi Lam Home Page Ioi Lam ioi am currently research assistant to Brian Smith at the Computer Science Department of Cornell University Interests Parallel Programming Using Software in the System Lab Instructions about setting your environment to use the system lab software Knowledge Base Engineering Manual PDF Guidelines for writing good extensions in code It does cover much of writing Tcl scripts but it has section about writing test suites that is valuable to both and Tcl programmers You can get the PostScript Version and complete Engineering Manual package that includes template source files CVS Documentation short introduction to using CVS in the system lab short description of CVS PS CVS User Manual PS Using CVS on remote machines PS CVS FAQ Index of CVS Information CVS Tutorial What am doing right now Week of Sep Putting together the knowledgebase CVS repository for DP has been set up see Trying to package up SPAM and do site test on it in the home directory Getting started with VRC virtual reality conferencing More details to come Working on prototype of mpeg video file server based on the HTTP protocol More details to come Spring CS homework solutions	student	cornell
54	 Server Date Wednesday GMT Monday GMT Yaron Minsky Home Page Yaron Minsky Graduate Student yminsky Department of Computer Science Upson Hall Ithaca NY Cornell University Phone Fax Comstock Place Apt Syracuse NY am CS graduate student and currently focusing on distributed computing In particular am working on the Tacoma project which is an attempt to build operating system support for computing Flapdragon is no longer new it been over year now and no longer live there but it still great veggie coop which crash at often nowadays Here the slightly outof date webpage It does however have timely notice that Flapdragon has an opening for starting If you need place to live highly recommend it big Go fan though do get to play much Go is an ancient Chinese game with extremly simple rules but very complicated and satisfying strategy If you like to learn more here great intro page Also if you want to play Go on the internet yes know it not as good as game with real live person in front of you but it better than nothing and you on Unix machine take look at cgoban It the nicest go board program seen And it makes it trivially easy to play on the net am newly married and my new wife Lisa and are living in Syracuse where she is going to medical school at the SUNY Health Science Center uniquely qualified as the only medical school within an hour and twenty minutes of Cornell and loving every bit of it Some favorite poems La Figlia Che Piange The Idea of Order at Key West Advice for Good Love Resume Some interesting links The Movie Critic was very impressed by this It good example how fairly simple AI technology can be used to great effect This site has an AI engine that takes in your ratings of movies and by comparing that to the ratings of others comes up with recommendations found it almost alarmingly good in contrast to Firefly which tries to do the same thing but fails miserably Yahoo Yellow Pages You put in your home address and they give you directions to the seven closest bakeries It not perfect but it better than the other web yellow pages tried bigbook and bigyellow do know why they do advertise it more The New York Times do know why the do it but it great read and it free Plus it saves all that paper note if it takes you too much time to download try the page Slate Magazine As much as hate to admit it Microsoft does something right every now and then Thoughtful and well executed But what do you expect with Michael Kinsley running it Red Hat Linux great company which makes Linux easy to install and maintain Ithaca movie listings books very solid discount virtual bookstore Let hope they run the local booksellers out of town My brother The following is my PGP public key PGP PUBLIC KEY BLOCK Version Comment Processed by Mailcrypt an interface PGP PUBLIC KEY BLOCK	student	cornell
55	 Server Date Wednesday GMT Tuesday GMT Wei Chen home page Wei Chen Upson Hall Department of Computer Science Cornell University Ithaca NY weichen am currently third year student at Department of Computer Science Cornell University received my Bachelor and Master Degree in Department of Computer Science Tsinghua University Beijing China My interest academically is in distributed systems fault tolerance and algorithms am now working with Professor Sam Toueg on failure detection and group membership in partitionable network systems My interests in my spare time if do have any spare time are Soccer NBA NFL and more My Resume My Bookmarks Last updated August	student	cornell
56	 Server Date Wednesday GMT Thursday GMT Eric Shim Home Page Welcome to Eric Home Page Eric Shim Master of Engineering Computer Science Cornell University The view of Cornell University Address Dryden Rd City Ithaca NY Phone shim For Korean version of my home page click on this have received my BS of Computer Science degree at University of California Irvine studied Information and Computer Science My MENG Project Viewing System Camera Transformation My MENG Project Abstract This is my final project for computer graphics class love to play following musical instruments Acoustic Guitar Piano Keyboard listen to the musics by Antonio Carlos Jobim John Coltrane Miles Davis Earl Klugh Pat Metheny Acoustic Archemy Chopin watch the movies and the musicals Cinema Paradiso French Kiss Les Miserable Miss Saigon Here are my favorite WWW pages Korea NEWS Wants to know about Korean Graduate Student Association at Cornell Does anybody like JAZZ Check JAZZ out Interested in JAVA My cyberspace friends in HANA will be working in MELCO When was the last time you went to the Movies My friends in the world Ra He is my middle school friend back in Victor Ha Jiyang Kang Homepage Kwan you can get it here This page has been accessed times since May This is still under construction My resume will be available in near future Also This web page will have the Korean version of it soon	student	cornell
57	 Server Date Wednesday GMT Tuesday GMT Aswin van den Berg Aswin van den Berg Graduate Student aswin Office Upson Hall phone Home Skyacre Drive Ithaca NY phone am interested in Programming languages Program Transformation The FUN transformation system My personal life Family Album Anneke WWW Page Swing Dancing The Swing Dance Server The Jean Aswin Swing Dance Page DeeJayer Guide for ISDN Record Hops My Personal Swing Pictures De Nederlandse Club van Cornell or The Cornell Dutch Club am graduate student at Cornell	student	cornell
58	 Server Date Wednesday GMT Monday GMT Home Page of Paul Sukhpal Sanghera Paul Sukhpal Sanghera PhD Physics Carleton University Presently Student Computer Science Cornell University Ithaca NY sukhpal Background Project My Philosophy of Life Resume Other Routes The Clock is Ticking You will need Java capable browser to view the animation	student	cornell
59	 Server Date Wednesday GMT Monday GMT Welcome Avinash Gupta Department of Computer Science Cornell University Ithaca NY Home Address Magazine Street Cambridge MA avinash Resume My main areas of interest lie in Computer Graphics Multimedia and Distributed systems Courses Operating Systems Multimedia Software Engineering Distributed Systems High Performance Systems Projects HOCA An Operating system for CHIP HOCA pronounced hodja is operating system for CHIP Cornell Hypothetical Instructional Processor which supports features like Multiple users Multitasking and Virtual Memory Scene Transition Effects for Rivl Presentation Pente networked game of skill Pente meaning five is board game of skill requiring players The objective of the game is to get five points or get five of your own pieces in row horizontally vertically or diagonally Points can be earned by trapping the opponents pieces between your pieces Only an even number of pieces can be trapped either or For each pair of pieces trapped you get point The player reaching five points first wins Requirements Tcl Tk Screenshot of the game Download the game NOW IPng with user space implementation of the next generation IP Implement IPng the next generation Internet Protocol using an interface that makes it able to run over user space network interfaces like or Proposal Progress Report Same caveat applies to my home page as to almost every other page on the Web this is still under construction Browsing the Internet Hytelnet The WWW Library Subject Catalog EINet Galaxy Planet Earth Home Page Joel Hierarchical Subject Index Yahoo Guide to WWW Webcrawler Lycos My Friends Links Sign my Guestbook This page has been accessed times since	student	cornell
60	 Server Date Wednesday GMT Monday GMT Hu Hu chinglan Master of Engineering Student Computer Science Department beau Pairs Address Seneca Rm Ithaca NY Telephone This page is still under construction Java Example Graphics Project	student	cornell
61	 Server Date Wednesday GMT Sunday GMT Ashish Jhaveri Ashish Jhaveri Department of Computer Science Master of Engineering Resume HTML Post Script Coursework Advanced Database Systems Multimedia Systems Engineering Computer Networks Programming Engineering Ashish Jhaveri	student	cornell
62	 Server Date Wednesday GMT Friday GMT Jia Wang Home Page Hi we are twin sisters Jia Wang PhD Student Department of Computer Science Cornell University Upson Hall Ithaca NY Office Phone Home Email jiawang PhD student graduated from Department of Computer Science of State University of New York at Binghamton with degree in computer science Before transferred to SUNY Binghamton was student of Department of Mathematics of Nankai University Tianjin China Honor and award Barry Goldwater Scholar of Mathematics Science and Engineering National Science Foundation NSF Graduate Research Fellowship My Family and me My twin sister Here are some cool links About Hongkong About Taiwan Beijing Review China China and Chinese Related Web Sites China Daily CBnet China Internet Forum ChinaNet China Stamps China Times China Window Chinese Calendar Chinese Internet Directory Chinese Magazines Chinese Media Information Chinese Music Chinese News Digest Chinese Wed Homepage CND Services Education in Taiwan History Culture of China Hongkong LaserDiscCenter Internet Distributed Chinese Magazines Multilingual Software Digest Net Taiwan Movieplex Scenery Pictures of China The Art of china Tour Entertainment in hina Min Sheng Tian Di WWW Page More in the Future Some Interesting WWW Sites America Best Graduate Schools News Ranking News Graduate Liberal Arts Rankings Computer Science ACM Film Music IEEE Computer Society Money National Science Foundation Petersons Guide Postcard Service Rank PhD Programs in Computer Science The Senior Homepage Virtual Tourist World Map Yahoo Cornell Chinese Christian Fellowship Mandarin CSSA at Cornell University Weather Other Universities Binghamton University Cornell University SUNY Stony Brook UCLA Universities in China	student	cornell
63	 Server Date Wednesday GMT Sunday GMT Amit Singhal Home Page Amit Singhal Department of Computer Science Cornell University singhal Phone Fax My research interests are in the area of information retrieval and text processing My thesis advisor was late Gerard Salton My current thesis supervisors are Chris Buckley and Claire Cardie Here is postscript copy of my resume The Smart group at Cornell CS department has been one of the foremost research groups in the field of information retrieval for last thirty years Our current research involves Document Length Normalization in Information Retrieval To fairly retrieve texts of varying sizes document length normalization is commonly used in term weighting We show that effective systems should retrieve documents of all sizes with chances similar to their likelihood of relevance We propose pivoting new technique that can be used to modify existing normalization functions to yield substantial improvements in retrieval effectiveness We also propose new and effective normalization papers Our TREC Participation Text REtrieval Conference TREC is NIST and ARPA effort to objectively evaluate various information retrieval techniques on an independent testbed The Smart system has consistently been one of the best systems at papers Automatic Text Structuring and Summarization Non expository texts are not usually read from cover to cover Readers are helped in such circumstances by providing selective access to text excerpts as needed We have developed techniques to analyze the structure of text and provide tools for selective text papers Papers Normalization papers Pivoted Document Length Normalization Amit Singhal Chris Buckley Mandar Mitra Gerard Salton Document Length Normalization Amit Singhal Gerard Salton Mandar Mitra and Chris Buckley Length Normalization in Degraded Text Collections Amit Singhal Gerard Salton and Chris Buckley TREC papers Coming soon New Retrieval Approaches Using SMART TREC Chris Buckley Amit Singhal Mandar Mitra Gerard Salton Automatic Query Expansion Using SMART TREC Chris Buckley Gerard Salton James Allan and Amit Singhal In Proceedings of the Third Text Retrieval Conference NIST Special Publication Text structuring papers Automatic Text Decomposition Using Text Segments and Text Themes Gerard Salton Amit Singhal Chris Buckley and Mandar Mitra Hypertext to appear Automatic Text Decomposition and Structuring Gerard Salton James Allan and Amit Singhal Information Processing and Management to appear Automatic Text Browsing Using Vector Space Model Amit Singhal and Gerard Salton In Proceedings of the Technologies and Applications Conference May Selective Text Traversal Gerard Salton and Amit Singhal Automatic Text Theme Generation and the Analysis of Text Structure Gerard Salton and Amit Singhal Automatic Analysis Theme Generation and Summarization of Machine Readable Texts Gerard Salton James Allan Chris Buckley and Amit Singhal Science June Smart Group Members of the Smart group are Chris Buckley senior research associate Amit Singhal student Mandar Mitra student David Fielding Masters of Engineering student and others as the group slowly fluctuates Thanks for visiting my home page You are visitor since that when installed this counter	student	cornell
64	 Server Date Wednesday GMT Thursday GMT Funda page Funda mail ergun Hi there Welcome to my home page My name is Funda Ergun am student in the Computer Science Dept here in Cornell am working on program checking with Ronitt Rubinfeld Here is my research page am also doing minor on painting in the department of fine arts originally come from Izmir Turkey did my undergrad in Bilkent University in Ankara Turkey have some non research related stuff here but you should be warned that you might encounter pages written in Turkish or angry dogs if you go there Go at your own risk You are the th person to visit this page since Feb This page is always under heavy construction	student	cornell
65	 Server Date Wednesday GMT Sunday GMT Yu Lucy Wu Home Page Lucy Wu Welcome am student at the Computer Science Department of Cornell University Ithaca NY My interested computer topics are networks distributed systems programming language internet applications etc Hobbies badminton swimming travel photograph reading and music Resume Whiz Stock Search and Analysis Tools Degree Project Spring Classes Practical Distributed Computing Practicum in Distributed Systems Database Systems Database Management Fall Classes Operating System Software Engineering Multimedia Systems Contact yuwu My Favorite Web Sites Hot software stuff Java The Sun Spring Systems CORBA OMG Home Page Silvano Home Page GUI CGI HTML and WWW VRML Object Oriented Language Database Language Operating Systems Network Network Management Bay Network Products Server and Security PC Lube and Tune Internet IPng Computer Company Netscape Business Web SAP SCO Sapient Sun Microsoft Novell China Web Sites Chinese Stuff Misc JOBTRACK IRS CNN News The Artvark Gallery MTV Internet Underground Music Archive Personal Connections Cornell Library Catalog Travelers Mail Sunlab Caltech CCO	student	cornell
66	 Server Date Wednesday GMT Friday GMT Marcos Kawazoe Aguilera Home Page Marcos Kawazoe Aguilera Marcos Kawazoe Aguilera Department of Computer Science Cornell University Ithaca NY aguilera About Me am second year PhD student at Cornell University Distributed Systems and Algorithms Randomization and Failure Detection Hybrid Approach to Solve Consensus Going on tour to Brazil Check this page for some suggestions Warning Permanently Under Construction Marcos Kawazoe Aguilera aguilera	student	cornell
67	 Server Date Wednesday GMT Thursday GMT Justin Miller Home Page Justin Miller Page That me in my Navy uniform Currently am Master of Engineering student in Computer Science at the College of Engineering Cornell University This semester am teaching assistant for COMS Machine Vision During the day and many many long nights can be found in the Robotics and Vision Lab CSRVL where am research assistant working for Ramin Zabih My primary research interest is Machine Vision particularly image processing General Information Some of My Rantings Project Info	student	cornell
68	 Server Date Wednesday GMT Wednesday GMT Jonathan Barber in the Flesh Pooooooooooooooch That me Jonathan Barber Upson Hall About Me What doing Now Course and Research Interests My Future Some Cool Dudes About Me This page has been up for while now so felt inclined to change the first sentence My birth name is Jonathan Barber but people usually just call me Jon not People also call me Ponch or Pooch People used to call me Lake Fork Guppie Skin Mama Phin and the list goes on and on am finishing up my degree as graduate student in the Masters of Engineering Program in Computer Science at Cornell University was also an undergrad at Cornell where got BA in Computer Science as well grew up in couple of towns in New Jersey and attended Montgomery High School currently living in Collegetown which is adjacent to the Cornell Campus in cheap summer sublet on College Ave which is since can work and play in the same radius While student at Cornell went Greek and spent lot of time at Tau Epsilon Phi fraternity on the borders of Cayuga Heights Its kind of hard to believe that those days are over but on the other hand its about time What doing Now have finished my Masters of Engineering Project with Thorsten von Eicken where we developed the Packet Filter The filter works with which is network protocol that can bring parallel computing home to personal computers also taught the summer session of Fundamental Programming Concepts an introductory course to computers and programming This past year was teaching assistant for An Introduction to Digital Systems and Computer Organization during and Course and Research Interests This past semester worked lot on RivL Resolution Independent Video Language which is one of the products from the Multimedia Research group at Cornell The final product of my labor is two project reports Two Parallel Implementations of Continuous Media RivL An of an Object Tracker in RivL have also taken an interest in high performance compilers My good friend Sugata Mukhopadhyay and are still finishing up class project in which we implemented SMPD code generator for Fortran based on linear algebra framework paper coming soon In the previous semester my other good friend Greg Weber and developed WeBar Encryption smart encryption protocol for video streams MPEG Unfortunately do have the paper in electronic form so you have to trust me on this The Future Looks Bright and Wet At the end of this summer packing up my gear and taking permanent to Oregon hopefully with some buddies If any of you are from Oregon and have some information you like to share good or bad please write me Once there be working for Intel Corp so go ahead and buy PC live picture taken from my future home in Portland Clarification Actually its not the location of my as some people have thought would indeed be pretty resourcefull if set up camera against my living room window and piped it out to this page No by mean the general location of where living not the house My Favorite People who are My George Bush has really nice page and in it he keeps listing of his favorite people If you can be found on this page you are indeed one of the lucky was also considering keeping list of my people you know who your are but have decided otherwise Ok here goes George Bush or as like to call him Captain Swirl He nefarious with toilet Sugata Mukhopadyay Boney Magoo Fletop Bigro Dave Koster the bot of all bots Ponch official TFFL Bullie Home Page uuencoded Graphics needed for Bullie Page tar and zipped Graphics needed for Bullie Page If you browsing and feeling the urge to write send me some mail Downloads graphics	student	cornell
69	 Server Date Wednesday GMT Tuesday GMT Lin Lin Resume Java with me Current Address Maple Avenue Ithaca NY Tel email jhlin Permanent Address RD Taipei Taiwan	student	cornell
70	 Server Date Wednesday GMT Wednesday GMT Kristen Summers Kristen Summers PhD Student Cornell University summers Upson Hall Research Interests work with the Information Capture and Access research group on document analysis My goal is to provide support for sophisticated electronic document manipulation tools for indexing browsing linking etc My primary interest is in discovering logical structure in arbitrary electronic documents The goal is to take an electronic document representation as input and return hierarchy of logical pieces of the document as output For example given or postscript version of technical report would like to be able to divide it into sections paragraphs etc Similarly in business letter the address headings body and closing should be identifiable This problem has two primary components segmentation dividing the document into logical pieces and classification categorizing the pieces It also raises the questions of evaluation previous work differs in descriptions of the correct hierarchy types of logical structures and theoretical limitations The task is relevant to two of Bruce top research issues for information retrieval in the November issue of Magazine number interfaces and browsing and number efficient flexible indexing and retrieval Determining logical structure enables flexible hierarchical browsing doing so in general way supports system flexibility and handling of multiple document types Papers Using Cues for Electronic Document Browsing with Daniela Rus In Digital Libraries Current Issues Nabil Adam Bharat Bhargava and Yelena Yesha editors Chapter pp Lecture Notes in Computer Science series Versions in Geometric Algorithms and Experiments for Automated Document Structuring Mathematical and Computer Modelling forthcoming Using White Space for Automated Document Structuring Cornell University Computer Science Technical Report TR Proceedings of the Workshop on the Principles of Document Processing Seeheim PODP Toward Taxonomy of Logical Document Structures Electronic Publishing and the Information Superhighway Proceedings of the Dartmouth Institute for Advanced Graduate Studies pp Boston May Donald Johnson Memorial DAGS Scholar award for the best student paper Document Structure Classification Proceedings of the International Conference on Document Analysis and Recognition pp August	student	cornell
71	 Server Date Wednesday GMT Friday GMT Paul Stodghill Home Page Paul Stodghill stodghil Rhodes Hall Affiliations Department of Computer at Cornell University The Advanced Computing Research Institute ACRI in the Cornell Theory Center The Bernoulli Project Interests Ultimate Hockey Scheme	student	cornell
72	 Server Date Wednesday GMT Thursday GMT JanWun Lee Lee JanWun janwun Master of Engineering Student Computer Science Department Address Maple Avenue Apt Ithaca NY Telephone	student	cornell
73	 Server Date Wednesday GMT Thursday GMT Alfred Home Page Alfred Hong dizzy Office Upson Hall Cornell University Ithaca NY USA Office Phone Worthwhile web sites to check out CNN News SinaNet Taiwan News in Chinese Chinese OS not required NandoNet SunWorld JavaWorld Course stuff CORBA The Essentials An Annotated Bibliography Project Report Alfred Hong ahong	student	cornell
74	 Server Date Wednesday GMT Thursday GMT Ralph Benzinger Ralph Benzinger Wer sich auf seinen Lorbeeren ausruht sie an der falschen Stelle The story so far Exchange student from the University of Karlsruhe Germany German in Computer Science in August Fellow of the Studienstiftung des deutschen Volkes Fulbright fellow Member of the Siemens Internationaler Studentenkreis CTY alumnus At Cornell Graduate student at the Department of Computer Science Courses taken Advanced Programming Languages Design and Analysis of Algorithms Reasoning about Knowledge Contact information ralph Office Upson Hall Phone More	student	cornell
75	 Server Date Wednesday GMT Thursday GMT Diyu Yan home page Diyu Yan Daisy Welcome to my home Spring Courses Practical Distributed Computing Database Systems Compilers and Translators Practicum in Compilers and Translators Fall Courses Operating System Software Engineering Advanced Database Systems ELE Computer Networks and Telecommunications Project Original Virtual Reality RailRoad Project Since you are here maybe you like to know little about me doubt it Anyway currently Master of Engineering student in the Department of Computer Science at Cornell University Cornell is located at Ithaca central New York gorgeous place to live except in winter Last year received my in Applied Physics from New Jersey Institute of Technology Newark New Jersey was brought up in the beautiful campus of Tsinghua Unviersity Beijing China also received my in Engineering Physics from there want to say hi to all my friends in China miss you Useful Links Java HTML CGI Favorite Sites Time CNN London Times Washington Post Chinese Digest China News Digest Feng Hua Yuan Xin Yu Si Art of China Local Connections CTC Sunlab Weather Movies Miller Ithaca NY diyu UNDER CONSTRUCTION	student	cornell
76	 Server Date Wednesday GMT Saturday GMT Cornell University TU Karlsruhe Graduate Student Cornell University Dept of Computer Science Upson Hall Ithaca NY USA Tel Lab ext Fax Email karl My current research interests are micro robotics manipulation and assembly At the Cornell Nanofabrication Facility am building microfabricated actuator arrays that implement micro manipulation strategies More generally am interested in new devices for handling and assembling parts and manipulation strategies with programmable force vector fields have also investigated design automation for micro structures Earlier work at the University of Karlsruhe Germany has included the development of better graph layout algorithms My thesis advisor is Professor Bruce Donald who is one of the founders and directors of the Cornell Computer Science Robotics and Vision Laboratory My project is in close collaboration with Professor Noel MacDonald and his research group Publications and Other Documents Conference Announcement and Call for Papers Animations and Videos Micro Sculptures The Invisible Cantilever microfabricated model of Frank Lloyd Wright Fallingwater See the articles in the New York Times Magazine March and Wired October If am not in my office or the Nano Lab may be working out in our Tae Kwon Do club or you may find me at the Lindseth climbing wall Navigate through my pages previous page higher level deeper level next page karl	student	cornell
77	 Server Date Wednesday GMT Friday GMT Deyu Home Page Deyu Hu Graduate Student hu Cornell University Dept of Computer Science Upson Hall Ithaca NY Tel Fax student in Computer Science at Cornell was born in Shanghai China received my undergraduate degree from CS at UC Berkeley My faculty advisor is Thorsten von Eicken More to come Last Modified Wed Sep EDT Deyu Hu hu	student	cornell
78	 Server Date Wednesday GMT Monday GMT weitsang homepage where am from what tv watch what movie like web pages wrote pictures draw motif computing theory home page of vim searching the web coolest web sites shareware archive newspapers online universities site	student	cornell
79	 Server Date Sunday GMT Thursday GMT if publish it it is true some of my writings not had much published but have written some things proud of some of them have been flames of mine and others have been more thought out as conscientious objector to all armed conflict my first published letter was published in the grand rapids press few years back during the gulf war since that time however started keeping more of my work online lest you wonder also do write poetry and other things but probably rather be famous as an essayist anyhow like to argue so here some of my writings there dreadful mess going on in byron center which is suburb miles from where went to high school so wrote letter the unabomber suspect was mathematician so all mathematicians are suspected terrorists do think so so wrote letter to the editor of my newspaper my most widely read letter	student	cornell
80	 Server Date Wednesday GMT Monday GMT Chen Home Page Chen Welcome to my home page Current Address Maple Apt Ithaca NY Tel icchen Permanent Address No Rd Taipei Taiwan Class of Spring CS Computer Graphics CS Practical Distributed System CS Practical Distributed System Practicum NBA Database Management Album My Resume NEWS China Times NCTU This page is under construction Last modified	student	cornell
81	 Server Date Wednesday GMT Friday GMT Chang Home Page Chang chichao student in the Department of Computer Science at Cornell University My faculty advisor is Thorsten von Eicken This summer will be at NT Networking group Click here to get my addresses and phone numbers Research Interests am interested in the interaction between compilers runtime and operating systems towards efficient concurrent programming over heterogeneous networks ThAM Compositional with Active Messages Communication on the IBM Risc SP MultiMATLAB MATLAB on Multiple Processors Design and Performance of Active Messages on the IBM Soccer Anyone The Sports Server Latest Soccer News Brazilian Soccer Web Page in portuguese World Soccer Results and Homepages Oliver Soccer on TV Guide Other Cool Stuff LUBRASA Cornell Student Association Chess Center Jornal do Brasil My Car StockMaster Jayhawk Basketball WWW Tennis Server Back to Cornell Computer Science Homepage Last Modified Mon Mar EST Chang chichao	student	cornell
82	 Server Date Wednesday GMT Thursday GMT Adam Florence Adam Florence Upson Hall Cornell University Ithaca NY aflorenc am student in computer science at Cornell University My professional interests include simulation and numerical analysis Follow these links for find out more about me Academics Research Work Interests Athletic Other Last updated Sept me with comments or corrections	student	cornell
83	 Server Date Wednesday GMT Saturday GMT Linda Wu Home Page at Cornell University Linda Wu lxwu am Master of Engineering student in Computer Science Department at Cornell Univsersity received my in EE from University of Massachusetts at Lowell in Since then worked at Digital Equipment and Banyan System My main research interests are networking and mulitimedia Click here for Resume Projects Native ATM protocol stack on Windows NT Using Multicast Group for Layered Video Electronics Commerce Kramer Mart Courses Fall and Operating System Engineering Computer Networks Multimedia Photoes Useful links	student	cornell
84	 Server Date Wednesday GMT Tuesday GMT Laura Sabel Laura Sabel sabel Professional Information did my doctoral research with Professor Keith Marzullo of the University of California at San Diego on failure detection in asynchronous distributed systems For more research on failure detectors see Tushar Failure Detection Page finally finished my thesis Approximating Perfect Failure Detectors in Asynchronous Distributed Systems Publications Election Vs Consensus in Asynchronous Systems by Laura Sabel and Keith Marzullo Cornell University Computer Science Technical Report February Submitted to Information Processing Letters For postscript copy of the TR click here Approximating Perfect Failure Detectors in Asynchronous Distributed Systems by Laura Sabel and Keith Marzullo Versions appear in Proceedings of the Annual Symposium on Principles of Distributed Computing August Proceedings of the Symposium on Reliable Distributed Systems October Cornell University Computer Science Technical Report March revised June For postscript copy of the TR click here Using Consistent Subcuts for Detecting Stable Properties by Keith Marzullo and Laura Sabel Versions appear in Distributed Computing International Workshop on Distributed Algorithms October Proceedings published in Lecture Notes in Computer Science Series Vol Cornell University Computer Science Technical Report For postscript copy of the TR click here Expanding Your Horizons Cows Some interesting pages The Strawberry Experiment AlpacaNet The Electronic Gourmet Guide The Bobbie Awards especially The Spam Page The Jelly Belly Jelly Beans Page win free sample by answering survey The Bingo Zone where you can play bingo for fun and cash prizes	student	cornell
85	 Server Date Wednesday GMT Monday GMT Katherine Guo Home Page Katherine Guo kguo Cornell University Dept of Computer Science Upson Hall Ithaca NY Tel Tel Fax am student in Computer Science at Cornell working in distributed systems My interest is in scalable reliable multicast protocols am working on the Horus Project under the direction of Ken Birman Robbert Van Renesse and Werner Vogels Recent Publications Katherine Guo Werner Vogels and Robbert van Renesse Structured Virtual Synchrony Exploring the Bounds of Virtually Synchronous Group Communication To appear in the proceedings of the ACM SIGOPS European Workshop Connemara Ireland September Luis Rodrigues Katherine Guo and Antonio Sargento Robbert van Renesse Brad Glade Paulo Verisimo Ken Birman Transparent Group Service To appear in the proceedings of the IEEE Symposium on Reliable Distributed Systems Canada October Also available as Technical Report Department of Computer Science Cornell University Robbert van Renesse Kenneth Birman Brad Glade Katherine Guo Mark Hayden Takako Hickey Dalia Malki Alex Vaysburd and Werner Vogels Horus Flexible Group Communications System Department of Computer Science Cornell University March Research Related Info Distributed Systems Computer Networks Cool Tools Bibliography Conferences Journals Academia and Industry Info Company Info School Info Job Search Interesting Places Ithaca NY Austin TX Lisboa PT Colorado Other Info Art Books Cards Cooking Fashion Friends Insurance Library Magazines Mailing Map Music News Sports Stock Weather Hunting WWW Info Research Related Info Distributed System Pointers commercial product Spring Totem Transis at Arizona at Sun Microsystems Lab Computer Networks Multicast Protocols NS from LBL GUN Cool Tools WWW WWW Consortium Lectures about www General Info and about the project Lectures about HTML Simple HTML Guide to HTML HTML Quick Reference HTML Documentation Table of Contents Info about CGI The Common Gateway Interface About HTTPd NCSA HTTPd Overview How to find images to use in html file an image finder Where to get mosaic Source binary and documentation by FTP XMosaic in Others in doc src Java and HotJava Bibliography Bibliography in Distributed Systems oldindex index others Conferences Pointers SOSP ICDCS JSAC Journals IEEE ACM Elsevier Science Academia and Industry Info Company Info Motorola AMD and its job openings ibm dell tandem ti apple bell atlantic School Info of Texas at Austin CS dept of UCSD Grad School Advice Grad Job Search Database of US Database at UK Interesting Places Ithaca NY Life at Cornell Ithaca Weather Movies Bailey Hall Concerts Library Austin TX HighTech in Austin The Institute Lisboa PT INESC Colorado Copper Mountain Ski Resort Summit County Colorado Other Info Art Le WebLouvre The World Women Books books Calvin Hobbes Archive Cards Magic China Art of China Cooking Electronic Gourmet Le Cordon Bleu Cooking School Italy dessert Fashion all links CJLutz Fashion WWWeb Page with Hearts TM Express First View fashion Women Wire IRC FAQ Fashion Net Hair Net Crew Diesel Jeans Guess Friends Alan Cheng David Deng Shijie Insurance CAL Plan email cal Library Library of Congress Magazines InterText Wired TIME George Gilder Discovery Mailing Electronic Postcards Map UT Maps Music BMG Internet Underground Music Archive SinaNet News World News Briefs Sports US Open Olympic Stock Wall Street Headlines Wall Street Journal on the Web MIT source Weather Hunting WWW Info The Lycos Home Page Hunting WWW Information Global Network Navigator Home Page Global Network Navigator Scout Report WWW Wanderers and Spiders The Web Edge Yahoo Reference Netscape Home Page Last Modified Wed Jun EDT Katherine kguo	student	cornell
86	 Server Date Wednesday GMT Thursday GMT Nikolay Mateev Nikolay Mateev Graduate Student mateev Upson Hall Department of Computer Science Cornell University Ithaca NY Last updated July	student	cornell
87	 Server Date Wednesday GMT Tuesday GMT Heji New and Improved Home Page	student	cornell
88	 Server Date Wednesday GMT Monday GMT Alex Grinzayd Homepage Alex Grinzayd Student Computer Science Cornell University tel email grinzayd This is myself during the first week at Cornell Here are some links NECX Direct Internet Shopping Network Computer Express Damark Warning This page is boring just learning HTML	student	cornell
89	 Server Date Wednesday GMT Tuesday GMT My autobiography What Up Keep on lookin There will be lots more information on this ultra cool home page very soon Keep on lookin These home pages do take very long to setuup How are you doing Ajay Manish Anuj Mom and Dad Department Of Computer Science Search the Net Entertainment Weekly Cricket Ratings Ashish Soni sonia	student	cornell
90	 Server Date Wednesday GMT Sunday GMT Erlingsson Page Erlingsson Specification Erlingsson student in Computer Science at Cornell University Apart from this enjoy being somewhat incongruous Icelander Below you can link to some more information on me and what all about Implementation Background Where coming from Current Activities What up to at the moment Schedule Where am at what times Research What real work got done Interests What actually like doing Acquaintances Those know Contact Info How to get in touch with me Please note These pages are often out of date In general assume that all disclaimers apply	student	cornell
91	 Server Date Wednesday GMT Wednesday GMT Yuichi Tsuchimoto Home Page Yuichi Tsuchimoto Home Page Course Work Fall Current Semester Systems Programming and Operating Systems Programming Languages and Software Engineering Spring Introduction to Compilers and Translators Practicum in Compilers and Translators Machine Vision Fall Foundations of Artificial Intelligence Practicum in Artificial Intelligence Introduction to Theory of Computing am currently looking for job in the United State Resume GIF format PostScript format Yuichi Tsuchimoto yuichi http Last modification November http	student	cornell
92	 Server Date Wednesday GMT Monday GMT Mark Hayden Mark Hayden hayden Office Upson Cornell University Ithaca NY This fall will be teaching Taste of Unix and My interests are The Horus distributed communication system The Ensemble distributed communication system The Nuprl proof development system Hockey Last updated November	student	cornell
93	 Server Date Wednesday GMT Kev Home page Kev Home Page Welcome That the CS picture of me to the left You are seeing page for frames challenged web viewers from Syosset New York one of those towns on Long Island and received my Bachelor of Science degree here in December After working for few months in California decided to come back here in the fall and am currently working on Master of Engineering degree Why did leave the land of sun to come back to Ithaca Maybe missed the seasons here rain wind snow ice Actually got more than enough rain while was in Santa Barbara Anyway plan to graduate in May currently working on my MEng project with Ramin Zabih at the Cornell Robotics and Vision Lab CSRVL If you are interested in the topic of motion video segmentation or just general video processing here is paper which relates to my research in the area Some Links Companies Green Hills Software Santa Barbara California Lockheed Martin Control Systems Binghamton New York Altera San Jose California Fun Stuff Games Domain vThe Babylon site Other places Most Universities in the World CareerMosaic Top Web Sites Go up to students page Say hi Email kmai Of course this page is still under construction Last Modified January There have been accesses to this page	student	cornell
94	 Server Date Wednesday GMT Wednesday GMT Vlad homely page Vladimir Kotlyar vladimir This is what looked like in Fall of when David Bau and me were teaching As you might have guessed am graduate student in the department of Computer Science at Cornell University work with Prof Keshav Pingali My research interests are Compilers for High Performance Architectures In particular am working on the parallelization of sparse matrix codes This work is part of the Bernoulli project Other members of my group are Paul Stodghill and Indu Kodukula Publications Here is what Henry Kissinger has once said about lawyers and professors My friends in the legal profession like to remind me of comment by British judge on the difference between lawyers and professors very simple said Lord Denning The function of lawyers is to find solution to every difficulty presented to them whereas the function of the professors is to find difficulty with every solution Today the number of difficulties seems to be outpacing the number of solutions either because my lawyer friends are not working hard enough or because there are too many professors in the government Support privacy on the net through strong encryption	student	cornell
95	 Server Date Wednesday GMT Wednesday GMT Jason Hickey Home Page am graduate student at Cornell in the Computer Science Department under the supervision of Robert Constable Here summary of my current status My interests include the theory and practice of programming languages There is great resource at CMU under The Fox Project Home Page especially Mark Leone resources for programming language research My own work in programming languages is mainly software verification One of the tools use for specification is type theory use the formal system Nuprl developed here at the Cornell University Department of Computer Science In my research make use of modules and abstract data types and relate them to Here are some recent papers Some papers have published at Cornell bibliography of some papers published at Bellcore also have some slides of talks have given in the Nuprl seminar The slides can be pretty technical but they give an overview of the work done at Cornell If you want to see more about me try sequence on identification Some interests have include The Fine Arts Here is gallery of mine There are lot of other resources for fine arts on the Web Try The Art Net Web or The FineArt Forum CUCS Hockey Backcountry Take look at The Backcountry Home Page perform few services for the department Software Czar Hockey and czar Go back to Hockey for more info Theatre czar Here is the schedule for the Cornell Center for the Theatre Arts	student	cornell
96	 Server Date Wednesday GMT Wednesday GMT Grzegorz Czajkowski Homepage Grzegorz Czajkowski Department of Computer Science Cornell University Ithaca NY office grzes student in the program in the Department of Computer Science at Cornell University in Ithaca New York completed my master degree in Computer Science in Krakow Poland am currently in involved in several projects and am also in charge of administering CUCS IBM My advisor is Thorsten Von Eicken few links related to my research architecture Active Messages Last modified November grzes	student	cornell
97	 Server Date Wednesday GMT Wednesday GMT Masafumi Suzuki There would be an applet here if your browser suppoted Java Masafumi Suzuki suzuki Classes Fall OR IE Case Studies OR IE Operations Research Optimization OR IE Engineering Probability and Statistics II OR IE Design and Analysis of Simulated Systems OR IE Project Spring OR IE Operations Research II Introduction to Stochastic Modeling OR IE Project Computer Graphics Computer Graphics Lab Summer Data Structures Fall Software Engineering Technology and Techniques Systems Programming and Operating Systems Multimedia Systems Project report ELE Computer Networks and Telecommunications NBA MIS POLICY Spring Introduction to Database Systems Thriving on the Information Revolution Sector Web site NBA DATABASE MANAGEMENT Independent polygon display using Java Prototype resume	student	cornell
98	 Server Date Wednesday GMT Monday GMT Welcome to my Home Page Kartik Kapadia Master Of Engineering Class of Department of Computer Science Cornell University Ithaca NY Home Address Dabney Drive Apt San Diego California Phone Home Work Fax kkapadia Currently am working as Software Engineer for Qualcomm Incorporated My main areas of interest are Computer Graphics Distributed Systems and Computer Networking Courses took in Spring Distributed Systems Computer Graphics Architectures of High Capacity Information Networks Courses took in Fall Operating Systems Multimedia Systems Software Engineering Projects HOCA An Operating system for CHIP HOCA pronounced hodja is operating system for CHIP Cornell Hypothetical Instructional Processor It supports features like Multitasking and Virtual Memory Hogman An enjoyable game for quick break at work Hogman is single player game for the Windows platform It is coded in interfaced with for the GUI Hogman is good source of entertainment while taking break at work Click here to see screenshot of the gameboard Click here to see screenshot of the help screen Click here to view postscript of the design document Scene transition effects for Rivl Rivl stands for Resolution Independent Video Language Rivl was developed at Cornell University by Jonathan Swartz and Brian Smith It is an excellent language for developing Multimedia applications My project was to enhance Rivl by incorporating primitives for implementing scene transition effects Click here to see presentation Simulation of Railroad System Master of Engineering project The visualization captures the scientific aspects of laying tracks vehicle modeling and the dynamics of motion The Graphics are coded using combination of Open Inventor and OpenGL and are interfaced with the Virtual Reality facility at Cornell Click here to view postscript of my Resume Some of my favorite Web Sites All your favorite stars Some cool mpeg clips Lots and lots of music Some cool graphics for your web page Last updated	student	cornell
99	 Server Date Wednesday GMT Sunday GMT Jeff Moore Jeff Moore Well currently am graduate student at Cornell am working on Masters of Engineering in Computer Science received my BS in Computer Science from Purdue University in West Lafayette Indiana went to high school at Hillsboro High School in Hillsboro Oregon suburb of Portland Employment My resume is here for anyone who is interested will be working at Intel in the Internet Products Division creating cool software Spring Classes Thriving on the Information Revolution in the Entertainment Sector Practical Distributed Systems Practicum in Distributed Systems and the CORNELLopoly game High Performance Computer Architecture and the Network Computer Optimal Parallel MPEG Encoding Research Fall Classes Software Engineering Formal Methods Multimedia Systems and the Research Paper Computer Science Colloquium Cool Software Tools Seminar and presented OLE OpenDoc and MFC Optimal Parallel MPEG Encoding Research Software Companies Microsoft Netscape Lotus Novell WordPerfect Corel Oracle Apple IBM Hardware Companies Intel Silicon Graphics IBM Sun Apple Magazines PC Magazine PC Week PC Computing Computer Shopper Windows Sources Computer Life MacUser MacWeek Interactive Week Family PC Computer Gaming World Electronic Newspapers USA Today Wall Street Journal New York Times Philadelphia Online The Daily News Worldwide The Dallas Morning News Opinions The Detroit Free Press Gopher The Knoxville The Leader OnLine News Service The Nugget Newspaper for Sisters Oregon RWorld From The Orange County Register The San Francisco Chronicle Examiner San Jose Mercury The Seattle Times USA Today Boston Globe Portland Press Herald Maine Sunday Telegram Visitors since January Campus Address Maple Ave Apt Ithaca New York Last Updated April jmm	student	cornell
100	 Server Date Wednesday GMT Saturday GMT Yama Den Yama Den Hell According to Hindu mythology Yama is the God of Death He comes down to earth to give ride to those who are on their way to Heaven or Hell Though he kind of impartial its better not to mess with him Amith Yamasani Department of Computer Science Cornell University Ithaca New York make money at Sun Microsystems Garcia Avenue Mountain View CA MailStop Cupertino JavaSoft watch TV at Warburton Avenue Apt Santa Clara CA am currently employed with JavaSoft Sun Microsystems in Cupertino California working in the JavaMedia group Education Fall Courses VLSI Multimedia Software Engineering Spring Courses VLSI High Performance Computer Systems Computer Graphics Projects Ride to Heaven This is train ride simulation for the graphics final project The MPEG The description Parallel Ray Tracing in Proposal Virtual Reality RailRoad Simulation This is my Masters project It involves the simulation of railroad system including the trains the tracks the switches stations landscape and user interaction in CAVE environment with Stereo vision The simulation is done on processor SGI Onyx system The software is written in using the OpenInventor graphics library from Silicon Graphics The simulation includes landscape generation dynamics of the train and the environment and fly throughs Document Image Compression Chip Developed an Image Compression chip for the VLSI course The chip basically compresses any bit data stream using the LZW compression algorithm This algorithm is better suited for images The chip controls an external cache CAM content addressable memory where it stores patterns from the input stream in the hope that the patterns might occur again The chip is capable of compressing data at the rate of byte in nano seconds There no way software routine can compress data at that speed Snap of the chip Image and Video Transition FX for Rivl Proposal Presentation and samples PyraMania This is game developed for the Software Engineering course Its written in and uses Tcl for some of the interface and XLib for the rendering You can take look at snapshot of the game screen PyraMania Parallelomania Resume HTML Post Script Memories past present and future Some of my pals with home pages Satya Prasad Avinash Gupta Kartik Kapadia Hrishikesh Dixit Jose Luis Fernandez Vineet Ahuja Bookmarks	student	cornell
101	 Server Date Wednesday GMT Tuesday GMT Vijay Menon Vijay Menon Graduate Student vsm Office Address Home Address Rhodes Hall Maple Ave Cornell University Apt Ithaca NY Ithaca NY FAX Last updated August	student	cornell
102	 Server Date Wednesday GMT Monday GMT Kao Kao Glavine Address Maple Avenue Apt Ithaca NY Telephone Some photos Academic Background from National Taiwan University Computer Science to graduate from Cornell University Computer Science Habits sports Basketball billiards table tennis bowling tennis swimming volleyball etc others singing driving dancing etc except studying favorite teams Orlando Magic Atlanta Braves SF favorite players Anfernee Hardaway Tom Glavine Technical skills understanding in distributed operating system computer graphics multimedia computer networks database system computer vision and financial calculation extensive Windows Java programming Multimedia final Project paper Warping morphing in RIVL partial result of my MEng project WebPainter Jobs in interest Marketing related to any field of computer science Software development My resume This page is still under construction email me whkao	student	cornell
103	 Server Date Wednesday GMT Tuesday GMT WireFrame Rotation WireFrame Rotation Introduction This project is desgined as learning tool for computer graphics It provides an understanding in the polygons which are formed by list of vertices It is written in Java which is simple but powerful Java is language for creating safe portable interactive and and programs Java has programming environment that is not platform speific Java can create applets which is program that can react to user input and dynamically change Cone Cube Cylinder Tetra Torus	student	cornell
104	 Server Date Wednesday GMT Sunday GMT Alexey Home Page Alexey Vaysburd alexey am in the Program in Computer Science at Cornell University My research interests include distributed systems group communication systems and tools for distributed computing work within the Horus group lead by Ken Birman and Robbert van Renesse Papers Implementing Replicated State Machines Over Partitionable Networks Roy Friedman and Alexey Vaysburd Cornell University Some WWW links Search Engines Lycos Technical Reports Cornell CS Technical Reports BROADCAST Technical Report Series LSE Ecole Polytechnique Federale de Lausanne The Hebrew University The Transis Home Page Cornell CUINFO Cornell Gopher Directions to and from Cornell Cornell Directory Cornell Staff Directory Cornell Student Directory Courses Classes Exams Cornell Calendar Cornell Arts Music Bailey Hall Concerts Cornell Musical Events News and Weather Ithaca Weather Current conditions for Ithaca World News Briefs Odessa OdessaWeb	student	cornell
105	 Server Date Wednesday GMT Friday GMT Vince Lee The browser that you are using is suck Plz download an one Netscape to read my page Thanks	student	cornell
106	 Server Date Wednesday GMT Wednesday GMT Frederick Smith Homepage Frederick Smith Grad Student fms Upson Hall Department of Computer Science Cornell University Ithaca NY Papers Ernie Cohen Dexter Kozen and Frederick Smith The complexity of Kleene algebra with tests Technical Report Cornell University July Dexter Kozen and Frederick Smith Kleene algebra with tests completeness and decidability Technical Report Cornell University April Personally Useful Links Dexter Kozen Homepage Greg Morrisett Homepage Programming Language Research Page Classes am taking CS Systems CS Multimedia CS Semantics of Programming Languages Math Introduction to Analysis Fun Links Epicurious CarTalk Home of Click and Clack Catch them on NPR Sundays at Last updated August	student	cornell
548	 Server Date Wednesday GMT Wednesday GMT Home page of Christoph Kreitz My own picture soon Christoph Kreitz Research Associate Department of Computer Science Cornell University Ithaca NY USA Office Phone Fax Email Upson Hall kreitz Research Topics Program Synthesis Automated Deduction and Type Theory Theory of Computation Teaching and Learning German Lehre und Lernen Vorlesungsskripte Medienunterst uumltztes Lehren This is my personal home page More information will be available soon Last modified November Christoph Kreitz kreitz SOME LINKS	staff	cornell
549	 Server Date Wednesday GMT Wednesday GMT Robbert van Renesse Robbert van Renesse Senior Research Associate Cornell University rvr am senior research associate in the Department of Computer Science at Cornell University in Ithaca NY am working with Ken Birman in the area of distributed systems My advisor was Andy Tanenbaum Interests My brand new baby girl Our brand new house The Horus system The TACOMA project Applets NYNET The Ithaca Ageless Jazz Band The Ithaca Swing Dance Network Jazz Accordion Shareware Dutch Stuff Cornell Dutch Club contains many other links The USA and the Netherlands Dutch Jazz Ithaca IthacaNet The Spinners Ithaca Market Place Papers Software for Reliable Networks Scientific American Design and Performance of Horus Lightweight Group Communications System html version Design and Performance of Horus Lightweight Group Communications System GIF version Framework for Protocol Composition in Horus Protocol Composition in Horus Incorporating System Resource Information into Flow Control Strong and Weak Virtual Synchrony in Horus Horus Flexible Group Communications System Security Architecture for Systems Support for Complex Applications using the Horus system Operating Support for Mobile Agents	staff	cornell
550	 Server Date Wednesday GMT Saturday GMT Yanhong Annie Liu home page Yanhong Annie Liu am Associate working with Professor Tim Teitelbaum Research Interests General systematic approaches to improving the efficiency of computations Program analysis and transformation techniques for incremental computation and computation Applications in optimizing compilers interactive systems algorithm design program development software system organization and software maintenance Selected Publications and Talks Dissertation Yanhong Liu Incremental Computation Systematic Transformational Approach Cornell University Ithaca New York January Also appeared as Cornell Technical Report TR October abstract Journal Publication Liu and Teitelbaum Systematic derivation of incremental programs Science of Computer Programming February Refereed Conference Publications Liu Stoller and Teitelbaum Discovering auxiliary information for incremental computation In Proceedings of the Annual ACM Symposium on Principles of Programming Languages pages Petersburg Beach Florida January Liu CACHET An interactive program transformation system for deriving incremental programs In Proceedings of the Software Engineering Conference pages Boston Massachusetts November IEEE Computer Society Press Liu Selectively caching intermediate results for incremental computation In Proceedings of the International Conference for Young Computer Scientists pages Beijing China July Peking University Press Liu and Teitelbaum Caching intermediate results for program improvement In Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Program Manipulation pages La Jolla California June Liu Deriving incremental programs In Proceedings of the International Conference for Young Computer Scientists Beijing China July Tsinghua University Press Liu Zhang and Wang formalized uncertainty reasoning model that combines qualitative partitions and quantitative descriptions in combination problems In Proceedings of the International Fuzzy System Association World Congress Seattle Washington August Liu Zhang and Wang The quantitative and qualitative inexactness and reasoning in combination problems In Proceedings of International Symposium for Young Computer Professionals Beijing China August The Publishing House of Surveying and Mapping Technical Reports Liu and Teitelbaum Incremental computation for transformational software development Technical Report TR Department of Computer Science Cornell University Ithaca New York March Liu and Teitelbaum Caching intermediate results for program improvement Technical Report TR Department of Computer Science Cornell University Ithaca New York March Liu and Teitelbaum Systematic derivation of incremental programs Technical Report TR Department of Computer Science Cornell University Ithaca New York August Liu and Teitelbaum Deriving incremental programs Technical Report TR Department of Computer Science Cornell University Ithaca New York September revised October Liu and Wakayama Incremental line breaking algorithms Technical Report Xerox Webster Research Center Webster New York August Talks Discovering Auxiliary Information for Incremental Computation The Annual ACM Symposium on Principles of Programming Languages Petersburg Beach Florida January CACHET System for Deriving Incremental Programs The Software Engineering Conference Boston Massachusetts November Selectively Caching Intermediate Results for Incremental Computation The International Conference for Young Computer Scientists Beijing China July Caching Intermediate Results for Program Improvement ACM Symposium on Partial Evaluation and Program Manipulation La Jolla California June Systematic Derivation of Incremental Programs Kestrel Institute Palo Alto California July Systematic Derivation of Incremental Programs on Incremental Computation and Dynamic Algorithms International Conference and Research Center for Computer Science Schloss Dagstuhl Germany May Deriving Incremental Programs The International Conference for Young Computer Scientists Beijing China July Automatic Derivation of Incremental Programs System Science Laboratory Xerox Webster Research Center Webster New York July Software Systems and Documents CACHET An interactive system that uses systematic program analysis and transformation techniques to obtain efficient incremental programs Department of Computer Science Cornell University OGGEB An Expert System for the Evaluation of Oil and Gas Generation in Basins with Principle Report Implementation Techniques Test Report Usage Manual and Expert Knowledge Summary Research Institute of Oil Exploration and Development Science and Tshinghua University Beijing with Song Sun Huang Zhu Zhang and Wang Current Projects Deriving Incremental Programs general systematic transformational approach to improving the efficiency of computations Composing Efficient Programs Optimization and selection techniques for building efficient programs from components Department of Computer Science Upson Hall Cornell University Ithaca NY Office Fax Home yanhong Last updated November have moved on August to Computer Science Department Lindley Hall Indiana University Bloomington IN Office Fax Home liu http	staff	cornell
551	 Server Date Wednesday GMT Monday GMT Paul Jackson Home Page Paul Jackson Associate Cornell University jackson www http address Department of Computer Science Upson Hall Cornell University Ithaca NY USA phone department fax Research Interests Theorem proving environments formal methods for software and hardware development computer algebra synthesis of scientific programs linkage of software tools for engineering design Thesis Information My PhD thesis is entitled Enhancing the Nuprl Proof Development System and Applying it to Computational Abstract Algebra The abstract is available as is the full text in dvi and postscript formats Papers Paul Jackson Exploring Abstract Algebra in Constructive Type Theory In Bundy editor International Conference on Automated Deduction Lecture Notes in Artifical Intelligence June The abstract is available as is the full text in dvi and postscript formats Paul Jackson Nuprl and its use in circuit Design In Boute Stavridou editors Proceedings of the Interational Conference on Theorem Provers in Circuit Design IFIP Transactions The abstract is available as is the full text in dvi and postscript formats Paul Jackson Developing Toolkit for hardware in the Nuprl proof development system In Proceedings of the Advanced Research Workshop on correct Hardware Design Methodologies Elsevier Nuprl The Nuprl project has its own Web home page From here you can access documentation on Nuprl and communicate with live Nuprl session that has some basic theories loaded This collection of Nuprl pages still needs further work on it to make it more accessible or someone else will get round to paying some attention to this sometime in the next month or two Hypertext listings for most of the theories developed for my thesis are available The listings for each theory include introductions summaries of definitions and theorems and formatted proofs The listings for the theories are not included at the moment but should be in the next couple of days Last Modified Feb Paul Jackson jackson	staff	cornell
552	 Server Date Wednesday GMT Friday GMT Matthew Morgenstern Home Page Matthew MorgensternResearcher Project Leader Address Engineering and Theory Center Xerox Design Research Institute Cornell University Ithaca NY Phone Fax Email Morgenstern Status Visiting Fellow Cornell Computer Science Principal Scientist Xerox MIT Laboratory for Computer Science Projects Distributed Heterogeneous Database Systems an ARPA funded project MetaData Management for databases and multimedia documents ARPA Will supervise selected student projects in related areas Funded research work during academic year and summers may be available Or just stop by to chat More information is coming to this page soon	staff	cornell
553	 Server Date Wednesday GMT Friday GMT Yuying Li Yuying Li Research Associate yuying University of Waterloo My general research interests are in numerical optimization and scientific computation am also interested in applying optimization techniques to solve real world engineering problems My current interests include generalizing the trust region theory for unconstrained minimization to nonlinearly constrained minimization In particular for nonlinearly constrained problems there do not exist acceptance conditions for optimality have been investigating new affine scaling trust region method for minimizing nonlinear function including trust region convergence analysis The method can be used to solve general nonlinearly constrained minimization problem using an exact penalty approach An application of the new method has been considered for image enhancement problems Lectures An Interior and Trust Region Method for Nonlinear Minimization Subject to Bounds Conference on Scientific and Engineering Computing for Chinese Young Scientists Beijing China August Publications Globally Convergent Method for Lp Problems SIAM Journal on Optimization Centering Trust Region Reflective Techniques for Nonlinear Minimization Subject to Bounds Proceedings of Conference on Scientific and Engineering Computing for Chinese Young Scientists Return to List of Researchers Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	staff	cornell
554	 Server Date Wednesday GMT Thursday GMT Dean Krafft Home Page dean Dean Krafft Director of Computing Facilities Address Upson Hall Department of Computer Science Cornell University Ithaca NY Phone Fax currently serve both as researcher and an administrator in the Computer Science Department at Cornell In my guise as an administrator manage the Computer Facilities Support group and worry about number of issues including computer security networking and building web services On the research side am the principal investigator for part of the project This is an consortium of the top five computer science departments and the Corporation for National Research Initiatives CNRI Our research is intended to further the rapid dissemination of breaking technical research over the Internet as well as making available the existing libraries of technical reports from the consortium members As part of the project two researchers working at Cornell Jim Davis Xerox employee of the Design Research Institute DRI and Carl Lagoze employed by the project have developed and implemented protocol and system for the dissemination over the net of technical reports and similar material The system called Dienst is now in use at eight University sites on the net technical report on Dienst is available For more information on Dienst and the project please send email to put together page of selected URLs some related to my research some to the computing facilities and some are just things interested in	staff	cornell
555	 Server Date Wednesday GMT Wednesday GMT Richard Zippel Richard Zippel Senior Research Associate rz MIT My research focuses on using symbolic mathematics and modern software techniques to automate the generation of scientific software currently focusing on computational fluid dynamics This work will allow scientist to specify the differential equations to be studied the mathematical techniques that will be used perform the numerical computations and the architecture of the machine on which the calculations will be done The toolkit then converts the differential equations via the supplied methods into specialized code for the architecture With colleagues in the department of Mechanical and Aerospace Engineering this toolkit has been used to generate the dynamical systems that arise in the study of the boundary layers in fluids component of this toolkit is computer algebra substrate called Weyl that extends the data structures available in Common Lisp to include objects like polynomials matrices rational functions rings vector spaces and ideals The introduction of these new objects into programming language provides number of new challenges to the language type system and provides new opportunities for deductive reasoning which we are pursuing Professional Activities Editorial Board Journal of Symbolic Computation ACM Transactions on Mathematical Software Program Committee Principles and Practice of Constraint Programming Workshop AOR NSF Journal of Algebraic Algorithms and Error Correcting Codes International Symposium on Symbolic and Algebraic Computation Lectures Algebraic Function Decomposition American Mathematical Society Regional Meeting Syracuse New York September with Dexter Kozen and Susan Landau Dexter Kozen presenter American Mathematical Society Regional Meeting Syracuse New York May Susan Landau presenter Effective Algorithms for Polynomial Irreducibility Testing American Mathematical Society Regional Meeting Syracuse New York September Vista MicroStorage Architecture International Workshop on Object Oriented Operating Systems Durham North Carolina December joint with Dawson Dean Dawson Dean presenter IBM Scientific Center Haifa Israel January Department of Electrical Engineering Technion Haifa Israel January Synthesizing Scientific Programs using Department of Computer Science Weizmann Institute Rehovot Israel December Department of Electrical Engineering Technion Haifa Israel January Department of Computer Science SUNY Albany New York April New Modular Interpolation Algorithm for Factoring Multivariate Polynomials Algebra and Number Theory Symposium Ithaca New York May joint with Ronitt Rubinfeld Ronitt Rubinfeld presenter Publications Effective Polynomial Computation Kluwer Academic Publishers Boston Massachusetts June pages Vista Microstorage Architecture That Implements File Systems and Object Databases Proceedings of the International Workshop on Object Oriented Databases December with Dawson Dean Return to List of Researchers Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	staff	cornell
556	 Server Date Wednesday GMT Friday GMT Roy Friedman Roy Friedman Associate Cornell University roy am associate in the Department of Computer Science at Cornell University am working with Ken Birman and Robbert Van Rennesse in the area of distributed systems mainly on the Horus project received my from the Department of Computer Science at the Technion Israel Institute of Technology My advisor was Hagit Attiya and my thesis title was Consistency Conditions for Distributed Shared Memories am currently also involved in the Millipede project working with Assaf Schuster from the Department of Computer Science at the Technion Israel Institute of Technology Most Recent Papers Friedman and Birman Trading Consistency for Availability in Distributed Systems Technical Report Department of Computer Science Cornell University Friedman and Birman Using Group Communication Technology to Implement Reliable and Scalable Distributed IN Coprocessor To appear in TINA Friedman and Vaysburd Implementing Replicated State Machine Over Partitionable Networks Technical Report Department of Computer Science Cornell University For full list of publications click here	staff	cornell
594	 Date Tue Jan GMT Server Fri Jun GMT UCSD Computer Science and Engineering Home Page Welcome to the Department of Computer Science and Engineering at the University of California San Diego People Faculty Staff Researchers Graduate students and Undergraduate students Research Areas of research research group home pages Papers and Other Publications Technical Reports Journal Publications Conference Papers Activities Events and Announcements Departmental Committees Calendar list of upcoming events and student job opportunities CSE Department Phone Directory Conference Room Reservations Teaching Resource Center CSE Uptime AP CSE Job Announcements CSE Academic and Staff positions currently available CSE Undergraduate Homepage New Resources for undergraduate students in the CSE department including course schedules the undergraduate handbook current info and more Programs and Other Academic Information Graduate and undergraduate programs Class Home Pages Links of Interest at UCSD School of engineering departments campus computer services Other Links of Interest Campuses San Diego UC system other cse departments etc Authorship Last Updated July	department	misc
595	 Date Tue Nov GMT Server Wed Oct GMT Northwestern University Dept of Electrical and Computer Engineering Welcome to the WWW site of the Department of Electrical and Computer Engineering McCormick School of Engineering and Applied Science Northwestern University webmaster Last updated Date	department	misc
596	 Date Tue Nov GMT Server Fri Apr GMT Dept of Computing of Alberta Welcome to the Department of Computing Science at the University of Alberta in Edmonton Alberta Canada Information about our department programs of study and research activities may be found below Welcome Academic Information People Employment Opportunities Support Services Facilities Research Activities and Laboratories Technical Reports Servers Student Organizations Events Local Interest Only World Wide Web Information Further Information You are visitor to the Department of Computing Science home page Author Rob Lake lake Last update April URL http	department	misc
597	 Date Tuesday GMT Server UK CS Homepage Department of Computer Science University of Kentucky General Information People in the Department Instruction Research Computing Facilities Addresses UK CS department position announcements Other links Upcoming Lectures and Colloquia Departmental Seminars Last Modified on Wednesday EST Back to the Department of Computer Science Send corrections to the Webmaster	department	misc
598	 Date Tuesday GMT Server Wednesday GMT University of Waterloo Department of Computer Science Computer Science at Waterloo The Department of Computer Science is in the Faculty of Mathematics at the University of Waterloo People Faculty and Staff Web Pages Telephone and Office List Photos Graduate Student Web Pages Telephone and Office List Undergraduate Student Web Pages Search the University of Waterloo Directory Faculty Positions Available Academic Programs Computer Science Undergraduate Handbook Policies and Procedures Undergraduate Advisors and Answers to Common Questions University Undergraduate Calendar Web Pages for Computer Science Courses Graduate Brochure Unofficial Grad Student Survival Manual getting started and skills Graduate Course Descriptions University Course Schedule University Exam Schedule University Academic Calendar Research Faculty Research Interests Research Overview Computer Science Technical Reports Index and Archive Web pages for research groups in computer science News UW Seminars Campus News including Daily Bulletin CS Department Announcements Contact Lorna Westerveld lawester for information about this page	department	misc
599	 Server Date Tuesday GMT Tuesday GMT Computer Science Department Home Page Welcome to our Home Page Department Information Department Information Personnel Research Colloquia Technical Reports Publications and Current Projects Undergraduate Information Graduate Information Systems Support Group Local Users Only Instruction Announcements Academic Calendar Class Schedule Fall Class Schedule Winter Class Schedule Spring Course Offerings in CS Expanded Course Descriptions Recipients of the Department Citation Award Computer Science Instructional Facility CSIF Faculty Recruitment Application Information webmaster Last modified November	department	misc
600	 Date Tue Nov GMT Server Mon Oct GMT Griffith University School of CIT School of Computing and Information Technology Welcome to the World Wide Web server for the School of Computing and Information Technology in the Faculty of Science and Technology at the Nathan campus of Griffith University Brisbane Australia What New To keep up to date with what is happening on the server keep an eye on the recent changes page School Profile General Information Personnel Listings Academic Staff Research Staff Visiting Staff Computing Support Section Adminstrative Staff Postgraduate Students Telephone and Email directory User supplied home pages or Sorted by Surname Student Information Courses and Subjects offered Undergraduate courses Postgraduate courses Subjects Information for current students Information for prospective postgraduate students Postscript version is also available Student Computing Association Research General information Research groups Research reports Allied centres Committees Computing and Equipment Subcommittee CIT access only CIT School Committee GU access only Honours and Postgraduate Studies Board GU access only Conferences Up and Coming Conference Asia Pacific Distributed Solutions Event Computing Facilities Contacting Computer Support HelpDesk also mail helpdesk Information Guides for CIT Users Information regarding the upgrade of kurango Computing Facilities available for CIT Staff and Students Software Information Manuals School FTP Server Information on this WWW Server Including Images and Statistics Online UNIX tutorial Links to ITS Information Events and Announcements Seminars Conferences Lab Bookings Semester Positions and Scholarships Available in CIT Related WWW Servers Australian Software Quality Research Institute SQI CIT Undergraduate Student Server Griffith University Access Only Griffith University Campus Wide Information System Faculty of Science and Technology School of Microelectronic Engineering School of Biomolecular and Biomedical Science School of Science Other External Services GU Library Services Australian Servers Australian News Groups Australian FTP and Archie Servers Nearby Network Services CIT WWW Hotlist Contact Details School of Computing and Information Technology Griffith University Nathan Queensland Australia Phone Facsimile Email enquiries WWW http Griffith University Campus Wide Information System Dated March Last updated September Please send your comments on and suggestions for this Web page to webmaster	department	misc
633	 Server Date Monday GMT Tuesday GMT Course Material Course Material Introduction to operating systems Processes IPC Scheduling Bounded buffer example critical section Solution for two process critical solution problem Assignment due Solution Solutions for process critical section problem hardware support for solutions Semaphores Deadlocks Introduction and detection Deadlocks Prevention and Avoidance the Banker algorithm Assignment due Solution Classic problems in Synchronization higher level constructs Assignment due Solution Project File Systems Introduction directories system and physical organization File Systems Free space management Directory implementation disk scheduling RAID Introduction to Memory Management Issues Memory management Segmentation Paging and combined approaches Assignment Solution Page Replacement Algorithms Locality Working Set Protection and Security Mach an overview	other	cornell
634	 Server Date Monday GMT Wednesday GMT Questions and Answers Phase Question We having difficulty understanding the abstraction for process queues which we asked to implement for phase one of the project for We do understand what removeProc is supposed to do The specification says Remove the first element from the process queue whose not tail is pointed to by tp Are we to scan down procTable for the first element which has by which we assume you mean the element of some structure of type identical to Answer Function RemoveProc should do precisely what the spec says Consider queue queue is FIFO list with head element and tail element Consider pointer to the tail element of Let that pointer be Consider now pointer to Let call it tp RemoveProc assumes that you know tp Your goal is to remove from the head element of How you do it namely how you devise smart and efficient implementation of the queue data structure that makes this task easy it is up to you Question can not read files and In particular if try to access directory get back Permission Denied What should do Answer Do try to cd to the directory you wo be able to do that Instead just use the UNIX cp command to copy the files from to your directory The following will work as have just tried it on dahlia in the SunLab dahlia cd dahlia cp dahlia cp Question believe the function on pg should be outBlocked semAdd NOT outBlocked as listed Answer No outBlocked really takes only as parameter As you point out however you do need to know the address of the semaphore if any on which is blocked Maybe this is an instance in which adding fields to the given data structures is good idea Question The assignment says that we can add to the fields of to make them more efficient But since we are abstracting them in our module how close to this implementation to we have to have ask this because the queue implementation only has pointer to the tail not both the head and tail as usual Thus removeProc will involve search along the whole list Does the tail pointer have to point to something of type or can it point to an intermediate type which points to the head and tail of the queue Answer Yes you can add fields to the and structures However you should try to resist the temptation to add fields without having first thought if simpler and more efficient solution exists that will not require you to do so Implementing the queue abstraction and taking care of function removeProc happens to be an instance in which adding fields to the structures would probably only serve to make things more complex and less efficient To be specific removeProc be efficiently implemented with the structure fields that you have already without involving search along the whole list as you suggest Also the tail pointer which by the way must point to the last element in the queue does have to point to an element of type Question Is the that pcc compiles for the What does it expect for function declarations in export files pcc keeps giving core dump when we try to compile our export file Answer Indeed pcc uses the old syntax As far as how to set up extern declarations in file you can refer to the example in Appendix of the HOCA documentation file Question Hi We compiled our modules with gcc first along with our own tester module so that we could use the awesome debugging power of gdb before moving on to the graphically pleasing but somewhat less powerful CHIP simulator We just thought others might benefit from this strategy and we wonder Question ed if you might pass it on via the Web Answer Using gcc to compile and debug your modules is good idea if you know how to use gdb However keep in mind that The executable compiled with gcc will not run in CHIP Gcc produces executable for your SPARC not for CHIP Because of the above point you will have to eventually compile your files using pcc Remember that pcc is not If you used ANSI in your gcc code you will have to change it back to notation Beginning with the next phase gcc will probably be less useful since you will need to look closely at what happens in CHIP registers and memory Your friendly CHIP interface will be glad to help PHASE Question Is there an instruction called STIT in CHIP If not does that mean that we ca read the value stored in IT Answer No there is no instruction named STIT You can infer what the value of IT is by comparing the current time of day with the time of day of the last time you loaded IT Question Does return total CPU time used by the process or the currently used that is Process process Answer returns Question Interrupt priority is higher or lower than priority Answer believe is higher But why do you care Question To set the initial running area for the nucleus we use STST at some point How do we guarantee the processor will be in kernel mode before that Answer Your program runs by default in kernel mode So you can use STST with no problems Question Could you please tell me how to get the value in the status register and that in the length register for an IO device There is table on page of the CHIP documentation but that does seem to help much Actually when does the value in the length register need to be retrieved Furthermore how am supposed to pass those two values to the appropriate process when necessary Do just save them in the corresponding entry in the process table Answer First of all when device completes the values for the status and length register are returned in the device registers for that device The device registers are located in CHIP memory just below the interrupt area As far as accessing that area if you look in you will find the following definition define BEGINDEVREG beginning of device registers that should be what you are looking for The value in the lenght register need to be retrieved for the Terminal and Printer devices see sections and You are going to pass these values as follows if there is process waiting on the semaphore for the device that returned the values then you can simply copy the values in the registers and of the process that is waiting you should also unblock the process if there is no process waiting you should copy the returned value in the buffer dedicated to the device the one that you declared at initialization time The process which initiated will eventually retrieve the values from there Question Why do we need to distinguish between caller and running inside trap handler What does really mean passing up trap And what is doing anyway Answer Let me answer the question is reverse order What is doing anyway is called to initialize the old and new trap areas that are kept by each process as opposed to the trap areas kept by the nucleus in the low memory addresses It is not your job at least for now to decide to initialize those areas you can just assume that they are initialized through the values passed in registers and You can look at an example of initialization browsing through the test program What does really mean to pass up trap Passing up trap really means invoking trap handler that is not located in the nucleus but rather in higher layer of the operating system Before trap can be passed up the appropriate old and new trap areas for the calling process must be initialized calling If an attempt to pass up trap is made before for the invoked trap type has been executed the calling process must be terminated Passing up the trap involves copying the state of the calling process into the old area and copying the state contained in the new trap area in the calling process state as it is maintained in the process table possible implementation of the passing up mechanism would call MOVBLK twice The first time to copy in the old trap area The second time to copy the state stored in the new trap area into As you can see to load the new state we are not using LDST Rather we just modify the state of the running process in the proc table With this implementation when the nucleus trap handler finishes and the calling process gets to run again it will actually run the higher level trap handler Why do we need to distinguish between caller and running process You may or may not depending on your implementation In mine the reason why the caller may be different from the running process is easy to see if we consider the SYS trap handler and we concentrate on As result of the operation the calling process may be blocked and new process elected to be the next to run Using the caller vs running trick one can figure out withn the SYS trap handler if such an event has taken place and load the IT for the new running process with an appropriate value It is less clear why the trick may be useful for prog MM or even SYS traps for SYS instructions greater than After all these traps are passed up new state is loaded and any instruction after call to passup will never be executed this was the question that Nesheet asked today in class In my implementation the check that the trap areas have been initialized the right has been executed is done within the call to passup If the caller process has not executed the caller will be terminated and new process will be designated as the next to run In this case control will indeed reach the code after passup and the caller check will allow to correctly reload the interval timer	other	cornell
635	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
636	 Server Date Sunday GMT Friday GMT Java Example HelloWorld example Object Transformation Button example	other	cornell
637	 Server Date Monday GMT Sunday GMT David Koster Bookmarks LINKS None of these links are guaranteed to still exist but hey nothing works all the time in the REAL world Just bug Jon about it As starter you might want to try all these links about the Web and how to write HTML pages If you want to put your own home page up just ask me or mail me your HTML page and post it All about the Web WWW Web Communications Publishing on the Web Guide to Cyberspace Contents Beginner Guide to URLs Best of the Best All about writing an HTML page NCSA Beginner Guide to HTML The Bare Bones Guide to HTML The Home Page Web Cookbook Duke Directory of Hypertext Resources HTML Overview HTML Quick Reference An Information Provider Guide To HTML Guides to Writing Style HTML Documents Your Own Home Course Page UNIVERSITIES Columbia University in the City of New York Cornell Department of Computer Science Cornell University in Ithaca BUSINESSES Morgan Co Incorporated Northern Telecom SunWorld Online September Doing business on the web Sun Microsystems Sybase Home Page Welcome to Netscape NEW TOOLS Java Home Page Netscape Navigator Navigator Gold page Project At Sun Microsystems Laboratories And Java JOB STUFF Child Abuse Prevention Network Cornell Theory Center Home Page Jonathan Alferness Science Home REFERENCES Clay Shirky Home Page HTML STUFF Extensions to HTML HyperText Markup Language Specification Version Mosaic for version Form Support IMAGEMAPS NCSA Imagemap Tutorial NCSA HTTPD NCSA HTTPd Overview NCSA HTTPd Tutorials PARALLEL COMPUTING Cornell PERL AND CGI STUFF An Exploration of Dynamic Documents CGI Library PERL Perl and MacPerl Resources TCL WWW Info UNIX AND SHELL PROGRAMMING Creating commands and programs using the shell UNIXhelp for users UNIXhelp for users II UNIX Reference Desk PM ZONE OWNERS MANUAL Yahoo Computers and Internet Software Data Formats COURSES Home Page CS Home Page CS Home Page Cornell COMPUTER GRAPHICS FAQ Computer Graphics Fractal Explorer IBM Almaden Research Center Visualization Lab IBM High Performance Integration IBM Visualization Data Explorer DX COMICS Clyde Caldwell Images Index of DC Images Index of DragonLance Images Index of Fantasy Artists Card Images Index of Jeff Easley Images Index of Keith Parkinson Images Page Marvel Images Wolverine ART ANIMA HomePage ArtMap HomePage Art on the Net Artworld ArtMap Online Links and Listings ESCHER Escher patterns Index of Directory Index of Directory The Web Virtual Library Art ANIMATION MTV Animation MTV Animation Aeon Flux MTV Oddities The Maxx LIBRARIES Internet Movie Database MPEG Movie Archive PLANET EARTH HOME PAGE MOVIES AND VIDEO INFORMATION JUST PLAIN WIERD Alex Bennett World Brian Digital Mayhem Hell The Online Guide to Satanism Laurence Simon Weirdland SPORTS CBS Sports Home Page NBC Sports CARTOONS The Dilbert Zone Today Computer Cartoon Tool User Comics World Wide Web Comics Project United Media GAMES Games Domain Games related information site Zarf List of Interactive Games on the Web OUTDOOR RECREATION GORP Great Outdoor Recreation Pages MISCELLANEOUS Beautiful Women Elvis Home Page Fellowbug Laboratory Rocket Science Home Page Channel The Dominion The Keepers of Lists What Hot and Cool SEARCH STUFF InfoSeek Home Page Lycos Search Form TradeWave Galaxy WebCrawler Searching Yahoo MPEG AUDIO MPEG Facts and Info INP MPEG Audio FAQ MTV Music Kitchen Web Wide World of Music World of Audio Worldwide Internet Live Music Archive MAIL MESSAGES The Electric Postcard Back to Index	other	cornell
638	 Server Date Sunday GMT Thursday GMT Optimal Parallel MPEG Encoding Parallel MPEG Encoder in Rivl Optimal Parallel MPEG Encoding And just what is this madness In the beginning in lab deep in the heart of Upson Hall there were video tapes of classroom lectures These tapes were on the shelf collecting dust bunnies What were we to do about this Well Brian Smith decided that he wanted his lectures put online for his students to view and thus began using RIVL to compress his videos He soon realized that compressing every lecture would take an inordinate amount of time He calculated that if we could use every machine in the computer science department it would not take nearly as long to perform this task We decided it would be fun to help Brian out with his problem so we came up with an abstract to solve his problem We all agreed that it was good place to start After some time and lot of labor we came up with some code and paper based on our work which more closely resembles collection of notes than coherent piece of work So we kept working We have now arrived at another version of our code This version works much better than before it is better stronger and faster And to this end we have written another technical paper to describe exactly what we did and why we did it and what do we learn from this Lots We now know the intimate details of how TCL DP and RIVL work and why performance suffers when certain things are done Mastering the black art of TCL programming actually took the smallest amount of time in comparison to the rest of code Squeezing the most performance out of environment given distributed architecture turned out to be the most time consuming and difficult part of the project RPC facilities built into DP allowed us to easily perform necessary communication between machines to distribute work requests The combination of the above scripting environments helped us to acheive our goals of delivering reliable portable high performance MPEG encoding and how does it tie in with Multimedia Systems Very well The ability to rapidly compress video using all available machines makes many new types of video processing possible It allows animators and movie editors to view their videos more often thus shortening development time Because our version of parallel MPEG encoding is an integral part of RIVL it is extremely easy to use and how do we measure success If we are able to compress large video without becoming old and gray we will have succeeded and finally how are we progressing We are finished with the coding state of the project Currently we are working writing technical report for the project Hopefully we can pull the main ideas together better than we did earlier Some of things that could be done to make this project better are Make the worker process into daemon process Add in support for IP People Working on Optimal Parallel MPEG Encoder Faculty Brian Smith Students Scott Dawson William Lee Jeff Moore Visitors since April	other	cornell
639	 Server Date Monday GMT Tuesday GMT Homework Homework Handed out Tue Jan Due Tue Jan Upson This assignment must be done in groups of two Hand in one solution per group printed not manuscript You are as so often sitting on an Xterm and remotely logged into some random slow machine You wonder how fast this turtle really is As so often the system files only give cryptic model numbers So you decide to run few experiments yourself The main goal of this homework is to get you familiar with taking precise measurements Measure processor speed Write program that measures the instruction execution rate of your processor On SunOS use gettimeofday to take measurements Hints You probably want to write very tight loop You probably also want to count the instructions in the loop using the compiler disassembly You probably also want to make sure you time enough iterations to dwarf measurement overheads and few enough to avoid problems Run your benchmark on two different sparcstations and on one other interesting machine Hand in your program evidence that you are counting instructions correctly and the results in MIPS Total one page max Measure cache characteristics Let assume you want to run large simulations and therefore you are particularly interested in the memory hierarchy on the machines you found Write program that allows you to determine the following cache characteristics number of levels of cache size of each cache associativity of each cache and block size of each cache Hints do write program that prints the answers instead allocate large array use malloc and stomp all over it in various patterns Time how long it takes per array access again using many iterations Graph the results and draw conclusions Run your benchmark on two different sparcstations at least one of which should have two levels of cache Hand in your program one page of enscript max the and an explanation of the results one page of explanations max	other	cornell
640	 Server Date Sunday GMT Tuesday GMT The FUN Transformation System The FUN Transformation System demo Papers and Publications The Equational Logic Transformation System Liang CS Masters of Engineering Project CS MEng December Department of Computer Science Cornell University Ithaca New York Attribute Grammar Based Transformation Systems van den Berg Master Thesis Utrecht University The Netherlands June Rapid development of program transformation system with attribute grammars and dynamic transformations Vogt and Van den Berg and Freije Proceedings of the International Workshop on Attribute Grammars and their Applications Lecture Notes in Computer Science page September Paris France	other	cornell
641	 Server Date Monday GMT Sunday GMT Notes on moving to NT Notes on Moving the CSRVL to Windows NT Justin Voskuhl voskuhl Last Updated October CSRVL projects and Windows NT For number of CSRVL research projects supervised by Ramin Zabih will be moving to WindowsNT We are hopeful that this move will be supported by Microsoft About Windows NT What is Windows NT Windows NT is Microsoft highly portable Windows operating system Even with its radically different architecture Windows NT provides backward compatibility with Windows and POSIX applications even on processors Windows NT is designed to be as extensible as possible Borrowing from the design of Mach Windows NT consists of priviledged executive and set of servers called protected subsystems NT design is unique in that protected subsystems execute in user mode like applications do This structure allows protected subsystems to be modified or added without affecting the integrity of the executive In addition to protected subsystems NT provides modular executive that can be easily extended NT represents system resources as objects that can only be modified through APIs New system objects can be added without undermining existing objects NT supports drivers that can be changed while the system is running and NT can support new file systems devices networks or transport protocols simply by writing new driver RPC is built into NT so that an application can call remote services without regard to their location on the network New services can be added to any machine on the network and be made available immediately Windows NT is designed to be as portable as possible It is written primarily in with small portions written in The only parts that are written in assembler are those that must directly talk to the hardware and are carefully isolated from the rest of the system This means there are variety of CPUs that can run NT including Intel MIPS PowerPC and Alpha chips NT can run on systems with one or more processors Windows NT provides several machanisms to increase reliability NT responds predictably to error conditions even those caused by hardware failures Structured exception handling is used to catch software errors Whenever an abnormal event occurs exception handling code which exists throughout the system is automatically invoked in response to the condition ensuring no undetected error wreaks havoc on user programs or the system itself In addition NT implements new file system called NTFS which can recover from all kinds of disk errors including those in critical disk sectors It uses redundancy and transaction based scheme for storing data to ensure recoverability NT security measures are class government certified Finally Windows NT is designed to be fast Each component was written with an eye towards performance with each protected subsystem optimized to maximize the speed of frequently used system calls To increase speed of communication between protected subsystems Local Procedure Call facilities are provided as an integral part of the OS Finally networking is built into Windows NT to achieve the best possible performance In summary Windows NT is thoroughly modern highly compatible operating system for and beyond Mostly Taken from Section of Helen Custer Inside Windows NT Microsoft Press Why Windows NT The gap between the performance of the typical PC and the SPARC machines has grown smaller and smaller At the same time operating systems for the PC have grown more and more advanced There are number of reasons for moving to NT from current environment They include having the results of CSRVL work being immediately usable by the large and growing user base outside of Cornell Also basic hardware to run NT has higher ratio than many of the SPARC machines available Another advantage is using the same OS from our Pentium PCs all the way up to SMP RISC machines Moving to NT Notes on moving to NT There are number of issues involved in moving some of the research in the CSRVL to Windows NT There are both software and hardware hurdles we need to leap before researchers can do productive work under NT Note we do want to make anyone use NT who is more familiar with UNIX or has reasons for doing work in UNIX This will just be another option for doing work in the CSRVL Interoperability with the existing UNIX investment is important Hardware Right now the CSRVL is populated mostly with SPARC systems with few machines and PC clones Soon we have dual processor Micron Pentium system as well None of the SPARC systems will run NT and as far as aware wo run NT in the near future We will therefore need number of NT workstations which will probably be PC clones and also interested in system which may be Intel or RISC Microsoft maintains list of the SMP hardware NT will run on Software Microsoft is going to provide software to completely outfit ten NT machines initially We get to determine what complete means To this end put together list of software of interest to the CSRVL You can find descriptions of most of these products at the Microsoft web site Visual recently released to manufacturing at MS Windows NT Workstation Windows NT Resource Kit Visual Basic Pro Fortran PowerStation Office Pro Productivity Suite Subscription to MSDN Level Two for each researcher UNIX Interoperability tools emulator NFS software Projects to Move to NT The following are brief descriptions of projects that are ongoing in the CSRVL and could benefit from Windows NT Spatial Energy Histograms In many applications color histograms are used to compare images Their advantages are their efficiency and their insensitivity to small changes in camera viewpoint Their chief drawback is their lack of spatial information which can lead images with very different appearances to have similar histograms We describe method for comparing images that incorporates spatial information MPEG Browser and Scene Break Detector Until now we could view mpegs just like we could watch movies Unfortunately we were unable to take the advantage of digital format have not seen mpeg players allowing user to skip to arbitrary frame fast forward rewind etc Even more importantly the video was basically sequence of frames with no structure But it is obvious that video higher structure than frames we can partition video into shots scenes and larger chunks like movies tv shows etc We can also partition the video accoding to the content for example we might want to select segment of video in which particular actor appears provides an interface for browsing video User can play video stop at arbitrary point fast forward What is the advantage of MPEG Browse over other video players MPEG Browse adds very limited yet useful structure to the video it partitions the video into shots Based on these information the browser can skip to the next shot much like CD player can skip to the next song The scene break algorithm was developed by Ramin Zabih Justin Miller and Kevin Mai For more details about the algorithm see the web page ATM Camera Matt Welsh is designing realtime video source for the ATM Cluster which will allow machines on the cluster to capture and process images at high speeds The video source employs framegrabber and ATM interface card both over PCI am implementing kernel drivers for both cards as well as some form of Active Messages and for this machine The video source should be compatible with the Cornell IBM as well voskuhl	other	cornell
642	 Server Date Sunday GMT Monday GMT Bilth Gater and the Galactic Empire Episode The Space Rooster There is little pond on the Microsoft campus fondly termed Lake Bill by the employees Near the lake lived wild rooster and his mate They fed on the tidbits the employees gave them The rooster disappeared one day and it was later discovered that an unleashed dog had killed him There was big in the newsletter about this with people writing heartfelt eulogies to the gentle rooster This strip was my reaction to that Episode The First Day Episode The Rebel Threat Episode Flame On Episode Lord Gater Party Part Episode The Imperial Insignia Episode Lord Gater Party Part II Episode Lord Gater Party Part III	other	cornell
643	 Server Date Monday GMT Tuesday GMT General Information on the Cornell Computer Science Department General Information The Department The Department of Computer Science at Cornell University which was organized in is one of the oldest departments of its kind in the country It has faculty of approximately resident graduate students students and graduates about undergraduate majors each year The department is typically ranked as one of the top five in the country Cornell University is located in Ithaca New York city of about people in the heart of the Finger Lakes region Both Cornell and Ithaca offer wide range of cultural activities sports and outdoor activities with the pleasures of both city and country close at hand Academic Programs Doctorate Masters of Engineering Undergraduate Program During the academic year the department conferred in wide variety of areas of Computer Science The department admits about candidates each year typical program will take about five years to complete For more information on the program please send email to phd Program This is program designed to enhance the professional skills of computer scientists It provides flexible curriculum that includes six courses and design project student can specialize in number of areas including software development programming languages operating systems for networked environments robotics and computer vision scientific computing and artificial intelligence For more information on the program please visit the program home page or send email to meng You can browse the Web pages of past and proposed projects Undergraduate Programs The Computer Science department is in both the College of Arts and Sciences and the College of Engineering at Cornell University It offers both and degrees with major in Computer Science In the department graduated and To receive an information packet on applying to Cornell University you should call or write to Cornell University Admissions Thurston Ithaca NY For more information about the Undergraduate program at Cornell please visit the Undergraduate Program Home Page or send email to ugrad Contact List General Department Department of Computer Science Upson Hall Cornell University Ithaca NY Graduate Programs Graduate Office Department of Computer Science Upson Hall Cornell University Ithaca NY	other	cornell
644	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
645	 Server Date Sunday GMT Thursday GMT Incremental Compuation Incremental Compuation Incremental Evaluation Attribute Grammars Relational Calculus Lambda Calculus Functional Programs Derivation of Incremental Programs	other	cornell
646	 Date Mon Dec GMT Server Fri Mar GMT Lab CS Laboratory Transformations and Modeling Introduction This exercise introduces the processes of geometrically transforming an object in size orientation and location then combining objects to make complex scene There are several example programs given below to show you how to combine objects and animate them Based on these examples you will be asked to construct short animation Procedure First you may want to download several example files To do this click on each of the filenames shown below When the text window opens use the save as option to put the file in your own directory Name each file with the same name as shown below If you decide not to look at all of them you may load them in pairs of and The program reads data file You will need to change the path name in the Import module in the program to reflect the directory in which you copy The programs and also require the data file The first program is an example which shows how to scale rotate and translate an object Open the program and it control panel and execute it while changing the rotation translation and scaling of the simple object see Image The program also allows you to select whether the translate control transforms the object before the scaling and rotation or after them Note that as you rotate the object that positive angle of rotation corresponds to counterclockwise rotation if you are looking down the positive axis of rotation toward The object is defined to have the base of the arrows at so that the scale operation magnifies the objects but does not move the base Likewise the rotate operation which rotates around the origin leaves the base at the origin if translation is performed last Investigate the effects of changing the order of the rotate translate and scaling operations by using the operation order control and by modifying the program module order Image The second program is an example of hierarchically modelled animated object see Image The object is windmill constructed from propellor and tower The propellor in turn is make up of two blades hub and shaft Open the sequencer and run the program The QuadricSurface module gererates spheres cylinders and other shapes The shape is set by an integer The shape list may be found by clicking the QuadricSurface module then clicking on the Description button The import module reads the vertex list of cube from Edit the file to see what else is there Rotation of the whole tower is controlled by compute module with conditional in it to delay rotation Image The third example program combines polyhedra to make an interesting object see Image Open the control panel and run the program using the sequencer Note how multiple copies of objects are positioned Image Other Lab demonstration nets see Image see Image Image Image Assignment Using the three example programs as background construct one of the objects described below Use the various modules in the macros category which produce shapes such as NewQuadricSurface Also use the shapes defined in the file Animate the resulting objects as specified The animation should be to frames in length small Image window size perhaps will speed execution Construct one of helicopter with fuselage tail skids main rotor and tail rotor The tail rotor should rotate twice as fast as the main rotor The helicopter should sit on the ground until the blades are spinning then fly straight up propellor airplane on which the propellors rotate at the same rate The plane should have wings tail engines and cockpit canopy The plane should sit on the ground until the blades are spinning then roll forward and up flowering plant with stem leaves and flower The plant should grow and bloom The flower should be constructed from several petals There must be at least two leaves on the plant robot with head body arm and at least two wheels The robot must roll forward stop grasp an object and move it The head must have eyes or cameras which move together bird landing on tree The bird must have wings head eyes beak and feet The wings must flap and the feet must move as the bird lands Some examples from Some examples from Be prepared to demo your animation during section for maximum of minutes You will be graded on the correctness of the animation and the readability of the program You may want to MPEG compress your animation for rapid playback or if you wish to submit it to the course web pages You must document your code Layout small groups of modules which fit on one screen and connect them to other groups with transmitters You should use macros and comments in the Notation field of each module so that you and the grader can understand the program Control panels if any should be well organized labeled and with the appropriate numeric ranges The Lab grading guide will be filled out by consultant during section to evaluate your work Back to Main Page Go to Lab Last modified Land Copyright Statement	other	cornell
647	 Server Date Sunday GMT Sunday GMT Narcissism Central Attention This document contains frames and is meant to be viewed using browser which supports frames read Netscape If you want it GET IT	other	cornell
648	 Server Date Monday GMT Thursday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
649	 Date Mon Dec GMT Server Mon Apr GMT Lab CS Laboratory Design Project Introduction In this exercise you will use all of the techniques you have learned this semester to produce an animated scene The scene may include heirarchically modeled objects lights and camera control Assignment Produce scene which has several objects which move There should be at least one example of rotory or periodic motion and at least one example of linear motion You may want to mix animation with kinematic animation Some of the objects should have hierarchical structure and you should demonstrate use of polyhedra and parametric surfaces Lighting should be appropriate to your scene Surface properties should be controlled to simulate appropriate materials CA or reaction based texture maps may be appropriate for some objects The animation must start with title frame which includes title author and copyright notice The following program is one example of title page generator The the DX fonts look too thin in MPEG compressed animations or on videotape We have defined some better fonts To use them on the HP systems add the line below to your file setenv DXFONTS Then source your file To use them on the IBM systems add the line below to your file setenv DXFONTS Then source your file The fonts which are available once you modify the file in DX are named FutMath DutBld FutHvy LatNov SwiBld and SwiBlk FutMath looks good in MPEG compressed files The following are possible ideas but you are not limited to these tree growing robot spacecraft battle city street castle with waving flags and gate over moat sailboat on Cayuga Lake at sunset human or animal Be prepared to demo your animation in section You must hand in one page written description of your animation including both author names the title and brief summary of the plot and the techniques you used This document must be printed from Web page with no links that you design To demonstrate your animation you must mpeg compress it Directions for compression are here The mpeg file may not be longer than You may need to trade off frame size animation length and mpeg compression quality to achieve maximum file size of Grading will be based on several factors Amount of time spent on the project This is three week project implying approximately hours of lab work split between two people Variety of techniques used Did you exploit the information from the earlier exercises Clarity of the program You should be able to explain your program You should use macros and comments in the Notation field of each module so that you and the grader can understand the program Control panels if any should be well organized labeled and with the appropriate numeric ranges Be sure to see past year Lab animation results Back to Main Page Last modified Land Copyright Statement	other	cornell
650	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
651	 Server Date Sunday GMT Saturday GMT CS Course Staff Course staff Please induce you email address in your signature when you send email using the Web Instructor Eva Tardos Upson Hall email eva Teaching Assistants Heng Upson email heng Frederick Smith Upson Hall email fms Support Staff Linda Mardel Upson email mardel Office Hours Fall Office Hours DayTimeRoomInstructor Heng UpsonEva Tardos UpsonEva Tardos UpsonFred Smith Heng In addition you can schedule office hours by appoitment Send email to eva or to heng for an appointment	other	cornell
652	 Server Date Sunday GMT Sunday GMT Ooi Name Ooi Pronounced Office Upson Hall Office Hour am noon Office Tel Add weitsang TA for Advance Database System Taking Course My Home Page My Page	other	cornell
653	 Cornell Vision and Robotics Lab Some People in the Cornell Vision and Robotics Lab Here are some of the people working in the lab Jim Jennings Daniela Rus and Bruce Donald Click here to see Jim Daniela and Bruce in an altered state of consciousness Amy Briggs Russell Brown Kevin Newman Greg Whelan Camel Tommy Rosemary and Lily	other	cornell
654	 Server Date Sunday GMT Friday GMT Program Solution Program Solution decided to implement my bigint as define DIGITS typedef struct unsigned short array DIGITS int digits bigint will keep the least significant digit in index and the most significant digit in The implementation of my bigint library The Sterling approximation code Many programs saw used two loops to determine This was very inefficient you only need one loop	other	cornell
655	 Server Date Sunday GMT Monday GMT Project Report Kernel Endpoint HIGH PERFORMANCE COMPUTER ARCHITECTURE Final Project Kernel Endpoint for March May Ankit Patel and Gerry Toll apatel gtoll Project Description Kernel Endpoint for One drawback of is that it allow existing applications and kernel facilities to easily share the underlying network hardware with based applications There are at least two ways that this problem can be solved One idea is to implement the required services through library of user level functions that use as the transport mechanism Another approach is to actually construct an endpoint inside of the kernel and allow it to access the network hardware via the device driver We decided on the latter because in the long run it should provide more flexibility than the implementation Once the kernel endpoint is in place any type of data can be transmitted across the network regardless of protocol Additionally we may even be able to communicate with hosts if careful about using compatible header formats Our idea is to take advantage of the virtual network interface provided by the driver and to treat it as real network card inside of the kernel While any communication using the kernel endpoint will no doubt be slower than endpoints the idea is to allow many applications to multiplex on one kernel endpoint and for existing apps to at least idea is not to implement IP or other protocols but essentially to replace the kernel functions for sending data to an ATM or Ethernet card with routines which to the kernel endpoint Project milestones March Project Proposal We have met with Matt Welsh to get better idea of what this project will involve We believe that the best platform for this project will be on PC running Linux using Fast Ethernet hardware Ideally the abstraction provided by should allow our code to also work across the ATM hardware but whether this proves to be true remains to be seen and is beyond the scope of this project If time permits this would be natural extension to our work It is our understanding that the basic idea of this project is to provide the ability for the kernel to access the interface via the already written driver We will therefore be writing code to bridge the gap between IP and the device driver Our understanding through diagrams look at the Network Architectures April Checkpoint Meeting Setup of hardware Two pentium PCs are interconnected through Fast Ethernet using null modem Setup of software Linux as well as software is loaded on the machines the Kernel code has been compiled The pingpong application has been tested to run properly however sometimes CRC errors are received which are possibly due to absence of Fast Ethernet Hub and also the expected latency is not obtained With this basic setup we have divided the project into two basic parts so that each of us can concentrate on one of them implementation of devtulip and libunet driver that is implemented using Major issues decided to be solved Issue To create endpoint driver that can accept IP ICMP etc datagrams and passes them to the driver which then handles their transmission and receipt Issue To make one of the endpoints behave as the this requires changes to be made in the code to force the to the kernel issue requires thorough understanding of the architecture and driver code Issue To solve the problem of does the receive the packets from and hand it to the IP at the receiving end The kernel code needs to be scanned to find the right place for this changes Also an efficient method other needs to be implemented Issue requires that channel be created between two communicating hosts before they can exchange data We need to devise an efficient mechanism for activating and deactivating channels as needed Additionally we need to be able to map these channels to their corresponding IP addresses On large network we ca maintain channel per host but the overhead of activating channel is probably too substantial for us to activate and deactivate once for every transmitted packet Solutions for the above issues April Getting into the code hackers Here is the kernel code and the code go man hack it Issue The kernel uses generic device structure to represent all network devices We can construct new device struct and trick the kernel into believing that it talking to real network card We need large portion of the functionality provided by libunet but since we in the kernel we ca use it in its current form We have to rewrite what we need so that it will work inside of the kernel and add it to the module In order to get at all of the stuff we need and will have to be made global inside the kernel Issue April process while in kernel mode can still access memory through macros and is used if write protection is allowed in kernel mode for checking if the area is safe to write The works only in the kernel space and hence the above functions are not called while creating and deleting endpoints and channels Issue April uses polling at the receiving end From we need to pick up the packets and pass it on to the IP April We considered polling as time wasting and signals are not useful in kernels The IPC methods are useful only for communication between two processes the problem still remains April So we tried implementing an upcall function to pass the buffer and April However it turned out that mechanism is also not required Simply upcall when packet is received Almost no time waste Efficiency Increase April But stuck on problem again devtulip uses its own device structure Oh have to look through the higher level code no we think that the layers above IP need not worry about network devices so no more problems April Hey there can still be further increase in efficiency Can we pick up the incoming packets directly from the into the IP instead of passing them to the endpoints bypass the endpoint and handover the data directly to the IP So we consulted Matt Welsh who wishes to use our modified code later on for further extensions of Sure we can But we need our code to be portable for the ATM plus later on Matt plans to provide an interface which would let user processes multiplex via the kernel endpoint without the IP so its more flexible if the interface looks just like Conclusion use the endpoint Thus the only extra overhead involved is of copying the buffer once Issue Hey we need to leave something for the next class to do May Poster Presentation Project Status Well the semester is over with so whether we done or not the project is over with Unfortunately we ran into too many difficulties and we never finished The majority of the code is written and all of the major issues seem to be resolved Expected Overhead and Future Extensions Thanks lot to our Instructor Thorsten von Eicken for providing us with the opportunity and hardware to work on this project and Matt Welsh for maintaining his patience while explaining and the driver internals as well as providing us with guidance throughout this project Additional thanks go out to Alan Cox Michael Johnson and the mailing list for their assistance in solving our Linux namei problems Related Links For information on Home Page For information on Linux Linux Documentation Project All information related to is maintained at Ohio State in their online list of Internet RFC	other	cornell
656	 Server Date Sunday GMT Friday GMT KREC Class of hyperlinks KREC Class Of This page is maintained by Deepak Balakrishna If you have any comments or suggestions or if you belong to the Class of and you want your name added write to gbd If you have link to your own home page then send the URL over too Click on any of them and send mail directly Deepak GB His home page Krishna Chaitanya KC His home page Arun Kumar Shetty Deepak Shenoy Shenoy Vinod BC His Home Page Gayatri Raghavendra Gaga Harikiran Ganti Kuldeep Upadhyay KD Rajesh Narayanan Nadu Srinivas Nivarty Pondy Ravuri Rakesh His home page Anup Pai Santosh Wombu Himanshu Khurana khurana Ashok Karanth Ajja Prashanth Patti Karthik Shankarmani Mani Prashant Aprameyan Ravindra Rajnish Shukla Sudarshan suddi Nitesh Trikha Fartu Jasdeep Kaler Naveen Panchagatti panchi Sunil Shanbagh Sharath Chandra Keshava Pithi Minal Santosh Prahlad Athreya Ravi Nayak Vinay Chandra Father Simha Jayant Prabhu His Home Page Upendra Mody Anil Rai Chirinjeev Singh Cherry Somesh Nagthan Myna Raman Rachan Rao Shankey Yashawantha Rod Raghuraj Rao Sundar Sundari His home Page Also visit the KREC home page maintained by Arun Dattaram Sharma	other	cornell
657	 Server Date Sunday GMT Tuesday GMT Internet and WWW Advanced materials on Internet and WWW The Web Developer Virtual Library Advanced Topics HTML CGI HTTP etc The Webmaster Encyclopedia More on HTTP	other	cornell
658	 Date Mon Dec GMT Server Wed Feb GMT dynamics Using forces to animate objects Introduction There are several good reasons why you may want to compute motion of objects based on forces rather than attempt kinematic description of object motion It is often easier to write an expression for the forces on an object differential equation than it is to directly describe the motion Dynamic systems based on forces evolve automatically so than the motion is physically correct given the correct equations This automatic behavior relieves the animator of attention to lots of boring detail For chaotic systems it is impossible to write kinematic description Background The basis of many particle systems is description of the acceleration of the particles If the accelerations are given then the system is called second order because two integrations must be done to get the positions As an example consider mass on the end of spring sliding on frictionless horizontal table the force on the mass is given by where is the force is the spring constant and is the length of the spring The negative sign appears because the force from spring pulls in the opposite direction to the spring extension Since where is the acceleration Now given the acceleration and if we know an initial velocity and position we can find the position of the mass at any later time In the case of this linear spring we can integrate the acceleration directly to find that the position is sinusoidal function of time The constant will determine the frequency of the sinusoidal function while the initial position and velocity will determine the amplitude and phase The position is given by In this simple case the solution is available so one could code kinematic solution that is just plug time into the sin function but notice that the description of the system in differential form is more compact and straightforward Also if we changed the force to more realistic stiff spring model such as we could not directly integrate it but would be forced to use numerical methods The next section will consider how to perform the integration Numerical integration Solving dynamic system means figuring out how to move the system forward in time from some set of initial conditions to compute the positions as function of time For instance you might want of trace the trajectory of ball after it is fired from cannon In general direct analytical solutions of the differential equations governing system are hard or impossible We will outline some techniques for solving system by simple but perhaps not optimal numerical methods As disclaimer it is difficult to construct general numerical schemes that work for various physical systems What follows is specific approach which works for some systems Consider it the barest introduction to the topic of numerical introduction Much more detail may be obtained in or or many other books We will consider three specific second order systems gravitation Water waves Billards impact system For each system we will first introduce the physics the force law then the scheme to integrate the force law to produce the positions We will start with integration scheme which will be used only for intrducing the notion of numerical integration While useful to look at it should almost never be used for actual work The Euler integration algorithm Let me state again that this algorithm while easy to understand is so inefficient that it should only be used whem programming effort dominates throughput We want to start with differential equation and show how to integrate in numerically Start with the differential equation We want to solve this equation by stepping time discretely forward in small steps small still needs to be defined One discrete approximation of this equation is where the and refer to two time steps sufficiently close together that the differences approximate the derivitive Rearranging this equation yields which gives explicit form for stepping the system from time to time This form is thus way to step dynamic system forward in time given an initial state The inefficiency of this method occurs because of the assumption of constant across the entire time step To be accurate the time step has to be very short compared to the natural time constants of the system The Verlet integration algorithm much better alogrithm can be derived by averaging slopes across the small time interval of integration One such formulation is called the velocity form of the Verlet algorithm This algorithm is most useful for second order systems where the force on an object is specified and the position is desired as function of time Since the accelerations are specified one integration must be done to calculate the velocity and second done to calculate the position The Verlet scheme is first updates the position then use the old and new position information to update the velocity Where are the accelerations calculated from force law describing the system and which are usually function of position Note that an is calculated from the calculation for xn Evaluating both of these equations advances the system one time step To start the solution velocity and position have to be known at Choosing delta requires some care Generally you can start with time step which is around of the fastest in the system The two Verlet equations can be vector equations if the motion is or dimensional Now we are ready to consider some specific physical systems Gravitation and the problem The accleration due to gravitating mass is where is strength contant is the mass of the object pulling on you and is the distance between you and Since and are actually vectors we must derive form of this equation which is useful in or dimensions We will use here so we need equations for the and components of the acceleration Assuming body one is located at and body two is located at and that we want the acceleration of body one Where theta is the angle measured from the of the vector pointing toward body one from body two Converting to Cartesian form the acceleration of body one is where the vectors The calculation procedure for each time step is to compute the acceleration based on the positions at time new set of positions using the Verlet method the acceleration at time based on the newly computed positions new velocity from the Verlet method using the acclerations at times and For the gravitational animation given at the beginning of this page three masses were simulated The accleration of each mass was determined as the vector sum of the accelerations caused by each of the other two bodies Water Waves The water wave solver presented here is based on the derivation in Kass and Miller for the case of shallow water low amplitude waves The form of the resulting equation of motion for the waves looks like the classical linear wave equation with propagation velocity proportional to the depth of the water where is the height of the water surface and is the depth that is where is the vertical position of the containing vessel or ocean bottom at The costant is poroportional to the force of gravity This partial differential equation can be discretized in many ways We will use method which is stable enough to be acceptable for computer graphics First note that the partial with respect to time is the acceleration of small surface element of water so that if the right side of the equation can be put in discrete form we can apply the Verlet method to grid of bodies each representing small chunk of water To solve this equation numerically we need to discretize it both in space on two dimensional grid and in time The discrete spatial approximation is that the second derivitives at time are were and are the grid indices in the and directions and is the time index Note that at the edges of the array the discrete partial derivitives depend on values outside the array These boundary conditions need to be specified for solution One easy boundary condition corresponding to no transport across the coundary is to copy the value at the edge of the array whenever value outside the array is needed It seems that the solution is more stable if the minimum depth of the water is limited to about of the average value rather than letting it go to zero So the depth at time is given by To get the surface motion first assign an initial height and vertical velocity to each grid point then at each time step compute the acceleration based on the water heights at time new set of positions using the Verlet method for each the acceleration at time based on the newly computed heights new velocity from the Verlet method for each Ensure conservation of volume of the total volume by adjusting the average water height to constant That is sum all the heights over the whole grid then correct the sum to equal the initial sum by adding small increment to each grid location These steps are repeated to generate moving waves Disclaimer While this integration method seems to give visually reasonable results it should not be used for analytical simulations without careful validation The wave equation is notoriously hard to integrate using explicit techniques like the one described here Billards billards hard ball system is different than the other two systems just described because the forces between balls are zero until they touch and become very large if the balls try to pass through each other This means that there is large impulsive force just when the balls meet and at no other times The Verlet integration scheme will fail badly on this system because the accelerations are large for short time and thus not smooth enough to average What we will do to step the billards system forward in time is to calculate the total change in velocity from collision without worrying exactly how forces change the velocity The method described here is less exact version of that described in The method described in the paper steps time at uneven intervals and is thus unsuitable for animation My modification steps time uniformly at the expense of exact collision dynamics The change in velocity during impact can be derived for frictionless balls of equal mass by noting that the the impact force must act in direction parallel to the line connecting the centers of the two impacting balls The change in velocity must be parallel to the connecting line also with the velocity component parallel to the line having its sign reversed by the collision and the velocity component perpendicular to the line unchanged Projecting the initial velocity onto the line connecting the centers negating the result and resolving it back into and velocity components gives the velocity change If and are the indices of the colliding balls define then delta for ball is given by the following where the term represents the projection of the velocity onto the line and the other term converts the projection back to coordinates The calculation procedure for each time step is to compute the delta based on the positions of the balls new set of positions using if walls are present detect collisions and modify velocities The time step needs to be small enough so that the balls do not penetrate each other too much during one time step References An Introduction to Computer Simulation Methods Part by Harvey Gould and Jan Tobochnik Rapid Stable Fluid dynamics for Computer Graphics by Micheal Kass and Gavin Miller Computer Graphics Vol Aug pp Numerical Recipes by William Press Saul Teukolsky William Vetterling and Brian Flannery Cambrige edition Studies in Molecular Dynamics General Method by Alder and Wainwright Journal of Chemical Physics Vol Aug pp Physics for students of science and engineering Part by Robert Resnick and David Halliday Wiley Comments about Theory Center online documents are welcome and may be sent to Last modified Land Copyright Statement	other	cornell
659	 Server Date Sunday GMT Thursday GMT JPEG Encoding Using Perceptual Quality Multimedia SystemsJPEG Encoding using Perceptual Quality Nobuhiko Mukai mukai Lucy Wu yuwu Mikio Sakurai msakurai Abstract The key point of image compression is to achieve low bit rate in the digital representation of an input image or video signal with minimum perceived loss of picture quality Over the past several years there have been many attempts to incorporate perceptual masking models into image compression system Based on the we developed two new models Compared to JPEG default setting both of our models significantly lower the and keep the almost same image quality Introduction The key point of image compression is to achieve low bit rate in the digital representation of an input image or video signal with minimum perceived loss of picture quality Since the ultimate criterion of quality is judged or measured by the human receiver it is important that the compression or coding algorithm minimizes perceptually meaningful measures of signal distortion JPEG default quantization tables QT are based on psychovisual thresholding and are derived empirically But because only one QT is available for every image the default QT is image independent and can not be used to achieve the optimized compression result for each specific image Some perceptual models have been developed to calculate the image dependent QT But because every block in the image contributes different properties to the total image one QT that is best for the whole image is not always best for every block If we can quantize every block using different QT specifically suitable for that block we can get the most optimized compression result for every block Because JPEG allows only one QT for each image is proposed by Johnston and Safranek For every block one specific masking threshold is calculated and used to zero out the perceptual irrelevant coefficients while the other coefficients passed unchanged Then one base QT will be finally used to quantize for all the remaining coefficients in each block Despite the benefits of simple implementation the model has the disadvantage of computing single masking elevation for each input block This means that there is no information about the distribution of energy within the problem can be overcome by applying the contrast masking model for each DCT coefficient The computation for is somewhat complex This led us to design second one based on the luminance ratio of block to total image to replace the model This second model has the same single masking elevation problem but the calculation is more simple Our test result shows compared to the JPEG default setting both of our models reduced the bit rate with little or no perceived loss in quality The rest of this paper is organized as follows Section describes algorithms to prequantize JPEG image Section describes two perceptual models designed by us Section describes the detailed evaluation of our models and section reviews related work and future extensions Prequantization Quantization The Baseline JPEG encoder consists of three major components Forward DCT Quantization and Entropy Coding The step of the quantization is to take the raw output of the DCT and quantize the coefficients by dividing it coefficient by coefficient by QT and rounding to the nearest integer The purpose of quantization is to achieve compression by representing DCT coefficients with no greater precision than is necessary to achieve the desired image quality In other words the goal of this processing step is to discard information which is not visually significant Perceptual Model Many studies have attempted to derive computational model of this visual masking level For each block in the input image the model attempts to determine to what degree the features present in that block inhibit the visual system from the distortion introduced by the process From these points it is possible to determine masking threshold for each DCT coefficient model Johnston and Safranek have developed framework for computing locally adaptive masking model based on an engineering framework They assume that the total masking level for any block of the input can be represented as base masking level and other multiplicative elevation factors that represent the contribution of input dependent properties of the visual system to the total mask This model may be expressed as Global Local where is the masking level for frequency of the input block Global is the base masking level which depends only on global properties and Local handles the image specific local variation in the masking threshold The adaptation is derived as function of the block standard deviation using the following formula Figure model This applies to all of the AC coefficients The masking elevation for the DC coefficient is always set to unity This model has the advantage of simple implementation and works well in practice It has the disadvantage of computing single masking elevation for each input block Figure illustrates the structure of such an encoder The forward transformation is identical to the one in baseline JPEG At this point the DCT coefficients are input to the perceptual model which generates the data dependent quantization table for that block This table and the raw DCT coefficients are now input to The purpose of this module is to zero out the coefficients that have magnitude less than the corresponding entry in the quantization table for that block and pass the other coefficients through unchanged Finally these prequantized coefficients are quantized and entropy coded as in standard JPEG In the dequantization step only the base QT is used Figure structure of an encoder with prequantization Our Models Our models intends to take advantage of the above prequantization method The model uses the perceptual model but does not consider the distribution of the energy within the block when calculating the masking threshold To overcome this problem we employ visual masking that has been widely used in vision models based on work by Legge and Foley Given DCT coefficient and luminance threshold the masked threshold is MAX is constant that lies between and When no masking occurs and when we have Weber Law behavior For our experiment an empirical value of was used In our implementation to calculate the masking threshold we did not calculate the luminance threshold by using Peterson model as suggested by Watson In addition as indicated in JPEG standard JPEG default quantization tables are based on psychovisual thresholding and are derived empirically If it is divided by the almost indistinguishable image can be reconstructed That means the default QT can be treated as general luminance threshold So we replaced the in equation by JPEG default QT value As Global masking level we used default JPEG QT The masking threshold computation for is rather complex This led us to design the second model based on the luminance ratio of block to total image This model has the same single masking elevation problem but the calculation is more simple Basically follows the masking model equation But for the calculation of multiplicative elevation factors Local we use the luminance ratio of each block to the total image Well known Weber Law is expressed as df constant is luminance and df is the just noticeable difference This equation means our perception is sensitive to luminance contrast rather than the absolute luminance values themselves At given luminance if the block luminance is only little bit differ from luminance then the block is less visible and we can drop lot of perceptually unimportant information The adaptation is derived as function of the ratio of the block average luminance to the luminance average of the total image using the following formula Figure model masking model based on luminance ratio Maximum threshold elevation and Minimum Threshold Minimum luminance ratio are the parameters we need to experiment for As Global masking level we used default JPEG QT Image Quality and Bitrate We compared the bitrate and Image quality of our and with those of the Baseline JPEG For first we need to optimize the parameter We worked on several images and found that these two parameters are not strongly sensitive to SNR To the different value of luminance ratio parameter SNR is almost elevation parameter has weak relation with SNR and if it gets bigger SNR becomes worse This feature is common to all images Table shows result we got on image Lena Table Parameter dependence of SNR For the following experiment we choose the preferable value and for each parameter of Five images were used in this experiment photo of human face Lena flower scene flowers photo of animal face baboon two photo of airplane and Pitts Bitrate is calculated after compressing the image file using the pack huffman coding program For the evaluation of the image quality we used two evaluation method The first is SNR signal to noise ratio In order to provide further insight into the subjective quality of the models we used DCON metric This algorithm takes as input two images reference and test compare the difference of luminance pixel by pixel The formula is as follows DCON sum This method is simple but very competitive with other complicated human eye model metric Table summarize the results of these experiments Table Image quality SNR DCON vs Bitrate Both our and compress better than the Baseline JPEG with almost no perceptual loss in quality Figure shows one example flowers of output image of our models in comparison with original image and that of Baseline JPEG original image Baseline JPEG model model Figure sample image comparison Related work and Conclusions There have been many attempts to incorporate perceptual masking model into image compression systems model and Watson model are perhaps the most well known perceptual model model has investigated locally optimized prequantization table Watson model has investigated image dependent masking model which incorporates not only global conditions but also accounts for local contrast masking Klein of optometry school has reported techniques for improving the quality of JPEG with high compression rate in viewpoint of vision community He suggests that with improved human vision models the quantization step could be made more effective by considering effects such as mean luminance color bandpass filters in frequency and orientation contrast masking and human contrast sensitivity The primary contribution of our work is that it details prequantization algorithms that compress images at high compression rate with minimal artifact Our future work will include extending this work to include other human eye related factors such as frequency and orientation References Johnston and Safranek Perceptually Tuned Image Coder With Image Dependent Quantization and Data Compression Proc ICASSP Glasgow Scotland May pp and Contrast masking in human vision Journal of the Optical Society of America and DCT quantization for color image compression SPIE Human Vision Visual Processing and Digital Display III Watson DCT quantization matrices visually optimized for individual images SPIE Human Vision Visual Processing and Digital Display IV Vol Daniel Fuhrmann John Baro and Jerome Cox Experimental evaluation of psychophysical distortion metrics for images SPIE Human Vision Visual Processing and Digital Display The visible difference predictor an algorithm for the assessment of image fidelity SPIE Human Vision Visual Processing and Digital Display III and The effects of visual fidelity criterion on the encoding of images IEEE Transaction on Information Theory Stanley Klein Amnon Silverstein and Thom Carney Relevance of human vision to compression SPIE Human Vision Visual Processing and Digital Display III postscript file File last modified December	other	cornell
660	 Server Date Sunday GMT Monday GMT Summary of Nuprl Theories Summary of Theories Each link below leads to formatted presentation of Nuprl theory description of the organization of these presentations and of the meaning of the triples after each link name can be found here Display forms for primitive terms of Abstractions for correspondence Parenthesization control definitions and theorems predicate Rank induction lemmas and tactics Integer inequalities subtypes and induction lemmas for subtypes Definitions theorems and tactics for the boolean type and expressions Polymorphic identity and composition functions Lemmas covering properties suchas injectivity and surjectivity Defines mod floor max and min functions over the integers Lemmas concern basic properties of arithmetic functions over integers and induction principles Properties of order and equivalence relations and of algebraic functions commutativity associativity Family of classes for types with computable equality and inequality relations Family of classes for monoids and groups Summations with indices from integer subranges Exponential functions Introduces the binary relations on lists is permutation of is permutation of up to and is equivalent up to Introduces variety of standard functions that assume that list elements come from type or monoid with decidable equality Family of classes for rings integral domains and fields Ideals and quotient rings Sums and products mset Finite multisets and finite sets Summation with indices drawn from multisets Defines ADT for free abelian monoids and demonstrates an instance of this ADT using multisets Divisibility theory for monoids with cancellation Develops theorems characterizing when factorizations are unique and derives from these the fundamental theorem of arithmetic Last modified February Paul Jackson jackson	other	cornell
661	 Server Date Monday GMT Thursday GMT Zeno People The Few The Proud the really really cool Faculty Brian Smith PHD Students Soam Acharya Sugata Mukhopadhyay Jonathan Swartz Ioi Lam Tibor MEng Students Scott Dawson David Koster Will Lee Jeff Moore Jody Shapiro Eric Shim Ankit Patel Undergraduate Students Alex Castro Leong Kian Fai David Koster Mike Perham Eric Scharff Sherrie Wu	other	cornell
662	 Some Papers With Geometric Flavor Some Papers With Geometric Flavor publisher CORNELLCS series any number any author Donald title any abstract any CORNELLCS Simplified Voronoi Diagrams John Canny and Bruce Donald CORNELLCS The Complexity of Planar Compliant Motion Planning Under Uncertainty Bruce Donald CORNELLCS Planning Error Detection and Recovery Strategies Bruce Donald CORNELLCS Geometric Approach to Error Detection and Recovery for Robot Motion Planning With Uncertainty Bruce Donald CORNELLCS On the Complexity of Kinodynamic Planning John Canny Bruce Donald John Reif and Patrick Xavier CORNELLCS Provably Good Approximation Algorithm for Trajectory Planning Bruce Donald and Patrick Xavier CORNELLCS Planning and Executing Robot Assembly Strategies in the Presence of Uncertainty Bruce Donald CORNELLCS On Computing the Homology Type of Triangulation Bruce Randall Donald and David Renpang Chang CORNELLCS Provably Good Approximation Algorithms for Optimal Kinodynamic Planning for Cartesian Robots and Open Chain Manipulators Bruce Donald and Pat Xavier CORNELLCS Robot Motion Planning Using Rasterizing Computer Graphics Hardware Jed Lengyel Mark Reichert Bruce Donald and Donald Greenberg CORNELLCS Mathematical Questions in Robotics Roger Brockett John Ballieul Bruce Donald Richard Murray Madhusudan Raghavan and Shankar Sastry CORNELLCS Sensor Interpretation and Planning Using Perceptual Equivalence Classes Bruce Donald and Jim Jennings CORNELLCS Rational Rotation Method for Robust Geometric Algorithms Extended Abstract John Canny Bruce Donald and Gene Ressler CORNELLCS The EIGHT Manual System for Geometric Modelling and Graphics on the Lisp Bruce Donald CORNELLCS The Motion of Planar Rigid Bodies in Contact With Applications to Automatic Fastening Bruce Donald and Dinesh Pai CORNELLCS On Information Invariants in Robotics Bruce Randall Donald Some other papers are listed here More papers are avalable through the Cornell CS TR server	other	cornell
663	 Server Date Sunday GMT Tuesday GMT Slide Transitions and Special Effects for Rivl by Jose Luis Fernandez Valerie Ohm Amith Yamasani Next	other	cornell
664	 Server Date Monday GMT Friday GMT Document Listing NCSTRL Documentation Documents to Peruse For more information about NCSTRL Who and what is NCSTRL anyway How do participate in NCSTRL like to know more about the handle service which is used for document naming in NCSTRL Installing and maintaining an site sites run Dienst server which manages their document collection allows searches on it and provides user interface gateway to the entire NCSTRL collection How do download and install the Dienst software Once am up and running how do keep my document database and Dienst server running smoothly How do find out and install new releases When you register your site with NCSTRL you will be added to the NCSTRL mailing list New release announcements will be sent to this list Check out the release notes for history and status of current Dienst releases Check out the releases directory for detailed diff between releases Read the tips for upgrading to new release Installing and maintaining an site sites maintain an FTP archive of their documents and bibliograhic files Dienst central indexing server collects the bibliographic files and allows searching over them How do participate and download the software to become site Using NCSTRL like some more details on searching for documents More technical information An overview of the NCSTRL architecture An article about NCSTRL from Magazine The Dienst protocol upon which this service is based See also the user interface methods The original Dienst technical report Another Dienst technical report describing the Dienst architecture technical report about WATERS the technical foundation for Related Sources of CS Material on the Internet Check this out for other sources of CS material on the Internet Acknowledgements This work was supported in part by the Advanced Research Projects Agency under Grant No with the Corporation for National Research Initiatives CNRI by the National Science Foundation under Grant No and by Xerox Corporation Its content does not necessarily reflect the position or the policy of the Government or CNRI and no official endorsement should be inferred Return to NCSTRL home page NCSTRL Documentation Any comments or questions Contact us at help	other	cornell
665	 Server Date Sunday GMT Verification CAV Verification CAV FLoC and CAV home pages including technical programs and registration information	other	cornell
666	 Server Date Sunday GMT Thursday GMT project report draft User version Report version	other	cornell
667	 Server Date Sunday GMT Saturday GMT Amith Yamasani Bookmarks Amith Yamasani Bookmarks Yama Den Local Yama Den Home Pages Satyaprasad Devireddy Home Page Bruce Land Course Pages Home Page Lab Main Page Yama Den ComputerGraphics DatabaseSystems Multimedia CS Home Page VLSI Cornell Department of Computer Science Yahoo HTML Beginner Guide to HTML Executing Shell Scripts Inside Mosaic An Information Provider Guide To HTML How to write HTML files HTML Quick Reference Changing Your Home Page NewsGroups News Graphics CAVE User Guide OpenGL WWW Center MPEG Movie Archive Daniel Icon Archive Movie Studio MAIN The WWW Graphics Page Fave Links Silicon Graphics Silicon Surf The Web Virtual Library Games and Recreation Star Wars Home Page at UPENN Organizations Quantum Corporation WWW Server Microsoft Corporation Server Job sites CareerMosaic Page Search Jobs Online Career Center Best Bets in Business Career Taxi Home Page Welcome to careerWEB Interactive Employment Network The Advisor Vol No TOC The Advisor Home Page NCSA Mosaic for Documentation Motif The Window System Motif home page Languages Annotations Table of contents for FAQ on Design in References The Programming Language for and OOP The Bookpool Information Programming Languages Resources OpenGL at IBM OpenGL WWW Center Widget Basics Catalog of compilers VHDL TCL WWW Info Music Music FTP Jukebox FTP archive index search form Music FTP Hoyts Movie Schedule Pyramid Mall	other	cornell
668	 Date Sun Dec GMT Server Wed Nov GMT CTC Advanced Computing Research Institute CORNELL UNIVERSITY Advanced Computing Research Institute To learn about the Advanced Computing Research Institute the ACRI click here	other	cornell
669	 Server Date Sunday GMT Monday GMT Parallel CM RIVL Parallel CM RIVL Step Towards Multimedia Processing Jonathan Barber barber Sugata Mukhopadhyay sugata Final Project Professor Thorsten von Eicken Department of Computer Science Cornell University Table of Contents Abstract Introduction RIVL and the Generic Parallel Paradigm The RIVL Graph Parallelizing RIVL Continuous Media Parallel RIVL Implementations Shared Memory Implementation Networked Implementation Implementation Caveats Performance Results Extensions and Robustness Conclusions References Go Back Abstract Any form of multimedia processing is typically computationally expensive An even harder problem is performing some form of multimedia processing on multiple continuous streams of data In such paradigm each frame in sequence of images incurs very large computational expense An obvious yet difficult solution is to divide up the problem and compute the solution in parallel This paper details the nature of the problems and the solutions for dealing with parallel multimedia processing in both shared memory and distributed environments Click here to view presentation of this paper Go Back Introduction The Evolution of RIVL Over the course of the past two years large effort has been mounted to develop applications that can efficiently and reliably process multimedia data The effort manifested itself with the construction of RIVL Resolution Independent Video Language RIVL is multimedia processing package that given set of images or set of sequence of images can efficiently process these multimedia streams and generate an outgoing image or sequence of images RIVL is implemented as tcl extension that is capable of performing common image operations such as overlay smoothing clipping cropping etc The tcl interface simplifies the process of coding an image processing script Recently RIVL has been extended to process continuous streams of multimedia data and generate corresponding output stream of images The extended RIVL package called CM RIVL was made possible by treating RIVL evaluation as midpoint in continuous media object This work was facilitated by using CMT The Continuous Media Toolkit Image processing continuous streams of media in is very hard problem considering today current state of computer technology Performing even simple image ation over single sequence of images and outputting the resultant image in requires on the order of million CPU cycles To approach of frames per second which is the standard for perceiving continuous motion would require one of the following items to be true to be able to perform image processing operations in less than linear time on single processor to be able to utilize technology that does not yet exist to be able to divide up the work and perform the image processing in parallel to achieve less than linear time performance Since we have little or no control over the first two items we have focused our efforts on the third Most image processing routines can be performed in time if the work is divided among an array of parallel processors This is true for RIVL and also for CM RIVL Bearing this in mind we established the project goal to develop an fast and inexpensive multimedia processing application In Section we describe generic method for parallelizing most of the image operations in RIVL by exploiting the way that RIVL processes an inputted set of images In Section we describe two implementations of Parallel CM RIVL PRIVL The first version is designed to run on shared memory machines The second version is designed to run over cluster of Workstations In Section we present an analysis of performance results In Section we describe some improvements to our implementations Finally in Section we draw some conclusions and analyze our progress Go Back RIVL and the Generic Parallel Paradigm Go Back The RIVL Graph We begin our discussion of RIVL by introducing the RIVL Evaluation Graph In order for RIVL to execute it requires set of multimedia input data and control RIVL script The RIVL script is sequence of commands that specify what image processing operations should occur on the input data Once RIVL is invoked the RIVL script is translated into the RIVL graph as pictured above Each node corresponds to some image operator etc and each edge or signal corresponds to the actual image data Those nodes lying inside of the illustrated rectangle above correspond to true image operators Those nodes lying outside of the rectangle are the RIVL nodes The nodes outside and to the left of the rectangle correspond to read nodes one per image or stream and the node to right of the rectangle corresponds to the write node We want to emphasize that construction of the RIVL graph does not compute on any multimedia data The RIVL graph is merely the structure through which each inputted sequence of data must propagate to generate the outputted processed image There are two phases in processing data using the RIVL graph once it has been constructed The first phase manifests itself in graph traversal from This is what makes RIVL an efficient image processing mechanism The first node that is evaluated is the Write node the node By traversing the graph in RIVL decides at each node exactly how much data the output signal requires from the input signal The evaluation is from the write node through the graph and back to every read node Once the completes every node in the graph knows exactly how much data from each input signal is required to compute the node corresponding output signal The multimedia data is then processed on the second traversal which conforms to traversal of the RIVL graph propagating the input data forwards through the graph only operating on data that is relevant to the final output image Go Back Parallelizing RIVL We can summarize the preceding section into the statement that the amount of data that is fetched from each Read node is exactly function of the output of the Write node Combining this notion with the fact that most of the image processing operations in RIVL do not create dependencies from one pixel to another in given input image we can derive simple for mechanism for dividing up the work and parallelizing RIVL Instead of running RIVL on single processor we spawn multiple RIVL processes on different processors and have each process work towards computing different segment of the output data We define the notion of single Master RIVL process and multiple slave RIVL processes Each slave process is started on different processor Once started the slave process sits idle listening for instructions from Master process After the slave processes have been started Master process is created The Master Process determines how many slaves are available for work Once control connection is established between the Master and every Slave the Master assigns each slave logical ID the Master ID is the Slave ID ranges from to slaves After each slave is assigned an ID the Master sends each slave the total number of processes available for work followed by copy of the RIVL script Once each slave and the master receives the RIVL script they each generate copy of the RIVL graph and perform the left traversal independently The difference between the traversal now is that the logical ID for the current processor and the total number of processes becomes factor in determining how much computation gets done for each process According the figure above the amount of data fetched from each read node is no longer function of the output of the write node but is now function of the process Logical ID the total number of processes and is function of the write node output That is each RIVL process is responsible for computing different independent portion of the final output data which is based on the above parameters Hence the term Parallel CM RIVL Our approach is in that each RIVL process performs the same set of computations on different data Actual data computation the graph traversal occurs when the master says go Each slave and the master process computes their appropriated portion of the output image Go Back Continuous Media Parallel RIVL The model of parallelization for RIVL just described maps smoothly to CM RIVL With CM RIVL there is an initial setup phase for each slave process and the master process as previously described the Master process sends each slave its logical ID the total number of processes and copy of the RIVL script Each RIVL process then computes the RIVL graph and makes the traversal The image processing for computing each output frame in continuous media stream occurs as follows There is CMO Continuous Media Object which captures and manages continuous streams of data and resides as part of the Master Process When the CMO has captured all of its input data for single output image it contacts the master Parallel Synchronization Device and tells each RIVL process slaves and the Master that data is ready to be fetched and that computation can begin ASAP Each RIVL process then fetches only the input data it needs to generate its segment of the output data and makes the traversal through the graph The output data from each RIVL process is then written back to buffer within the CMO where the data is into single object Each RIVL process then blocks listening for further instructions from the CMO as to when another image will be ready for processing Using this method for given stream of multimedia data the construction of the RIVL graph and of the graph are performed only once at The actual image processing only requires one traversal of the graph on each RIVL process where the computation area is distributed among all of the RIVL processes Go Back Implementations Based on the generic parallelization scheme described in the preceding section we have developed two implementations of Parallel CM RIVL Each implementation has its own synchronization mechanism for parallelizing the independent RIVL processes and its own mechanism for transferring data Go Back Shared Memory Implementation The implementation is illustrated above Each RIVL process resides on different processor but each processor resides on the same machine which has access to the same shared memory segment This implementation mirrors the generic parallel model described in Section Implementation Details The initial setup is facilitated by using via The Process synchronization is facilitated using UNIX semaphores The Data Transfer is facilitated using reads and writes via The Program was compiled for SparcStation running SunOS This model operates as follows Following the initial setup phase the CMO works at capturing all data necessary to compute single RIVL output frame Once the CMO captures all the necessary data it tells each RIVL process to begin processing by means of an entry semaphore Each RIVL process then reads only the data relevant to its own output via read Once the evaluation of the RIVL graph completes the RIVL process then performs write to the memory region containing the output image that is accessible by the CMO The RIVL process then blocks at an exit semaphore until all of the RIVL processes complete computation for the same frame of data Once every RIVL process blocks the master RIVL process the exit semaphore and each RIVL process waits again at the entry semaphore until the CMO again releases it Go Back Networked Implementation The networked implementation is illustrated above Each RIVL process resides on different processor and each processor resides on different machine This implementation also mirrors the generic parallel model described in Section Implementation Details The initial setup is again facilitated by using via The Data Transfer is facilitated using over The Synchronization Mechanism is implicit via the paradigm The Program was compiled for SparcStation running SunOS This model operates as follows Like its counterpart this model performs the initial setup using IP multicast to establish the Active Message connections from the master to each slave RIVL process The CMO works at capturing all data necessary to compute single RIVL output frame This model differs from the in that the master process knows exactly what portion of the input data each RIVL process needs to evaluate their RIVL graph Once the CMO captures all the necessary data it tells each RIVL process to begin processing by issuing to each RIVL process Once the message is received by each RIVL process handler is invoked which tells the RIVL process that it can begin evaluating its RIVL graph on the transferred data Once the output data is computed the RIVL process then issues to the Master process specifying exactly where the sent data should be stored in the final output image buffer managed by the CMO Eventually handler routine in the Master process will update list Once the Master receives data from each RIVL process the CMO outputs the computed frame and begins processing the next multimedia frame The process synchronization mechanism is implicit with the actual in that RIVL process can not begin evaluating its graph on given frame segment until it receives an from the Master process Similarly the Master process can not move on to the next multimedia image until it receives an from each slave process Another subtle point is that by having the Master determine how much of the input data each RIVL process requires rather than having the RIVL process itself determine this information we reduce the communication rate from master to slave Having each RIVL process compute its own region would require followed by by the Master process Instead the Master decides how much data each RIVL process needs and simply issues single Go Back Implementation Caveats Our actual executables are not SPMD There is separate executable for the Master process and another executable for each Slave process This did cause any problems when developing the implementation However since ver assumes SPMD model we ran into problems when specifying AM handlers in both the Master process and the Slave processes When the Master process received from any slave process the slave process attempted to invoke an AM handler in the Master that existed in the slave but not in the handler The situation was the same when slave process received an Active Message from the Master We overcame this shortcoming in by modifying the source code The modification allows an application to register handler with by calling hid handler handler corresponds to the handler virtual address The process returns an hid which is an integer but stands for handler ID In our implementation since only the Master executable and slave executable are different the Master and each slave must register their handlers with the Message library Now when process sends an Active Message from slave to master and vice versa it no longer ships the processes virtual address of the handler but rather ships logical ID corresponding to the handler to be invoked The library maintains table that is indexed by the logical ID The logical ID corresponds to process handler virtual address which is then invoked from Go Back Performance Results We ran our experiments on SparcStation running SunOS Our Networked Implementation was tested by using SparcStation running SunOS We constructed two different test cases named Test and Test The two tests perform the following image operations Test There are input sequences of images The first image sequence is scaled rotated and copied four times The resulting output is then overlayed onto the second image sequence and then output Test There are input sequences of images is scaled rotated and copied four times is smoothed The output from is then overlayed ontop of the output for Overall Test is more computationally expensive set of operations than Test This fact is illustrated by our experimental results From our graphed results above the implementation performs somewhat better than our Networked implementation Both implementations however perform better than their serial counterparts the green bar graph One observation was that the networked implementation exhibited large spread of timings for different frames and this we attributed to our process getting preempted The behavior was not visible on the shared memory implementation as our process was sleeping waiting for the semaphores to change while the process in the network implementation Hopefully an interrupt driven implementation of active messages would cure this Note In all tests the processor speed is relatively equal Results Shared Memory In both tests and the performance gains exhibited the following patterns From to Processors Performance is nearly doubled From to Processors Again our performance is nearly doubled From to Processors The performance increase is negligble Performance is not increasing either because the communication overhead exceeds the performance gain or because the processors are probably the latter Networked Implementation From to Processors Performance is nearly doubled From to Processors There is small improvement in performance however the shared memory implementation appears to do little better From to Processors The performance increase is again negligble The explanation for this is probably the same as in the shared memory experiment Go Back Extensions Robustness There are number of improvements that can and should be made to improve overall performance and robustness of our parallelization scheme Improve the The largest improvement involves improving the among all of the by using Hungry Puppy Strategy for dividing up the work Our current implementations statically allocate work to each RIVL process The location and the amount of data that is needed for each RIVL process is determined as function of the number of processes and the process ID As indicated from our experimental results there is no significant boost from to RIVL processes using our implementation We can partly attribute this problem to an load balance Modifying the Networked implementation should prove more and while improving the overall will probably increase the communication overhead as more will have to be sent and processed Modifying the version should be easier The current synchronization mechanism is implemented by using UNIX semaphores No RIVL process is allowed to begin executing the next frame until all RIVL processes have completed execution of the current frame The is currently divided up by the number processes available for work We could improve the for this implementation by doing two things by dividing up the work regions into more numerous smaller segments and for current frame allow RIVL processes to complete executing their output segment and grab another segment from the Queue residing on the Master process This implementation will improve by allowing processes to contribute equally to the entire output image while giving busier processors the time they need to compute their data without becoming bottleneck for the entire output image Improve Reliability and In systems it is not uncommon for things to go wrong Specifically what should happen in the even that slave RIVL process crashes Our current implementations do not account for such mishaps If process were to malfunction due to either hardware or communication failure our implementation would fail Port our Implementations over to Fast Ethernet PC In designing any system cost is always an issue The purpose for implementing PRIVL over was to utilize the lower cost of workstations and networks as compared to expensive parallel machines The cost of higher performance PCs is rapidly on the decline Adapting our implementations to Fast Ethernet is natural step in reducing the cost of CM PRIVL The actual transition from to Fast is merely matter of getting to work over Fast Ethernet Go Back Conclusions We were looking for significant speedups in Parallel CM RIVL as we moved from to processors being no more than Our results are definitely encouraging In both our implementation and our networked implementation we obtained good speedups up to four processors In order to process data we need to approach rate of close to frames per second or rougly ms per frame For the operations we have tested we will require upwards of similar processors to achieve the desired frame rate We do not have results for more than four processors However by examining our results we can determine that under the current implementations the processes running Parallel CM RIVL will not be Unfortunately we must conclude that our implemenations as they stand will not scale to upwards of processors to achieve the desired frame rate However further work is under way to address this problem Furthermore algorithm is currently being incorporated into PRIVL The experimental results from this should be available shortly We have however made significant progress in parallelizing CM RIVL CM RIVL is application and our parallelization scheme works for most of the standard RIVL image operations Go Back References Jonathan Swartz Brian Smith Resolution Independent Video Language Proc of the Third ACM International Conference on Multimedia San Francisco CA November Lawrence Rowe Brian Smith Continuous Media Player Third International Workshop on Network and Operating Systems Support for Digital Audio and Video San Diego CA Brian Smith Lawrence Rowe Stephen Yen Tcl Distributed Programming Proc of the Workshop Berkeley CA June von Eicken Culler Goldstein and Schauser Active Messages Mechanism for Integrated Communication and Computation Proceedings of the Int Symp on Computer Architecture May Gold Coast Australia Anindya Basu Vineet Buch Werner Vogels Thorsten von Eicken Network Interface for Parallel and Distributed Computing Proc of the ACM Symposium on Operating Systems Principles Copper Mountain Colorado December Sugata Mukhopadhyay Arun Verma CMRivL Programmable Video Gateway Cornell University Spring	other	cornell
670	 Server Date Sunday GMT Sunday GMT Image Processor Please be patient my applet is loaded	other	cornell
671	 Server Date Monday GMT Monday GMT Program Program Due Tuesday April Program Notes Program Genetics includes custom Macintosh user interface The extra files handed out with the project are part of this interface You need not look at these files the files you are most likely to be interested in are and You may also want to look at the definition of the FacingRC function in The code you are to write should go into the file containing the main program Note that the printf function is not available in this assignment Since we are using the custom user interface window there is no console for output IMPORTANT Since this program uses custom Macintosh interface the project folders may become large when you compile the code Try to use high density HD disk with nothing else on it when you work on the program NOTE If you retrieved the project files before April the Genes dialog box may not work as expected you will have to use the Tab key to move between fields in the dialog box when you type in the numbers or the wrong numbers will be placed in the genes array in the GetGenes genes call The problem has been corrected if you want to retrieve the project files again but using the Tab key will work properly Corrections to Program Handout page the constant should be page typedef int PopulationType kNumKinds Organisms should be typedef int PopulationType kNumKindsOrganisms page kMaxUears should be kMaxYears page in the first paragraph should be same correction for Click only one of these links to retrieve the Program folder If you will be working on Program in the public labs get the Program Folder If you will be working on your own Mac get the Program At Home Folder This folder contains an extra library which we have already installed in the labs but which you will need at home Spring pierce	other	cornell
672	 Server Date Tuesday GMT Saturday GMT Me myself and little about myself Hello am currently helping out at the Cornell Robotics and Vision Lab under the super supervision of Ramin Zabih Well if you read my other page you would know all of that already except for the Ramin part am sophmore at Cornell University Originally from Montreal Quebec Canada Then my family move to Minneapolis Minnesota They are now stationed in Kansas City Kansas Well thats all for now	other	cornell
673	 Server Date Sunday GMT Thursday GMT My Publications Asif Ghias Publications Asif Ghias Jonathan Logan David Chamberlin Brian Smith Query By Humming Large Musical Information Retrieval in An Audio Database Proc of the Third ACM International Conference on Multimedia San Francisco CA November An HTML version is also available	other	cornell
674	 Server Date Sunday GMT Monday GMT and Course Information Fall Foundations of Artificial Intelligence Practicum in Artificial Intelligence Course Information Time and Place Hollister Personnel Instructor Claire Cardie cardie Assistant Professor Office Hours Mon Wed or by appointment Upson Teaching Assistants Scott Hunter Email hunter Office Upson Hall Office Hours Tues Thurs Tugkan Batu Email batu Office Upson Hall Office Hours Tue Upson PC lab Kevin Saunders Email ksaunder Office Hours Upson Tue Thu On weeks when applicable office hours will be held from on the night before programming assignment is due instead of the normal Thursday hours Return to home page	other	cornell
675	 Server Date Sunday GMT Wednesday GMT OLE OpenDoc and Microsoft Foundation Classes Presentation Microsoft It is supposed to take over the world and be the definitive answer to object technology according to Microsoft of course OLE is also the basis for the next version of Windows NT the real OS from MS which is code named Cairo OLE is an open standard depending on who you ask If you ask Microsoft it is open but if you ask anyone else they will probably disagree Microsoft has made information on OLE available through the internet OpenDoc Overview OpenDoc is backed by many companies in the computer industry The standard is controlled by an organization called Labs OpenDoc is positioned as component architecture that exceeds the capabilities of Microsoft OLE OpenDoc Supporters These are the companies that have officially jumped on the OpenDoc bandwagon Each of the companies and organizations have pledged to use it contributed time money helped to implement it Apple IBM Labs Taligent Adobe Borland Microsoft Foundation Classes MFC Overview The Foundation classes are thin wrapper around the Windows API These classes also have utility classes that implement some base functionality that could prove to be useful during project For example linked list is one of the implemented classes In addition to the other features the best part of MFC is the cross platform aspect of the libraries If the libraries are used for application development almost all that is required for Mac OS compliant version is simple recompile of the code Most platform differences are hidden within MFC Foundation Class Supporters MicrosoftThe gatekeeper of the libraries All development is done here It also ships with their Visual product SymantecSymantec has licensed the classes from Microsoft to ship them with their compiler product BorlandBorland has added compiler support for the class libraries to support the extensions Microsoft used Their compiler does not ship with the libraries included Borland ships their own class libraries Object Windows Libraries with their compiler Last updated September jmm	other	cornell
676	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
677	 Date Sun Nov GMT Server Fri Oct GMT Forefronts Teaching Computer Graphics with DX article Cornell Theory Center This article originally appeared in Cornell Theory Forefronts newsletter Teaching Computer Graphics and Scientific Visualization using the Dataflow Block Diagram Language DataExplorer by Bruce Land Visualization Project Leader Cornell Theory Center Abstract The scientific visualization language DataExplorer DX from IBM has been found to be useful in undergraduate education as vehicle for teaching computer graphics at an introductory level Although it is designed for scientific data visualization DX can be used to construct student lab exercises in computer graphics DX has been used for two years as an environment which emphasizes graphics manipulations rotation perspective while not requiring the programming overhead of traditional computer languages Introduction Computer graphics is topic that requires mathematical programming and artistic skills among others The content of the computer graphics fundamentals course at Cornell focuses on mathematical skills but must include programming to illuminate the math The course covers the following topics Construction of surfaces by explicit polygon lists by parametric operations and by hierarchical grouping of simple objects to form complex surfaces Modification of objects by geometric transforms in order to position them in space and animate them Viewing of group of objects including clipping to window and perspective or parallel projection into screen space Rendering of polygonal and parametric surfaces by hidden surface removal by as well as by surface property modifications such as or Use of global illumination models to render interactions between surfaces Modeling of scientific data for scientific visualization The programming aspect of the course attempts to give students practical experience with many of the techniques taught in lecture Lab exercises written in DX cover nine computer graphics topics These exercises include construction of polyhedra from vertex and face descriptions construction of parametric surfaces including quadric surfaces ellipsoids figures of rotation and surfaces bilinear hierarchical modeling and animation of complex objects writing perspective viewing transforms comparing lighting techniques with wire frame flat shaded or Gouraud shaded objects illuminated with ambient and point illumination producing variations on the standard Phong lighting model including spotlights and bump mapping of surfaces image techniques including production of texture mapped surfaces image filtering and visualization of scalar field heights of landscape and vector field flow field and design project to produce animation based on all the techniques learned All exercises have example programs to introduce the concepts and descriptions of the manipulations required of the student The first two exercises deal with construction of objects and are an introduction to DX In the first exercise students are introduced to the notion of polyhedron construction with vertex and face lists They are expected to design couple of polyhedra and perform simple animation of one object They experiment with determining the normals to the surface The second exercise introduces parametric surfaces Students design quadric surfaces figures of rotation and bilinear patches After this lab they can design quite complex single objects Exercise three teaches them how to hierarchically combine objects and how to concatenate transforms to make complex motion They design either wagon that rolls forward stops then turns its front axle and wheels helicopter with main and tail rotors that starts the rotors takes off and flies away or prop aircraft that behaves like the helicopter When done correctly the exercise shows them how to design parts of complicated object props or wheels move them and duplicate them for several times in the final construction In exercise four students turn off perspective in DX and write their own transform for simple scene This introduces the use of homogeneous coordinates and matrix manipulation in DX The calculation is complicated enough to introduce the various structuring aids of DX which make the code more readable Exercises five and six explore lighting Students first design landscape to be lit by two simulated suns white dwarf and red giant in two different orbits Then they turn off the default lighting model in DX Phong illumination with Gouraud shading and design their own lighting They code lighting model based on light positions viewer position and object normals and extend the model to produce spotlight depth cueing based on intensity Exercise seven introduces image manipulation and filtering Students are asked to simple scene using postfiltering and to determine best scheme based on available filters and system resource memory CPU time They then an image Finally they an image onto quadric surface by parametrically modifying the image pixel coordinates In DX an image has extent in world space with each pixel having position Exercise eight introduces scientific visualization by having the students make judgments based on graphical representation of fields The first part of this exercise is to identify the geographic location of landscape height field then to enhance the slope and exposure by modifying the program The second part is to identify the sources and sinks in vector flow field They are shown how to draw flow lines vector arrow icons and isosurfaces of speed They then combine these techniques to find the sources and sinks The final design project is to produce an animation of hierarchically modeled objects Typical projects have included robot that stands up out of an ocean turns and fires projectile at tower on the far shore seagull that flies down and plucks fish from the water castle with waving flags and drawbridge car driving through town with rotating signs and street lights human walking simulation of the deformation of tennis racket strings during ball impact and morphing between faculty face images The complexity and sophistication of many of the projects can be amazing DX as Programming Language At the introductory level lack of programming tools often interferes with learning graphics operations Typically graphical operations are either provided as large library of routines that students must learn or derive from relatively simple programming projects that students must code from scratch The block diagram interface of DX can be customized to make visual subroutine library of graphics routines Students can construct very complex scenes including camera and lighting control in short time They can also open up various visual subroutines and modify or extend them The graphical nature of the user interface and its easy extensibility make it possible for students to rapidly prototype graphics operation see the effects and modify the program The structure of DX that allows such easy interaction is described next DX is block diagram point and click programming language designed for producing high quality images based on data which may represent objects walls stars or fields density electric field DX can easily be extended to construct the objects and perform the operations needed for an introductory graphics class The block diagram program is built up of modules and wires connecting them module is primitive program function that appears on the screen as block with input and output tabs Wires are dragged with the mouse from outputs to inputs group of modules can be hidden inside of another module to form user macro System supplied DX modules include vector and scalar field rendering and geometric operations rotate translate in addition to and plotting There is direct programming support for producing custom MOTIF control panels The Theory Center has added modules to make parametric surfaces texture maps bumpmaps spotlights and variety of other graphically oriented functions Students are expected to design visual programs to perform some particular assigned task They are expected to produce working programs that are readable and documented visual language has different style of organization for readability than code but for programs bigger than one screen wide organization is no less important Any module can have comment field and the Theory Center encourages comment in all but the most obvious modules Programs tend to build an object of some kind house by defining its parts combining them and then moving them to some position Such section of code tends to be small perhaps modules but cryptic unless the designer minimally labels the output of the code block DX supports labeling of wires to document what is flowing through them In many cases small code block can be made into macro which then appears to be another module with name At some point objects have to be combined to make higher order structures Careful arrangement of the hierarchical structure which is all visual helps during program tracing and debugging We have found that as with all programming providing few examples and programming manual is an effective way of introducing students to the subject matter Conclusions DX allows students to concentrate on learning the graphics content of the course rather than investigating the details of programming environment Students can generate code to make images in fraction of the time required of language environment encouraging experimentation At the time of writing course evaluations are not yet available from students but will be when this article appears in Forefronts Preliminary student feedback indicates satisfaction with DX as vehicle for learning graphics The acquired background in computer graphics using DX is already being put to use in scientific visualization as students incorporate their class skills into research projects across campus This year students in the course were mostly upper division computer science and engineering majors It should be possible to construct course using DX which introduces computer graphics and visualization at an appropriate mathematical level and whets their appetites for further instruction downside to DX use in the classroom is that it requires graphics workstation such as an IRIS Indigo SPARC station HP workstation or RISC not Mac or PC which is the hardware most readily available to college and university students Hopefully the trend of cheaper workstations and more powerful personal computers will continue to open new possibilities Designing complex scenes in DX is easy enough that many projects put large demand on the workstations for CPU and memory During the final project many of the students ran out of memory while using MByte machines In most cases scaling down the resolution of texture maps solved the large size but in few cases the objects and motions became too complex The lab exercise software plus student lab instructions are available from an anonymous ftp site at Cornell University Contact Bruce Land bruce for more information	other	cornell
678	 Server Date Sunday GMT Tuesday GMT CoNote small group annotation experiment CoNote Annotation homepage Jim Davis davis Dan Huttenlocher dph The annotation system is an experiment in how people can collaborate when working with set of shared documents It allows group of people to share set of documents and to make comments about the documents which are shared with the other members of the group An annotation to document is comment on or question about the document Annotations can also refer to other annotations For example they can answer questions or refute arguments About annotation an explanation of the project An example An example of CoNote taken from problem set from the Fall course You ca add notes here but you can see realistic example Note that this example is taken from the middle of problem set so you wo see the context that the students did see The names have been changed to protect privacy see demonstration version User Guide Author Guide Administrator Guide Related work bugs and future plans Obtaining the code plan to release the code but there are restrictions you must agree to The first test of annotations is for Cornell course to support annotated course notes and problem sets We now have few measurements of usage Help wanted would also like to have someone it to be faster Jim Davis davis Sept	other	cornell
679	 Server Date Sunday GMT Sunday GMT Scribed Lecture Notes Semantics of Programming Languages These notes are not intended for distribution outside of class Notes on Scribing Each student is responsible for scribing at least two class sessions If your name is on here twice send email to either or me to get it on here twice prefer that you generate postscript file though html is also okay Scribe notes should be emailed to either or me within one week of the class It probably best to only produce one scribe document for each class so coordinate with the other scribe often have informal notes which you can work from Check with me before you start to write up your notes List of Scribes and Scribed Lectures Scribe Wed Sep ZdancewicPatrick WhiteML Fri Sep ValerjevStephanie Weirich ML ver ver Mon Sep OoiLambda ver ver Wed Sep OoiLambda Fri Sep WangZhen XiaoLambda must be printed Mon Sep FlorenceSumedh KanetkarLambda Wed Sep LiLili QuiTyped Lambda Fri Sep WangZhen XiaoTyped Lambda Mon Sep MayrPatrick WhiteChurch Rosser Wed Sep LiLili QuiStrong Normalization Fri Sep cancelled Mon Sep FlorenceSoochon RadeeExtended Typed Lambda Wed Oct ZdancewicStephanie WeirichDenotation for Typed Lambda Fri Oct WhiteRalph BenzingerEquations and Frames Mon Oct Sharma The Term Frame Wed Oct HawbitzelRosen Isomorphism Fri Oct RadeeTugkan BatuSubst Lemma eFall break Wed Oct Brown Intro to Fri Oct WhiteDan BrownMore on Mon Oct HawbitzelDan BrownYet more on Wed Oct of Fri Oct DaleyRalph and ML Mon Oct Tsang OoiChris HawblitzelType Inference Wed Oct White Type Inference Fri Nov KanetkarTugkan BatuPT Thm ML Inference Mon Nov FlorenceRalph BenzingerADTs in Wed Nov BudiuMore ADTs and Fri Nov LiLili QiuAdding Recursion PCF Mon Nov XiaoJia WangPCF Posets and Cpos Wed Nov ZdancewicStephanie WeirichCpos and Continuous Funcs Fri Nov LarkinIlya Thm Mon Nov Larkin JGM Adequacy Wed Nov MayrTugkan BatuIntro to Axiomatic Semantics Fri Nov DaleyIlya German Mon Nov LarkinSoochon Radee Wed Nov Budiu Thanksgiving break Mon Dec Daley Wed Dec MayrIlya German Fri Dec Valerjev Back to the homepage	other	cornell
680	 Server Date Sunday GMT Saturday GMT Sean Landis Sean Landis Waterview Heights Rd Ithaca NY ext landis Objective Be technical contributor developing object oriented distributed software am also very interested in computer graphics image databases and image processing Education Graduate May Cornell University Ithaca NY Masters of Engineering Computer Science GPA December University of Utah Salt Lake City Utah Bachelor of Science Computer Science GPA in major Professional experience March Date Isis Distributed Systems Ithaca NY Software Engineer IV team project leader Responsible for key technical contributions planning resource and vendor management release management and performance evaluations July Isis Distributed Systems Ithaca NY Software Engineer III As member of development team participated in all facets of development for two releases Responsible for port to Windows NT Responsible for documentation and training June June Unisys Corporation Salt Lake City Utah Senior Software Engineer Lead engineer for Manager distributed software management application Responsible for analysis design implementation and documentation Assisted planning and staffing Representative to POSIX Software Administration April June Unisys Corporation Salt Lake City Utah Software Engineer Developed The Unisys UNIX System customizable monitoring and analysis tool Performed all phases of the product including training Developed and taught UNIX Performance Tuning Seminar Achievement Award Group Achievement Award Unit Achievement Award Corporate Achievement Award April Unisys Corporation Salt Lake City Utah Associate Software Engineer Customer support for UNIX on multiprocessor machine Resolved customer problems and Created UNIX support tools package and training class for customer support engineers Achievement Award March Olympus Software Salt Lake City Utah Responsibilities included porting UltraCalc spreadsheet to various UNIX platforms release management and completing graphing package Summers Various Student cooperative work Publications CORBA with fault tolerance with Ruth Stento in Object Magazine Building Reliable Distributed Systems with CORBA with Silvano Maffeis to be printed in Theory and Practice of Object Systems Summary of skills CORBA Orbix Development UNIX development tools Programming Visual and MFC Software Engineering Project Management Perl ClearCase CVS Microsoft Office FrameMaker HTML Graphics Programming Image Processing Machine Vision Current projects Masters Project graphics rendering system Wireframe and solid display modes Phong shading object oriented design data model on Windows CS Topics in Computer Graphics image retrieval system for interior design Database of wallpaper patterns retrievable by color histogram or by pattern Image feature extraction analysis and indexing Object oriented design allowed for easy extensibility CS Machine Perception Use computer vision techniques to measure the quality of children coloring book artwork The system evaluates sample colorings and draws conclusions about the nature of the work CS Advanced Databases Explore indexing methods for image databases Utilize image features to create possibly multidimensional indexing structures This project is planned for the current semester See http for more information References References and salary history available upon request	other	cornell
681	 Server Date Sunday GMT Tuesday GMT Basic Operating Systems projects Projects for basic Operating Systems Research To give students the opportunitycp No match hands dirty on some real operating systems research we are offering number of projects based on the distributed operating system and on the VSTA public micro kernel The main goal of these projects is to get exposure to operating systems that are based on novel research principles in contrast to operating systems that are build using more traditional approach like the BSD derivates Linux or Mach and VSTA were chosen for very specific research reasons which will become clear when your read their individual sections below major organizational reason was that these operating systems are available for your PC at home at where they can peacefully with your other architectures Except for some startup activities for the project there are no other rules to these projects than that they should be systems projects Projects are being determined in cooperation between the faculty involved and the students who want to do this work Examples of projects are distributed file server for process server for VSTA various device drivers for VSTA kernel packet filter for either of the architectures etc The students who want to subscribe to these projects will need to have solid background in programming in the language know how to use development tools like make and have had some exposure to the fundamentals of operating systems networks and distributed systems Affinity with real system work is mandatory Faculty in charge Werner Vogels Robbert van Renesse and Thorsten von Eicken Plan is distributed system In the most general configuration it uses three kinds of components terminals that sit on users desks file servers that store permanent data and CPU servers that provide faster CPUs user authentication and network gateways These components are connected by various kinds of networks including Ethernet Datakit fiber networks ordinary modem connections and ISDN In typical use users interact with applications that run either on their terminals or on CPU servers and the applications get their data from the file servers but it also small enough to run by itself on laptop It is highly configurable it escapes from specific models of networked workstations and central machine service This project will start up with the installation of on file server and to make number of machines PC and Sparc stations in the department capable of booting over the network activities can be in many areas of but will involve building new servers to support remote devices running under Unix connecting your home PC running to the departmental fileserver through services and adding new communication mechanism to the kernel Other projects can be determined in cooperations with the researchers at AT Bell Labs VSTa VSTa is an experimental kernel which attempts to blend the design of microkernel with the system organization of Plan The result is small privileged kernel running tasks to provide system services such as device drivers filesystems and name registry Like Plan each service provides interface VSTa was originally developed by Andrew Valencia and is now placed under GNU copyleft There are many many things still to be developed for VSTa its network servers are very new and could be evaluated and improved device drivers need to be written there is no windowing system and many more Also existing mechanisms could be replaced or improved examples are the now kernel based process management could be split into kernel dispatcher and process server Developing an remote IPC mechanism is another possibility Anything is possible in this OS as it is small fits on floppies binaries and source code easy to understand and very flexible For information about this WWW page contact Werner Vogels	other	cornell
682	 Server Date Sunday GMT Wednesday GMT Home Page of Hrishi at Design Research Institute Ooops Sorry Page has please go	other	cornell
683	 Server Date Monday GMT Monday GMT CS Homework Number Homework Number Date Assigned February Date Due February To submit your answer Send an email message to with the subject assignment answers and the answers to the following questions Label each answer with the problem number and part etc Problem Convert the following decimal numbers into the indicated bases into binary into binary into hexadecimal into binary into octal into octal into binary into octal into hexadecimal into hexadecimal Problem Assume that the computer is initialized using the data given below all values are decimal For each of the following machine instructions indicate what registers change if any and what value they receive what memory locations are changed and what value it receives Each question is independent of the others and starts with the initial values given above If an instruction is illegal say so and indicate why Report all values in decimal Do tell us what happens to the condition code bits Address Value Address Value Register Register Register INSTRUCTION What It Does ANDI FF SR	other	cornell
684	 Server Date Sunday GMT Sunday GMT Trefethen and Bau NUMERICAL LINEAR ALGEBRA NUMERICAL LINEAR ALGEBRA Lloyd Trefethen and David Bau III pages SIAM David Bau currently at Microsoft and have recently completed graduate textbook on numerical linear algebra Our aims in this book are beauty depth of insight and brevity The text is split into forty lectures each about eight pages long It is based on the course have taught repeatedly at MIT and Cornell during the past ten years The book is presently undergoing copy editing by SIAM and it will be published in Table of contents and other front matter Lecture Lecture Lecture Lecture Lecture Notes Return to Trefethen homepage	other	cornell
685	 Server Date Sunday GMT Friday GMT Frank Web Playground The New and Improved Frank Happy Fun Page Presents Answers to All Your Questions of course it goes without saying that this page is in state and that it take little time for the fun bits to work their way into these pages Well my old and bitter Happy Fun Page at Ohio State CIS Department is finally gone la guerre And now some answers to all your questions Who is he Why is he here What does he do Where can he be found How about showing his and research interests What form of madness is this Does he have home page at the CS dept How come there is anything fun on this page What do if the answer to one of my questions is here What sort of flying have you done Recent Additions Frank archives of stuff Quotes jokes and pictures See the How page for description Frank Graduation Highlights of the June Graduation from The Ohio State University The East Hill Flying Club Home Page The official web for the EHFC which had hand in just recently received my Private Pilot Certificate to fly land planes Here few pages on flying And remember kids just more days until Yak Shaving Day Quotes of the Month hold on someone peed on my laptop Steve Romig about his untrained rats was little upset but you ca get much sympathy from pregnant woman Loren Schwiebert after falling off ladder allegedly steadied by his wife and son Frank can be reached at frank Last updated	other	cornell
686	 Server Date Monday GMT Sunday GMT Research Interests of the Faculty and Senior Researchers Research Interests of the Faculty and Senior Researchers The following are the research interests of each of the faculty members of the Computer Science Department at Cornell To find out more about any of the faculty follow the link to Annual Report Personal home pages Kenneth Birman Annual Report Distributed computing high performance communication Claire Cardie Annual Report Personal Natural language processing machine learning artificial intelligence Paul Chew Annual Report Geometric algorithms mesh generation Thomas Coleman Annual Report Personal Numerical optimization parallel computation Robert Constable Annual Report Theory of computation programming logics automated reasoning Bruce Randall Donald Annual Report Personal Robotics artificial intelligence computational geometry systems Donald Greenberg Annual Report Computer graphics design David Gries Annual Report Personal Programming methodology programming languages compiler construction logic Joe Halpern Personal Reasoning about knowledge and uncertainty qualitative reasoning distributing computing belief revision logic game theory Juris Hartmanis Annual Report Theory of computation computational complexity Monika Rauch Henzinger Annual Report Personal Algorithms data structures graph theory Thomas Henzinger Annual Report Personal Theory of concurrent and systems John Hopcroft Annual Report Modeling and simulation algorithms information capture and access Daniel Huttenlocher Annual Report Personal Computer vision computational geometry digital video Jon Kleinberg Personal Algorithms combinatorial optimization computational geometry computational biology Srinivasan Keshav Personal Computer networking telecommunication distributed computing Dexter Kozen Annual Report Personal Theory of computation computational complexity analysis of algorithms program logics and semantics Dean Krafft Annual Report Personal Digital libraries information access Bruce Land Annual Report Personal Computer graphics Yuying Li Annual Report Scientific computation numerical optimization Gregory Morrisett Personal Programming languages distributed systems runtime systems concurrency Keshav Pingali Annual Report Software for parallel systems compilers Robbert van Renesse Annual Report Distributed computing distributed multimedia systems Ronitt Rubinfeld Annual Report Personal Theory of computation randomized algorithms computational complexity Fred Schneider Annual Report Concurrent programming distributed systems systems Praveen Seshadri Personal Database systems Brian Smith Annual Report Personal Distributed multimedia systems image processing user interfaces information technology Eva Tardos Personal Theory of algorithms complexity theory Tim Teitelbaum Annual Report Personal Programming languages systems environments Sam Toueg Annual Report Personal Distributed computing systems Lloyd Trefethen Annual Report Personal Numerical analysis applied mathematics Charles Van Loan Annual Report Scientific computing Stephen Vavasis Annual Report Personal Numerical analysis Thorsten von Eicken Personal Parallel systems computer architecture Catherine Wagner Annual Report Automated reasoning constructive logic Samuel Weber Personal Semantics of programming languages distributed algorithms Ramin Zabih Annual Report Personal Computer vision multimedia information technology robotics Richard Zippel Annual Report Symbolic mathematics scientific software Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified December by Denise Moore denise	other	cornell
687	 Server Date Monday GMT Friday GMT Zeno Projects Zeno Research Projects DVFS distributed video file system distributed programming extension to Tcl Rivl multimedia processing language Lossless JPEG An experimental Lossless JPEG codec Serial Storage Architecture look into serial storage WVW Working Via the Web Optimal Parallel MPEG Encoding parallel MPEG encoder in Rivl	other	cornell
688	 Server Date Sunday GMT Wednesday GMT oh the weather outside is frightful what do you mean blizzards are bad my second favorite kind of weather is really good winter blizzard just never been one of those people who get all hot under the collar when there tons of snow on the ground this may partially be because live of mile from my office in upson but also just really like the silence the softness and the feeling of snow also truly believe that there nothing holier looking than grove of old trees with snow covering each branch it even makes places like mit look beautiful and as for cornell suffice to say that much of my unproductive time last winter was spent playing out in the snow truly wish much more had been spent that way rather than in the unpleasant bits but at least some was we are the music makers and we are the dreamers of dreams aphex twin dan brown snowman last updated oct	other	cornell
689	 Server Date Sunday GMT Thursday GMT PRL Seminar talks PRL Seminars Here are some of the slides for the talks have given in the Nuprl seminar These slides can be pretty technical and assume knowledge of the Nuprl system and type theory In some cases present information at an intuitive level that is technically imprecise All slides are in Portable Document Format PDF You can obtain PDF reader from Adobe for just about any machine you can imagine using prepared these presentations using Adobe Persuasion and Adobe Illustrator Modules February This is my most recent version of formal modules and objects Modules October This is an earlier version of formal modules Horus November We are performing verification of the Horus group communication system These slides give an outline of the verification process Types October These slides cover some new type additions was proposing for Nuprl This includes function types Square Root Verification May This talk is about the verification of hardware square root algorithm by program transformation The slides do contain much explanation The paper we wrote for TPCD Theorem Provers in Circuit Design is better resource Theories March This is very early version of formal theories modules in Nuprl Majority Vote November This is the first formalization did in Nuprl gives some idea of the problems first encountered using Nuprl and it provides motivation for my current work in Nuprl Some other talks Horus talks Horus Verification January This is very overview of the Horus verification effort Horus Verification April Here is slightly more detailed but still version of the Horus verification	other	cornell
690	 Server Date Wednesday GMT Tuesday GMT Silvano Maffeis Home Page This page has moved to http Please update your link Author Silvano Maffeis maffeis	other	cornell
691	 Server Date Sunday GMT Friday GMT Huang Steven Huang Education Master of Engineering in Computer Science expected December Cornell University Ithaca NY Grade Point Average of as of May Bachelor of Computer Science April University of the Philippines at Diliman Grade Point Average of at program completion Experience Instructor in Computer Science June to October Department of Computer Science University of the Philippines Taught course CS Introduction to Operating Systems Administered the College of Engineering LAN Student Assistant June to April Department of Computer Science University of the Philippines Assisted in the construction of the computer science classroom networks Science Research Specialist Trainee April to June Advanced Science and Technology Institute Department of Science and Technology Philippines Implemented embedded software for Electromyogram Designed and implemented software for an Artificial Neural automatic examination scoring system Relevant Skills Database management using SQL and Clipper Computer networking and administration with and software Novell Netware and Novell Netware Lite computer graphics synthesis using IBM DataExplorer and Written and spoken English Mandarin Chinese Filipino and spoken Fujian Chinese and Huang	other	cornell
692	 Date Mon Dec GMT Server Fri Feb GMT Lab CS Laboratory Building simple polygonal object Introduction The exercise is the design of geometric objects by describing their vertices and faces Procedure First you will need to download four files To do this click on each of the filenames shown below When the text window opens use the save as option to put the file in your own directory Name each file with the same name as shown below After downloading the files start DX then open the program and execute it Be sure to open the control panel You should see tetrahedron in the Image window The options menu in the Image window contains view control item which in turn contains Mode menu Experiment with rotating and zooming the tetrahedron Use the control panel to choose cube or octahedron shape Note that the tetrahedron is defined interactively as pair of Vectorlists interactors but that the other two shapes are defined with list modules Note also that any shape you make can be saved in file to be used later in another program which can Import the file It it not necessary to understand the program logic at this point that is you need to know what the Options construct or replace module does but you must be able to modify the defined shapes The control panel has interactors to define the vertices and faces of polyhedron Edit the face list so that one of the faces in inside out Note that the outward face of polygon is defined as the side you see if you traverse the vertices in direction Edit the face list and vertex list to make single triangle Open and execute the Open the control panel and vary the color of one shape or the opacity of the other shape Open the sequencer and click on the arrow to make simple animation Modify the Rotate module to animate around the axis This net serves as very brief introduction to animation The image below shows one view generated by this program Assignment Modify the program MakePolyhedron to make cube with one face that opens to show propellor inside The propeller should be made of four equilateral triangles sharing one edge and oriented degrees apart You will probably want to use the interactive lists to design this object The cube opening should be controlled by sequencer and the opening should be proportional to sinusoidal function of time Each different object you define will need to be connected to its own set of option construct replace modules For instance you might make the propellor cube minus top and the top as three objects which are then collected together In this case you would need three sets of option construct replace modules One of the inputs to the Color module is defined as front colors so that the back and front of objects will look different For your modified program change this parameter to colors so that both sides of objects will be colored single frame might look like the following image Be ready to demo and explain your cube animation program in section You will have minutes to do the demo You should be ready to explain the function of every module in the program Some attention will be paid to program layout very tangled messy program will lose points The Lab grading guide will be filled out by consultant during section to evaluate your work Back to Main Page Go to Lab Last modified Land Copyright Statement	other	cornell
693	 Server Date Monday GMT Thursday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
694	 Server Date Sunday GMT Sunday GMT Trefethen numerical textbook Finite Difference and Spectral Methods for Ordinary and Partial Differential Equations Lloyd Trefethen Cornell University This textbook was written during and used in graduate courses at MIT and Cornell on the numerical solution of partial differential equations The book has not been completed and is on indefinite hold while attend to other projects However the part of it that is written is in quite polished form including many exercises and is suitable for classroom use Copies can be obtained by sending US dollars or pounds sterling this sum includes postal charges to Trefethen Dept of Computer Science Upson Hall Cornell University Ithaca NY USA LNT Because of figures and other complications not all of the book is in PostScript so it would not be possible to make it fully available on the Web Introductory material pages megabytes Excerpts from the text pages megabytes Return to Trefethen homepage	other	cornell
695	 Server Date Sunday GMT Thursday GMT Transaction Server Bart Transaction Server Libby Lin Sunil Srivastava Eric Vitrano Goal The goal of our project is to create fault tolerant Transaction Server for multiple clients using TCPIP as the basis for communication Interfaces We will be providing service to the ECash Application who will be using our function stubs and we will be using the services of Stable Storage Encryption and possibly Private Email Schedule The schedule with appropriate methods for achieving the desired goals is as follows Week Goals Methods Single Client and Single Server Fault Tolerance or Phase Commit TCPIP with encryption layered on top of it Multiple Client and Single Server Forking on the Server side Multiple Client and Multiple Server Randomized load balancing on the client side Clients will randomly choose Transaction Server Preparation for Presentation If time permits we may implement Private Email communication with ECash Design Decisions Communication Protocol TCPIP was chosen to be the communication protocol between our function stubs and transaction servers because SSL is not fully standardized and may have legal problems with RSA Privte Email is our secondary choice because of excessive overhead but may be implemented later to provide higher degree of service References Dale Skeen and Michael Stonebraker Formal Model Crash Recovery in Distributed System IEEE Transaction of Software Engineering May	other	cornell
696	 Server Date Monday GMT Tuesday GMT CS How to Scribe CS How to Scribe This page should provide enough information to get you started Unfortunately LaTeX can be complicated and has many options we are unable to provide reference to the LaTeX system itself What is provided is commented version of the third lecture scribe notes This consists of few parts this is the main LaTeX Document It is similiar to the main file of program it describes the text of the document it can include other files and details how other files should be linked in to make the final postscript output and these are the figures seen in the document EPS stands for ecapsulated postscript Figures can be created in number of ways Most people will create figures for the first homework by converting PGM format pictures to EPS using the pnmtops program xfig is useful program to create drawings the final output postscript file You should first look at the file Comments in the source begin with symbol Typically you will edit this file so that it contains your notes Then you can compile the LaTeX file for example latex This will create few files including and The important file is this is contains the formatted text You can view this file using the xdvi program This file will not include any EPS figures that you might add you will need to run dvips to create the final postscript file Submissions Eventually your going to have to turn the mess in What we need is the final postscript file the LaTeX file and the EPS files for any of the figures you created If you have an account on the cs or sunlab systems you can just email the locations to jmiller otherwise you will have to mail me uuencoded tar file of the files References An Introduction to LaTeX Guide to LaTeX LaTeX Commands	other	cornell
697	 Server Date Sunday GMT Monday GMT Anneke World Wide Web Page Anneke World Wide Web Page moved here	other	cornell
698	 Server Date Monday GMT Monday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
699	 Server Date Tuesday GMT Thursday GMT Human Power Biomechanics and Robotics Laboratory The Human Power Biomechanics and Robotics Laboratory Department of Theoretical and Applied Mechanics Kimball Hall Cornell University Ithaca New York Click here to go to the department homepage Statement of Purpose Our interests are twofold in the first place we are interested in applying engineering principles to understand the mechanics of human and robotic locomotion Secondly we wish to provide an opportunity for undergraduates to collaborate with graduate students and other undergraduates in this research and provide applications for their coursework Ultimately we hope that our work will contribute to advances in medical rehabilitation of the disabled prosthetic development excercise physiology robotic control and simulation and the general quality of undergraduate engineering education Lab Themes Fundamentals Of Human Locomotion Mechanisms Which Are Statically Unstable But Dynamically Stable How Kinematic Constraints Improve Human Power Output Ongoing Research Projects Passive Dynamic Walking Collision Modelling Bicycle Projects Constrained Motion Excercise Machine Rowing Projects Papers We wanted to make drafts of some of our papers accessible over the web in format but have since given up trying to do any sort of successful conversion Suggestions are welcome but have tried several methods already If you would like copy of one of our papers please email one of us and we will send it along Lab Information Advisor Andy Ruina Kimball Hall Cornell University Ithaca NY ruina Graduate Students Michael Coleman coleman Mariano Garcia garcia Anindya Chatterjee is now at Penn State at anindya The undergraduate research groups meet individually about once per week to work together and discuss progress There is also lab meeting every week during which project members make short individual presentation of their recent accomplishments and short term goals Participants receive class credit usually credit hours per semester for their work They are required to make formal presentation at the end of the semester and to submit written report describing their work Comments regarding our home page including places of interest are welcome Please send them to garcia	other	cornell
700	 Date Mon Dec GMT Server Thu May GMT Lab CS Laboratory Procedural Textures Introduction In this lab you will investigate texture generation by Fourier methods cellular automata CA and partial differential equations Procedure Download Fourier Transform Textures The program takes as input an array of points or user defined pixels then computes the Fourier transform of the points Since the output of the FFT is complex the program allows the user to choose either the phase magnitude real part or imaginary part scales the result and displays it Transform texture examples Cellular Automaton Textures The program is CA which simulates the effect of surface tension Areas tend to get smoother rounder and less fragmented An mpeg animation shows typical evolution The rule for this CA is Sum the nearest neighbors of each cell and the cell itself cells are binary valued If the sum is less than or equal to set the cell to zero Otherwise set it to one Textures The program simulates chemical reaction coupled to diffusion There are two reacting chemicals called red and blue You can think of these as chemically reacting inks The inks can also spread across the paper at different rates refered to as their diffusion constants Many different behaviors can be simulated by changing the chemical reactions and specific parameters One specific reaction scheme described below results in this dynamically changing texture Red diffusion constant Blue diffusion constant Red initial concentration is random with maximum of Blue initial concentration is the Letters Test Diff in polygon font To step time NewRed concentration red red NewBlue concentration blue blue Where is the sum of the second partial derivitives of concentration of with respect to and as described in the Water wave section of the dynamics description In DX the second derivitive operators are calculated using the Filter module Another example uses the same reaction kinetics as above but the initial condition is blue dots Assignment Execute the programs to understand their behavior then modify them as follows Modify the program to compute CA version of percolation cluster percolation cluster is set of cells which are connected to an initial group of cells The automaton rule for each time step is Sum the nearest neighbors of each cell cells are binary valued Test to find out if the current cell has ever been visited before Compute random number for the current cell If the sum is greater than zero at least one neighbor and the random number exceeds threshold value and the cell has never been visited before then set the cell to one If the sum is greater than zero at least one neighbor and the random number does not exceed threshold value set the visited flag for the cell Correction Below is an example of percolation cluster using stroke font as an initial condition The threshold probability for each cell was set to for the first three time steps then changed to An mpeg animation of the cluster growth shows its evolution Extend to Now there nearest neighbors You will have to change the thresholds to appropriate values the array may be rendered by connecting it to an isosurface module with it second input set to then to an image module Use this code fragment to map the CA array to the surface of torus The scales to object to lie inside the CA volume The wire entering from the left is floated version of the CA array This mpeg animation shows the CA array on the left isosurface rendered and the array used to control the color of torus Build CA simulator which fills array one row at time Assume neighborhood extending one cell on each side of the current cell You might use the ForEachN module to control the loop which causes the program to visit each row once Assuming that the CA rule is based on summing the cells try several rules This mpeg animation is based on the rule If If If If Modify to include CA component The CA should take as initial conditions the thresholded blue concentration The CA rule should be Conway game of life Life is based on the rule where sum is over the neighborhood If If If sum If sum The CA should be coupled back into the equations as source term for blue or for red with an interactor to control the strength of each source So for each cell there needs to be term in the NewRed and NewBlue equations of the form strength CA Where CA is the value of the automaton cell Use text as initial conditions Make an MPEG animation of your favorite texture resulting from this process One example shows this process with CA source strength of for blue and for red and using text as an initial condition for the CA Another example shows process with CA source strength of for blue and for red and using two strips as an initial condition for the CA For both of these examples the reaction equations were the same as above except that Red diffusion constant Blue diffusion constant Be prepared to demo the modified programs to show The percolation CA The CA The CA The program modified to include CA Some results from You should be able to explain your programs You should use macros and comments in the Notation field of each module so that you and the grader can understand the program Control panels if any should be well organized labeled and with the appropriate numeric ranges The Lab grading guide will be filled out by consultant during section to evaluate your work Back to Main Page Last modified Land Copyright Statement	other	cornell
701	 Server Date Sunday GMT Monday GMT Francis Chu Humor Page History of the World Physics Warning Labels WARNING Read at your own risk capital Punishment the Night Before Beta Smiley Dictionary Mathematician Windows Microsoft The Next Generation Microsoft buys CUCS fcc	other	cornell
702	 Server Date Monday GMT Friday GMT Raman On the Internet no one knows you not dog either Raman PhD Cornell University Phone Internet raman Digital Cambridge Research Lab	other	cornell
703	 Server Date Sunday GMT Wednesday GMT Question Of The Week Question Of The Week It do you know where you are by Jeff Moore What Something Yellow And Dangerous by Heji Kim What in Brian hip pack by Heji Kim How to best establish lab culture by Soam Achery	other	cornell
704	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
705	 Server Date Sunday GMT Tuesday GMT Topics and Schedule Topics and Schedule as of The selection process The end result OLE OpenDoc Foundations classes presented by Moore Jeffrey jmm cs HTML SHTTP SSL Alfred Heji TclDP Wu Smith Java Hot Java Vineet Anindya Python STk Deyu Hu VRML Justin PGP Matt Welsh LotusNotes CoNote Jim Davis MBONE VAT Wang cancelled presented by Lee William wwlee cs Corba ILU Carl Lagoze	other	cornell
706	 Server Date Sunday GMT Sunday GMT Practice Problems Prelim Practice Problems Every Friday post some practice problems and their solutions The problems will be based on what was covered in lecture during the previous week Lectures and Week of Oct Problems and Solutions Lectures and Week of Oct Problems and Solutions Lectures and Week of Nov Problems and Solutions Additional problems posted Nov about recursion Problems and Solutions Lectures and Week of Nov Problems dvi or postscript and Solutions If you do understand the solutions to the problems ask in section If any of the solutions are wrong please me	other	cornell
707	 Server Date Monday GMT Monday GMT CS Homework Number Homework Number Date Assigned February Date Due February To submit your answer Drop by the consulting office Upson during consulting hours to get your homework graded and recorded Problem Convert these numbers into bit two complement form or back into decimal Do all algebraic manipulation in two complement All binary numbers are bits DIVIDE by MULTIPLY by ADD and MUTIPLY by Problem For each of the following parameter passing strategies state in one sentence of the strategy and in another sentence what the procedure can do if anything to compensate for the limitation Passing parameters using registers Passing parameters in fixed global address Problem Give short answer to each of the following questions Excessively verbose answers will result in lost points Name two functions of the procedure prolog Name two functions of the procedure epilog	other	cornell
708	 Server Date Monday GMT Tuesday GMT Projects CS Projects Spring Mulva Report The Real Deal Of Network Computer Jeffrey Moore William Lee Serial Storage Architecture Scott Dawson Leong Kian Fai Kernel endpoint for Linux Ankit Patel Gerry Toll Porting PVM to the Using Active Messages Chris Jaeger George Pang Parallel Object Recognition using Subspace Methods in Jody Shapiro Matt Androski Parallel Metaball Modeler Alex Benton Parallel Ray Tracing in Vineet Ahuja Amith Yamasani Parallel Rendering with Mesa Felix Lung Han Wang and David Wu Video Conferencing over ATM Hani Jamjoom Saleh Mohamed Munshi Parallel RIVL over UNET Sugata Mukhopadhyay Jonathan Barber parallel file system in Libby Lin Gang Gong SplitPOV Parallel Mike Perham Keith Kwok PImP Parallel Package Justin Miller Kevin Mai Implementation of IP over Avinash Gupta Vivekananda Kolla	other	cornell
709	 Server Date Sunday GMT Thursday GMT World Wide Web Homepage Finger WFinger By Posse Software John Belizaire beli Julian Pelenur julian Mauricio Aguilar Alvarez mauri WFinger search form Please fill out one or more of the following WWW Server req Last Name First Name UserId To start your search To clear the form fields Notes Wfinger searches the entire www server It takes time min at It Great Last Revised Thu Nov EST Any comments or suggestions to beli julian mauri	other	cornell
710	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
711	 Server Date Sunday GMT Friday GMT Abstract of Algebra Type Theory Paper Abstract for Paul Jackson Exploring Abstract Algebra in Constructive Type Theory In Bundy editor International Conference on Automated Deduction Lecture Notes in Artifical Intelligence Springer Verlag June describe my implementation of computational abstract algebra in the Nuprl system focus on my development of multivariate polynomials show how use Nuprl expressive type theory to define classes of free abelian monoids and free monoid algebras These classes are combined to create class of all implementations of polynomials discuss the issues of subtyping and computational content that came up in designing the class definitions give examples of relevant theory developments tactics and proofs consider how Nuprl could act as an algebraic oracle for computer algebra system and the relevance of this work for abstract functional programming Last Modified Jan Paul Jackson jackson	other	cornell
712	 Server Date Tuesday GMT Monday GMT PODC home page Fifteenth ACM Symposium on Principles of Distributed Computing PODC PODC is conference that focuses on research in the theory design specification or implementation of distributed systems PODC will be participating in the Federated Computing Research Conference FCRC in Philadelphia PA USA As result the dates for PODC are quite different from the dates for previous PODCs Important dates Nov Paper submission deadline Jan notifications Feb versions of accepted papers due May Conference dates Major changes from previous PODCs This year PODC will be participating in the Federated Computing Research Conference As result the conference dates are quite different from previous years PODC will be accepting paper submissions electronically Further information The call for papers How to submit your paper to PODC The list of accepted papers Temporary notices about PODC room share information The PODC mailing list The PODC and PODC home pages Other related conferences and calls for papers About research in distributed algorithms and systems Ordering proceedings from earlier PODCs Maintained by tushar	other	cornell
713	 Date Sun Dec GMT Server Thu Jun GMT The Virtual Reality RailRoad Project	other	cornell
714	 Server Date Sunday GMT Thursday GMT Adam Florence Other Interests Adam Florence Other Interests Dilbert am member of the DNRC My title is Minister of Hobgoblins of Little Minds This refers to an sent Scott Adams about the and DNRC newsletters pointed out small inconsistency between the newsletters Therefore am in charge of foolish consistency in the DNRC Every day read the new Dilbert cartoon on the Dilbert Zone Babylon Babylon is science fiction television show produced by Warner Brothers They have an official web site though think the unofficial Lurker Guide is the best source for episode information am member of the Babylon Fan Club was also winner in the Babylon Mystery Alien Sweepstakes Back to my home page Last updated Sept me with comments or corrections	other	cornell
715	 Server Date Monday GMT Friday GMT CS Fall Lecture Lecture MaxFlow Preflow Push homepage Page Page Page Page	other	cornell
716	 Server Date Sunday GMT Tuesday GMT Pittsburgh Pittsburgh Etiquette Real Pittsburghers are conscious of two sets of conduct Correct and Reasonable Newcomers to Pittsburgh are probably accustomed to the first set Examples include Waiting until the end of traffic light cycle to make left turn if there is oncoming traffic thus making traffic run smoothly Not honking unnecessarily as it upsets other drivers Never parking in front of driveways Not having claim to the parking space on the street in front of your house Using supermarket cart to take your groceries to your car in the parking lot Not nosing around in your neighbors affairs Using turn signals correctly When Pittsburghers go abroad that is out of Southwestern Pennsylvania they follow the Correct rules of conduct However no matter how sizable the Pittsburgh population it is still small town As result native residents will almost always choose to follow the Reasonable set when they are at home Reasonable rules are similar to those in the Correct set but modified as necessary by taking into account the following Fundamental Axiom Do what others would do if they had close personal relationship with you In the presence of this Axiom the examples above change slightly and could be read Since the first car going in the opposite direction at the intersection is close personal friend of yours he wo mind your saving some time and running through as soon as the light turns green instead of waiting until the end of the traffic cycle Honk to say Hi to the friend you see walking along the sidewalk No one will mind since he is their friend as well Your friend will not mind your blocking his driveway After all you willl only be there few minutes Everyone in town gets parking space so why should you It long walk back to your house so you just borrow the shopping cart from your good friend the manager of the local Giant Eagle You will bring it back next time you go or maybe one of your friendly neighbors will do it for you Since you are close personal friend of your neighbor you should pay special attention to his private affairs so that you can help him out in times of trouble Everybody knows where you going so why should you use turn signals The Reasonable set of conduct does have some results which can be viewed as positive Pittsburghers thank the bus driver when disembarking neighborhoods have festivals every summer and the checkout person is often quite friendly to you Excerpted from Reid Rich Guide to Living in Pittsburgh ed CMU CS July pierce	other	cornell
717	 Server Date Monday GMT Tuesday GMT Lecture Programs Lecture Programs These programs from lecture are available as CodeWarrior projects Lectures Reference Parameters and Craps Game Spring pierce	other	cornell
718	 Server Date Monday GMT Saturday GMT CS Recitation Notes CS Recitation Notes Here is the list of recitation notes available Recitation How to use CVS How to use make and gdb Recitation How to use purify Introduction to TCL TCL Tutorial Slides written by John Ousterhout Recitation Introduction to TK TK Tutorial Slides written by John Ousterhout Recitation TK Demo Program TK Demo Program Explanation TK Demo Program Output Recitation Operator Loading Recitation Templates Last modified Nov	other	cornell
719	 Server Date Sunday GMT Thursday GMT Course Information Course Information http The most up to date version of this document is in the Course Materials found on CoNote People Instructor Thorsten von Eicken Upson tve office hours Tue Teaching Assistants Aaron Thomas Deever Rhodes office hours TBD Zhen Xiao Upson xiao office hours TBD Michael Korby Upson mkorby office hours TBD Consultants Consulting help is available in Upson Course Administrator Laurie Buck Upson office hours pm What When Lectures Kimball Sections Mon pm Hollister Tue pm Comstock Wed pm Hollister Attending sections is required New material will be presented that you will need to know in order to complete the homeworks and the projects Attend one section each week Sections will begin the second week of classes You may attend any of the sections regardless of your registration However it would be helpful if you attended the same section each week Tutoring The course TAs will be available during regular office hours for extended consulting help Schedule an appointment by sending email to the TA at least hours in advance If you do not schedule an appointment you may find the TA busy and thus unable to spend time with you Consulting Consulting help is available in Upson The hours have not yet been finalized Consultants will grade your homeworks as well as answer questions about the computer system programs homework assignments and other things related to the content of the course To help ensure that consulting time is used to best advantage we ask you to observe few ground rules When your program does work try to decipher the error message find the location of the error in your listing and look at the relevant registers and memory before seeing consultant Have current listing of your program written in good style to show to the consultant Consultants will not spend time attempting to trace uncommented code Plan to spend no more than to minutes of the consultant time If you need more time then set up an appointment with the TA Texts and References Most of the information relevant to the course will be handed out in the form of lecture notes You are required to buy one textbook which is actually manual for the PowerPC and is rather cheap We recommend the Patterson Hennessy textbook because it is very good and you will refer to it many years hence to remind you of how processors memories caches disks etc work However that book uses different processor and there is correspondence between lectures and sections of the book For this reason it is not required Some people like to sit down read book in order to learn or in order to find out more and the book works well for that Others like to review the lectures using textbook and this book does work for that It your call Required CS lecture notes Available through the course home page PowerPC RISC Microprocessor User Manual Motorola catalog or IBM catalog in the bookstore should be cheap Optional Patterson and Hennessy Computer Organization and Design Morgan Kaufmann Available in the bookstore expensive but very good Bartee Computer Architecture and Logic Design Book Company if your have difficulties with boolean algebra IBM The PowerPC Architecture Edited by May Silha Simpson and Warren Morgan Kaufmann Expensive luxurious not clearly better than the cheap user manual but little more general MetroWerks CodeWarrior academic development environment Available for at the bookstore in case you have PPC and want to work at home Lecture notes Homeworks Projects Exams and Grades You will have weekly homework assignments and five projects Strong emphasis will be placed on timely completion of the homeworks and projects We will use system see below to encourage this If you can not meet the due date of an assignment because of serious illness or other extraordinary circumstances use the system to catch up If you really really need an exception contact Brian before the assignment deadline for an extraordinary extension Primary source The primary source for lecture notes informational handouts and assignments will be on the web URL http We will update the versions if errors are discovered or assignments need clarification The system will permit you to make annotations to lectures and assignments allowing you to ask questions and see responses In order to be able to reach the course materials you need to sign up with the Web page annotation system called CoNote Signing up with CoNote is what homework is all about you should go back to the course home page and click on the course materials link You will be asked an id and password just click cancel and then fill out the form that pops up Then you get what looks like nasty error message but in fact it page that allows you to request student access level talk about friendly user interface Simply click on the Request Student Access Level button and you almost done Almost because you now get to enter the id you just chose with the password After all this you should get message that indicates that you now have permission to author annotations Hint click on File NewWebBrowser in Netscape now to get new window to follow these instructions this way you do loose the instructions from sight You are responsible for checking the version for changes up to hours before you an assignment If we make change and you did take it into account because you did check it will be your problem You are not responsible for changes to an assignment after you have handed it in should you hand in something early Prerequisites or equivalent Students are expected to have programming experience using If you know another programming language PASCAL you are expected to acquire expertise on your own We will assume familiarity with recursion arrays records pointers linked data structures and stepwise refinement Homeworks Homeworks will be handed out thursdays and be due at the following thursday They will be relatively simple and allow you to check whether you understood the material presented in lecture and section The homeworks will be graded on the spot by the course consultants You will not be allowed to drop homeworks off you have to have them graded on the spot The crunch tends to come around Thursday so if you want to avoid waiting you should turn your homework in early and get extra merits Also be sure not to miss the consulting hours Answer sheets for all homework assignments will be distributed one week after the assignment is due These should be studied and understood Homework questions have been known to reappear on examinations Projects Projects will be handed out tuesdays and be due two tuesdays later The second an third projects will be centered around subset of the PowerPC assembly language called in the first project you will write small assembler program in the second project you will write machine language simulator in in the third project you will build CPU in three phases datapath logic phase datapath implementation control logic final all implemented and working You will work in groups of two on all the projects no exceptions unless there is an odd number of students When working in group submit for grading single printout that includes the names of both students in the group The same grade will be given to both students Both students are expected to be equally able to answer questions about the program or project The projects will be graded on the spot by having you demonstrate them to TA or course consultant Sign up sheets for these demos will be available later Exams There will be two prelims one on at and one either or not determined yet at There is no final exam Grade computation Your course grade will be computed as follows first prelim curve second prelim curve homeworks absolute project asm programming absolute project simulator absolute project hw design parts absolute We designed the system to allow you some flexibility in turning in your assignments Here how it works Homeworks or projects will be accepted up to calendar days late sunday for homeworks but each day will result in one demerit Homeworks or projects will also be accepted up to calendar days early starting monday for homeworks and each day will work off one demerit or give you credit for the future Each demerit left at the end of the course will cost you of your grade almost homework If at any time you reach demerits there goes of your grade you will receive harsh ultimatum By being on average you earn of your grade Extra merits will only affect your grade if you are on the boundary between two grades no guarantees though Merits and demerits are personal group project that is late costs each member Grading and Regrades Grades will be posted indexed by secret ID number you provide on the Web If you believe that we have made grading error please first discuss the matter with one of the course consultants or teaching assistants If after such discussion it appears that mistake has really been made bring the error to our attention but no later than one week after your assignment has been returned To submit problem set program or exam for regrading obtain regrade request form from one of the consultants or from outside Upson Fill out the request form and leave the request along with the assignment in question in Upson regrade request can cause your grade to go up or down Regraded assignments will be returned by the course consultants Academic Integrity The work you submit in CS is expected to be the result of your individual effort You are free to discuss course material approaches to problems and details of the system with your colleagues instructors and Computer Services consultants but you should never misrepresent someone else work as your own Permissible cooperation should never involve student possessing copy of all or part of another student program or other work regardless of whether that copy is on paper or in computer file on hard disk or floppy disk The only exception to these rules is when two students work together to submit joint project It is also the student responsibility to protect work from unauthorized access For example do not discard copies of your programs in public places Violation of the Academic Integrity Code very often results in failure in the course and permanent notations on your Cornell academic records If you have any question as to what constitutes ethical behavior ask the instructor first we will not be sympathetic to claims of ignorance or misunderstanding of the rules	other	cornell
720	 Server Date Sunday GMT Thursday GMT Browsing of CS Technical Reports Browsing of CS Technical Reports Below are OCR versions of couple of existing Cornell CS Technical Reports The documents include just one browsing feature into the documents clicking on individual citations in the document will show you the full reference More to come	other	cornell
721	 Server Date Sunday GMT Monday GMT Education and work experiences of Koichi Kamijo Education and work experiences got degree at the University of Tokyo Electrical Engineering Saito lab currently an MEng student at Computer Science Cornell University also working for IBM Japan Yamato lab My recent work was developing ThinkPad notebook PC such as ThinkPad and ThinkPad was mainly in charge of developing systems such as docking stations and imbedding multimedia functions such as Video Capture function Video Accelerator output and MPEG viewer into notebook PC visited several IBM labs Following are the labs visited so far visiting order IBM NY stayed here for months to fix an electrical problem of IBM console of IBM Poughkeepsie is nice place along Hudson river and with lots of green It is also close to New York City hr and Boston hrs IBM NC stayed here for months as liaison Raleigh is the capital of North Carolina and also nice quiet place Duke and NC state university are close IBM Raleigh is located at RTP Research Triangle Park Wright brothers were born in North Carolina as you can see in the plate of cars here IBM Hursley UK stayed here for weeks to fix an EMI problem of terminal we were developing Hursley is close to London hr and also close to Wimbledon One of the buildings in IBM Hursley used to be castle There is bar inside IBM Boca Raton FL visited here twice and stayed for months all together once to help designing adapter and once as liaison As mentioned in Where lived it summer all the year and close to many cool spots IBM Taiwan ROC stayed for weeks to have meeting with IBM Taiwan and vendors in Taipei and Hshinchu love the foods in Taipei because their tastes are close to ours In Japan often visit Chinese town in Yokohama to visit Aoba one of my favorite restaurants where very good Taiwanese food is served	other	cornell
722	 Server Date Sunday GMT Sunday GMT Course Staff Course staff and office hours Instructor Keshav Pingali Rhodes Hall Office hours Thursday Email pingali Teaching assistants Nawaaz Ahmed Rhodes Hall Office hours Monday AM Rhodes Email nawaaz Tugkan Batu Upson Office Hours Friday PM Upson Email batu Jose Machuca Office hours Wednesday PM Upson Email Oliver Chang Office Hours Monday PM Upson Email Felix Lung Office Hours Friday AM Upson Email flung Sunil Srivastava Office Hours Wednesday PM Upson Email sxsrivas Sections Fall Sections DayTimeRoomInstructor Machuca Ahmed Ahmed Oliver Chang Batu Lung Srivastava Consulting Consultants are available in Upson for help with coursework The consultation hours are posted on the door	other	cornell
723	 Server Date Sunday GMT Wednesday GMT Me	other	cornell
724	 Server Date Sunday GMT Sunday GMT Other Links of Interest Programming Metrowerks home page Cygnus Support Library Yahoo Directory of Programming International Obfuscated Code Contest page Last Updated on Monday September AM Any Comments or Suggestions Email them to dwu	other	cornell
725	 Server Date Monday GMT Thursday GMT Prelim Prelim General Info Tuesday April pm The Prelim review session will be held on Sunday April at pm in Baker Room Assignments Olin Upson Me Thurston Mi Thurston Olin Spring pierce	other	cornell
726	 Server Date Sunday GMT Monday GMT Who am Who Am am student at the Departmant of Computer Science of Cornell University work with Professor Robert Constable In Fall maintained Web page of course in Advanced Programming Languages This semester start my work for Nuprl project graduated from the Department of Mechanics and Mathematics of Moscow State University Moscow Russia Under supervision of Professor made several publications in Mathematical Logic My wife Elena now is graduate students in Economics at the State University of New York at Buffalo We are married more then years and know each other more than years because we graduated the same high school in Moscow By the way the same school one year after us graduated my classmate at Cornell Eugene Ortenberg	other	cornell
727	 Server Date Sunday GMT Tuesday GMT Viewing System Viewing System Master of Engineering Project Eric Shim Computer Science Department Cornell University Advisor Professor Bruce Land Table of Contents Introduction Equations Implementation How this program works Conclusion Acknowledgements References Introduction Although various display devices exist most computer graphics view surfaces are Thus pipeline the jargon term used to describe the various processes in converting from world coordinate space to representation must contain projective transformation and viewing transformation the minimum requirements to convert scene to projection have designed and implemented the Viewing System IV which was carefully explained in the Computer Graphics by Alan Watt using JAVA All the objects are created in the world coordinate system which is conventionally represented as system We can consider transformation Tview from world coordinate system to viewing coordinate system Xv Yv Zv Here in viewing coordinate system vertices are expressed in coordinate system with the origin sometimes known as the view point or view reference point which is represented as the position of viewer eye or the position at which virtual camera is placed Then the second transformation Tpers is applied to project points in view space onto the the screen space Xs Ys Zs Then projected the vertices from screen space onto the projection space which is view plane to simulate the camera transformation full viewing system will also determine view volume truncated view frustum which is the subset of world coordinate space which is to be included in the transformation process As far as general rendering pipeline is concerned needed to define view volume To define this view volume needed to specify near plane far plane and view plane window The specific plane formula will be presented in the Equations section of this report Since it was very hard to create the view frustum in the world coordinate system have created the view frustum in the viewing coordinate space and apply inverse Tview matrix to the view frustum that has created in the viewing coordinate system By doing this was able to create the view frustum in the world coordinate system Also the three dimentional clipping should be performed in the viewing coordinate space Equations We need viewing direction vector and up vector and an optional vector The following equations are showing how to obtain these vectors vector is viewing direction vector and is obtained by calculating camera to position subtract camera from position This vector is used when we calculate the Tview Matrix vector is up vector Because must be perpendicular to we need strategy that can take care of this care where the user entered is not perpendicular to Since the user entered vector is just estimated vector we need to calculate the vector by apply this equation This vector is also used when we calculate the Tview Matrix vector is an optional vector that could be obtained by cross product of and vector resulting in coordinate system Also this vector is used when we calculate the Tview Matrix Tview matrix is obtained simply by calculating this equation This Tview can transform any points in world coordinate system into the viewing coordinate system matrix translates the object and matrix roates the object where and are the followings Now we have to have someway to transform from the viewing coordinate system into the world coordinate system In the case of view frustum which was created in the viewing coordinate system and needed to be transformed to world coordinate system Tview inverse matrix is obtained simply by calculating this equation This Tview inverse can transform any points in viewing coordinate system into the world coordinate system transpose matrix translates the object and matrix roates the object After we have create the object in the world coordinate system and transform the points into the viewing coordinate system we need to transform the points in viewing coordinate system into the screen coordinate system again By doing this we are finally be able to simulate the camera transformation from world coordinate system to screen coordinate system where Tpers matrix is obtained simply by calculating this equation This Tpers matrix is consists of and values that the user has entered from the user interface is the distance from the camera to the near plane Incidently the view plane is the same as the near plane in this viewing system is the distance from the camera to the far plane Finally the value is the half of the height of the view plane window As create the view frustum should be able to specify the six planes There are Xv Yv and two Zv values Xv specifies the two planes of the view frustum Yv specifies the top and the bottom planes of the view frustum And the Zv specifies the front near plane and view plane plane and the far plane Implementation In this project have implemented classes which represents each objects in this Viewing System will introduce all the classes and briefly go over each class class definition in this section Class definitions cameraTransformation The main program This class creates all the buttons canvases text fields And this class contains user input data Tview and Tpers matrixs Also this class initialize all the necessary variables and handle all the events that user entered such as mouse click or enter the value of camera location camera to vector and values This class converts the coordinates into the coordinates to draw on the canvases To show the effect in case this class rotates the object little bit by and axis so that the user can see the object as effected This class is the base class of any other objects that would be displayed on the canvases such as view frustum and cube This class contains all the vertices on all three coordinate systems and the points that would be displayed on the canvases which is called view coordinates in this class ViewFrustum This class contains all the necessary information about the view frustum This is extended class from the class which means that it contains every thing from the and plus whatever view frustum need to have Also this class creates view frustum in the viewing coordinate system according to the value of camera location and camera to value Cube This class contains all the necessary information about the cube This class is extended class from the class Also this class creates cube on the origin of the world coordinate system according to the length of edge Tview This class contains all the necessary information about the Tview Also this class creates the Tview by doing the followings Find vectors Create the matrix Create the matrix Create the Tview matrix by calculating TB Create the Tview inv matrix by calculating BtrnasposeT Tpers This class contains all the necessary information about the Tpers Also this class creates the Tpers according to the and values that the user entered worldCanvas This class contains all the necessary information of the world canvas Paints the objects in the world coordinate system and handle the rotation of the objects by draging the mouse on the world coordinate system viewCanvas This class contains all the necessary information of the view canvas Paints the objects in the viewing coordinate system and handle the rotation of the objects by draging the mouse on the viewing coordinate system screenCanvas This class contains all the necessary information of the screen canvas Paints the objects in the screen coordinate system and handle the rotation of the objects by draging the mouse on the screen coordinate system projectionCanvas This class contains all the necessary information of the projection canvas Paints the objects in the projection canvas in manner This class contains the matrix calculation methods For this class have partially referenced from the code of Awwwesome Webware Vectorf This class contains the general vector calculation methods This class is the base class of or any other Vector classes For this class have partially referenced from the code of Awwwesome Webware This class contains the four element vector calculation methods This class is derived from the Vectorf class For this class have partially referenced from the code of Awwwesome Webware The detailed code of this project can be obtained by clicking on this How this program works If you like to simulate the camera transformation to see how the viewing system works you may press on the viewing system Viewing System You will see four canvases in the viewing system which are the world coordinate canvas viewing coordinate canvas screen coordinate canvas and the projection coordinate canvas As user changes the approximated vector camera location vector camera to vector and values this program redraws the objects according to the values of variables that user entered on all these four canvas appropreately The user needed to press on VIEW button after they have changed the values of variables to simulate the camera transformation Conclusion was able to simulate the camera transformation for viewing system in this project By simulating the Viewing System IV had less restriction when view the object in the world coordinate since could change the camera position and where to look at Also by having the view frustum did have to relying on clipping algorithm to eliminate any information in the view plane that falls outside the view plane window Eventhough this project performs just fine with my initial design could think of some more features that could make this project works even better First adding more objects to view could make it better to understand what is going on while viewing the object Second diminishing the line brightness when draw the object as it gets deeper in axis could help the user lot more to tell which line is in front and which one is in the back Acknowledgements It would have been difficult to finish this project without the greatest guidence of Professor Bruce Land would like to thank him from the deep of my heart would like to thank my mother Shim for helping me and praying for me to survive from the darkest period of my life Thanks to my brother and sister Andy Shim and Julie Shim for supporting me and understanding me by financially and mentally also would like to thank to my friends and in HANA and KIDS Most of all would like to dedicate this work to my father Shim who is in heaven for giving me strength and courage to continue to learn and complete the Masters Degree in Cornell University References Alan Watt Computer Graphics Publishing Company	other	cornell
728	 Server Date Monday GMT Tuesday GMT Synthesis Research Summary Three bottlenecks exist in scientific computing generating the effective software for complicated mathematical problems running the software on machine and interpreting or visualizing the large body of data that is produced by the computation In computational fluid dynamics and especially in turbulence research the time spent developing effective software can dwarf the actual running time by orders of magnitude This research focusses on automating the process of synthesizing scientific software using high level programming language called SPL SPL allows the programmer to indicate continuous objects of interest like differentiable functions distributions etc and manipulate them using operations from arithmetic and calculus as well as to limit their possible values by using constraints such as algebraic and differential equations This specification is then transformed into more concrete executable form via user directed transformations coded in conjunction with the computer algebra substrate Weyl Participants Divakar Visnawath Richard Zippel Publications Berkooz Chew Cremer Palmer and Zippel Generating Spectral method Solvers for Partial Differential Equations Advances in Computer Methods for Partial Differential Equations VII pp Tech Report	other	cornell
729	 Server Date Sunday GMT Wednesday GMT For Sale Things Koichi Kamijo is selling in June Many stuffs are already sold out but still have some If you find something interested in send The price is open to negotiation The more you buy the more discount you get Car Sold out Chevolet Lumina Euro miles sports car type AT ABS cruise control power windows power seat automatic door wine red good shaping With snow shovel car lock and bar Furniture Full size Carpet Plastic drawer Sold out each Stationery set Includes many binders tapes punchers etc whatever you need for studying Garbage bin Large Midium Thompkins county Electrical Appliances Sony CD double deck radio cassette Sold out color TV Canon Japanese Word Processor Brand new value Telephone answering Sold out Telephone compact Sony alarm clock with radio Iron with stand Sold out Floor lamp Sold out each Table study lamp each Fan heater Sold out Small clock Sold out Xmas tree Kitchen Microwave Oven Sold out Zojirushi pot Sold out Sold out Sold out Glasses Source Pan and more Last update June	other	cornell
730	 Date Sun Nov GMT Server Fri Oct GMT CTC Visualization Tools DX Cornell Theory Center Data Explorer DX Examples of DX projects may be found in the Data Explorer Repository Data Explorer DX is block diagram point and click programming language designed for producing high quality images based on data The data may represent objects walls stars or fields density electric field DX design tools include vector and scalar field rendering human controls and geometric operations rotate zoom in addition to and plotting There is direct programming support for producing custom MOTIF control panels The Theory Center has added modules to make parametric surfaces texture maps bumpmaps spotlights and variety of other graphically oriented functions Figure shows the DX network that generated the Mandelbrot set displayed in figure The block diagram program is built up of modules and wires connecting them module is primitive program function that appears on the screen as block with input and output tabs Wires are dragged with the mouse from outputs to inputs group of modules can be hidden inside of another module to form user macro Figure The DX network and user interface Figure The Mandelbrot Set generated by the DX network above DX also provides the facility to animate the images it generates Return to Visualization at the Cornell Theory Center	other	cornell
731	 Server Date Sunday GMT Friday GMT Noel MacDonald Professor Electrical Engineering Director Cornell Nanofabrication Facility Phillips Hall nmacd California at Berkeley Biography After receiving his doctorate in electrical engineering MacDonald remained at Berkeley for year as an acting assistant professor In he became member of the technical staff at the Rockwell International Science Center and in he joined Physical Electronics Industries as an entrepreneur instrumentation engineer and manager In Physical Electronics was acquired by the Corporation and from then until MacDonald held management positions at these included the position of general manager for the Physical Electronics Division In he attended the Harvard Business School Program for Management Development In he came to Cornell as professor of electrical engineering and director of the Program on Microscience and Technology which is sponsored by the Semiconductor Research Corporation In he was appointed director of the School of Electrical Engineering MacDonald has specialized in technology with emphasis on microelectronic applications he was instrumental in combining Auger electron spectroscopy with scanning electron microscopy and in developing the scanning Auger microprobe He received the Victor Macres Memorial Award of the Electron Probe Analysis Society of America and Young Engineer of the Year Award presented by the Institute of Electrical and Electronics Engineers IEEE He serves on the SEMATECH University Advisory Board the International MEMS Steering Committee and the Advisory Board for the International Symposium on Electron Ion and Photon Beams EIPB In he chaired the EIPB symposium He is member of IEEE the American Physical Society the American Vacuum Society the Electrochemical Society and the Materials Research Society Research Interests The theme of our research is nanostructure fabrication and characterization We are interested in the ultimate spatial limits for fabricating probing and modeling electronic and mechanical structures Consequently research projects that address the generation and application of focused electron beams for nanofabrication along with computer simulation and modeling are included in the program Research subjects include fabrication of electron devices and nanomechanical structures for information storage vacuum microelectronics microinstrumentation for lithography and characterization probing of integrated circuits and nanostructures electron scattering and energy dissipation in solids lithography and nanosensors The goal of this research is to better understand the physical limits for fabrication integration characterization and inspection of nanostructures Current Research Projects Nanostructure Fabrication Electromechanical Optical and Electronic Devices Nanosensors and Nanoanalytic Instruments Simulation of Lithography Instrumentation for Nanofabrication Testing ps and Nanometrology Selected Publications Sanford and MacDonald Laser pulsed GaAs cathodes for electron microscopy Journal of Vacuum Science and Technology Sanford and MacDonald Electron emission properties of laser pulsed GaAs negative electron affinity photocathodes Journal of Vacuum Science and Technology Yao Arney and MacDonald Fabrication of high frequency nanoactuators for scanned probe devices Journal of Microelectromechanical Systems Yao and MacDonald scanning electron microscopy analysis of nanodynamical structures Scanning Microscopy Santos and MacDonald Integration of microstructures onto negative cathodes Fabrication and operation of an addressable negative cathode Journal of Vacuum Science and Technology Spallas Das and MacDonald silicon cathode arrays formed by selective lateral thermal oxidation of silicon Journal of Vacuum Science and Technology Last revised	other	cornell
732	 Server Date Monday GMT Tuesday GMT Collaborative Mathematics Environments Next Introduction PROJECT SUMMARY Collaborative Mathematics Environments Paul Chew Robert Constable Keshav Pingali Steve Vavasis Richard Zippel Computational science will be the dominant paradigm for science in the next century This proposal addresses one of the major challenges facing this new kind of science demand for better software support for computational mathematics The task of providing this support is sufficiently central to the national interest and sufficiently comprehensive that it could serve as Grand Challenge problem for computer science strategy for meeting this challenge has evolved from cooperation at Cornell on the elements of scientific computing This proposal represents collaboration among five computer scientists with diverse backgrounds scientific computing computational geometry computer algebra applied logic and programming languages In various combinations these people have worked together and software from their separate projects has been linked Their experience with the difficulty of this linking process has led to the identification and to the prospective solutions of three major problems the connectivity problem the code generation problem and the explanation problem The problems and their solutions are briefly explained below This proposal outlines plan to design and implement an open system architecture that will integrate variety of computational science tools into an environment that supports collaborative activity Many interesting and powerful tools exist to support computational mathematics for example Matlab Lapack Mathematica Axiom Ellpack PLTMG Autocad and LEDA but most of these are focused on one specific area or on one specific style of computation These systems are largely and closed connecting to other software only at very low level of abstraction using for instance communication They do not have common semantic base that would allow one system to collaborate with another This is the connectivity problem To address the connectivity problem common mathematical bus the MathBus will serve as the backbone of the system Its communication protocols will be based on typed formal language which provides the semantics for collaboration major design objective is to raise the level of communication among software tools allowing the communication of mathematical objects instead of being restricted to simple strings Although existing software has contributed substantially to scientific programming productivity the time taken to generate code remains major impediment to progress in computational science This is the code creation problem In part this problem is due to the difficulty of expressing certain mathematical techniques as subroutines The problem of code creation is addressed with method of transformation and refinement allowing the transformation of mathematical expressions into code One of the reasons that sharing code with colleague is difficult is because there is no common language for explaining what program does and for precisely giving the conditions necessary to apply it This is the explanation problem The solution to the connectivity problem also provides an approach to explanation namely to provide formal and semantic standards for communications and linkage on the proposed MathBus The problem solutions outlined here lead to an additional opportunity Once tools can and mathematical models can be shared it becomes possible to create collections of mathematical theorems explanations and examples and counterexamples Such mathematical database could capture an important part of mathematical knowledge that is at best poorly represented by books and journals Collaborative Mathematics Environments Paul Chew Robert Constable Keshav Pingali Steve Vavasis Richard Zippel Introduction The Basic Problems Research Program The Connectivity Problem Mesh Generation Numerical Linear Algebra Mathematical Bus The Code Creation Problem Quadratic Formula Sparse Matrices Ongoing Activities The Explanation Problem Symbolic Computations and the Explanation Problem Geometry and the Explanation Problem Access to Libraries Value of Precise Mathematical Language Conditions on Transformations Geometry Summary The Mathematical Database Opportunity Milestones Year Year Year Year Year Results from Prior NSF Support Constable Pingali Partial List of Publications Development of Human Resources Vavasis References Biographical Sketches Paul Chew Robert Constable Keshav Pingali Stephen Vavasis Richard Zippel Budget Salaries and wages for senior personnel Postdoctoral research associate Equipment Travel Current and Pending Support Facilities Equipment and Other Resources About this document Next Introduction nuprl project Tue Nov EST	other	cornell
733	 Server Date Sunday GMT Thursday GMT Pavel Naumov addresses Office Department of Computer Science CORNELL UNIVERSITY Upson Hall Ithaca NY phone pavel	other	cornell
734	 Server Date Sunday GMT Tuesday GMT CS Course Requirements and Grading Programs There will be six programing assignments Assignments for CS are due on Tuesdays Exception Because there is only one week of classes between Thanksgiving break and the end of classes for the semester the final program will be due on Thursday CS ProgramDue at pm on Programs are due at pm on the day assigned No Late Assignments Will Be Accepted Programs may be handed in by giving them to consultant in the Carpenter Lab You must give the program to consultant personally Do not just leave it on desk or table Programs may also be handed in at the end of lecture on the assigned date Programs should be printed separated into pages with the perforated edges removed and stapled together with the requested output The first comment in each program must contain your name and Cornell ID the day and time you attend section and your section instructor name These can not be written in by hand You must sign the first page of the program Each program will be given two grades one for correctness and one for program organization and style The grade for each part will be or All programs are weighted equally Working with Partners For the programming assignments you may work with one other student we encourage you to do this If you work with partner you should normally submit only one programming assignment between the two of you The program must contain both of your names and ID and information about when you attend sections in the first comment at the beginning of the program The program will be returned in section to the first person named in the comment the other person will receive for their records cover sheet showing the assigned grade Both of you must sign your names on the first page of the program Working with partner can be very helpful both in getting the assignments to work and in clarifying your understanding of the course material But be sure that both you and your partner share in the work equally and that both of you understand it You can not take the exams with partner Exams There will be three hour preliminary examinations and hour final ExamDateTime Prelim Prelim Prelim Review Sessions Will be held at pm on Sundays before each prelim and before the final exam Review sessions are scheduled on Sunday and in Olin Graded Assignments and Exams Will be returned in your section Unclaimed work may be obtained from the consultants in the Carpenter lab Bring your Cornell ID to pick up an exam Regrades If you feel an exam or program has been incorrectly graded fill out regrade request giving your reasons in writing attach the exam or program to it and give it to consultant in the Carpenter lab regrade request can cause your grade to go up or down the paper will be regraded from scratch regrade request must be submitted within one week after the graded work is first returned Posted Grades Grades will be posted outside the Carpenter lab by either student ID or four digit code that you give us It is your responsibility to verify that our records are correct If you find an error please contact the course administrator Laurie Buck during her office hours Course Grades Grades for are computed as follows Final Grades Programs Prelim Prelim Prelim Final Your letter grade will be based on your total score The actual cutoffs between letter grades wo be decided until the end of the course Last Updated on Sunday September PM Any Comments or Suggestions Email them to dwu	other	cornell
735	 Server Date Monday GMT Monday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
736	 Server Date Sunday GMT Tuesday GMT MultiMATLAB MultiMATLAB MATLAB on Multiple Processors Anne Trefethen Cornell Theory Center aet Vijay Menon Computer Science Department Cornell University vsm Chang Computer Science Department Cornell University chichao Grzegorz Czajkowski Computer Science Department Cornell University grzes Chris MyersCornell Theory Center myers Lloyd Trefethen Computer Science Department Cornell University lnt Abstract commercial product of The MathWorks has become one of the principal languages of desktop scientific computing system is described that enables one to run MATLAB conveniently on multiple processors Using short commands like Eval Send Recv Bcast Min and Sum the user operating within one MATLAB session can start MATLAB processes on other machines and then pass commands and data between between these various processes in fashion that maintains MATLAB traditional graphics is also supported The system currently runs under MPICH on an IBM or network of Unix workstations and extensions are planned to networks of PCs MultiMATLAB is potentially useful for education in parallel programming for prototyping parallel algorithms and for fast and convenient execution of easily parallelizable numerical computations on multiple processors Keywords MATLAB MultiMATLAB message passing MPI MPICH Introduction The Popularity of MATLAB is language and environment for mathematical and scientific calculations It originated in the late with an attempt by Cleve Moler to provide interactive access to the Fortran linear algebra software packages EISPACK and LINPACK Soon programming language emerged programs conventionally have the extension and are called containing dozens of commands such as svd singular value decomposition fft fast Fourier transform and roots polynomial zerofinding Graphical commands were built into the language and company called The MathWorks was formed in by Moler and John Little now based in Natick Massachusetts From the beginning MATLAB proved greatly appealing to users The numerical analysis and signal processing communities in the United States took to it quickly followed by other groups of scientists and engineers in the and abroad Roughly speaking the number of MATLAB users has doubled each year since According to The MathWorks there are currently about users in fifty countries and this figure continues to increase rapidly In many scientific and engineering communities MATLAB has become the dominant language for desktop numerical computing At least six reasons for MATLAB success can be identified The first is an exceptionally intuitive syntax favoring brevity and simplicity at all turns without being so compressed as to interfere with intelligibility The second is the very high quality of the underlying numerical programs result of MATLAB intimate ties from the beginning with the numerical analysis research community The third is powerful and graphics The fourth is the high level of the language which often makes it possible to carry out computations in line or two of MATLAB that would require dozens or hundreds of lines in Fortran or The ability to link with Fortran or programs is also provided The fifth is MATLAB easy extensibility via packages of known as Toolboxes Many Toolboxes have been produced over the years both by The MathWorks and by others covering application areas such as optimization signal processing fuzzy logic partial differential equations and mathematical finance Finally perhaps the most interesting reason for MATLAB success may be that from the beginning the whole language has been built around real or complex vectors and matrices including sparse matrices as the fundamental data type To computer scientists not involved with numerical computation such limitation may seem narrow and capricious but it has proved extraordinarily fruitful It is probably fair to say that one of the three or four most important developments in numerical computation in the past decade has been the emergence of MATLAB as the preferred language of tens of thousands of leading scientists and engineers Single vs Multiple Processors Curiously one of the other principal developments of the past decade has been orthogonal to that one This is the move from single to multiple processors new generation of researchers and practitioners have grown up who are accustomed to the principle that computing means computing phenomenon attested to by the success of these Supercomputing conferences But this development and the emergence of MATLAB have been disjoint events as MATLAB remains language tied to single processor Originally MATLAB was conceived as an educational aid and as tool for prototyping algorithms which would then be translated into real language The justifications for this point of view were presumably that MATLAB capabilities were limited and that being interpreted it could not achieve the performance of compiled language Over the years however the force of these arguments has diminished So much MATLAB software is now available that capabilities can hardly be called narrow anymore and as for performance many users find that degradation in speed by factor between and is more than made up for by an improvement of programming ease by factor between and In MATLAB one effortlessly modifies the model plots new variable or reformulates the problem in an interactive fashion Such rapid exploration is rarely feasible in Fortran or Thus increasingly MATLAB has become language for real computing by scientists and engineers But one sense has remained in which MATLAB is only system for education and prototyping If one wants to take advantage of multiple processors then one must switch to other languages Experts such as many of those participating in this conference are in the habit of doing just this Others less familiar with the complexities of computing remain tied to their MATLAB desktops isolated from the trend towards multiprocessors The vision of the MultiMATLAB project has been to bridge this gap Think of user who finds or herself computing happily in MATLAB but frustrated by the time it takes to rerun the program for six different boundary conditions or dozen different parameter choices or hundred different initial guesses Such user problems might be solved by system that makes it convenient to spawn MATLAB processes on multiple processors of parallel computer or network of workstations or PCs In many cases the needs for communication between the processors are rather small Convenience of spreading the problem across machines and collecting the results numerically or graphically is paramount The MultiMATLAB project is exploring one approach for making this kind of computing possible We do not at the outset aim for parallelism or for peak performance of the kind needed for the grand challenge problems of computational science Instead following the philosophy that has made MATLAB so successful we require reasonable efficiency but put the premium on ease of use key principle is that MATLAB itself not facsimile which would have little chance of keeping up with the features of the commercial product must be run on multiple processors Our vision is that user must be able to learn enough in five minutes to become intrigued by the system and begin to use it Using MultiMATLAB Start Nproc Eval ID Each MultiMATLAB command begins with an initial letter We illustrate how the system is used before describing its implementation Suppose the first author is sitting at her workstation in the Theory Center connected to node of the IBM running MATLAB After time she decides to start MATLAB on five new processors She types Start MATLAB is then started on five additional processors taken from predetermined list Or perhaps the second author is sitting at machine connected to Cornell Computer Science Department network He types Start Now MATLAB is started on the five processors with the names indicated Some names could be repeated in which case multiple MATLAB processes would be started on single processor In either case when all the processes are started the message is returned MultiMATLAB processes running This total number of processors can subsequently be accessed by the MultiMATLAB command Nproc The standard MultiMATLAB command for executing commands on one or more processors is Eval If the user now types Eval then the MATLAB command sqrt is executed on all six processors The result is six repetitions of which is not very interesting On the other hand the command Eval calls the MultiMATLAB command ID on each of the processors running This command returns the number of the current process an integer from to Running it on all nodes might give the result ans ans ans ans ans ans The ordering of these numbers is arbitrary since the processors are not synchronized and output is sent to the master process as soon as it is ready It is good idea to type Eval compact at the beginning to keep the output from the various processes as condensed as possible The command Eval might produce ans ans ans ans ans ans In the above examples in keeping with our orientation toward SPMD programming each command passed to Eval was executed on all MATLAB processes Alternatively one can select subset of the processes by passing two arguments to the Eval command the first being vector of process IDs Thus Eval hilb ID might return ans ans the condition numbers of the Hilbert matrices of dimensions and and Eval exp ID might return ans ans ans the integrals of ex from to for and Note how the double quote is used to obtain string within string This calling of the MATLAB command quad gives hint of the power available that is so characteristic of MATLAB In this case adaptive numerical quadrature has been carried out to compute the desired integral MATLAB users are accustomed to treating problems like integration zerofinding minimization and computation of eigenvalues as routine matters to be handled silently by appropriate commands None of these examples were costly enough for the use of multiple processors to serve much purpose but it is easy to devise such examples Suppose we want to find the spectral radii maximum of the absolute values of the eigenvalues of six matrices of dimension The command Eval abs eig randn does not do the trick we get six copies of the number since the random number generators deliver identical results on all processors Preceding the eigenvalue computation by Eval seed ID however leads to the result desired ans ans ans ans ans ans The spectral radius of an by random matrix is approximately the square root of for large In typical experiment this example might run in seconds on six thin nodes of our the elapsed time would be six times greater if one used for loop on single machine Of course Monte Carlo experiments like this one are always the easiest examples of embarrassingly parallel computations For simplicity the examples above call Eval with an explicit MATLAB command as an argument string For most applications however user will want to execute program an rather than single line of text command such as Eval achieves this effect Put Get So far we have not communicated between processes except to send screen output to the master process Of course nontrivial MultiMATLAB system depends on such communication One form of communication we have implemented is puts and gets executable solely by the master MATLAB process For example the command Put sends the matrix from the master process to processes through an optional argument permits the name of to be changed at the destination The command Get gets the matrix back from process to the master Send Recv Probe Barrier More general communication is accomplished by send and receive commands which can be executed on any of the MATLAB processes For example the sequence pi Send Eval passes message containing from the master process to process leading to the output An optional argument can be added in Recv to specify the source Another optional argument may be added in both Send and Recv to specify message tag so as to ensure that sends and receives are properly matched and to aid in error checking The command Probe run on any process again with optional source process number and message tag returns true if message has arrived from the indicated source with the indicated tag otherwise false SPMD programs can be built upon Send and Recv commands Typically the program contains if and else commands that specify different actions for different processes For example suppose the consists of the following program if first process send Send elseif ID last process receive and double else middle processes receive double and send Send end Process creates the variable with value and sends it to process Process receives the message doubles the value of and sends it along to process and so on If there are six processors the command Eval produces the output The processes run asynchronously but since each Send command is only executed after the corresponding Recv has completed the proper sequence of computations and final value are guaranteed so long as all of the nodes are functioning Alternatively MultiMATLAB command is available for explicit synchronization The command Barrier returns only when called on each process Bcast Min Max Sum Although Send takes vector of processor IDs as its destination list the underlying idea is that of communication For more efficient communication between multiple processes as well as greater convenience for the programmer MultiMATLAB also has various commands for collective communication These commands must be evaluated simultaneously on all processes The Bcast command is used to broadcast matrix from one process to all other processes using algorithm For example Eval ID returns the number on all processes Bcast is much more efficient than corresponding Send and Recv The same kind of tree algorithm is used for various computations that reduce data from many processes to one For example the commands Min Max and Sum compute vectors obtained by reducing data over the copies of vector or matrix located on all processors Thus the command Eval ID Nproc executed on six processes will return the vector to process If the first argument is omitted the result is returned broadcast to all processes MultiMATLAB Commands The MultiMATLAB commands described so far represent communication primitives as they are used in the paradigm of programming One of the aims of this project however is to provide also an interface at higher level by building on these routines hiding as much of the message passing as possible We can do this by taking approach in simplistic fashion We have developed number of routines such as Distribute and Collect that allow user to distribute matrix or to collect set of matrices into one large matrix These functions operate using mask that indicates which processors hold which portions of the matrix This allows us also to develop routines such as Shift and Copy that are useful in computing keeping the communication to more abstract level Additional geometry routines such as Grid and Coord have also been constructed that allow the user to create grid of processors in or dimensions These provide powerful tool for more sophisticated parallel coding An optional argument on the communication routines allows communication within given set of nodes for example along column or row of the grid We do not give further details as these facilities are under development Multiprocessor Graphics One of the great strengths of MATLAB is graphics primary goal of the MultiMATLAB project has been to ensure that this strength carries over to multiprocessor computations In many applications the user will find it most convenient to compute on multiple processors but produce plots on the master process after sending data as necessary Equally often however it may be desirable to produce plots in distributed fashion that are then sent to the user screen This can be particularly useful when one wishes to monitor the progress of computations on several processors graphically We have found the following simple method of doing this to be very useful As mentioned above many calculations with geometric flavor divide easily into say four or eight subdomains assigned to corresponding set of processors We set up MATLAB figure window in each process and arrange them in grid on the screen This is easily done using standard MATLAB handle graphics commands and we expect shortly to develop MultiMATLAB commands for this purpose that are integrated with the grid operations mentioned earlier The figure below shows an example of this kind of computing in this case we have by grid of windows In this particular example what has been computed are the pseudospectra of by matrix known as the Grcar matrix This is an easy application for MultiMATLAB since the computation requires very large number of floating point operations singular value decompositions of dimension by but minimal communication just the global minimum and maximum of the data with Min and Max so that all panels can be on the same scale Another kind of application that might benefit from this kind of graphics would be as follows Suppose we wish to solve the wave equation by an explicit finite difference scheme and watch waves bounce around in the computational domain It is straightforward matter to divide the computation into grid of processors as in the figure above communicating just one row or column of boundary data to adjacent processors at each step Waves can then be seen to propagate from one window to another This kind of visualization can be very convenient for interactive experimentation and plots can be produced at selected time steps as necessary by sending data to single processor Our second computed example illustrates the use of multiple figure windows for monitoring process of numerical optimization MATLAB contains powerful programs for minimization of functions of several variables one of the original such programs is fminu Unfortunately such programs generally find local minima not global ones If one requires the global minimum it is customary to run the search multiple times from distinct initial points which in many cases might as well be taken to be random With sufficiently many trials leading to single smallest minimum found over and over again one acquires confidence that the global minimum has been found but the cost of this confidence may be considerable computing time Such problem is easily parallelizable and the next figure shows case in which it has been distributed to four processors function of two variables has been constructed that has many local minima but just one global minimum the value taken at the origin On each of four processors the optimization is carried out from twenty random initial points and the result is displayed in the corresponding figure window as straight line from the initial guess to the converged value The background curves are contours of the objective function Note that in three of the windows the smallest value obtained is whereas the fourth window has found the global minimum In these examples we have set up grid of windows one to each processor As an alternative it might be desirable sometimes to have multiple MATLAB processes all draw to one common window This arrangement is possible within XWindows for example However it is not possible within MultiMATLAB at present because figure window ID is property in the current version of MATLAB which can not be set or reset by the user Implementation of MultiMATLAB MultiMATLAB is built upon MPI Message Passing Interface highly functional and portable message passing standard Here is brief description of how the system is put together The system is written using MPICH popular and freely available implementation of MPI developed at Argonne National Laboratory and Mississippi State University In particular MultiMATLAB uses the communication layer within MPICH allowing it to run over heterogeneous network of workstations In building upon MPICH we believe we have developed portable and extensible system in that anyone can freely get copy of the software and it will run on many systems Versions of MPICH are beginning to become available that run on PCs running Windows and we expect soon to experiment with MultiMATLAB on those platforms The MultiMATLAB Start command builds process group file of remote hosts which are either explicitly specified by the user or taken from default list and then initializes MPICH MATLAB processes are then started on the remote hosts Each process iterates over simple loop waiting for and executing commands received from the user interactive MATLAB process The user may use Quit command to shut down the slaves and exit MultiMATLAB Additionally if the user quits MATLAB during MultiMATLAB session the slaves are automatically shut down One limitation of MPI which was not designed for this particular kind of interactive use is that running program can not spawn additional processes consequence of this limitation is that once MultiMATLAB is running on multiple processors it is not possible to add further processors to the list except by quitting and starting again It is expected that this limitation of MPI will be removed in the extension of MPI under development known as MPI At the user level MultiMATLAB consists of collection of commands such as Send for example Such command is written as file called which is interfaced to MATLAB via the standard MATLAB interface system known as MEX Within MPI many variants on sends and receives are defined MultiMATLAB is currently built upon the standard send and receive variants which employ buffered communication for most messages and synchronous communication for very large ones Our underlying MPI sends and receives are both blocking operations to ensure that no data is overwritten but to the MultiMATLAB programmer the semantics is that Recv is blocking while Send is MultiMATLAB commands are usually built on MPI commands For example Bcast and Min and Max and Sum are built on MPI collective communication routines and Grid and Coord are built on MPI routines that support cartesian topologies It should be stressed that MultiMATLAB allows MPI routines direct access to MATLAB data As result MultiMATLAB does not incur any extra copying costs over MPICH so it is reasonable to expect that its efficiency should be comparable Our experiments show that this is indeed approximately the case Here are the results of typical experiment size of matrix latency of doubles milliseconds MPICH MultiMATLAB The table compares latencies for MultiMATLAB code with those for an equivalent code using MPICH and reveals that MultiMATLAB does add some overhead to that of MPICH The timings were obtained on the IBM not using the switch This occurs because MATLAB performs memory allocation for received matrices It might be possible to alleviate this problem by maintaining list of preallocated buffers but we have not pursued this idea Related Work Many people must have thought about parallelizing MATLAB over the years According to Moler essay Why there parallel MATLAB published in the MathWorks Newsletter in he was involved with one of the earliest such attempts in the on an Intel iPSC Of course great deal has happened in distributed computing since then Our own first experiments were carried out in Trefethen By making use of Fortran wrapper based on IBM message passing environment MPL we ran MATLAB on multiple nodes of an IBM We were impressed with the power of this system for certain fluid mechanics calculations and this experience ultimately led to our persuading The MathWorks to support us in initiating the present project We are aware of seven projects than have been undertaken elsewhere that share some of the goals and capabilities of MultiMATLAB We shall briefly describe them The related project dating to before is the CONLAB CONcurrent LABoratory system of and others at the University of Sweden CONLAB is system with notation that extends the MATLAB language with control structures and functions for explicit parallelism CONLAB programs are compiled into code with message passing library PICL and the node computations are done using LAPACK group at the Center for Supercomputing Research and Development at the University of Illinois has developed FALCON FAst Array Language COmputatioN programming environment that facilitates the translation of MATLAB code into Fortran FALCON employs compile time and run time inference mechanisms to determine variable properties such as type structure and size Although FALCON does not directly generate parallel code the future aim of this project is to annotate the generated Fortran code with directives for parallelization and data distribution parallelizing Fortran compiler such as Polaris may then use these directives to generate parallel code Another project from the Technion in Israel is MATCOM MATCOM consists of translator and an associated matrix class with overloaded operators At present MATCOM translates MATLAB only into serial but one might hope to build distributed matrix class underneath it which would adhere to the same interface as the existing matrix class project known as the Alpha Bridge has been developed by Alpha Data Parallel Systems in Edinburgh Scotland Originally in system known as the this group ran language in parallel on each node of transputer The Alpha Bridge system is an enhancement of this idea in which RISC processors are linked in transputer network reduced interpreter runs on each node of the network under the control of master MATLAB process running on PC fifth project has been undertaken not far from Cornell at Integrated Sensors ISI in Utica NY consulting company with close links to the US Air Force Rome Laboratories Here MATLAB code is translated to code with parallel library routines This project and product aims at executing programs in parallel for control and related applications The final two projects we shall mention though not the most fully developed are the closest to our own in concept One is system built by group at the Universities of Rostock and Wismar in Germany In this system MATLAB is run on various nodes of network of Unix workstations with message passing communication via the authors own system based on Unix sockets Finally the Parallel Toolbox is system developed originally by graduate students Pauca Liu Hollingsworth and Martinez at Wake Forest University in North Carolina This system is based upon the message passing system known as PVM In the Parallel Toolbox there is level of indirection not present in MultiMATLAB between the MATLAB master process and the slaves PVM process known as the PT Engine Daemon Besides handling the spawning of new processes the PT Engine Daemon also filters input and output sending error codes to PT Error Daemon that logs the error messages to file In summarizing these various projects the main thing to be said is that most of them involve original implementations of language rather than the use of the existing MATLAB system itself There are good reasons for this if one aim is high performance and an investigation of what the ideal parallel system might look like The disadvantage is that the existing MATLAB product is at present so widely used and so extensive in its capabilities that it may be unrealistic and inefficient to try to duplicate it Instead our decision has been to build upon MATLAB itself and produce prototype that users can try as an extension to their current work rather than an alternative to it As mentioned this approach has also been followed by the and Wake Forest University projects using PVM or another message passing system rather than MPI Conclusions MultiMATLAB can be summarized in few words We run MATLAB processes on multiple processors with full access to all the usual capabilities such as Toolboxes These processes communicate via simple commands built on MPI with all details hidden as far as possible from the user Both and SPMD paradigms are implemented and attention is paid to multiprocessor graphics All of this happens without any changes in the MATLAB architecture indeed we have not had access to the MATLAB source code It is straightforward matter to install our current software on any network of Unix workstations or system provided that all the nodes are licensed to run MATLAB and there is shared file system We expect that extensions to networks of PCs running Windows based on appropriate implementations of MPI are not far behind We hope to make our research code publicly available in the near future and will announce this event on the electronic distribution list and elsewhere Based on reactions of users so far we think that MultiMATLAB will prove appealing to many people both for enhancing the power of their computations and as an educational device for teaching message passing ideas and parallel algorithms It gives MATLAB users easy access to message passing here and now The parallel efficiency is not always as high as might be achieved but for many applications it is surprisingly good We hope to address questions of performance in more detail in forthcoming technical report MultiMATLAB is by no means in its final form This is an evolving project and various improvements in functionality for example in the areas of collective communications and abstractions are under development The current system also needs improvement in the area of robustness with respect to various kinds of errors and in its documentation We are guided in the development process by several projects underway in which MultiMATLAB is being used by our colleagues for scientific computations As we have mentioned in the text several projects related to MultiMATLAB are being pursued at other institutions including CONLAB FALCON the Parallel Toolbox and others Though the details of what will emerge in the next few years are of course not yet clear we believe that the authors of all of these systems join us in expecting that it is inevitable that the MATLAB world will soon take the step from single to multiple processors References Blume et al Effective Automatic Parallelization with Polaris International Journal of Parallel Programming May De Rose et al FALCON An environment for the development of scientific libraries and applications Proc First Intl Workshop on Systems for the re Use of Program Libraries Sophia Antipolis France November De Rose et al FALCON MATLAB interactive restructuring compiler In Languages and Compilers for Parallel Computing pp August Drakenberg Jacobson and CONLAB compiler for distributed memory multicomputer Sincovec et Proc Sixth SIAM Conf Parallel Proc for Sci pp Geist et al PICL portable instrumented communication library Tech Oak Ridge Natl Gropp Lusk Doss and Skjellum portable implementation of the MPI message passing interface standard Parallel Computing to appear Gropp Lusk and Skjellum Using MPI MIT Press Hollingsworth Liu and Paul Pauca Parallel Toolbox for MATLAB PT Manual and Reference Pages Wake Forest University Integrated Sensors home page http Jacobson and Algorithm development for distributed memory multicomputers using CONLAB Scientific Programming pp Kadlec and Nakhaee Alpha Bridge parallel processing under MATLAB Second MathWorks Conference MATCOM March release http Message Passing Interface Forum MPI interface standard Intl Supercomputer Moler Why there is parallel MATLAB MathWorks Newsletter Spring Pawletta Pawletta and Drewelow Distributed and parallel simulation in an interactive environment Preprint University of Rostock Germany Pawletta Pawletta and Drewelow Comparison of parallel simulation techniques Simulation News Europe pp Trefethen Pseudospectra of matrices In Griffiths and Watson Numerical Analysis Longman pp About the Authors Anne Trefethen is Associate Director for Scientific Computational Support at the Cornell Theory Center From to she worked at Thinking Machines where she was one of the developers of the Connection Machine Scientific Software Library Vijay Menon interested in parallelizing compilers is PhD student of Keshav Pingali in the Computer Science Department at Cornell Chang and Greg Czajkowski interested in runtime systems are PhD students of Thorsten von Eicken in the Computer Science Department at Cornell Chris Myers is Research Scientist at the Cornell Theory Center His research interests are in condensed matter physics and scientific computing Nick Trefethen Professor in the Department of Computer Science at Cornell has been using MATLAB since His research interests are in numerical analysis and applied mathematics Acknowledgments For advice and comments concerning both the MultiMATLAB project and this paper we are grateful to Toby Driscoll Bill Gropp Xiaoming Liu Cleve Moler Barry Smith Steve Vavasis and Thorsten von Eicken This research was supported in part by The MathWorks Inc It was conducted in part using the resources of the Cornell Theory Center which receives major funding from the National Science Foundation NSF and New York State with additional support from the Defence Advanced Research Projects Agency DARPA the National Center for Research Resources at the National Institutes of Health NIH IBM Corporation and other members of the center Corporate Partnership Program Further support has been provided by NSF Grant and DOE Grant Trefethen NSF Grant CCR support of Menon by Pingali ARPA Grant support of Czajkowski by von Eicken and Doctoral Fellowship from the Brazilian Research Council Chang	other	cornell
737	 Server Date Sunday GMT Friday GMT Dynamic Graph Algorithms Monika Henzinger Monika Rauch Dynamic Graph Algorithm Design and Analysis of Efficient Dynamic Graph Algorithms Monika Henzinger Dynamic Graph Algorithms Monika Henzinger Fully Dynamic in Graphs Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS pp Abstract Ftp postscript For applications of in compilers see Richard Johnson David Pearson and Keshav Pingali Finding Regions Fast Single Entry Single Exit and Control Regions in Linear Time Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation pp Robert Tarjan and Jacobo Valdes Prime subprogram parsing of program Conference Record of the seventh Annual ACM Symposium on Principles of Programming Languages POPL pp David Alberts and Monika Henzinger Average Case Analysis of Dynamic Graph Algorithms Proceedings of the Sixth Annual Symposium on Discrete Algorithms SODA pp Abstract Ftp postscript Monika Henzinger Approximating Minimum Cuts under Insertions Proceedings of the International Colloquium on Automata Languages and Programming ICALP Lecture Notes in Computer Science pp Abstract Ftp postscript Monika Henzinger and Valerie King Randomized Dynamic Graph Algorithms with Polylogarithmic Time per Operation Proceedings of the Annual ACM Symposium on Theory of Computing STOC pp Invited to special issue of Journal of Computer and System Sciences on selected papers of STOC Abstract Ftp postscript Implementation by David Alberts Source Code David Alberts Giuseppe Cattaneo and Giuseppe Italiano An Empirical Study of Dynamic Graph Algorithms Proceedings of the Seventh Annual Symposium on Discrete Algorithms SODA Monika Henzinger and Han La Poutre Certificates and Fast Algorithms for Biconnectivity in Graphs Proceedings of the Third Annual European Symposium on Algorithms ESA pp Abstract Ftp postscript Monika Henzinger and Valerie King Fully Dynamic Biconnectivity and Transitive Closure To appear in Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS Abstract Ftp postscript Monika Henzinger and Mikkel Thorup Improved Sampling with Applications to Dynamic Graph Algorithms Proceedings of the International Colloquium on Automata Languages and Programming ICALP Lecture Notes in Computer Science Abstract Ftp postscript Applications of dynamic graph algorithms Monika Henzinger Valerie King and Tandy Warnow Constructing Tree from Homeomorphic Subtrees Proceedings of the Annual Symposium on Discrete Algorithms SODA Abstract Ftp postscript Monika Rauch Henzinger and Jan Arne Telle Faster Algorithms for the Nonemptiness of Streett Automata and for Communication Protocol Pruning Proceedings of the Scandinavian Workshop on Algorithm Theory Abstract Ftp postscript Lower bounds for dynamic graph algorithms Michael Fredman and Monika Henzinger Lower Bounds for Fully Dynamic Connectivity Problems in Graphs to appear in Algorithmica Abstract Ftp postscript Miltersen Subramanian Vitter and Tamassia Complexity Models for Incremental Computation Theoret Comput Science Last updated on June mhr	other	cornell
738	 Server Date Sunday GMT Thursday GMT Announcements Announcements Note The times of the demo sessions have been changed because Upson will be closing early on Monday Demo Sessions introducing the Dylan Interpreter CoNote and Netscape will be held in the Upson CIT Mac Lab Monday and Tuesday September and at and Each session is about hour Problem Set has been handed out on the CoNote server You need CoNote user id and password to get the problem set and to submit your solution If your Web browser has cached parts of an old NOODLLE you may see strange behavior The best thing to do at the beginning of session is to start new Web browser and to clear its disk cache There are number of bugs in the Java implementation that comes with Netscape for PowerPC Macintosh The old Macintosh also called version does not have this same problem The solution is if working on PowerMac to install the version The Netscape installer is in the folder on the Upson Macs Run the installer and install the version and use that instead of the one on the machine by default We in touch with Netscape and have let them know about this problem The due date for Problem Set has been moved to Saturday night Oct at This is really early Sunday morning	other	cornell
739	 Server Date Sunday GMT Thursday GMT Web Browser Caching Web browser cache previously viewed Web pages In general to make sure you have the most recent version of page you can hit RELOAD in your browser you should do this when looking at pages in CoNote in order to see new postings For some reason reloading Java applet does not necessarily get all the files that changed from the server At least under Netscape Navigator this can produce an inconsistent NOODLLE if any of its files have changed In order to make sure this is not happening to you you can clear both the memory and the disk cache Safest is to start fresh Netscape process and then to clear the disk cache which persists across invocations of Netscape In order to clear the caches go to the Options menu and select Network Preferences there is Cache tab in the dialog box This is only necessary when NOODLLE is changed and you see strange behavior of the interpreter	other	cornell
740	 Server Date Sunday GMT Sunday GMT Dan Autobio Dan Autobio Greetings My name is Dan Hung was born in Taipei Taiwan and had spent my childhood there until my family moved to the in the early eighties One of my greatest interest during my childhood is computers Indeed soon after arriving in the States my father bought me as birthday present Computers and hit it off pretty well and ended up spending most of my teenage years adapting to my new homeland and messing with various computers Indeed sometimes like to think that learned how to speak English and how to program in Basic at the same time Until my college years my family and lived in New York City Despite being brought up as hated New York it dirty unfriendly expensive and So when had the chance to go somewhere else took it and ended up in upstate New York at Cornell University Now love Ithaca very much during the seasons The environment is beautiful the air is clean the people are helpful and polite and the are filled with stars The winters here however drives me nuts It always snow sleet rain ice salt dirt etc ARRRGGGGHHHHH had wanted to major in Computer Science when started my Bachelor degree but changed my mind during my freshman year Instead decided to take broader view of the various disciplines by taking the most flexible of the engineering curriculums operations research and industrial engineering ORIE The flexible ORIE curriculum at Cornell enabled me to take large number of courses in things am interested in ranging from computer graphics to economics from history to small business consulting At the same time also had experiences in starting my own company working for large company and serving as consultant to local business Soon after finished my job with Exxon and returned to Cornell fell in love with this young woman To my lasting regret it did work out and was It was perhaps because was emotionally shattered or that was just greedy that took the highest paying job could find ended up working on Wall Street after completing my bachelor degree must admit that made dreadful mistake in working on Wall Street Even though the money is good the environment is bad filled with politics rude people and infighting Eventaully realized that money is not everything and decided to focus on doing something enjoy and at an environment that like So came back to Cornell First to round off my knowledge in computer science then to chill out in Ithaca and see where life takes me next Check out My Photos Dark Walker At Sunset Shades does not Coolness make Dan the Swordsman	other	cornell
741	 Server Date Sunday GMT Friday GMT Yeah Fall Newsletters September Fall News Issue October Fall News Issue II November Fall News Issue III December Fall News Issue IV Spring Newsletters January Spring News Issue February Spring News Issue II March Spring News Issue III April Spring News Issue IV Upcoming Schuyler House Activities April from Reserve your room in Schuyler Housefor next year or notify Graduate Housing of your alternate plans for the upcoming academic year April Softball Game pitting Schuyler House and Hughes Hall residents against one another Game time TBA April Barbeque Remember how much fun we all had at the first barbeque Well triple it add hot fudge and whipped cream and there you have this event April Stressed about finals Come to the Schuyler Lobby for massage sessions from Ithaca own Stress Out small fee will be collected to help subsidize the cost May Cinco de Mayo Party need we say more May Guiseppe will grace Schuyler House once more with his fine cuisine All Grad Links Get ready for the Class of Commencement Information via the Graduate School	other	cornell
742	 Server Date Monday GMT Wednesday GMT Annotated Bibliographies Annotated Bibliographies The annotated bibliographies on this page are the voluntarily submitted finals of the students The files included are all with the exception of the first Corba The Essentials WWW Page by Alfred Hong Common Object Request Broker Architecture CORBA by Carlos Barragan Orbe Object Request Broker CORBA by Ankit Patel Distributed Shared Memory by Hani Jamjoom Failure Detection in Distributed Systems by Wei Chen Failure Detection in Distributed Systems by Justin Miller Failure Detection in Distributed Systems by Janeen Reich Language Support for Agents Mobile Processes by Hrishikesh Dixit The MBONE by Justin McCune The MBONE by Julian Note Ghostview on some systems will not view this file Names Services by Avinash Gupta Protocols in Electronic Commerce by Tibor Janosi Remote Procedure Calls by Xun Wilson Huang Remote Procedure Calls by Kartik Kapadia	other	cornell
743	 Server Date Sunday GMT Sunday GMT Recent Papers Recent Papers Information Retrieval Information Structure and Information Agents ACM Transactions on Information Systems Using for automatic document structurin in Proceedings of Principles of Document Processing Information Agents for Building Hyperlinks in Proceedings of the Workshop on Intelligent Hyperlinks manipulation of objects International Journal of Robotics Research Analyzing teams of cooperative mobile robots in Proceedings of Towards coordinated manipulation in Proceedings of Towards theory on information invariants for cooperative mobile robots in Proceedings of	other	cornell
744	 Server Date Sunday GMT Thursday GMT Adam Florence Work Adam Florence Work Cornell University am one of three TA for hold office hours and teach two sections The MITRE Corporation have worked for The MITRE Corporation of McLean Virginia for three summers Most recently investigated requirements under Free Flight The project was funded by the Federal Aviation Administration Virginia Tech performed research with Bill Curtin of Virginia Tech We investigated the affect of bridging arrangements on the and of brittle ceramics Our paper has been submitted for publication to the Journal of the American Ceramics Society Back to my home page Last updated Sept me with comments or corrections	other	cornell
745	 Server Date Monday GMT Friday GMT Program Program Due Tuesday April Program Notes There is function named fabs that computes the absolute value function on doubles which you will probably want to use There is function called abs as well but this one has an integer argument In the Program folder there is file called tests which describes some additional tests you should run and hand in for Part along with the answers that should be produced Here is link to the program folder Program Folder Spring pierce	other	cornell
746	 Server Date Sunday GMT Wednesday GMT wandering through the back steps been walking through the rain just to get wet on purpose nothing really deep here but just really really love rain when the glee club which is group used to sing with here at cornell went on tour to the southwest over january the unremittingly awful hot and sunny weather did let up until finally we got to laguna beach which also had lot of pride flags in it so danced and sang in gorgeous shower on the pacific and in doing so apparently freaked out the people left in the glee club who did already think was insane but it remains the case the nice spring downpour is by far my favorite weather bar none weather in ithaca is often rainy which is good we are the music makers and we are the dreamers of dreams aphex twin dan brown snowman last updated jun	other	cornell
747	 Server Date Wednesday GMT Friday GMT Cornell CS Course Home Pages Fall Course Home Pages These are links to the home pages for number of CS courses In many cases there are class notes problem sets and other course information available although they may only be available to registered members of the course Computers and Programming Intermediate programming in language and introduction to computer science Topics include program development proofs of program correctness program structure recursion abstract data types data structures and analysis of algorithms Pascal is the principal programming language Structure and Interpretation of Computer Programs challenging introduction to programming languages and computer science Topics include recursive and procedures performance analysis of algorithms proofs of program correctness probabilistic algorithms symbolic hierarchical data abstract data types polymorphic functions programming infinite data types simulation and the interpretation and compilation of programs Taste of and An introduction to Unix operating systems and their programming environments This is six week course divided into two parts In the first three weeks we cover the architecture of Unix operating systems and the language at high level The second three weeks center around programming project that is intended to demonstrate the issues of crafting programs in on Unix Introduction to Digital Systems and Computer Organization Web course material includes course info lecture notes homeworks project info and hopefully even lecture videos Topics covered in the course include representation of information languages in particular PowerPC processor organization interrupts and memory hierarchies combinatorial and sequential circuits data path and control unit design RTL and microprogramming Software Engineering Technology and Techniques This course covers the techniques and technologies used in modern software development It involves good deal of programming and development experience and tries to simulate the life of professional programmers Topics include the language programming software design issues classical software engineering and collaborative programming Data Structures Lists trees graphs arrays and other forms of data structure and their implementation Relationship between language and data structure emphasizing abstract data types Dynamic storage allocation and memory management Detailed study of searching and sorting methods Analysis to determine the more efficient algorithm in given situation Practicum in Operating Systems The practical aspects of operating systems are studied through the design and implementation of an operating system kernel that supports multiprogramming virtual memory and various devices All the programming for the project is in language Foundations of Artificial Intelligence challenging introduction to the major subareas and current research directions in artificial intelligence Topics include knowledge representation search problem solving processing vision robotics logic and deduction planning and machine learning Automata and Computability Theory An introduction to the modern theory of computing automata theory formal languages and effective computability and deeper version of Credit will not be given for both Corrective transfers between and are encouraged during the first few weeks of instruction Advanced Programming Languages The course introduces and relates the operational denotational and axiomatic semantics of model programming languages for imperative applicative algebraic and logic programming Multimedia Systems An investigation of the computer science issues related to multimedia systems Topics include coding and compression storage systems networking processing user interface issues and databases for multimedia Analysis of Algorithms Methodology for developing efficient algorithms primarily for graph theoretic problems Understanding of the inherent complexity of natural problems via algorithms randomized algorithms randomized reducibilities Additional topics such as parallel algorithms and efficient data structures Cool Tools Seminar This course will survey the latest and coolest software and hardware applications systems and tools with an emphasis on practical use of the tools Each seminar will present tutorial style introduction to one of the topics Topics in Computer Graphics Covers advanced topics in computer graphics and applications of computer graphics to scientific computation Seminar in Natural Language Understanding Covers current topics in natural language understanding computational linguistics and relevant areas of machine learning Meets once week for hours to present and discuss recent papers in the field as well as ongoing natural language understanding research in the department Information from previous semesters Information from previous semesters may be retained for while but do be surprised if certain links do work Fall Spring Summer	other	cornell
748	 Server Date Sunday GMT Friday GMT Exams and Solutions Exams and Solutions Prelim Oct Prelim Nov	other	cornell
749	 Server Date Sunday GMT Sunday GMT Viewers Local Time The time is	other	cornell
750	 Server Date Monday GMT Thursday GMT Faculty Research Interests Faculty Research Interests The following are the research interests of each of the faculty members of the Computer Science Department at Cornell To find out more about any of the faculty follow the link to Annual Report Personal home pages Kenneth Birman Annual Report Distributed computing high performance communication Bard Bloom Annual Report Semantics of programming languages distributed algorithms Claire Cardie Annual Report Personal Natural language processing machine learning artificial intelligence Thomas Coleman Annual Report Numerical optimization parallel computation Robert Constable Annual Report Theory of computation programming logics automated reasoning Bruce Randall Donald Annual Report Personal Robotics artificial intelligence computational geometry microelectronmechanical systems Donald Greenberg Annual Report Computer graphics design David Gries Annual Report Personal Programming methodology programming languages compiler construction Juris Hartmanis Annual Report Theory of computation computational complexity Thomas Henzinger Annual Report Personal Theory of concurrent and systems John Hopcroft Annual Report Modeling and simulation algorithms information capture and access Daniel Huttenlocher Annual Report Personal Computer vision computational geometry digital video Dexter Kozen Annual Report Personal Theory of computation computational complexity analysis of algorithms program logics and semantics Paul Pedersen Annual Report Symbolic and algebraic computation and algorithms to UCLA Fall Keshav Pingali Annual Report Software for parallel systems compilers Monika Rauch Annual Report Personal Algorithms data structures graph theory Ronitt Rubinfeld Annual Report Theory of computation randomized algorithms computational complexity Gerard Salton Annual Report Information retrieval language and text processing information technology Fred Schneider Annual Report Concurrent programming distributed systems systems Alberto Segre Annual Report Artificial intelligence machine learning to of Iowa Fall Brian Smith Annual Report Personal Distributed multimedia systems image processing user interfaces information technology Devika Subramanian Annual Report Artificial intelligence machine learning information technology Tim Teitelbaum Annual Report Programming languages systems environments Carlo Tomasi Annual Report Computer vision visual motion interpretation to Stanford Spring Sam Toueg Annual Report Personal Distributed computing Lloyd Trefethen Annual Report Personal Numerical analysis applied mathematics Charles Van Loan Annual Report Scientific computing Stephen Vavasis Annual Report Personal Numerical analysis Thorsten von Eicken Annual Report Personal Parallel systems computer architecture Catherine Wagner Annual Report Automated reasoning constructive logic Ramin Zabih Annual Report Personal Computer vision multimedia information technology robotics Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified March by Denise Moore denise	other	cornell
751	 Server Date Monday GMT Friday GMT CS Fall Lecture Lecture Part homepage Page Page Page Page Page Page Page Page	other	cornell
752	 Server Date Monday GMT Monday GMT Nuprl Theory and Theorem Browser Nuprl Theory and Theorem Browser The Nuprl proof libraries consist of theorems grouped into theories If you want to start at the beginning with list of available theories click the box below You may alter parameter settings for List Nuprl Theories below No display form supression Supress all tagged display rules Supress all concealing display rules Client window width in characters If you know the name of particular theory or theorem you like to examine you can fill out and submit the following form Please specify either Theory or Theorem by clicking the box next to the appropriate choice Object Name Theory Theorem or other Nuprl Object You may alter parameter settings for Named Nuprl Object below No display form supression Supress all tagged display rules Supress all concealing display rules Client window width in characters The Nuprl system provides hypertext interface to prepared documents that use hypertext references to existing Nuprl objects You may begin using the hypertext interface by clicking the box below Information about Browser Parameters Some Helpful Hints and Common User Problems Read User Guide for Browser Return to Main Index Nuprl Project nuprl	other	cornell
753	 Server Date Sunday GMT Wednesday GMT Some interesting links not yet sorted Research Institutions and People Research Groups Cornell University Kestrel Institute MPI DFKI Project Cornell TH Darmstadt FG Intellektik FB Informatik SoGIT Individuals Frank Pfenning USA Darmstadt Gopalan Nadathur Mechanized Reasoning USA In Germany Schwerpunkt Deduktion Logical Frameworks Proof Assistants ELF Isabelle VSE Verifix NuPRL Homepage Recent Publications The Book The system FTP Hardware SunExpress USA Europe SUN USA SUN Germany special offers Hamilton Software USA Sunsite USA GNU USA FTP Mirror Paderborn CAML Job Announcements US Jobs Compulog Jobs Journals Conferences and Publishers Conferences ALL Conferences LICS Springer McGraw Hill Kluwer Journals AI Journal Elsevier CS Journals TCS Electronic IGPL Journal Unified Bibliographies Eiffel SIG Eiffel Public Local DEC Research Reports SEKI Kaiserslautern SEKI Saarbruecken Travel Information Global Travelweb Seatop Germany Tourismus Info Internet of all countries State Info maps New Mexico Utah Arizona Montana Wyoming Rental Cars Thrifty Alamo Airlines Delta United Continental USAir Lufthansa Swissair Quantas Other Airlines Hotels Major Chains Weather Forecast Ithaca Temperatures USA Precipitation USA News CNN USA today New York Times USA Homes Something about home Nachrichten Tagesschau WiSo Verkehr DB Fahrplan Frankfurt Flughafen Deutschlandkarte Miscellaneous Hifi American Buyers AVE Electronics WholeSale All Brands Infinity Audiomap Santander VISA Windham Hill Camera Jeep FTP list FAQ in Math JAVA Security	other	cornell
754	 Server Date Sunday GMT Tuesday GMT The Cornell Dutch Club home thuis nieuws bladen events links fotos music werk tourism travel cultuur taal geography misc De Nederlandse Club van Cornell De Nederlandse Club van Cornell CDC gevestigd in Ithaca NY USA press here for the english version and press here for our newest member Jaarverslag Notulen Analysed requests Reports Bekijk welke pagina het populairst zijn week month months Links Meer dan nederlandse links Cornell Dutch Club Te Koop bij onze Voorzitter Sander Voor kan je een prachtig donkergroen navy blauw of bordeaux rood exemplaar in handen krijgen als je het tijdens het koffieuurtje koopt In witte opdruk staat er dan op de achterkant Let go Dutch en op de voorkant ons logo Om een exemplaar via de post te bestellen stuur includes shipping naar Sander DeWitt Place Ithaca NY CDC Foto Mooie meisjes en jongens kijken Lijst van evenementen in Ithaca elke maandag Nederlands Koffie uurtje CDC Elke maandag avond om uur in Rulloff College Ave Bij mooi weer zitten we op het terras by College Town Bagels op de hoek Kijk uit naar de tulp en de vlag Ontzettend gezellig vrijdag november De zesde Euro Dans Party for printing op vrijdag november van tot uur in Calypso Bay Ithaca Entree Gratis shuttle bus vertrekt elke minuten vanaf Performing Arts Center Collegetown begint uur Mailinglijsten Onze Nederlandse Mailing Lijst op Cornell status Dec Als zich wilt abonneren zend mail naar listproc met deze regel in de inhoud van de message subscribe naam hier De Surinaamse Mailing Lijst Nederlandse Rondzendlijsten Dutch For English is mailing list for those who speak English and are learning the Dutch language an discussion list for people who share an interest in Lowlands languages and cultures Oude Evenementen Adding Information to this Server If you have any comments about the information provided would like to help maintain this server have information you would like to see displayed please send an to me at aswin or telephone USA You can also send typed stuff or pictures by mail to Aswin van den Berg Cornell Dutch Club Home Page Skyacre Drive Ithaca NY USA The Cornell Dutch Club you can add to this page home thuis nieuws bladen events links fotos music werk tourism travel cultuur taal geography misc	other	cornell
755	 Server Date Sunday GMT Saturday GMT Satyaprasad Devireddy Home Page PS Do get scared will be getting new snap done as soon as possible when the SG labs open Srinivas kandala at Chicago Other places of intrest Something for Everyone Electronic Post Cards Miller Beer FUNET One of the biggest file archives in the internet The Virtual Mirror NETCOM Communication Services Welcome to White House Finger Me	other	cornell
756	 Server Date Sunday GMT Saturday GMT Polya Related Project Composing Efficient Programs Composing Efficient Programs Optimization and selection techniques for building effcient programs from components Theme It is trend that software be composed from existing components forming even larger components One of the most challenging issues is the efficiency of the resulting programs which depends largely on optimization across component interfaces and selection of appropriate components given complicated interactions among them How to perform such optimization and selection systematically is one of my particular interests Other People David Gries Tim Teitelbaum Aswin van der Berg Thomas Yan Keywords program specification refinement program optimization selection program analysis program transformation program composition Annie Liu yanhong Last updated	other	cornell
757	 Server Date Monday GMT Tuesday GMT Suggested Robotlab Projects Suggested Robotlab Projects Robotics Wireless Rosemary to communicate with the Sun workstations using the wireless radio modem with wireless video using cheap box which sends an analog video signal over radio like TV Hook this up to the ATM video source and build an application of realtime vision with rosemary as the host Matt Visual Robot extension to Tom project Mapmaking with visual cues Can use ideas from but the robot walks around and using depth and position information produces map of the world uses it to navigate Matt Tom project set of navigational becons were created for the robots Video Processing and Machine Vision Automatic Storyboarding use the dissolve detector code to automate generation of movie storyboards possible outputing html pages that show the story board Justin and Ramin Parallelization of the Mpeg encoder Write or at least very fast Mpeg encoder using the ATM and ATM video source Jon Swartz and Brian Smith were interested in this Matt Port to Windows NT This could prove to be as many aspects of the SMP design rely on UNIX process environment in particular ELF and shared memory Use of NT features such as threads wo work Matt and Justin Parallel RIVL Providing Messages support for RIVL We like RIVL to be the general framework for going image computation display applications building etc It should help productivity lot if we have an easy way for people to experiment and visualize vision algorithms instead of writing crufty programs This project would provide data parallel processing support for the RIVL architecture basically by porting various RIVL primitives to for automatic parallelization and allowing users to write new RIVL primitives in for linking into the system The easiest way to do all of this think Port RIVL itself to should be easy and make existing RIVL behaviour subset of the that is local processing on one machine Matt Effects of Compression What empirical effects do various compression algorithms have on common vision algorithms Justin and Ramin Edge Clustering Develop algorithm for clustering of edges that represent single object Justin and Ramin Adobe Photoshop Nawaaz Algorithms OptimizationCreate an environment for the automatic optimization of highly iterative image transformation algorithms using the macro language and perl scripts Write macros to automatically produce according to some set of parameters like how many times to unroll loop and the write perl script to compile the set of programs and determine which is the fastest by timing the transformation on some set of images This would greatly speed the production of optimized code for given machine have examples started of this idea for the rank transform compilation Modelling compilation as search problem on system with constraints The system will consist of set of processors set of memories an interconnect network set of constraints number of processors size of memory which processor can access which memories in cycle ordering imposed by the operations to be performed etc The code to be parellised will be tight loops and hence small The idea is to search the space of complied code to find the optimal one This is most probably NP complete but speed is not the essence here Nawaaz Performance Simulations The simulation is with respect to the algorithms we are interested in The many aspects that can be simulated are Cache implement and study cache accesses on various algorithms Here we assume single processor Shared Memory Multiprocesssors simulate and study the effect of bus bandwidth memory architecture cache coherence on the system with repect to alogrithms like correlation etc Nawaaz DSPs Implementation Compilation Code generation for DSP chips MPV This is more specific then compilation Just to get an idea of what the chips are really capable of	other	cornell
758	 Server Date Monday GMT Thursday GMT Teaching Assistants Teaching Assistants Wei Chen Upson weichen Open Appt Christine Paradis Upson crp Open Appt David Pierce Upson pierce Open Appt Diana Shea Upson dlshea Open Appt Spring pierce	other	cornell
759	 Server Date Sunday GMT Saturday GMT Quotes Always Wherever there is pool there is always bird Wherever there is school there always be homework Wherever there is beat there is always drum Wherever there is fun there is always us together The sun will always shinning the bird will always sing As long as there is fun there is always real thing The shinning smiling face is always the one Wherever there is fun there is always us There must be the generating force of love behind every effort destined to be If you love it enough anything will talk with you Washington Carver One happiness depends less on what he knows than on what he feels Hyde Bailey Man is not himself only He is all that he sees all that flows to him from thousand sources He is the land the lift of its mountain lines the reach of its valleys Austin Come forth into the light of things Let Nature be your Wordsworth When the bird and the book disagree always believe the proverb The biggest tragedy to people interaction is not caused by the misunderstanding of what have been told It that the words we keep inside our hearts have never been Sometimes we do know what part of us is to be given to those we love or whether what we always be giving to is really needed But the important is we can still love entirely without completely understanding The complete understanding of oneself can not generate the complete love The true meaning of life is never meant to be understood completely it is to love Mclain Always Wherever there is pool there is always bird Wherever there is school there always be homework Wherever there is beat there is always drum Wherever there is fun there is always us together The sun will always shinning the bird will always sing As long as there is fun there is always real thing The shinning smiling face is always the one Wherever there is fun there is always us together	other	cornell
760	 Server Date Monday GMT Monday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
761	 Server Date Sunday GMT Wednesday GMT Kaz Company Kaz Works For Mitsubishi Electric Corporation First of all Mitsubishi is not Matsushita Mitsubishi Motors is not the same company as Mitsubishi Electric Nor are Mitsubishi Bank Mitsubishi Trust Mitsubishi Pencils Mitsubishi what have you Each of the above are individual companies more or less as large as the other They all have the same surname because they originated from the same Mitsubishi Zaibatsu that started back in the early Those of you who want to contact me in Japan see my card still under construction Up to Kaz homepage Jump to Kaz music page	other	cornell
762	 Server Date Sunday GMT Monday GMT Tentative Course Schedule Computer Science Fall Course text Cormen Leiserson and Rivest Introduction to Algorithms McGraw Hill Textbook can be purchased at the Campus Store or Triangle Bookshop The text unfortunately has number of bugs and typos especially older printings You should use the Text Errata large ps file close to pages Tentative Syllabus The following syllabus will be refined as the course progresses Periodic announcements will be made in class on the Web and on the homeworks of required readings We will cover material from Chapters as we need them Aug Intro ADT notation Sept Hashing CLR plus CLR Sept Graphs CLR Sept Spanning tree CLR Sept Heaps CLR and Huffman codes CLR Oct Sorting CLR Oct Prelim Oct Fall break Oct Binary Search Trees CLR Oct Trees CLR Oct Dynamic Data Structures CLR Oct Nov Union Find CLR Nov compression Nov Prelim Nov Shortest paths in Graphs CLR Nov Thanksgiving break Dec Computational Geometry CLR Dec Conclusion Dec final	other	cornell
763	 Server Date Sun Dec GMT bytes Tue Sep GMT Client Computers Home good place to start your journey Provides an overview of our pages Links Company Links Point your browser here for links to client computer related sites Edgar Links Need financials Basic information about the client computer manufacturers The EDGAR database contains tons of SEC filings waiting for News Links This is where you find stock prices links to current news and search engines Other Headlines Industry related headlines clipped for your convenience Feature of the Month monthly column written by our own experts Includes links for further exploration Analyses Analyses of client computer industry and featured companies This page is maintained by Jon Barber barber Vilho and Todd Peskin viewed with Netscape Navigator	other	cornell
764	 Server Date Sunday GMT Monday GMT The US Swing Dance Server home new events styles technique steps literature terms music videos clubs links The US Swing Dance Server The US Swing Dance Server Home Page This server is rated among the top of all Web sites by Point Survey Many people are helping to make this server useful for many people Quick Bar home new events styles technique steps literature terms choreos interesting music videos clubs comp quotes FAQ links access stats what is popular Love All Serve All Sai Baba Latest Changes What is popular here Upcoming Swing Dance Events National events plus links to local events Styles Of Swing Dancing reference guide to many kinds of swing dancing Swing Dance Technique Issues Library of Swing Steps Swing Dance Literature Swing Dance Terminology Swing Dance Choreographies Some Specific Interesting Stuff Margaret Batiuchok Lindy Thesis in nice layout Dance by Mark Balzer Swing Dance Music definition of swing music by Bob Notes Norton Victor list of dance music more dance music Michael Malak list of WCS songs Bands that play Swingable Music Music to buy for Swing Dancing Swing Dance Video Swing Dance Clubs Craig Hutchinson list of Swing Dance Clubs and Societies Links to clubs and other servers People in Swing Dancing The Swing Club List from the Dancers Archive Swing Dance Competitions Competition Results Dance Quotes Funny and deep prose Frequently Asked Questions FAQ from Anything you want to ask about dance and the newsgroup Compiled by Victor Other Dance Links Adding Information to this Dance Server adapted from the European Dance Server If you have any comments about the information provided would like to help maintain this server have information you would like to see displayed please send an to me at aswin or telephone USA You can also send typed stuff or pictures by mail to Aswin van den Berg Swing Dance Server AuroraSt Ithaca NY USA The original call for cooperation was put out November have quite few facilities here for scanning in pictures and text for display but depend upon others to provide that information The most important thing is your ideas of what you want to see and what you can provide If you want to know if your material is being looked at can provide that information since all accesses will be logged some time in the future So get writing The US Swing Dance Server you can add to this page home new events styles technique steps literature terms music videos clubs links	other	cornell
765	 Server Date Sunday GMT Friday GMT Mapping Environment for Unstructured and Structured Numerical Parallel Grid Generation Chrisochoides Fox and Joe Thompson Abstract is problem solving environment PSE for developing parallel algorithms that generate structured and unstructured static and adaptive grids or meshes required for the implementation of scalable parallel partial differential equation PDE solvers based on domain decomposition methods Whereas the first generation PSEs for the numerical solution of PDEs on distributed memory multiprocessor systems are based on the data mapping of sequentially generated grids and support only the data parallel programming model generates and maintains grids on the processors of systems and combines the most valuable aspects of the data parallel programming model with the flexibility of the task parallel programming model assumes machine model that consists of homogeneous and heterogeneous clusters of processors operating in distributed address space implemented on remote memory modules via message passing through interconnection network The major contribution of should be the reduction of the overhead required by the data parallel PDE solvers and the efficient maintenance of the distributed data structures that support and We present preliminary results indicating that the parallel grid generation results in substantial reduction of the overhead needed for the solution of the data mapping problem	other	cornell
766	 Server Date Sunday GMT Wednesday GMT Fall Study Guide Fall Automata and Computability Theory Final Exam Study Guide The final exam will be hours open book and notes All questions are roughly equal weight The exam will be comprehensive covering all material we have covered in the course including material tested on the two prelim exams Roughly equal weight will be devoted to each of the three parts of the course will ask you to do one formal proof and it will probably be an undecidability proof There may also be an essay question The primary source is the online lecture notes Suggested supplementary readings are taken from the text by Hopcroft and Ullman Introduction to Automata Theory Languages and Computation the appropriate sections are indicated beside each topic In addition to these specific topics you will need to have good general understanding of what it means for set to be regular recursive and of the capabilities of finite automata pushdown automata and Turing machines and of how to describe sets using regular expressions and grammars Finite Automata and Regular Expressions finite alphabets strings decision problems operations on strings and sets state transition systems DFAs regular sets closure properties the product construction nondeterminism and NFAs the subset construction patterns and regular expressions converting regular expressions to finite automata and vice versa Pumping Lemma for regular sets formal statement use of Pumping Lemma to show nonregularity the quotient construction DFA state minimization relations finite automata Pushdown Automata and Languages CFGs and CFLs definitions and examples and grammars Chomsky and Greibach normal forms PDAs formal definition examples configurations acceptance by empty stack and final state converting NPDAs to CFGs and vice versa Pumping Lemma for CFLs Parsing algorithm closure properties of CFLs DCFLs Turing Machines and General Computability general computability Turing machines Church Thesis universality configurations and recursive sets Variants of the TM nondeterminism enumeration machines decidable and semidecidable problems universal TMs diagonalization undecidability of halting and membership decidable and undecidable problems reductions Rice Theorem VALCOMPS and undecidable problems for CFLs Other formalisms type grammars Post systems functions while programs lambda calculus combinator logic Goedel incompleteness theorem home page	other	cornell
767	 Server Date Monday GMT Tuesday GMT Abstracts of the Horus Papers Abstracts Software for Reliable Networks Kenneth Birman and Robbert van Renesse Scientific American May The failure of single program on single computer can sometimes crash network of intercommunicating machines causing havoc for stock exchanges telephone systems control and other operations Two software designers explain what can be done to make networks more robust Horus flexible Group Communication System Robbert van Renesse Kenneth Birman and Silvano Maffeis Communications of the ACM April The emergence of environments for distributed computing represents promising step towards robustness for distributed applications Process groups have natural correspondence with data or services that have been replicated for availability or as part of coherent cache They can been used to support highly available security domains And group mechanisms fit well with an emerging generation of intelligent network and collaborative work applications Masking the Overhead of Protocol Layering Robbert van Renesse Proceedings of the ACM SIGCOMM Conference Stanford September Layering of protocols has been advocated as way of dealing with the complexity of computer communication It has also been criticized for its performance overhead In this paper we present some insights in the design of protocols and how these insights can be used to mask the overhead of layering in way similar to client caching in file system With our techniques we achieve an order of magnitude improvement in message latency in the Horus communication framework Over an ATM network we are able to send and deliver messages of varying levels of semantics in about microseconds using protocol stack of four layers that were written in ML functional language World Wide Failures Werner Vogels Proceedings of the ACM SIGOPS European Workshop Connamoran Ireland September The one issue that unites almost all approaches to distributed computing is the need to know whether certain components in the system have failed or are otherwise unavailable When designing and building systems that will need to function at global scale failure management will need to be considered fundamental building block This paper describes the development of failure management servcies which allows systems and applications to incorporate accurate detection of failed processes nodes and networks without the need for making compromises in their particular design Framework for Protocol Composition in Horus Robbert van Renesse Kenneth Birman Roy Friedman Mark Hayden and David Karr August The Horus system supports communication architecture that treats protocols as instances of an abstract data type This approach encourages developers to partition complex protocols into simple microprotocols each of which is implemented by protocol layer Protocol layers can be stacked on top of each other in variety of ways at First we describe the classes of protocols that can be supported this way Next we present the Horus object model that we designed for this technology and the interface between the layers that makes it all work We then present an example layer that implements group membership protocol Next we show how given set of required properties an appropriate stack can be constructed We look at an example stack of protocols which provides totally ordered communication between group of processes The work contributes standard framework for protocol development and experimentation provides high performance implementation of the virtual synchrony model and introduces methodology for increasing the robustness of the protocol development process Trading Consistency for Availability in Distributed Systems Roy Friedman and Ken Birman April This paper shows that two important classes of actions non left commuting and strongly non commuting can not be executed by concurrent partitions in system that provides serializable services This result indicates that there is an inherent limitation to the ability of systems to provide services in consistent manner during network partitions Deciding in Partitionable Networks Roy Friedman Idit Keidar Dalia Malki Ken Birman and Danny Dolev November Motivated by Chandra and Toueg work we study decision protocols in model that closely approximates real distributed systems Our results show how the weakest failure detector and associated consensus algorithm can be adapted to network in which omission failures can occur during periods when processes suspect as faulty For protocols in which majority subset of the participants can reach decisions on behalf of the system as whole we also characterize series of stages that necessarily arise during execution Jointly these findings establish direct relationship between an extended version of the commit protocol which makes progress even when traditional commit would block and the consensus protocol of Chandra and Toueg Although we do not explore the linkage here our results should also be applicable to other agreement protocols for systems of this sort such as leader election and dynamic group membership Strong and Weak Virtual Synchrony in Horus Roy Friedman and Robbert van Renesse August formal definition of strong virtual synchrony capturing the semantics of virtual synchrony as implemented in Horus is presented This definition has the nice property that every message is delivered within the view in which it was sent However it is shown that in order to implement strong virtual synchrony the application program has to block messages during view changes An alternative definition called weak virtual synchrony which can be implemented without blocking messages is then presented This definition still guarantees that messages will be delivered within the view in which they were sent only that it uses slightly weaker notion of what the view in which message was sent is An implementation of weak virtual synchrony that does not block messages during view changes is developed and it is shown how to use system that provides weak virtual synchrony even when strong virtual synchrony is actually needed To capture additional ordering requirements the definition of ordered virtual synchrony is presented Finally it is discussed how to extend the definitions in order to cope with the fact that process can become member of more than one group Packing Messages as Tool for Boosting the Performance of Total Ordering Protocols Roy Friedman and Robbert van Renesse July This paper compares the throughput and latency of four protocols that provide total ordering Two of these protocols are measured with and without message packing We used technique that buffers application messages for short period of time before sending them so more messages are packed together The main conclusion of this comparison is that message packing influences the performance of total ordering protocols under high load overwhelmingly more than any other optimization that was checked in this paper both in terms of throughput and latency This improved performance is attributed to the fact that packing messages reduces the header overhead for messages the contention on the network and the load on the receiving CPUs Using Virtual Synchrony to Develop Efficient Fault Tolerant Distributed Shared Memories Roy Friedman March This paper shows how to define consistency conditions for distributed shared memories in virtually synchronous environments Such definitions allow to develop fault tolerant implementations of distributed shared memories in which during normal execution operations can be performed very efficiently and only those operations which take place during configuration change must be delayed Three well known consistency conditions namely linearizability sequential consistency and causal memory are redefined for virtually synchronous environments It is then shown how to provide efficient fault tolerant implementations for these definitions Protocol Composition in Horus Robbert Van Renesse and Kenneth Birman March Horus is communication architecture that treats protocol as an abstract data type Protocol layers can be stacked on top of each other in variety of ways at This paper starts out with describing the many classes of protocols that can be supported this way Next we describe the Horus object model that we designed for this technology and the interface between the layers that makes it all work We then present an example layer which implements group membership protocol Then we look at example stack of protocols which provides totally ordered communication between group of processes We conclude with presenting some remaining challenges in our project Horus Flexible Group Communications System Robbert Van Renesse Kenneth Birman Bradford Glade Katie Guo Mark Hayden Takako Hickey Dalia Malki Alex Vaysburd and Werner Vogels March The Horus system offers flexible group communication support for distributed applications It is extensively layered and highly reconfigurable allowing applications to only pay for services they use and for groups with different communication needs to coexist in single system The approach encourages experimentation with new communication properties and incremental extension of the system and enables us to support variety of interfaces Achieving Critical Reliability With Unreliable Components and Unreliable Glue Mark Hayden and Kenneth Birman March Even the most aggressive quality assurance procedures yield at best probabilistic confidence in the reliability of complex systems Distributed systems because of their large numbers of components are enormously complex engineering artifacts and hence may appear to be inherently unreliable despite the best efforts of researchers and developers cellular distributed systems architecture offers the hope of drastically improving the reliability of current technologies in settings where reliability is critical The approach combines stateful style of distributed computing within cells with loosely coupled probabilistic computing model based on probabilistic broadcast primitive We give an implementation of this primitive called pbcast and demonstrate how to use it to implement this methodology Our approach is compatible with the use of popular distributed computing and reliability technologies while offering considerable isolation against the spread of failures among cells Preserving Privacy in Network of Mobile Computers David Cooper and Kenneth Birman March Even as wireless networks create the potential for access to information from mobile platforms they pose problem for privacy In order to retrieve messages users must periodically poll the network The information that the user must give to the network could potentially be used to track that user However the movements of the user can also be used to hide the user location if the protocols for sending and retrieving messages are carefully designed We have developed replicated memory service which allows users to read from memory without revealing which memory locations they are reading Unlike previous protocols our protocol is efficient in its use of computation and bandwidth In this paper we will show how this protocol can be used in conjunction with existing privacy preserving protocols to allow user of mobile computer to maintain privacy despite active attacks Incorporating System Resource Information into Flow Control Takako Hickey and Robbert Van Renesse February distributed systems have become widespread in recent years While systems provide some obvious advantages experiences with these systems have exposed unanticipated problems of unpredictability and inefficiency Incorporating system resources information into flow control is essential in solving these problems Variants of flow control suitable for distributed systems are investigated Next message packing which improves network bandwidth usage efficiency and consequently message throughput is presented Finally back pressure mechanism which controls admission of messages into the system by blocking applications at high load is presented The combination of the window mechanism and the back pressure mechanism provides management of system resources The former manages network resources while the latter manages operating system resources The combination maintains good throughput even under high load Design and Performance of Horus Lightweight Group Communications System Robbert van Renesse Takako Hickey and Kenneth Birman december The Horus project seeks to develop communication system addressing the requirements of wide variety of distributed applications Horus implements the group communications model providing among others unreliable or reliable FIFO causal or total group multicasts It is extensively layered and highly reconfigurable allowing applications to only pay for services they use This architecture enables groups with different communication needs to coexist in single system The approach permits experimentation with new communication properties and incremental extension of the system and enables us to support variety of interfaces Our initial experiments show good performance Support for Complex Applications using the Horus system Werner Vogels and Robbert van Renesse December distributed application involves more than just protocols for the dissemination of video and audio data As in any other distributed application protocols are necessary that guarantee the consistency and security of shared data objects The Horus system offers framework for buildin complex distributed systems that involve any number of protocols as well as variety of protocols for the diffe rent aspects of distributed application including some protocols specific to applications We believe that this integrated approach is superior to combining different toolkits and illustrate this with detailed example of an existing application Security Architecture for Systems Michael Reiter Kenneth Birman and Robbert Van Renesse June Process groups are common abstraction for computing in distributed systems We present security architecture that extends the process group into security abstraction Integral parts of this architecture are services that securely and support cryptographic key distribution using novel techniques We detail the design and implementation of these services and the secure process group abstraction they support We also give performance figures for some common group operations Preserving Privacy in Network of Mobile Computers David Cooper and Kenneth Birman October Even as wireless networks create the potential for access to information from mobile platforms they pose problem for privacy In order to retrieve messages users must periodically poll the network The information that the user must give to the network could potentially be used to track that user However the movements of the user can also be used to hide the user location if the protocols for sending and retrieving messages are carefully designed In this paper we will describe set of protocols that we have developed to allow user with mobile computer to communicate without compromising privacy Uniform Actions in Asynchronous Distributed Systems Dalia Malki Kenneth Birman Aleta Ricciardi and Andre Schiper September We develop necessary conditions for the development of asynchronous distributed software that will perform uniform actions events that if performed by any process must be performed at all processes The paper focuses on dynamic uniformity which differs from the classical problems in that processes continually leave and join the ongoing computation Here we first treat static version of the problem lacking joins and then extend the results so obtained to also include joins Our results demonstrate that in contrast to Consensus which can not be solved in asynchronous systems with even single faulty process dynamic uniformity can be solved using failure detection mechanism that makes bounded numbers of mistakes Because dynamic uniformity arises in systems that maintain safety within primary partition of network our paper provides rigorous characterization of the framework upon which several existing distributed programming environments are based Understanding Partitions and the No Partition Assumption Aleta Ricciardi Andre Schiper and Kenneth Birman June The paper discusses partitions in asynchronous systems In such systems slow processes and slow links can lead to virtual partitions that are indistinguishable from real ones This raises the following question what is partition in an asynchronous system To overcome the impossibility of detecting crashed processes in an asynchronous system our system model incorporates failure suspector to detect possibly erroneously process failures Based on failure suspicions we give definition of partitions that acccounts for real partitions as well as virtual ones We show that under certain assumptions about the process behavior any incorrect failure suspicion inevitably partitions the system We then show how to interpret the absence of partition assumption Communication Based on Weak Failure Suspector Andre Schiper and Aleta Ricciardi April Failure detectors or more accurately Failure Suspectors FS appear to be fundamental service upon which to build distributed applications This paper shows that FS with very weak semantics that delivers failure and recovery information in no specific order suffices to implement communication VSC in an asynchronous system subject to process crash failures and network partitions The VSC paradigm is particularly useful in asynchronous systems and greatly simplifies building applications that mask failures by replicating processes We suggest architecture to implement communication at the lowest level the FS component on top of it component that defines new views and component that reliably multicasts messages within view The issues covered in this paper also lead to better understanding of the various membership service semantics proposed in recent literature Process Membership in Asynchronous Environments Aleta Ricciardi and Kenneth Birman February The development of reliable distributed software is simplified by the ability to assume failure model We discuss the emulation of such model in an asynchronous distributed environment The solution we propose called can be supported through highly efficient protocol and has been implemented as part of distributed systems software project at Cornell University Here we focus on the precise definition of the problem the protocol correctness proofs and an analysis of costs Keywords Asynchronous computation Fault detection Process membership Fault tolerance Process group Comments to Werner Vogels	other	cornell
768	 Server Date Sunday GMT Monday GMT David Gries Curriculum Vitae DAVID GRIES William Lewis Professor of Engineering Citizenship United States Stephen Weiss Presidential Fellow Email gries Department of Computer Science Telephone Upson Hall Date of Birth Cornell University Date January Ithaca New York USA Queens College in University of Illinois in Munich Institute of Technology rer nat in Mathematics EXPERIENCE Naval Weapons Lab Assistant Munich Inst of Technology Assistant Professor Stanford University Associate Professor Cornell University Sabbatic Technical University Munich Professor Cornell University Chair Computer Science Department Cornell Sabbatic Oxford University Sabbatic Regents Chair in Computer Science Univ Texas Austin William Lewis Professor of Engineering endowed chair STUDENTS ADVISED Susan Graham Tai Jennifer Widom Levy Gary Levin Jan Prins John Brown John Holm Geoffrey Smith Donald Johnson Robert Melville Raman Narain Gehani Peter Vanderbilt Efremidis Susan Owicki Dean Jacobs Juan Lafuente Van Long Nguyen AWARDS Doctor of Laws Honorary Degree Daniel Webster College Nashua New Hampshire May ACM Karl Karlstrom Outstanding Educator Award Taylor Booth Award Education Award IEEE Computer Society Advisor of Raman whose thesis won the annual ACM Best Dissertation Award March Award for Outstanding Contributions to Computer Science Education Education Award American Federation of Information Processing Societies Computing Research Association Award for Service to the Computing Community ACM Fellow Charter member among the first group to be inducted March Fellow of the AAAS Guggenheim Fellowship ACM Programming Systems and Languages Paper Award with Owicki AWARDS AT CORNELL Weiss Presidential Fellow for contributions to undergraduate education Cornell University Computer Science Department Faculty of the Year Cornell Association for Computer Association of Undergraduates ACSU Clarke Award for Excellence in Undergraduate Teaching College of Arts and Science Cornell University Chosen by Cornell Merrill Presidential Scholar Thomas Yan as the faculty member who had the most positive influence on his education at Cornell COMMUNITY PARTICIPATION AND LEADERSHIP SELECTED Member Computing Research Board Chair Computing Research Board Series Editor Springer Verlag Texts and Monographs in Computer Science Main Editor Acta Informatica Managing Editor Information Processing Letters Editor Programming Languages section of CACM Editorial Board Acta Informatica Information Processing Letters Springer Verlag Lecture Notes in Computer Science Distributed Computing Software and Tools Formal Aspects of Computer Science Advisory Board Conference on Foundations of Software Technology and Theoretical Computer Science India Chair Program Committee IEEE Symp Logics in Computer Science Member of Program Committees Int Symp Programming Int Symp Programming POPL POPL Int Conf Software Engineering IFIP Working Conference on Programming Concepts and Methods National Research Council to Survey International Developments in Computer Science Computer Science Screening Committee Council for International Exchange of Scholars Chair Panel on research directions in Software NSF Advisory Committee Meeting Scientific Director Institute for Encapsulation Modularization and Reuseability Year of Programming University of Texas at Austin Member Committee to Assess the Scope and Direction of Computer Science and Technology Computer Science and Telecommunications Board of the National Research Council ACM Task Force on Computer Science Core Curriculum ACM Strategic Planning Committee Scientific Director Institute for Encapsulation Modularization and Reuseability Year of Programming University of Texas at Austin Chair ACM Award Committee Best Paper in Programming Languages and Systems National ACM Lecturer Member Selection committee for NAS Graduate fellowships Member IFIP Working Group Reviewer for the PROCOS research project the ESPRIT program Review Committee numerous computer science departments PATENTS Method for generating audio renderings of digitized works having highly technical contents Patent applied for Docket No with Raman PUBLICATIONSBooks Logical Approach to Discrete Math Springer Verlag NY pages with Schneider Instructor Manual for Logical Approach to Discrete Math Gries and Schneider Ithaca pages with Schneider Beauty is our Business Editor Springer Verlag New York pages with Feijen van Gasteren and Misra The Science of Programming Springer Verlag New York pages Translated into Russian and Japanese Programming Methodology Collection of Articles by Members of IFIP Editor Springer Verlag New York pages An Introduction to Programming structured approach Winthrop Cambridge Edition pages with Conway The following books are extensive revisions to suit different needs Primer on Structured Programming Using and pages with Conway Primer on Structured Programming using Pascal pages with Conway and Zimmerman An Introduction to Structured Programming using with Conway and Wortman Introduction to Microprocessor Programming using pages with Conway Fay and Bass Compiler Construction for Digital Computers John Wiley and Sons New York pages Translated into Spanish Japanese Chinese Italian and Russian Published Articles and Lectures What education for Address at the Opening Convocation Daniel Webster College September The need for education in useful formal logic IEEE Computer April Avoiding the undefined by underspecification In van Leeuwen Computer Science Today Springer Verlag Lecture Notes in Computer Science October with Fred Schneider Teaching math more effectively through calculational proofs The Mathematical Monthly October with Schneider new approach to teaching discrete mathematics PRIMUS June with Schneider Equational propositional logic IPL February with Fred Schneider Documents mean more than just paper Proc Second International Workshop on the Principles of Document Processing April with Raman Data refinement and the transform In Broy ed Program Design Calculi NATO ASI Series Heidelberg pp Computer Science Academic Encyclopedia of Computer Science Third Edition Ralston and Reilly eds Van Nostrand Reinhold New York with Marsh Loop invariant Encyclopedia of Computer Science Third Edition Ralston and Reilly eds Van Nostrand Reinhold New York network proof systems expressiveness and completeness TOPLAS July with Widom and Schneider new programming language Proc Software Technology Conference Los Angeles California April pp constructive proof of Vizing theorem IPL March with Misra On progress in programming In Broy Informatik und Mathematik Springer Verlag Heidelberg pp Teaching calculation and discrimination more effective curriculum Comm ACM March Binary to decimal one more time In Beauty is our Business Feijen et al eds Springer Verlag New York pp The transform new language construct Structured Programming with Volpano An optimal parallel algorithm for generating combinations IPL November with Akl and Stojmenovic Influences or lack thereof of formalism in teaching programming and software engineering Banquet speech Ibid pp presentation of vote algorithm In Formal development of programs and proofs Dijkstra ed Menlo Park pp Inorder traversal of binary tree and its inversion Ibid pp with van de Snepscheut The problem Ibid pp An algorithm for transitive reduction of an acyclic graph Science of Computer Programming July with Martin van de Snepscheut and Udding Developing linear algorithm for cubing cyclic permutation Science of Computer Programming December with Xue Generating random cyclic permutation BIT with Xue note on Graham convex hull algorithm IPL July with Stojmenovic Horner rule and the computation of linear recurrences IPL June with Pascoletti and Sbriz Programming pearls guest oyster Comm ACM April Mclaren masterpiece Science of Computer Programming April with Prins inversion of cyclic permutation IPL January with Feijen and van Gasteren Completeness and incompleteness of network proof systems Proc Fourteenth Ann ACM Symp Princ Programming Languages January Munich with Widom and Schneider Programming methodology making science out of an art Engineering Cornell Quarterly Fall with Schneider model and temporal proof system for networks of processes Distributed Computing with Nguyen Demers and Owicki new notion of encapsulation Proc SIGPLAN Symp Language Issues in Programming Environments Seattle June with Prins Behavior temporal approach to process modeling Conference on Logics of Programs Brooklyn June LNCS with Nguyen Demers and Owicki model and temporal proof system for networks of processes Twelfth Ann ACM Symp Princ Progr New Orleans January with Nguyen and Owicki General correctness unification of partial and total correctness Acta Informatica with Jacobs The emerging science of programming Keynote Address Australian Computer Science Conference Sydney Australia February Towards practical science of programming Keynote Address Conf Foundations of Software Technology and Theoretical Computer Science Bangalore India December Fast broadcasts Science of Computer Programming April with Schneider and Schlichting note on standard strategy for developing loop invariants and loops Science of Computer Programming Finding repeated elements Science of Computer Programming November with Misra proof technique for communicating sequential processes Acta Informatica with Levin Educating the programmer notation proofs and the development of programs Invited lecture Information Processing Proc IFIP Congress Lavington Ed New York Computing Fibonacci number in log time IPL October with Levin Assignment and procedure call proof rules TOPLAS October with Levin sorting IPL July with Melville Is sometime ever better than alway TOPLAS October Eliminating the chaff In Program Construction Bauer and Broy Eds LNCS Current ideas in programming methodology In Research Directions in Software Technology Wegner Ed MIT Press The graph marking algorithm Acta Informatica linear sieve algorithm for finding prime numbers Comm ACM December with Misra Parallel programming invited lecture Jahrestagung Springer Verlag Informatik Berichte October Berlin Germany The multiple assignment statement IEEE Trans Softw Eng March Language facilities for programming dialogues IBM Research and Development March Reprinted in Edmunds The Separable User Interface Academic Press San Diego pp with LaFuente An exercise in proving parallel programs correct Comm ACM December Some ideas on data types in languages Comm ACM June with Gehani An illustration of current ideas on the derivation of correctness proofs and correct programs IEEE Trans Softw Eng December Compiler Encyclopedia of Computer Science and Technology Belzer Holzman and Kent Eds Markel Dekker New York Error recovery and correction introduction to the literature Compiler Construction Advanced Course Bauer and Eickel Eds LNCS edition Springer Verlag New York Some comments on programming language design invited lecture Programmiersprachen Fachtagung Schneider and Nagl Eds Springer Verlag Heidelberg An axiomatic proof technique for parallel programs Acta Informatica with Owicki Verifying properties of parallel programs an axiomatic approach Comm ACM May with Owicki On structured programming reply to Smoliar Comm ACM November also Comm ACM October and Comm ACM January What should we teach in an introductory programming course SIGCSE Bulletin February Proc Symp Computer Science Education Describing an algorithm by Hopcroft Acta Informatica Programming by induction IPL Program schemes with pushdown stores SIAM Computing with Szymanski and Brown On classes of program schemata SIAM Computing with Constable Automatic compiler writing techniques In Systemprogrammierung Ganzhorn Schieferdecker Endres Ed Oldenbourg Verlag Munich Translator writing systems Comm ACM February with Feldman The use of transition matrices in compiling Comm ACM January The post mortem dump Comm ACM December with Bayer Paul and Wiehle Characterizations of certain classes of norms Numerische Mathematik Some results on fields of value of matrix SIAM Numerical Analysis with Stoer Some techniques used in the Comm ACM August with Paul and Wiehle Published Reports Computer science Cornell Engineering Quarterly Summer Die wissenschaftlichen Nachtkommen von Bauer In Broy Informatik und Mathematik Springer Verlag Heidelberg pp The Taulbee survey Computing Research News January and Comm ACM January with Dorothy Marsh The Taulbee survey Computing Research News January and Comm ACM September with Dorothy Marsh Computer languages In Hopcroft and Kennedy ed Computer Science achievements and opportunities Report of the NSF Advisory Committee for Computer Research SIAM Philadelphia pp with Hoare Kennedy Pereira and Scott The Computer Worm Report from the Commission of Preliminary Enquiry Cornell University Cornell University February with Eisenberg Hartmanis Holcomb Lynn and Santoro The Snowbird Report discipline matures Computer with Walker and Young Computing as Discipline Final report of ACM Task Force on the Core of Computer Science Computer with Denning Comer Mulder Tucker Turner and Young The Taulbee survey Comm ACM October and Computer November with Marsh The Taulbee survey Comm ACM August and Computer August with Dorothy Marsh The Taulbee survey Comm ACM August Meeting the basic research needs of computer science Report of the study group of the Advisory Committee for Computer Research National science Foundation December with Kosaraju and Fischer The Taulbee survey Comm ACM Oct Twenty years of computer science at Cornell Engineering Cornell Quarterly Fall Imbalance between growth and funding in academic computer science two trends colliding Computer September and Comm ACM September with Miller Ritchie and Young Other reports and reviews On presenting monotonicity and on AE Tech Rpt Computer Science Department Cornell University May Teaching math more effectively through the design of calculational proofs Tech Rpt March Accepted for publication in the Mathematical Monthly January new approach to teaching mathematics Tech Computer Science Department Cornell University February Accepted for publication in PRIMUS with Schneider constructive proof of Vizing theorem Tech Computer Science Department Cornell University August with Misra Forward Essays in Computing Science by Hoare and Jones Prentice Hall International London The planarity algorithm presentation and improvements Tech Rpt April with Xue Presenting an algorithm to find the minimum edit distance Tech Rpt March with Burkhart Inorder traversal of binary tree and its inversion Tech Rpt November with Jan van de Snepscheut Complete network proof systems an advisor perspective Tech Rpt Computer Science Department Cornell University September Developing two of Arsac funny algorithms Tech Computer Science Department Cornell University November The Gibbs Programming Environment IEEE International Conference on Computer Design VLSI in Computers ICCD Oct Port Chester NY The problem Tech Computer Science Cornell University September with Pritchard Review of Dromy book How to solve it by computer Science of Computer Programming reply to Susan Gerhart review of Craft and Science May The science of programming answer book Tech Computer Science Cornell University Ithaca New York June The problem Tech Computer Science Cornell University Ithaca New York May with Misra Finding the longest prefix August Notes on Mathematical Induction and Sets November Cand and Cor before and then and or else in ADA Tech Computer Science Cornell University Ithaca New York May Yet another exercise using shared variables in two processes to provide mutual exclusion Tech Computer Science Cornell University Ithaca New York Tutorial on the development of programs COMCON September with Parnas note on iteration Tech Computer Science Cornell University Ithaca New York September proof of correctness of Rem semaphore implementation of the statement Tech Computer Science Cornell University Ithaca New York May The use of comments on programming with Conway compiler Tutorial Software Document DISE Task Force on Software Engineering May Recursion as programming tool Tech Computer Science Cornell University Ithaca New York May note on program development Tech Computer Science Cornell University Ithaca New York March Using recipes to teach programming CIL Compiler Implementation Language SLAC Report March MPL Mathematical Programming Language Computer Science Report Computer Science Department Stanford University with others Ueber einige Klassen von Normen Thesis Technische Hochschule Muenchen ALGOL compiler for the IBM Report Rech der Tech Hochschule Munich with Paul and Wiehle The object program produced by the compiler Report Rech der Tech Hochschule Munich User manual for the ALGOL translator University of Illinois September pages with Bayer and Murphree Jr	other	cornell
769	 Server Date Sunday GMT Friday GMT Jing Huang Course Page This page for Multimedia Systems Jing Huang huang Readings The JPEG Still Picture Compression Standard MPEG Video Compression Standard for Multimedia Applications Methods for Encrypting and Decrypting MPEG Video Data Efficiently Audio Engineering and Psychoacoustics Psychophysics and Modern Digital Audio Technology Algorithms for Manipulating Compressed Images Resolution Independent Video Language Image Metamorphosis Multimedia Storage Servers Tutorial Project Home Page	other	cornell
770	 Server Date Sunday GMT Friday GMT Cornell Center for the Theatre Arts Jason page Cornell Center for the Theatre Arts Jason page help organize group of Computer Science people interested in the theatre specifically the Cornell Center for the Theatre Arts We buy block of season tickets and pass them out during the year If someone ca make it on one of the days bought tickets for then help them sell their old ticket and buy new one We also have few extra tickets this year for friends Each ticket costs the season subscription was If you are known to me or the Cornell Computer Science department and you are interested in the theatre send me mail jyh and include you in further mailings Season events for Power plays Seats are reserved in the main Proscenium theatre and they open in the Flexible theatre The Importance of Being Earnest Oscar Wilde Proscenium theatre In this witty and satirical comedy two young men seek the hands of two young ladies despite numerous obstaces including the fact that the ladies can only love man named Ernest This masterpiece is one of the most delightful comedies of all time complete with manufactured mistaken identity fractured romances and upended social conventions Plays Septermber we have tickets for September and Fires in the Mirror Crown Heights Brooklyn and Other Identites Anna Deveare Smith Flexible theatre searing look at two cultures living in Crown Heights Brooklyn in young black child is killed when Hasidic man car jumps curb An Hasidic Rabbinical student is stabbed and killed in an act of retaliation The ensuing riots wracked community previously praised for its atmosphere of tolerance and diversity Drawing from over interviews with Crown Heights residents politicans activists religious leaders victims and perpetrators Fires in the Mirror acheives compelling and sophisticated view of racial and class conflict Plays October we have tickets for October and Measure for Measure William Shakespeare Proscenium theatre Shakespeare most direct exploration of the uses and abuses of power In bawdy Vienna the young Isabella must plead for the life of her condemned brother whose fate is in the hands of Angelo Though he administers the law with utmost morality Angelo finds he desires Isabella and offers her brother life in echange for possesing her Isabella must choose between her love for her brother and her own honor Plays November we have tickets for November and Oleanna David Mamet Film forum male university professor and his female student meet to discuss her performancs in his class and soon become players in fierce interrogation of political correctness mechanisms of power censorship and abuse From the Pulitzer author of Glenngarry Glen Ross The Verdict and Oleanna is at once direct provocative and incendiary Shakes up the theatre like no play in years Rolling Stone Plays January we have tickets for February and Working from the book by Studs Terkel Flexible theatre Adapted by Stephen Schwarts Nina Faso Songs by Craig Carnelia Micki Grant Mary Rodgers Susan Birkenhead Stephen Schwartz James Taylor This musical look into the everyday lives of many different American workers will ring true for anyone who has ever faced the Monday morning blues or sighed workers from blue collar to executive tell their stories through music and monologues expressing their goals hopes and aspirations glorius show that rethreads the fabric of American life and leaves you cheering Daily News Plays February we have tickets for February and The Seagull Anton Chekhov Proscenium theatre provocative meditation on the seductiveness of power seagull is slaughtered young woman is seduced and then abandoned The innocent and hopefull fall into triangle of love and obsession culminating in futile self destruction Plays April we have tickets for April and May There are also two Dance Concerts you may be interested in We have tickets to the Dance Concert but if people are interested will buy some Dance Concert Proscenium Theatre Exciting original choreography performed by Cornell faculty and students Featuring diverse range of dance from ballet modern and to dance theatre this is event for dance lovers Extravagant lighting costumes and live and original music set the stage for the hottest new dance in the region Plays March Dance Alloy Proscenium Theatre Artistic Director Mark Taylor and Dance Alloy have become the defining force in Pittsburgh contemporary dance scene with dance that is elegant original and daring Brought to life by the strength and grace of the Alloy dancers who explore the limits of human movement these dances are both physically charged and visually complex Thanks to The Alabama Shakespeare Festival for the pictures	other	cornell
771	 Server Date Monday GMT Thursday GMT Department Directory Listing CS Department Directory Listing January The following is directory listing of those in the Computer Science Department and some of those closely associated with the department The entries include name office address and phone number Note that the phone numbers given are local Cornell exchange numbers If you are outside the local Cornell exchange and wish to call someone precede the number shown with For example Ken Birman full phone number is If you have questions or find errors send email to www or call FACULTY Birman Ken ken Cardie Claire cardie Coleman Thomas coleman Constable Bob rc CHAIR Donald Bruce brd LEAVE Godfrey Michael migod Gries David gries Hartmanis Juris jh Huttenlocher Daniel dph Keshav skeshav Kozen Dexter kozen Land Bruce bruce Morrisett Greg jgm Perkins Hal hal Pingali Keshav pingali Rubinfeld Ronitt ronitt Schneider Fred fbs Seshadri Praveen praveen Smith Brian bsmith Tardos Eva eva Teitelbaum Tim tt Toueg Sam sam Trefethen Nick lnt Van Loan Charles cv Vavasis Stephen vavasis LEAVE von Eicken Thorsten tve Wagner Kay kay Zabih Ramin rdz VISITING FACULTY Harkleroad Leon leon SUPPORT Alzo Lisa alzo Ayer Carol ayer Batzer Jan jan Buck Laurie buck Cameron Pauline cameron Competillo Linda lmc Consroe Karla karla Crawford Sue crawford Croft Helene croft Grant Kathe grant Jenkins Dan jenkins Mardel Linda mardel Musa Pat musa Personius Becky becky Ricks Kate kate Robinson Cindy cindy Williams Cindy williams Wojcinski Claudia claudia COMPUTER FACILITIES STAFF adm Alderman Ian ian Finley John finley Flanagan Doug flanagan Johnson Orlando oj Krafft Dean dean Moore Denise denise Parmelee Larry parmelee Wilson Cay wilson RESEARCHERS Adelstein Frank frank Allen Stuart sfa Carroll Jeff carroll dri Chew Paul chew Curtin Meredith curtin Eaton Rich eaton Fielding David fielding Friedman Roy roy Kannapan Srikanth kannapan Krietz Christopher Lagoze Carl lagoze Li Yuying yuying Morgenstern Matt matthew VanRenesse Robbert rvr Vogels Werner vogels Weber Andreas aweber Wilson Todd twilson Zack Greg zack Zippel Richard rz PhD STUDENTS Aaron Eric Rick aaron Aguilera Marcos aguilera Ahmed Nawaaz nawaaz Basu Anindya basu Batu Tugkan batu Benzinger Ralph ralph Brown Daniel snowman Budiu budiu Chang chichao Chen Wei weichen Chu Francis fcc Crary Karl crary Czajkowski Grzegorz grzes Durkin James jwd Ergun Funda ergun Erlingsson Ulfar ulfar Fernandez Sebastian spf Glew Neal glew Guo Katherine kguo Hafizogullari Ozan ozan Hawblitzel Chris hawblitz Hayden Mark hayden Heng heng Hickey Jason jyh Hickey Takako takako Amanda amanda Howe Nicholas howe Hu Deyu hu Huang Jing huang Huang ychuang Janosi Tibor janosi Kanetkar Sumedh kanetkar Kartch Dan kartch Kettnaker Vera kettnaker Kodukula Induprakas prakas Komissarchik Julia juliak Kotlyar Vladimir vladimir Kyparlis Athanasios kyparlis Lam Ioi ioi Li Li lili Liu Xiaoming xliu Mardis Scott mardis Marschner Stephen srm Mateev Nikolay mateev Menon Vijay vsm Millett Lynette millett Minsky Yaron yminsky Mitra Mandar mitra Moran Evan evan Mukhopadhy Sugata sugata Naumov Pavel pavel Ooi Wei Tsang weitsang Pearson David pearson Pierce David pierce Qiu Lili lqiu Ravikumar ravi Sharma Rosen sharma Smith Frederick fms Stodghill Paul stodghil Summers Kristen summers Van den Berg Aswin aswin Vaysburd Alexey alexey Veksler Olga olga Verma Arun verma Viswanath Divakar divakar Walker David walker Walter Bruce walter Wang Jia jiawang Weirich Stephanie sweirich White Patrick white Xiao Zhen xiao Yan Thomas tyan Zdancewic Stephan zdance Zhou ldzhou ACRI Bojanczyk Adam adamb ee Chrisochoides Nikos nikosc Hough Patricia phough Liao Aiping liao Sun Chunguang csun Wagner Mike mwagner Wohlever Chris wohl MISC ACRI ACSU Administrative Office office CFS Office adm CIT Help Desk CCC Computer Services part of CIT Copy Center Phillips Hall Dial Up Line CS Dial Up Line sytek Dept FAX DRI Lois Brown Fields Eric Grad Office ISIS Project Machine Room floor Machine Room floor Robotics Lab Theory Center Kathy Shippos Office ugrad MENG STUDENTS Ahuja Vineet ahuja Anderson Susan anderson Balakrishna Deepak gbd Bhardwaj Aastha bhardwaj Bringle Michael mbringle Camargo Fabian fabian Castro Alexander alcastro Chan Kinkok kchan Chang Oliver ochang Chen jwchen Chew Andrew achew Chiu cchiu Choi Hyunmook choi Chung Yoo ychung Daley Thomas daley Fielding David fielding Hammer Vincent vhammer Hong Jinwood jin Hsu Jerry jhsu Hu chinglan Huang Jin jhuang Huangyutitham Tanasak cjhuang Javeri Ashish ashish Korby Michael mkorby Koster David dkoster Landis Sean scl LEAVE Leong Kian Fai kleong Li jgli Liau ckliau Lin Libby libby Lin weiwei Lung Felix flung Machuca Jose jose Malik Indira lmalik McLean Dexter mclean Mukai Nobuhiko mukai Nguyen Mai mpnguyen Nguyen Olivier nguoli Nicks Brian bnicks Patel Ankit apatel Sachdeva Anil anil Shrikhande Nikhil nikhil Srivastava Sunil sxsrivas Suwantaemee Teerin swantaem Tans Sicco stans Teo Jinqchong teo Tsuchimoto Yuichi Yuichi Valerjev Nikola nikola Vitrano Eric vitrano Wang Jui juiw Wang nwang Wang whwang Wang liwang Wong Amy wwong Wu David dwu Wu Linda lxwu Wu Michael mwu Yan Diyu diyu Department Home Page Annual Report Home Page Department Home Page Annual Report Home Page	other	cornell
772	 Server Date Sunday GMT Wednesday GMT JAVA Applet for Camera and Perspective Transforms	other	cornell
773	 Server Date Sunday GMT Wednesday GMT Camera and Perspective Transforms in JAVA	other	cornell
774	 Server Date Sunday GMT Thursday GMT Teaching Logic as tool An introduction to teaching logic as tool Logic is the glue that binds together methods of reasoning in all domains Gries and Fred Schneider Click on any of the following items for more information text on teaching logic as tool Logical Approach to Discrete Math Instructor Manual for Logical Approach to Discrete Math Brief introduction to equational logic Inference rules of equational logic Axioms of equational logic Precedence rules Useful proof principles and heuristics Grounding informal proof techniques in logic neat solution to word problem short history of equational logic Panel on teaching logic as tool March Articles and lectures on teaching logic as tool Upcoming events regarding teaching logic as tool Glimmer ick of Hope Banquet speech at September in Limerick Ireland so be prepared Trefethen madness thoughts on Gries in limerick form Home pages for Gries and Schneider Cornell CS Department Home Page	other	cornell
775	 Server Date Sunday GMT Thursday GMT Ralph Benzinger Serious The German Tagesschau news The German Zeit magazine The daily junk Less serious My personal pillory The weather in Ithaca The Big Red Cheerleaders Some funny quotes Find the Pope in the Porsche	other	cornell
776	 Server Date Sunday GMT Monday GMT Reasoning About Knowledge Next Reasoning About Uncertainty Up Teaching Experience Reasoning About Knowledge COM Course Description Reasoning about knowledge particularly the knowledge of agents who reason about the world and each other knowledge was once the exclusive province of philosophers and puzzle solvers More recently this type of reasoning has been shown to play key role in surprising number of contexts from understanding conversations to the analysis of distributed computer algorithms This course provides general discussion of approaches to reasoning about knowledge and its applications to distributed systems artificial intelligence and game theory We start by examining the muddy children puzzle which demonstrates the subtleties of reasoning about knowledge of group We then consider simple yet powerful formal semantic model for knowledge and language for reasoning about knowledge whose underlying idea is that of possible worlds The rest of the course develops the model and show how it can be used to ascribe knowledge to agents in systems This allows us to better understand notions such as coordination and agreement The definitions lead naturally to notion of programs tool for designing and analyzing systems The course follows closely the material in the book Reasoning About Knowledge which actually was inspired by early versions of the course	other	cornell
777	 Server Date Sunday GMT Wednesday GMT Tom Henzinger Publications List of Publications Thomas Henzinger Reactive Modules Rajeev Alur and Thomas Henzinger Local liveness for compositional modeling of fair reactive systems Proceedings of the Seventh International Conference on Verification CAV Lecture Notes in Computer Science pp Rajeev Alur and Thomas Henzinger Finitary fairness Proceedings of the Ninth Annual IEEE Symposium on Logic in Computer Science LICS pp Monika Henzinger Thomas Henzinger and Peter Kopke Computing simulations on finite and infinite graphs Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS pp Logics and Timed Transition Systems Rajeev Alur and Thomas Henzinger Time for logic SIGACT News Rajeev Alur and Thomas Henzinger Logics and models of real time survey In Real Time Theory in Practice Lecture Notes in Computer Science pp Abstract Ftp postscript Rajeev Alur and Thomas Henzinger really temporal logic Journal of the ACM preliminary version appeared in the Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS pp Abstract Ftp postscript Rajeev Alur and Thomas Henzinger logics complexity and expressiveness Information and Computation preliminary version appeared in the Proceedings of the Fifth Annual IEEE Symposium on Logic in Computer Science LICS pp Abstract Ftp postscript Thomas Henzinger modal logic how to prove properties Proceedings of the Ninth Annual ACM Symposium on Principles of Distributed Computing PODC pp Abstract Ftp postscript Thomas Henzinger Zohar Manna and Amir Pnueli Temporal proof methodologies for timed transition systems Information and Computation Preliminary versions of the two parts appeared respectively in the Proceedings of the Annual ACM Symposium on Principles of Programming Languages POPL pp and in Real Time Theory in Practice Lecture Notes in Computer Science pp Abstract Ftp postscript Thomas Henzinger Zohar Manna and Amir Pnueli What good are digital clocks Proceedings of the International Colloquium on Automata Languages and Programming ICALP Lecture Notes in Computer Science pp Abstract Ftp postscript Rajeev Alur Tomas Feder and Thomas Henzinger The benefits of relaxing punctuality Proceedings of the Tenth Annual ACM Symposium on Principles of Distributed Computing PODC pp Abstract Ftp postscript Thomas Henzinger Sooner is safer than later Information Processing Letters Abstract Clock Systems and Timed Automata Rajeev Alur and Thomas Henzinger system discrete system clock variables In Theories and Experiences for System Development Rus Rattray eds AMAST Series in Computing World Scientific pp Abstract Ftp postscript Thomas Henzinger and Peter Kopke Verification methods for the divergent runs of clock systems Proceedings of the Third International Symposium on Formal Techniques in and Systems FTRTFT Lecture Notes in Computer Science pp Thomas Henzinger Xavier Nicollin Joseph Sifakis and Sergio Yovine Symbolic model checking for systems Information and Computation preliminary version appeared in the Proceedings of the Seventh Annual IEEE Symposium on Logic in Computer Science LICS pp Abstract Ftp postscript Rajeev Alur Thomas Henzinger and Moshe Vardi Parametric reasoning Proceedings of the Annual ACM Symposium on Theory of Computing STOC pp Abstract Ftp postscript Rajeev Alur Costas Courcoubetis and Thomas Henzinger Computing accumulated delays in systems Proceedings of the Fifth International Conference on Verification CAV Lecture Notes in Computer Science pp Abstract Ftp postscript Thomas Henzinger Peter Kopke and Howard The expressive power of clocks Proceedings of the International Colloquium on Automata Languages and Programming ICALP Lecture Notes in Computer Science pp Rajeev Alur Costas Courcoubetis and Thomas Henzinger The observational power of clocks Proceedings of the Fifth International Conference on Concurrency Theory CONCUR Lecture Notes in Computer Science pp Abstract Ftp postscript Rajeev Alur and Thomas Henzinger Back to the future towards theory of timed regular languages Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS pp Abstract Ftp postscript Rajeev Alur Limor Fix and Thomas Henzinger determinizable class of timed automata Proceedings of the Sixth International Conference on Verification CAV Lecture Notes in Computer Science pp Hybrid Automata Rajeev Alur Costas Courcoubetis Thomas Henzinger and Ho Hybrid automata an algorithmic approach to the specification and verification of hybrid systems In Hybrid Systems Lecture Notes in Computer Science pp Abstract Ftp postscript Rajeev Alur Costas Courcoubetis Thomas Henzinger Nicolas Halbwachs Ho Xavier Nicollin Alfredo Olivero Joseph Sifakis and Sergio Yovine The algorithmic analysis of hybrid systems Theoretical Computer Science preliminary version appeared in the Proceedings of the International Conference on Analysis and Optimization of Systems Systems Lecture Notes in Control and Information Sciences pp Abstract Ftp postscript Rajeev Alur Thomas Henzinger and Ho Automatic symbolic verification of embedded systems Proceedings of the Annual IEEE Systems Symposium RTSS pp Abstract Ftp postscript Thomas Henzinger and Ho note on strategies for hybrid automata In Hybrid Systems II Lecture Notes in Computer Science pp Abstract Ftp postscript Thomas Henzinger and Ho HyTech The Cornell HYbrid TECHnology Tool In Hybrid Systems II Lecture Notes in Computer Science pp Thomas Henzinger Ho and Howard HyTech The Next Generation Proceedings of the Annual IEEE Systems Symposium RTSS pp Thomas Henzinger Ho and Howard user guide to HyTech Proceedings of the First Workshop on Tools and Algorithms for the Construction and Analysis of Systems TACAS Lecture Notes in Computer Science pp Full version available as Cornell Technical Report Thomas Henzinger Peter Kopke Anuj Puri and Pravin Varaiya What decidable about hybrid automata Proceedings of the Annual ACM Symposium on Theory of Computing STOC pp Thomas Henzinger Hybrid automata with finite bisimulations Proceedings of the International Colloquium on Automata Languages and Programming ICALP Lecture Notes in Computer Science pp Thomas Henzinger and Ho Algorithmic analysis of nonlinear hybrid systems Proceedings of the Seventh International Conference on Verification CAV Lecture Notes in Computer Science pp Thomas Henzinger Zohar Manna and Amir Pnueli Towards refining temporal specifications into hybrid systems In Hybrid Systems Lecture Notes in Computer Science pp Abstract Ftp postscript Arjun Kapur Thomas Henzinger Zohar Manna and Amir Pnueli Proving safety properties of hybrid systems Proceedings of the Third International Symposium on Formal Techniques in and Systems FTRTFT Lecture Notes in Computer Science pp Last updated on September tah	other	cornell
778	 Server Date Monday GMT Tuesday GMT Instructors Instructors Kay Wagner Upson Jan Telle Upson Samuel Weber Upson Todd Wilson Upson Spring pierce	other	cornell
779	 Server Date Monday GMT Tuesday GMT Online Documents Cornell CS Modeling and Simulation Project Online Documents By Author By Project	other	cornell
780	 Server Date Sunday GMT Monday GMT Our new house Our new house Click here to see map of the area Information about Mortgages XXXXX XXXXX XXXXX XXXXX	other	cornell
781	 Server Date Sunday GMT Thursday GMT PSSLS Parallel Solution of Sparse Least Squares Problems PSSLS Parallel Solution of Sparse Least Squares Problems is sparse matrix package for solving large sparse linear least squares problems on machines This package is implemented in ANSI using arithmetic The IBM Library MPL is used for communication among processors PSSLS is parallel direct sparse solver To solve sparse linear least squares problem sparse QR decomposition is computed Then sparse triangular system is solved Both the sparse QR factorization and the triangular solution are carried out by parallel multifrontal scheme user guide to PSSLS is available here For further information regarding PSSLS please contact the author csun	other	cornell
782	 Server Date Monday GMT Saturday GMT Homework Homework Handed out Tue Mar Due Thu Mar You are to find one partner for the term project select projet and place proposal of what you want to do on the web The proposal must address the following points title page project description goals plan of attack expected kind of results how to determine critical steps to get done soon Create subdir in and place the proposal there Name the file Here are some ideas that could lead to interesting projects Some of these are projects that could easily be accomplished within the context of Others could eventually expand into publications or Meng project If you pick problem with wider scope you must be sure to isolate piece that can be adequately addressed within the semester You may work in teams of two possibly three but there should be clearly identifiable role for each member of the team especially for three person teams New High bandwidth Couple and Build Ethernet gateway using at IP level at level Implement kernel endpoints and run standard IP over Add IP packet filter to firmware or to Fast Ethernet Implement Active Messages for shared fast ethernet parallel gdb for Splash benchmarks Perfect fast RPC implementation urpc from last year Perfect distributed shared memory from last year USIT Instruction Set Design and Measurement Condition codes or not that is the question Suggested by David Wood Most architectures designed in the and employ condition codes Several of the recent RISC architectures do not yet others do For example the MIPS architecture does not have condition codes yet it has SET instructions that put the result of comparison into general purpose register The has virtual condition code registers which can be set either as of an ALU instruction or explicitly by compare instructions Explore the similarities and differences of these two schemes Is one clearly better than the other Are the differences technology dependent As processors become increasingly integrated which scheme will lead to the best performance Analyze instruction issue strategies Analyze and compare Scoreboarding Tomasulo algorithm and the scheme Where the beef How much of the advantage of dynamic scheduling is achieved by static scheduling and delay slots How do the change with increased speed ratio Are free caches or critical can pull together some good tools that students built at Berkeley years ago they did have much time left to study the results though so you could leverage their work Address spaces beyond bits According to some observers the demand for virtual address space increases at the rate of bit every years Thus while bit architectures were quite acceptable throughout the and they eventually became too constraining and have almost entirely been replaced At this rate we have just few more years before addresses begin to constrain our programs Some architectures have introduced segments to extend the address space Some computer architects suggest that only full machines integers and addresses will solve the problems Explore the cost performance programming and compatibility issues of these approaches Most RISC architectures have already defined But we do have any tools for analyzing the use of large address spaces and several interesting methodology issues arise in doing so Machine independent binaries All RISC instruction sets look almost identical but you sure can not compile one program for all Perhaps there is middle ground generic RISC that could be easily mapped to variety of ISA with reasonable efficiency One such design has been developed pretty far by OSF This raises another interesting question of machine independent pipeline scheduling PowerPC architecture Compare the Intel processor to the or Dig up all the technical information you can and try to come to terms with the real differences The is RISC processor at heart so what all this fuzz about old code Does it really matter The point of this project is to go further than the trade rags which beleive all the marketing hype as long as it boosts their sales Validation of Cache Studies Using tools like spy or spix and piping the trace directly into an optimized cache simulator it is possible to evaluate substantial workloads of billions of instructions Review the literature and see whether the important published results on cache studies really hold up In particular what is the limit of Spec based caching studies At some point all the Spec programs fit into the cache Superscalar Superpipeline Data Cache for Superscalar Architectures What does it take to services several hits per cycle To continue servicing hits while misses are being processes in the next level of the memory hierarchy How much does this buy Try sample design to get feeling for the complexity Build simple simulator and run some memory traces through it to see how much performance improvement is possible Sophisticated Branching for Superscalar Machines Suggested by Steve Krueger In RISC processors pipeline break is relatively costly In superscalar RISC processors that cost is effectively multiplied by the number of instructions that execute simultaneously It is therefore desirable to increase the runs of instructions without branches Some old architectures had SKIP instructions that were used extensively It seems that SKIP instructions possibly with restrictions on what could be skipped could give conditional execution without breaking the pipeline through the use of SQUASH or KILL hardware already in place due to the needs of exception processing Study whether the number of cases where SKIP instructions could be effectively used is great enough to make them useful forms might extend the usefulness by allowing more than one instruction to be skipped Several variants of this idea could be considered including multiway branches conditional moves operators to avoid branching max min abs and conditional operators Register organization for Superscalar Machines Superscalar execution looks very attractive once the multiplier and floating point units fit on chip since at CPI these sit mostly idle However the cost increase comes in the memory system see above and the register file To execute four instructions per cycle do we need register file Many values are forwarded between functional units and never touch the register file Study register usage patterns in superscalar designs and see how the number of ports can be reduced What are the Multiprocessors Multiple processors on Chip If you allow yourself transistor budget of to million transistors on chip you have plenty of room for innovative designs with multiple processors on chip This raises host of interesting questions Should caches be shared or dedicated to individual processors Should floating point units be shared or dedicated What is the between having more simpler processors vs fewer more sophisticated ones In some sense this is trading instruction level parallelism against process level parallelism The most serious bottleneck is going to be pin bandwidth in and out of the chip How can you minimize the bandwidth requirement Are new protocols required There are several ways to frame studies in this context You may want to look at multiple independent processes as in workstation with many open windows or small multiprocessor design or you may want to look at this as component in massively parallel machine Characterizing communication and sharing in multiprocessors In current multiprocessors interprocessor communication takes the form of cache misses Thus several issues get folded into single number the miss rate Some good work has been done to try to characterize sharing in terms of modern cache organization but there remains many unanswered questions Some of these may only be answered by inventing new analysis techniques Certainly it will be hard to get useful data The reference string generated my each of the processors depends on how work is scheduled onto processors This is generally done by allowing the processors to contend for various scheduling data structures Thus the schedule is somewhat dependent on the memory system Exploring design variations relative to fixed trace ignores this feedback thorough study needs to be done on the sensitivity or robustness of multiprocessor address traces few other concerns have been raised such as the number of shared references in available traces Communication with using transfers Several new multiprocessor designs use second processor for the network interface and communicate between the main processor and the using transfers Results indicate this is actually slower than one might at first expect Why What alternatives are there One suggestion is to have the opposite of cache on the network interface processor buffers which push data away into the right place in the memory system large blocks into DRAM and small things into the processor cache What is the minimum cache miss rate due to communication As uniprocessor caches get larger the miss rate approaches the initial load cost compulsory miss rate It would seem that multiprocessor caches should tend toward the compulsory miss rate plus communication factor How would an optimal cache perform Snoopy caches provide communication and replication of data Replication is what causes the coherence headaches How does the miss rate or communication rate decrease with degree of replication Distributed shared memory over ATM distributed shared memory or virtual shared memory has been around for long time but it never caught on To large degree this is due to the fact that ethernet is too slow to make it interesting Does ATM change the picture Design and implement DSM system over the ATM network available in the dept Apparently Willi Zwanepoole at Rice developed nice implementation which could be adapted Networking The following projects make use of the ATM network in the department in particular of the network interface that we developed They all deal with experimental software so you have to be willing to hack around the bugs and gotchas implementation normal implementations of are slow as hell big part of the problem is that normally sits in the kernel but other problems have to do with the algorithms and implementations themselves Implement really fast TCP over ATM and carefully analyze the performance Werner Vogels has already prototype ready It needs some work on the connection an but othewise is already wuite fast He has not done lot of benchmarking and in particular no study of the performance under congestion has been done RCP implementation This is similar to the above Review the literature on fast remote procedure call invocation implementations and implement one for the ATM cluster of workstations ATM multicast The ATM network supports multicast in the switch hardware Figure out how to control that and use it for some interesting application Horus or maybe video broadcasting Applications Optimized application kernel implementation pick your favorite application and beat the hell out of the part For example what is the fastest MPEG you can build The fastest motion detection algorithm for video scene analysis The fastest The key here is not just to arrive at fast implementation but to do the analysis so you can convince others that you arrived at the best possible implementation Truth in SPECmarks Prepare your own small suite of benchmarks and compare the performance on several workstations to that predicted by the SPECmarks It would be particularly interesting to put together an application specific suite for example multimedia benchmark suite Memory system behavior for large systems Study the memory system behavior and maybe other processor performance parameters for application ISIS comes to mind how can you measure the path length from the reception of message all the way through the of lines of code til reply is sent back Or some other large system	other	cornell
783	 Server Date Sunday GMT Tuesday GMT Lidong Zhou friends at Cornell My Friends at Cornell Huang Ioi Lam Xiaoming Liu Tibor Janosi Jun Xu Nikolay Mateev	other	cornell
784	 Server Date Sunday GMT Wednesday GMT Scott Dawson Personal Information Scott Dawson Cornell University Master of Engineering Student am most likely found doing the following things Working with this group of guys in the Systems Lab Debating the latest industry trends with Jeff and Will my research partners Playing racquetball and inline skating like have the time Preparing to make the move to NYC As the ball drops in Times Square the roar of the crowd becomes deafening Wait until you hear all of us when this ticker hits ground zero Sometimes as one is confined to such small area for such an extended period of time the mind wanders This picture is the result of such phenomena Early one morning AM Jeff Will and decided to put all of the multimedia equipment that we surrounded with on daily basis to good use The result much to our pleasure was both inventive and exciting Not to mention that we now had some customized pixs to put on the net to show just how interesting we could be as individuals graduated in May from the State University of New York at Geneseo with BA from their CS department Geneseo was really great school to go to met some really great friends there Past employers have been Databook Incorporated summer of in Ithaca has since relocated to Boston and Pathlight Technology which is also located in Ithaca NY be moving to New York City after graduating from Cornell University to work for Citibank My resume is still online for those who are curious about what been up to Currently working for the Campus Life department as Graduate Residence Assistant in Schuyler House which is conveniently located on the Southern outskirts of campus also very involved in Alpha Phi Omega Coed National Service Fraternity pledged during the spring of with PC of Alpha Beta Xi Chapter in Geneseo and transferred membership in the fall of to Gamma Chapter at Cornell University where maintain an active position on the pledge team spdawson	other	cornell
785	 Server Date Monday GMT Thursday GMT WWW Course Material Retrieving Files from the World Wide Web To retrieve the folder for programming assignment from the Web page To start Netscape use Bear Access from the Apple menu on lab machine In Bear Access click on the World Wide Web button This will start Netscape Use Netscape to find the WWW link labeled Program Folder for the programming assignment that you want Note WWW link is connection to another page in the Web In Netscape links are indicated by blue or purple shaded letters such as shown below An Example Link This link does do anything but real link might have the capability of switching to another page or retrieving your programming assignment folder To follow link click on the blue text with the mouse For example to retrieve Program follow the Program link from the Home Page On the Program page you will see the Program Folder link Click this link Netscape will retrieve the folder On the desktop should appear new folder named Program Note If other new files appear or you may throw them away They are used to get the folder from the Web and are not needed once you have the folder Move the Program folder onto your floppy disk Note Netscape might pop up dialog box asking you where to put the folder If this happens select your floppy disk in the dialog box and click the button to expand the folder into your disk Spring pierce	other	cornell
786	 Server Date Sunday GMT Wednesday GMT Papers on failure detection Papers on failure detection This page contains WWW pointers to research on failure detection Unreliable failure detectors for Reliable Distributed Systems introduces failure detectors for message passing systems To appear in JACM By Tushar Deepak Chandra and Sam Toueg The weakest failure detector for solving consensus determines what information about failures is necessary and sufficient to solve Consensus in asynchronous distributed systems message passing subject to crash failures preliminary version of this paper appeared in By Tushar Deepak Chandra Vassos Hadzilacos and Sam Toueg Tushar Deepak thesis combines the results in Unreliable failure detectors for Reliable Distributed Systems and the weakest failure detector for solving consensus Using Failure Detectors to Solve Consensus in Asynchronous Systems extends the work mentioned above to systems with registers This paper also contains results on resource complexity that have no analogue in the work mentioned above preliminary version of this paper appeared in By Wai Kao Lo and Vassos Hadzilacos Failure Detectors and the hierarchy extends the work on systems with registers to systems with arbitrary objects preliminary version of this paper appeared in By Gil Neiger Simulating in Asynchronous Distributed Systems shows that it is possible to specify and implement failure model that is indistinguishable from the model from the point of view of any process within an asynchronous system By Laura Sabel and Keith Marzullo Election Vs Consensus in Asynchronous Systems By Laura Sabel and Keith Marzullo Revisiting the relationship between Non Blocking Atomic Commitment and Consensus problems By Guerraoui Atomic Commitment with an Unreliable Failure Detector By Guerraoui Miquel Larrea and Schiper failure detectors By Guerraoui and Schiper The Decentralized Non Blocking Atomic Commitment Protocol By Guerraoui and Schiper The Transaction Model vs The Virtual Synchrony Model Bridging the gap By Guerraoui and Schiper Maintained by tushar	other	cornell
787	 Server Date Sunday GMT Thursday GMT NOODLLE	other	cornell
788	 Server Date Monday GMT Tuesday GMT Required Readings Readings from Silberschatz and Galvin Date Read Chapters to Chapter except Chapter through page Chapter skip Readings emphasized on Prelim Chapters Chapters Readings emphasized on Prelim II Chapters Chapter But somewhat more readable discussion of Mach from text by Tannenbaum has been copied and is on reserve in Carpenter Library Chapters Chapters and but you may skip sections and	other	cornell
789	 Server Date Sunday GMT Thursday GMT Information sources collected by Jim Davis Main Topics hotlist Information Capture and Access Annotation for Small Groups Publishing on the net World Wide Web User Interface Software Agents browse my public files browse my Notes dir private DRI Info resources Other CAMIS Gopher Center for Advanced Medical Informatics at Stanford NJIT Computerized Conferencing and Communications Center Natural Language Software Registry AI Repository cool fun stuff	other	cornell
790	 Server Date Sunday GMT Thursday GMT Previous Semesters Fall took CS Introduction to Multimedia Systems and CS Topics in the Theory of Distributed Systems was TA for CS Introduction to Digital Systems and Computer Organization Spring took CS Information Retrieval and CS Theory of Computing	other	cornell
791	 Server Date Monday GMT Saturday GMT Suggested Projects for Suggested Projects for Robotics Edge Clustering Develop algorithm for clustering of edges that represent single object Performance Simulations Investigate how vision and image processing applications perform on modern architectures vision applications tend to use large data structures images that can exhibit both good and bad spatial locality Ideally one would have processor simulator that would be configureable cache size cache associativity memory size processor speed instruction set etc The simulator should be able to generate statistics such as cache ratio Hopefully the simulator could be extended to simulate Shared Memory Multiprocessor SMMP Starting from scratch will be very hard it may be better to adapt an existing program to our needs Starting points UW Image Databases There is currently project here at Cornell to develop general purpose image database that will allow intelligent searching for images based on large number of image features We need people to implement different measures for basics such as texture pattern matching to face recognition Starting points the competitors Camera Gaze Control Create or adapt an existing object tracking algorithm so that the output can be used to control the positions of desktop camera The robotics lab is developing hardware for standard CCD camera We would like the user to be able to click on portion of the image and have the camera to keep the object centered in focus Find Cool Use for Stereo Vision Existing programs allow us to generate good depth maps at time speeds FPS We would like someone to create cute application using the robots or some other platform that would use the depth maps to perform some task such as navigation or collision avoidance these are not actually the same currently the easiest way for the robot to navigate is for it to go until it crashes into something back up little then turn Stereo Camera Calibration Develop robust reliable procedure for calibrating pair of stereo cameras using feedback loop between the output of the cameras as they view test pattern and their next adjusted view Text Segmentation Develop system that can detect text in an image or series of images This is not the same as OCR where one tries to take an image of printed text and recover the text rather you should concentrate on how to find text in an image Typical examples of texts that one might want to identify from video signal include the bylines on network news and scores and player stats from sports games Human Face Segmentation Basically find the objects in scene that look like human faces How many people are there How certain is this answer Starting point Univ Maryland also work at CMU by Kanade group	other	cornell
792	 Date Mon Dec GMT Server Mon Feb GMT Lab CS Laboratory Implicit Surfaces Introduction In this lab you will investigate implicit surface generation Implicit surfaces are generated by finding level surfaces in field That is by placing polygons in all of the voxels which have scalar data of certain value The surface descriptions often take forms familar from analytical geometry For instance unit sphere at the origin is described by when surface is fit to the points in which have value of zero Procedure Download Put the following in so than when DX starts up it will find these macros Note the programs in this exercise will not run without these macros The program takes as input an implicit function of and forms an surface The function is calculated at grid points then polygonalized by isosurface rendering assuming an isosurface value of zero For example the formula creates object Different functions of will produce different shapes Note that for different functions you may have to modify the range limits of the space defined by the Construct module As an example the following image was made by defining an implicit sphere in separate module from the heart then morphing between them by linearly intropolating between the two fields In this case mixing of the heart field with of the sphere field The sphere used was The program shows how to combine two implicit surfaces to simulate the union operation as used in constructive solid geometry see page of Watt Three new macros are used in this program InitCSG UnionCSG and MakeCSGsurface You can inspect or modify the macros using the Open Selected Macro option in the Windows menu of the visual program editor The two cylinder surfaces are combined in the UnionCSG macro using min function so that the voxels which are in the interior of either cylinder are interior to the result Remember that an implicit function changes sign as the surface is crossed and that for the surfaces used here that points inside have negative value The image below is the result of the union of two cylinders The program computes an implicit surface based on spherical fields of influence which can add together See one of last year student projects for more information on blobby functions The spherical fields can have positive and negative field strengths An example from shows four positive spheres transparent red and two negative spheres blue which when summed together then passed thorough an isosurface module produce the object shown to the right Assignment Execute the programs to understand their behavior then modify them as follows Modify to generate torus from an implicit function of You will need to construct function which is negative if the position is within certain distance of circle and positive otherwise Include interactors to set the radius of the torus and the radius of its Extend to perform the CSG operations of intersection and subtraction by writing two new macros called IntersectCSG and SubCSG Provide interactors for choosing any combination of two spheres cylinders tori or cones Provide interactors for performing union intersection or subtraction of the two selected shapes That is your program should be able to for example select sphere and cone and form the subtraction of or or union the sphere and the cone or intersect the sphere and the cone Shown below are the intersection of two cylinders and one cylinder minus the other The image below is formed as superquadric minus torus union cylinder but with about white noise added to the field Use the interactors in to make human head with recognizable but not necessarily artistic eyes nose mouth and ears Modify to produce two separate groups of blobs with separate interactor inputs which can be combined using your CSG modules You will need to modify to output field rather than surface Show one example of to separate blob groups combined with CSG operations Be prepared to demo the programs to show the torus generator the CSG operations the head you designed and the grouped blobby program The grader will exercise all interactors You should be able to explain your programs You should use macros and comments in the Notation field of each module so that you and the grader can understand the program Control panels if any should be well organized labeled and with the appropriate numeric ranges The Lab grading guide will be filled out by consultant during section to evaluate your work Back to Main Page Last modified Land Copyright Statement	other	cornell
793	 Server Date Sunday GMT Wednesday GMT Kristen Summers Cues Using Cues for Electronic Document Browsing In Digital Libraries Current Issues Nabil Adam Bharat Bhargava and Yelena Yesha editors Chapter pp Lecture Notes in Computer Science series with Daniela Rus Abstract We present and analyze effficient algorithms for the automated recognition and interpretation of layout structures in electronic documents The key idea is to use the patterns in the distribution of white space in document to recognize and interpret its components The recognition algorithm divides the document into hierarchy of logical elements the interpretation algorithms classify these divisions as tables indented lists polygonal drawings and graphs We present experimental data and discuss an information access application Our methodology allows the automatic markup of documents and the creation of indices and browsing tools for electronic libraries You can view the technical report version of this paper or return to my home page	other	cornell
794	 Server Date Sunday GMT Thursday GMT Jason Hickey Papers at Cornell Some Cornell Papers Jason Hickey Semantics of Objects in Type Theory Forthcoming Tech Report also submitted to POPL PostScript file Here are some formal definitions and theorems for the semantics presented in the paper These are just the bare formalizations plan to provide guide that makes it easier to walk the proofs Abstract We present semantics of object calculi in type theory This interpretation serves to provide solid mathematical foundation for programming The calculi we consider support method selection functional method update and subtyping with method subsumption Our interpretation provides this support without the need for recursive types to represent Self and it provides new analysis of objects where the requirements for subsumption are expressed directly in the method types Jason Hickey Formal Objects in Type Theory Using Very Dependent Types PostScript file Abstract In this paper we present an extension to basic type theory to allow uniform construction of abstract data types ADTs having many of the properties of objects including abstraction subtyping and inheritance The extension relies on allowing type dependencies for function types to range over domain Using the correspondence abstract data types can be identified with logical theories and proofs of the theories are the objects that inhabit the corresponding ADT also have the slides from my talk PDF slides are better but if you have Acrobat here are PostScript slides John Miriam Leeser Mark Aagard and Jason Hickey Integer Square Root Case Study in Design by Pricipled Optimization PostScript file Abstract Theorem proving techniques are particularly well suited for reasoning about arithmetic above the bit level and for relating different levels of abstraction In this paper we show how integer square root algorithm can be transformed to very efficient hardware implementation The top level is Standard ML function that operates on unbounded integers The bottom level is structural description of the hardware consisting of an simple combinational logic and some registers Looking at the hardware it is not at all obvious what function the circuit implements At the top level we prove that the algorithm correctly implements the square root function We then show series of optimizing transformations that refine the top level algorithm into the hardware implementation Each transformation can be verified and in places the transformations are motivated by knowledge about the operands that we can guarantee through verification By decomposing the verification effort into these transformations we can show that the hardware design implements square root We have implemented the algorithm in hardware both as an Altera programmable device and in CMOS Jason Hickey Formal Abstract Data Types PostScript file Abstract Current constructive type theories are powerful systems for describing mathematical objects with complex dependencies between types and computational values making them expressive enough to encompass large ares of mathematics and programming However as the body of formal knowledge in the type theory expands the problem of managing mathematical domains and their proofs becomes increasingly significant Though the objects of the theory are formal the domains are not In this paper we show how to apply the methods of formal data abstraction to the organization of the mathematical domains In the process we expand the tools of data abstraction to include reusability and namespace organization providing an environment that can be used for defining objects within domain for organizing domains within type theory and for organizing theories within system This environment will require extending the expressivness of inductive definitions within the type theory to include the dependent characteristics of type theoretical domains Note This also contains summary of the NuPRL type theory as an Appendix	other	cornell
795	 Server Date Sunday GMT Friday GMT Personal Info of Nicholas Howe All About Nick Howe at least more than you ever really wanted to know Home address Schuyler Place Ithaca NY The Brief Story Of My Life was born in Port Jefferson Long Island on December or so am told When was three years old my family moved to Hamden Connecticut where grew up went to college at Princeton University where majored in physics Graduating in joined the Teach for America program and spent two years teaching at small rural public high school in Arkansas am now in my second year of the computer science PhD program at Cornell Click here for pictures Links to Other Family Members and Friends Both of my parents are employed at Yale University My mother works at the medical school My father is professor in the math department My sister is junior at Columbia University My aunt and uncle work at EDC Jim Couture works at ON Technology Send them resume if you like what you see Matt Leary does have page but his fiancee Hillary does Alex Reutter has very cool page Check out Car Bomb Others if you have links please mail them to me and will add to this list Links to my Princeton past At Princeton was member of the Princeton Mime Company am former director of PrinceCon production of the Simulation Games Union Although try to deny it was occasionally seen with that monstrosity the Band also had lots of friends in the Wildcats cool capella group Other Web sites found interesting Fantasy Pictures just what it says Tarot well the graphics look neat anyway Personality Test an INTJ What your sign Earthwatch looking for different sort of vacation SPAM Haikus etc just what you been looking for Funny Pages lots more jokes The Zipper find out how to bug your representative in Congress Voters Telecom Watch Internet group Inktomi fast search engine Named after Native American myth Last updated Back to my home page	other	cornell
796	 Server Date Sunday GMT Saturday GMT Unreliable Failure Detectors for Reliable Distributed Systems Unreliable Failure Detectors for Reliable Distributed Systems by Tushar Deepak Chandra and Sam Toueg This paper has pages To get postscript copy of this paper click here or here to get it from the mirror site To appear in JACM Abstract We introduce the concept of unreliable failure detectors and study how they can be used to solve Consensus in asynchronous systems with crash failures We characterise unreliable failure detectors in terms of two properties completeness and accuracy We show that Consensus can be solved even with unreliable failure detectors that make an infinite number of mistakes and determine which ones can be used to solve Consensus despite any number of crashes and which ones require majority of correct processes We prove that Consensus and Atomic Broadcast are reducible to each other in asynchronous systems with crash failures thus the above results also apply to Atomic Broadcast companion paper shows that one of the failure detectors introduced here is the weakest failure detector for solving Consensus Research supported by an IBM graduate fellowship NSF grants and Ames Grant and in part by Grants from IBM and Siemens Corp Maintained by tushar	other	cornell
797	 Server Date Monday GMT Tuesday GMT Program Program Due Thursday February Click this link to retrieve the Program folder Program Folder Spring pierce	other	cornell
798	 Server Date Sunday GMT Sunday GMT Picture of Koichi	other	cornell
799	 Server Date Sunday GMT Friday GMT Abstract of Nuprl and Circuit Design Paper Abstract for Paul Jackson Nuprl and its use in circuit Design In Boute Stavridou editors Proceedings of the Interational Conference on Theorem Provers in Circuit Design IFIP Transactions Nuprl is an interactive theorem proving system in the LCF tradition It has higher order logic and very expressive type theory the type theory includes dependent function types Pi types dependent product types Sigma types and set types Nuprl also has well developed user interface and allows for the use of clear and concise notations close to ones used in print Proofs are objects which can be viewed and serve as readable explanations of theorems Tactics provide extendible toolkit for proof development while the soundness of the system relies only fixed set of rules We give an overview of the Nuprl system focusing in particular on the advantages that the type theory brings to formal methods for circuit design We also discuss ongoing projects in verifying circuits verifying the correctness of hardware synthesis systems and synthesizing circuits by exploiting the constructivity of Nuprl logic Last Modified Jan Paul Jackson jackson	other	cornell
800	 Server Date Sunday GMT Friday GMT Cornell CS Course Home Pages Fall Course Home Pages Fall These are links to the home pages for number of CS courses for Fall In many cases there are class notes problem sets and other course information available although they may be available only to registered members of the course Course Home Pages for some courses taught during previous semesters can be found using the links at the bottom of this page Introduction to Computer Programming An introduction to elementary computer programming concepts Emphasis is on techniques of problem analysis and the development of algorithms and programs The subject of the course is programming not particular programming language The principal programming language is The course does not presume previous programming experience Programming assignments are tested and run on interactive microcomputers Standard version of COM No mathematics is assumed Introduction to Computer Programming An introduction to elementary computer programming concepts Emphasis is on techniques of problem analysis and the development of algorithms and programs The subject of the course is programming not particular programming language The principal programming language is The course does not presume previous programming experience Programming assignments are tested and run on interactive microcomputers Alternative version of COM emphasizing examples and applications involving continuous mathematics including trigonometry and calculus Computers and Programming Intermediate programming in language and introduction to computer science Topics include program development proofs of program correctness program structure recursion abstract data types oriented programming data structures and analysis of algorithms Java and Gofer are the principal programming languages Structure and Interpretation of Computer Programs An introduction to programming languages and computer science Topics covered include functional programming including recursive and functions programming analysis and understanding of algorithms and correctness of programs Several substantial sized programming projects are done using Dylan dynamic programming language The aim of the course is to expose students to wide range of interesting and challenging concepts in computing using programming as tool Discrete Structures Covers mathematical aspects of programming and computing Topics will be chosen from the following mathematical induction logical proof propositional and predicate calculus combinatorics and discrete mathematics covering manipulation of sums recurrence relations and techniques basic number theory sets functions and relations partially ordered sets graphs Introduction to Digital Systems and Computer Organization Web course material includes course info lecture notes homeworks project info and hopefully even lecture videos Topics covered in the course include representation of information languages in particular PowerPC processor organization interrupts and memory hierarchies combinatorial and sequential circuits data path and control unit design RTL and microprogramming Programming Languages and Software Engineering An introduction to the programming languages tools and methods used in modern software development Programming methodologies modularity data abstraction programming Programming tools software libraries and interface definition languages General techniques will be complemented with programming experience Data Structures Lists trees graphs arrays and other forms of data structure and their implementation Relationship between language and data structure emphasizing abstract data types Dynamic storage allocation and memory management Detailed study of searching and sorting methods Analysis to determine the more efficient algorithm in given situation Systems Programming and Operating Systems An introduction to the logical design of systems programs with emphasis on multiprogrammed operating systems Topics include process synchronization deadlock memory management methods information sharing protection and security and file systems The impact of network and distributed computing environments on operating systems is also discussed This is subject requiring constant attention Foundations of Artificial Intelligence challenging introduction to the major subareas and current research directions in artificial intelligence Topics include knowledge representation search problem solving processing vision robotics logic and deduction planning and machine learning Automata and Computability Theory An introduction to the modern theory of computing automata theory formal languages and effective computability and deeper version of Credit will not be given for both Corrective transfers between and are encouraged during the first few weeks of instruction Advanced Database Systems CS Advanced Database Systems is intended to give students solid background in the design and development of database management systems DBMS While DBMS is in one sense giant application program there are surprisingly many principles behind its development and use The database research community is also active and there are always new problems to be addressed because of the explosive amounts of data that people wish to access This course forms essential background for anyone who wants to become systems engineer at database development company or become an informed user of database systems or become database systems researcher or develop systems in any domain that manipulate large amounts of data or find out how teller machine really works number of advanced fundamental DBMS concepts will be covered Although this is not intended to be an introductory course the discussion of various topics will begin with quick review of basic material In terms of workload the course involves two exams small survey paper and programming project See http for more details Advanced Programming Languages study of programming paradigms functional imperative concurrent and logic programming Models of programming languages including the lambda calculus Type systems polymorphism modules and other constructs Program transformations programming logic and applications to programming methodology Multimedia Systems Hardware and software issues involved in computer manipulation of audio video and images Topics include media capture representation compression editing processing storage and transportation Special emphasis on the processing of digital video including algorithms for special effects and automatic extraction of content and applications of parallel architectures to video processing Analysis of Algorithms Methodology for developing efficient algorithms primarily for graph theoretic problems Understanding of the inherent complexity of natural problems via algorithms randomized algorithms randomized reducibilities Additional topics such as parallel algorithms and efficient data structures Information from previous semesters Information from previous semesters may be retained for while but do be surprised if certain links do work Fall Spring Summer Fall Spring Summer	other	cornell
801	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
802	 Server Date Monday GMT Thursday GMT Program Program Due Thursday February IMPORTANT Please note the following modifications to the Program handout The project file and source file were not present in the initial Program folder These can be found in the folder Program choose which should be downloaded in the usual way After you get your choose function working properly as explained in Step of Part copy the body of this function over to the template for choose in the file you find comment where this body should go If you added extra code for tracing purposes while developing the function choose make sure you delete this code before copying It is no longer necessary to turn in listing of since the file now contains your choose function Thus in the checklist of What to hand in delete the item beginning listing of the file and in the following item note that will now also contain your definition of choose Note When you try to run Program CodeWarrior may give you warning about Link error or warning You may safely ignore this The warning occurs because we are defining our own function exp which is already defined in one of the libraries CodeWarrior will use our new definition instead of the old one Note You may only use constructs that have been taught in class to write Program expressions functions and recursion Even if you know about loops do use them Click these links to retrieve the Program folders Program Folder Program Choose Folder Spring pierce	other	cornell
803	 Server Date Sunday GMT Tuesday GMT who is that frowning man the variegated wood oak trees were very significant in classical mythology for many religions partially because they do lose their leaves in winter they were seen as sign of longevity and power and oak groves were sites of extreme significance to druids and witches on the british isles especially the image of the foliate mask which is more commonly called the green man is ubiquitous in medieval churches from britain and is also very common image in the modern pagan movement the foliate mask usually appears as man peering through bunch of oak leaves with the leaves also becoming part of his features such as his beard hair or cheeks he can be playful joyous and celebrate the humor of fertility and spring or he can be the somber old man of winter with snow covering his aged face and collecting in the grey leaves of his beard often use the image of the green man as meditation point when considering the masculine aspect of deity witchcraft thealogy tends to view godhead as dual with masculine and feminine aspects either in balance or with the male as the created yet creative consort of the female and while the female half has very established mystery and lore the male tends to have less and tends to be much more tied to the cycle of the year often being symbolized by child born at yule every year and dying at samhain or the fall holiday of your choice another interesting oak tree datum in times of war people have often turned to acorns as foodstuff while they do have some nutrition in them think still leave them to the squirrels we are the music makers and we are the dreamers of dreams aphex twin dan brown snowman last updated aug	other	cornell
804	 Server Date Sunday GMT Wednesday GMT Information sources DRI Information resources Information resources think might be useful to DRI people maintained by Jim Davis About the DRI Libraries Finding more resources High Performance Computing National Information Infrastructure Companies Universities Uncle Sam Other DRI information search DRI public files Full test search of files on our WWW server and archives of DRI mailing lists Or browse through the file system tree Software environments pages The Design Research Institute The home page for our Web server this is our front door to the rest of the world These are the Yellow Pages of the Internet Some of these are lists or collections of good sites which you browse visually and others are search systems you fill in form and it tells you what it has The advantage of the lists are that if they are not too long you can search them by eye and if they are well organized you can search quickly The search systems are usually much larger and often contain information gathered by automatic agents which exhaustively traverse the entire Web Unfortunately no single one of these systems is the best You will certainly want to try at least the first three Searches The first three are all very powerful and comprehensive AltaVista Inktomi fast Web indexer with large database Lycos catalog If this is down see the original site in Switzerland World Wide Web Worm Search WWW Homepages using Harvest ALIWEB Lists YAHOO YAHOO Yet Another Hierarchically insert word Oracle maintained by David Filo and Jerry Yang It become quite popular lately What new historical list of new events on the Web compiled by NCSA This is the same as the What new link on Mosaic Help menu Reference Desk Good list of references on the net All the world servers on map Global Network Navigator This highly polished document is published by Associates is kind of online magazine about the Internet It includes the Whole Internet Catalog very useful index of things on the net You must register to use it but usage is free Libraries Cornell Library Catalog Requires emulator Mann Library gateway This gateway connects to number of useful databases including DIALOG and periodicals index CS TR server Computer Science Technical Reports at Cornell with links to other places Library of Congress See also the Library of Congress gopher server Hytelnet List of online public library catalogs Good when you are searching for book High Performance Computing Simulation Design MetaCenter for Computational Science and Engineering Cornell Theory Center High performance networking and distributed systems archive Loughborough UK NSF HPCC Science Highlights National Coordination Office for HPCC List of High Performance computing sites List of High Performance research groups General Electric CE Toolkit strong set of demos of GE work in Concurrent Engineering Defense Information Systems Agency includes JIEO Joint Interoperability and Engineering Organization Center for Engineering Activities Monthly reports National Software Exchange NSE for the High Performance Computing and Communications community National Information Infrastructure InterNIC Internet Network Databases RFC index See also RFCs at Internet drafts at UNC Chapel Hill Includes National Information Infrastructure National Information Infrastructure Gopher National Information Infrastructure Guide Enterprise Integration Technologies Companies Home pages of various companies Xerox Digital Equipment Corp AT Research McCaw Cellular Communications Cellular Digital Packet Data CDPD is fast efficient digital data transmission system that overlays existing analog cellular networks The system operates at Kbps per channel CDPD provides maximum connectivity by using idle times between cellular voice calls or transmitting in dedicated channel environment Canon Research Centre Europe Natural language processing and audio No photocopiers Hewlett Packard Object Management Group Source of Common Object specifications Thomas Register one of the oldest and most comprehensive sources of information about companies You need to supply password to use it Try username dri and password tr Universities This is just list of those that are related in some way to the DRI For exhaustive lists of university servers consult the Meta server section Cornell CS Center for Coordination Science MIT United States Government FedWorld White House Interactive Citizen Handbook ARPA United States Census Bureau NASA Department of Justice Department of Defense See also United States Navy Patent and Trademark Office Including intellectual property and the NII and reports on software patents Other servers Search all Usenet news Geography server Gateway CIT Gopher Cornell Information Technologies gopher network Include link to CUINFO Usenet FAQ files Frequently Asked Questions from Usenet newsgroups The technical groups are often good sources of information Searchable FAQ index Usenet FAQs list of all FAQs some of which are in HTML FTP archive of FAQs	other	cornell
805	 Server Date Sunday GMT Sunday GMT Ensemble THE ENSEMBLE DISTRIBUTED COMMUNICATION SYSTEM Ensemble is the next generation of the Horus group communication toolkit also developed at Cornell University Visit the Horus page for more information about Horus papers on group communication and pointers to other sites with related information Language support Note that the current distribution primarily provides support for applications developed in the ML programming language However interfaces to several other languages are under developlment and will be made available soon You can check out our roadmap for future development to see what our plans are ML Ensemble is implemented in the Objective Caml programming language dialect of ML The use of ML supports variety of optimizations that enable Ensemble to achieve communication latencies an order of magnitude faster than Horus although the current distribution does not enable these optimizations Ensemble supports an interface to prototype appears in the current distribution This interface is being expanded upon to provide complete support for applications Also under development are two interfaces the Horus Object Tools HOT interface and Electra Corba object request broker interface Java Finally work is being to interface Ensemble to Java and to wrap Ensemble as Netscape Building applications with Ensemble For an application builder Ensemble provides library of protocols that can be used for quickly building complex distributed applications An application registers or so event handlers with Ensemble and then the Ensemble protocols handle the details of reliably sending and receiving messages transferring state implementing security detecting failures and managing reconfigurations in the system research tool For distributed systems researcher Ensemble is highly modular and reconfigurable toolkit The protocols provided to applications are really stacks of tiny protocol layers These protocol layers each implement several simple properties they are composed to provide sets of properties such as total ordering security virtual synchrony etc Individual layers can be modified or rebuilt to experiment with new properties or change the performance characteristics of the system This makes Ensemble very flexible platform on which to do research Other Information General information about Ensemble Find out more about Horus Our roadmap for future development of Ensemble Transfer the distribution after reading the license agreement Peruse the tutorial Stay in touch with us through the mailing list Mark Hayden	other	cornell
806	 Date Mon Dec GMT Server Thu Aug GMT polygons Constructing objects using explicit polygon lists At some level often hidden from the user graphics system based on polygons needs to keep list of the polygons The list must include their location in space vertices and often includes other data The data may consist of face lists normals nearest neighbors or perhaps other items The structure we will use here to represent polygons consists of two lists The first is list of all vertices which make up an object The second is list of polygonal faces Each face in the second list consists of list of the vertices for that partcular polygon An example is shown below The vertex list contains four entries each of which is corresponding to the positions of the vertices The face list contains four entries each of which describes one face of the tetrahedron shown The integers on each line represent the index of the vertex in the vertex list with zero being the first entry corresponding to the corners of each polygonal face The front of polygon is defined as the side you see when you traverse the vertices of that face in direction Each face list entry must have to correct orientation determined by enumerating the vertices order Another example is shown below with vertices but just two triangles Two images are shown The image to the left shows the front of the larger triangle The image to the right shows the back The face which is highlighted in the list corresponds to the smaller triangle which sticks out to the left in both images face list can in general have any number of vertices for each polygonal entry Limiting yourself to triangles has couple of advangages triangle is always planar so its surface normal is well defined Some commerical renderers will only use triangles Java Applet allows you to design and view polyhedra Comments about Theory Center online documents are welcome and may be sent to Last modified Land Copyright Statement	other	cornell
807	 Server Date Monday GMT Monday GMT Handouts CS Advanced Language Implementation Handouts Handouts Course Overview dvi file Introduction to SML Harper postscript file Interpreting the in SML dvi file Homework Due Friday Ignore problem Sample solution to the programming problems Avoiding the Overheads of Substitution dvi file LAMBDA Based Intermediate Language dvi file Conventional Optimization of LAMBDA dvi file Assignment Simple Optimization of LAMBDA dvi file Some related optimization documents Making Lambda Calculus Smaller Faster Appel and Trevor Jim Unrolling Recursions Saves Space Appel Closure Conversion of LAMBDA dvi file Abstract Models of Memory Management Morrisett Felleisen Harper Uniprocessor Garbage Collection Techniques Wilson Assignment Optimization Closure Conversion and GC dvi file Simple Copying Collector sml code Introduction to Advanced Control Constructs dvi file Operational Semantics for Advanced Control Constructs dvi file Implementing Evaluation Contexts dvi file Assignment Closure Conversion take and Garbage Collection dvi file Adding Threads to Standard ML Cooper and Morrisett postscript Portable Multiprocessing Interface for Standard ML of New Jersey Morrisett and Tolmach postscript CML Concurrent Language Reppy postscript Assignment Fun with Threads and Modules dvi file Back to the homepage	other	cornell
808	 Server Date Monday GMT Tuesday GMT CodeWarrior for Setting Up CodeWarrior for CodeWarrior can be run on your own personal Macintosh Copies of CodeWarrior can be purchased from the Campus Store The CodeWarrior installed in the CIT labs is just like the one you would install on your Mac except for few things we have added the CSLib library and the Basic project stationery Note These additions were built using CodeWarrior version so it is possible that they will not work with earlier versions of CodeWarrior although we have heard from people that they do Once you have retrieved the Additions folder install the additions as follows Open the Additions folder Inside it there is SimpleText file containing instructions similar to these There are two folders called INTO MacOS Support and INTO Project Stationery The folder structure in the Additions folder is meant to mirror the folder structure inside the Metrowerks CodeWarrior folder of your copy of CodeWarrior to make it easy to follow these instructions Open your or CW Gold folder Open the Metrowerks CodeWarrior folder inside it Open the INTO MacOS Support folder in the additions Move the Support folder into the MacOS Support folder in your Metrowerks CodeWarrior folder Open the INTO Project Stationery folder Move the Basic file into the Project Stationery folder in your Metrowerks CodeWarrior folder Open the INTO Proj Stat Support folder in the INTO Project Stationery folder Move the file into the Project Stationery Support folder in the Project Stationery folder of your CodeWarrior When you open new project with CodeWarrior you should now be able to select the Basic stationery This will include the CSLib library which should also now be available to you Click here to get the Additions folder Additions Folder Other Machines If you have copy of CodeWarrior for computer other than the Mac you may still be able to set up the environment However the course staff will not be able support this Build the CSLib library Get the source code for by anonymous FTP from Follow the instructions on page in the Roberts textbook Appendix Library Sources Compile the source code on your machine using CodeWarrior To create the CSLib library for we only compiled the genlib simpio string random and exception parts of the library we left out the graphics stuff If everything seems to work for your machine feel free to compile all of it Put the compiled library and the library header files into the support directory for your CodeWarrior Make the Basic project stationery Our project stationery is based on the ANSI project stationery with the CSLib library added Put your project stationery in the project stationery directory of your CodeWarrior Spring pierce	other	cornell
809	 Server Date Monday GMT Friday GMT Prelim Prelim General Info Tuesday February pm Prelim will cover up through recursion through Teitelbaum section and the first page of There will be no coverage of tail recursion the comma operator higher order functions or complexity and performance The Prelim review session will be held on Sunday February at pm in Baker Room Assignments Olin Upson Kimball Olin Spring pierce	other	cornell
810	 Date Tuesday GMT Server Thursday GMT Jeff Miscellaneous Math Places AMS Home Page Institute for nonlinear science and lyap software Maple ftp server MathWorks Home Page MathWorks ftp site Home Page Netlib Home Page Nonlinear Science Print Archive SIAM Web Server Stochastic ODEs The Web Virtual Library Mathematics Yahoo Mathematics Page Yahoo Universities Page CFD codes list APS Center for Turbulence Research An introduction to CFD Turbulence research Web Indices List of WWW servers by location The Web Virtual Library Subject Catalogue Yahoo Guide to WWW The Webcrawler Lycos Some Colleagues Toby Driscoll Satish Reddy Peter Schmid Fabian Waleffe Cornell Stuff CU Library CUInfo Uncle Ezra Cornell Theory Center Center for Applied Mathematics Cornell Math Department Math Department Instructional Computing Lab Movies Local Movie Listings Internet Movie Database News and Weather CNN Interactive Northeast Sattelite Image updated hourly Northeast Radar Image updated hourly Ithaca Weather Locators Netfind at NJ find people by name and domain name Dictionaries Dictionary Webster Dictionary PC Software Linux Documentation Project Oakland MSDOS and Windows Archivesarhive Indiana Windows Archive JUMBO Windows Shareware Windows Shareware Games games games Links to other sites PC Hardware KC Computers upstate NY Interactive Computing Oregon good notebook prices Computer Discount Warehouse not the best prices but reliable and comprehensive PC Catalog search tons of stores for the best price FTP Sites ctan TEX archive GNU stuff SCHEME stuff NCSA stuff Washington University mirror site back to the home page baggett	other	cornell
811	 Server Date Tuesday GMT Thursday GMT The Doon School The Doon School The Doon School is residential school located in Dehra Dun India Contents Introduction DSOBS USA on the Net Archived email from the DOSCO mailing list OBs news Old Boys Register form Chandbagh School Pakistan The Rose Bowl The Doon School Weekly Chandbagh Magazine Prayer and Song Book The Dosco Logo Gallery We need volunteers to help us complete the Dosco web pages If you are interested please send me note Maintained by and tushar	other	cornell
812	 Date Sun Dec GMT Server Mon Nov GMT Vizual Insight Zone Richard Gillilan Visualization Group Cornell Theory CenterIthaca NY email richard information last updated Introduction As part of an effort to provide interactive visualization the Theory Center has constructed virtual reality facility Although the use of virtual reality in scientific research is still in its infancy wide variety of scientific disciplines are beginning to take advantage of the technology This document lists current VR applications gives instructions for using our facility and notes on effective use Gallery of Images Chagas Disease Metaballs CaveMaze VR Railroad new users README software hardware effective use previous work VR FAQ	other	cornell
813	 Server Date Sunday GMT Thursday GMT Computer Science Fair HomePage Undergraduate Computer Science Fair Information Sheet This spring we will be holding an Undergraduate Computer Science Fair The Fair will be run in the spirit of local science fair and students may enter any project that has relevance to computer science The intention of the Fair is to enourage students to work on independent projects and to give them public showplace for projects demonstrating their creativity and originality Secondly students often cite their work on independent projects as their fondest memories of the undergraduate experience Finally we will use the Fair as tool for increasing the visibility of our students with potential employers and potential graduate departments The Fair will be held using two mediums the web and poster session In order to submit project website should be constructed containing short abstract describing the project and any longer description and summary of results pictures or demos that the team wishes to display Websites for all projects will be linked up to single website that is accessible from the CS department homepage Outstanding projects may be highlighted by the department via additional links from the department homepage in order to showplace examples of what Cornell undergraduates do We will also be having poster session in which all the entries will be physically displayed to the general public for one afternoon One member of the team of entrants should be on hand at all times to describe the project For those that wish to we will allow the entrants to to bring in personal computer in order to give demonstrations of projects We will be able to provide power but no networking capabilities Sample Projects The projects might be theoretical in nature or involve an interesting program Some possibilites include but are not limited to An interesting of project turned in for CS course result of an independent research project new mathematical theorem or an interesting new proof of known theorem Especially encouraged project that does not fall within the scope of any one course computer game that takes illustrates an interesting CS aspect an interesting tool for the web for examples visit the MIT Media Lab since artists seem to be on the cutting edge of using computers in new ways one might produce new tool for generating artwork if you happen to be in NYC you might want to stop by the Mediascape exhibit at the Guggenheim SoHo for ideas alternately there are several web sites that are of interest one example is the artnetweb note the list of CS companies that sponsor that page Elegibility Any Cornell undergrad may enter the contest Group work is allowed as long as all members of the group are Cornell undergrads If the project is done as part of an on ongoing Cornell research project then it is crucial that you clarify the exact contribution of your work in relation to the contributions of persons that are not part of the project team background of the problem and the previous work done on it should also be provided No faculty sponsorship is required We can not emphasize enough the importance of clearly stating the contributions of the project and providing description remember that people will quit reading or listening to you as soon as they get bored or tired Projects must comply with the Engineering College Code of Academic Integrity and Policy Notebook We reserve the right to exclude projects that we feel do not comply with the above criteria Important Dates Firm dates will be announced at later date Tentatively form indicating intent to submit project will be due on January this will include information such as the project title and names of students working on the project Webpages describing the projects should be ready for public perusal by February and the Fair poster session will be held on some afternoon during the week of February roughly For more details and updates see our website at Questions Biana Brukman at	other	cornell
814	 Server Date Monday GMT Thursday GMT	other	cornell
815	 Server Date Sunday GMT Wednesday GMT Incremental Compuation Deriving Incremental Programs Deriving Incremental Programs Objectives We are engaged in an ambitious effort to derive incremental programs automatically or from programs written in standard programming languages This approach contrasts with our earlier approaches that aimed to incrementally evaluate programs In essence every program computes by iteration expressed as recursive functions or loops This is why loop optimizations are so important loop body can be regarded as program parameterized by an induction variable that is incremented on each iteration by change operation Efficient iterative computation relies on effective use of state computing the result of each iteration using stored results of previous iterations This is why strength reduction and related techniques are crucial for performance Given program and an input change operation program that computes efficiently by using the result of the previous computation of is called an incremental version of under Sometimes information other than the result of needs to be maintained and used for efficient incremental computation of We call function that computes such information an extended version of Thus the goal of computing loops efficiently corresponds to constructing an extended version of program and deriving an incremental version of the extended version under an input change operation In general incremental computation aims to solve problem on sequence of inputs that differ only slightly from one another making use of the previously computed output in computing new output instead of computing the new output from scratch Incremental computation is fundamental issue relevant throughout computer software optimizing compilers transformational program development and interactive systems Results Thus far we have partitioned the problem of deriving incremental programs into three subproblems Exploiting the result the return value of Caching maintaining and exploiting intermediate results of the computation Discovering computing maintaining and exploiting auxiliary information about information not computed by We summarize here the essence of our methods In Systematic Derivation of Incremental Programs we gave systematic transformational approach for deriving an incremental version of program under an input change The basic idea is to identify in the computation of those subcomputations that are also performed in the computation of and whose values can be retrieved from the cached result of The computation of is symbolically transformed to avoid these subcomputations by replacing them with corresponding retrievals This efficient way of computing is captured in the definition of In Caching Intermediate Results for Program Improvement we gave method called for statically transforming programs to cache all intermediate results useful for incremental computation The basic idea is to extend the program to program that returns all intermediate results II incrementalize the program under to obtain an incremental version of using our method for and III analyze the dependencies in then prune the extended program to program that returns only the useful intermediate results and prune the program to obtain program that incrementally maintains only the useful intermediate results In Discovering Auxiliary Information for Incremental Computation we proposed novel approach for finding auxiliary information Auxiliary information is by definition useful information about that is not computed by Where then can one find it The key insight of our proposal is Consider as candidate auxiliary information for all intermediate computations of an incremental version of that depend only on such an incremental version can be obtained using some techniques we developed for solving and We use techniques developed for solving and instead of just so that the candidate auxiliary information includes auxiliary information useful for efficiently maintaining the intermediate results How can one discover which pieces of candidate auxiliary information are useful and how they can be used We proposed Extend with all candidate auxiliary information then apply some techniques used in our methods for and to obtain an extended version and an incremental extended version that together compute exploit and maintain only useful intermediate results and useful auxiliary information Thus on the one hand one can regard the method for as an extension to methods for and On the other hand one can regard methods for and suitably revised for their different applications here as aids for solving The modular components complement one another to form comprehensive principled approach for incremental computation and therefore also for efficient iterative computation generally Although the entire approach seems complex each module or step is simple In CACHET An Interactive Program Transformation System For Deriving Incremental Programs we describe our prototype implementation of these ideas	other	cornell
816	 Server Date Monday GMT Monday GMT Activities in the Cornell CS Department Activities These are links to some miscellaneous activities associated with the department CUCS Hockey Association of Computer Science Undergraduates ACSU	other	cornell
817	 Server Date Sunday GMT Friday GMT Nikos Research Page work with Charles Van Loan My thesis deals with the Kronecker product of matrices More specifically am looking at Approximating matrix with the Kronecker product of pair of matrices Expressing FFT and Wavelet algorithms using the Kronecker product notation Automatically implementing signal processing algorithms that use the Kronecker product via symbolic manipulation and program transformations plan on providing access to my system that generates efficient FFT code for different languages and systems via the WWW For the moment the input form is working and no code is generated Please have look In general am interested in numerical linear algebra and parallelization use of symbolic math and compiler techniques for optimization FFTs wavelets simulation high performance and scientific computing	other	cornell
818	 Server Date Monday GMT Monday GMT CS Assignment Internet Homework Number Date Assigned January Date Due February To submit your answer You will submit your answers to this assignment via email See the instructions below Introduction The Internet offers wide variety electronic information resources This assignment touches on three of these resources World Wide Web WWW the newsgroups and electronic mail email on the CS information available therein Prerequisites You will need access to the Internet and to WWW browser newsreader and an email application in order to complete this assignment All four of these services are available in the Upson Mac Lab via Bear Access to those with NetIDs and passwords The instructions for this assignment will be for Bear Access but you may use different combination of access applications NCSA Mosaic rn and mail from Unix account you wish Bear Access In order to use Bear Access you will need NetID valid password and two blank floppies one for mail and one for news Bear Access can be found on the Macs under the Apple menu Once launched Bear Access presents you with menu system from which you may access the WWW browser Netscape the newsreader NewsWatcher and the email application Eudora This handout contains only skeletal instructions for the use of the these applications we recommend that you read the documentation on these applications if you are not familiar with them WWW The WWW is an Internet hypertext resource WWW documents may contain text GUI forms graphics sound animation as well as hypertext links to other documents on the Web The web in World Wide Web refers to the structure implied by these hypertext links You can jump from document to document across machine organizational and geographic boundaries by following links If you think of the documents as nodes and the links as edges in graph you get the idea CS material on the Web fair amount of information related to CS is available via the WWW from the CS home page Lecture notes homework assignments and course information are currently available Videos of the lectures may be made available on the WWW in the future Using Netscape Click on the World Wide Web the Bear Access menu to launch Netscape Hypertext links in documents may be displayed as blue underlined text or as icons Clicking on hypertext link will cause the document referenced by the link to be retrieved The title of the current WWW document is displayed in the title bar of the Netscape window this is the document title from the title bar referred to below The Location field gives the current URL more on this later The Home button may be used at any time to return you to the default document In the Mac Lab the default document is the CUInfo home page The Open button may be used to jump to an arbitrary URL We recommend that you take look at the Netscape handbook select the Help Handbook menu item for further instructions on how to use Netscape and for further information on the WWW Accessing the CS home page After Netscape has been launched you should see the CUInfo home page The procedure for reaching the CS home page from the CUInfo home page is as follows Click on From document Other Cornell Web Servers CUInfo Home Page Cornell University Dept of Computer Science Other Cornell WWW Servers Course Home Pages Cornell Department of Computer Science CS Introduction to Digital Cornell Course Home Pages Spring You should now be viewing the CS home page Spend some time navigating the documents linked to this page try to get picture of how the various documents are linked and what the overall structure is When you become somewhat familiar with the CS page and with Web navigation in general answer the following questions Start from the CS home page Click on Table of Contents then click on Generations of Computers Click on Next either one What document are you now viewing Give the document title from the title bar Now navigate back to the CS home page How did you accomplish this Give sequence of clicks button presses menu choices etc There are several possible answers Finally you should get used to searching through the Web for information whose location you do not know priori Answer the following question in which CS WWW document is the acronym RTL first defined Give the document title from the title bar URLs Uniform Resource Locator URL is basically an address of WWW document For the URLs which you be using in this assignment the address is absolute as opposed to relative it can be used from anywhere on the Internet Opening URL simply means retrieving the WWW document at the address referred to by the URL you might think of this as jumping to the document Open the URL http What is the title of this document By now you should be getting used to tracking down information on the Web Try to answer the following question starting from the Hyperion Web page who was the director of the Babylon epsiode Race Through Dark Places Newsgroups The newsgroups provide sort of Internet bulletin board where messages may be posted and read by wide variety of people with similar interests CS has dedicated newsgroup which may be used for announcements feedback questions of general interest etc To access the CS newsgroup from the Macs click on the Network News Usenet menu item on the Bear Access menu then click on the NewsWatcher Help menu item and read the instructions Configure and run NewsWatcher as specified in the instructions Once NewsWatcher has been configured and is running go to the Full Group List window Scroll down through the list of newsgroups until you see on window should appear containing list of messages actually hierarchical list of authors and subjects of messages organized by threads on message will bring up the full message which consists of header the From To etc lines above the and body the part below the Find the message with the subject article and date Sun Jan GMT What is the body of this message It should be four lines of text See the documentation for further information on the newsgroups and on NewsWatcher Email The Bear Access email application Eudora may be accessed via the Mail menu item on the Bear Access menu Click on the Mail Help item and read the instructions there Configure and run Eudora as specified in the instructions Once Eudora has been configured and is running you may send message by selecting Message New Message from the menu at the top of the screen See the documentation for further information on electronic mail and on Eudora Submitting Answers Send an email message to with the subject assignment answers Include the following information in your message Name Last First Cornell ID Address Phone Grading letter or audit College major and year in school Proficiency on scale of know in FORTRAN BASIC Pascal Scheme Other languages please list Computer science courses taken so far Answers to questions	other	cornell
819	 Server Date Sunday GMT Saturday GMT Business Sector Personal Group Applications START	other	cornell
820	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide	other	cornell
821	 Date Mon Dec GMT Server Mon Apr GMT Textbook Errors Errata for Watt Computer Graphics Second Edition Addison Wesley The bulleted numbers refer to page number The first equation on the page has two mistakes should read Also VW should read dot The third row second column entry of should be sin phi not sin theta The first matrix is incorrect It is not orthonormal and thus can not be the product of two rotations The second constraint in the middle of the page should read Normalizing the range of zs values so that the range of maps into the range Matrix equation has an incorrect last COLUMN It should read should read Equation should have set of brackets so that the multiplies the entire expression Figure is confusing at best think that the vector should be and the vector should be The third equation on the page gives mu as function of Fo The mu should be eta the index of refraction The equation is just rearranged version of the one above it The second numbered bullet should read These values of eta Note that in the code the index of refraction is refered to as mu In figure the notation Nt dot implies in inside should read is inside In Equation the last in the equation for Nb should be ys The Ns on the right of the equation for Ns should be Na In Figure the parametric directions and are reversed	other	cornell
822	 Server Date Sunday GMT Friday GMT Parallel Object Recognition and Applications to Facial Recognition Parallel Object Recognition and Applications to Facial Recognition Matt Androski Chris Paradis Jody Shapiro Introduction This project was an attempt to parallelize computer vision object recognition algorithm Given database of object models and previously unseen image this algorithm attempts to find any and all models which appear in the new image Matching is performed using an approximation of the Hausdorff Fraction see Figure for simple example The image search is performed in hierarchical scheme which attempts to minimize comparisons by quickly eliminating regions of the image from consideration Figure previously unseen image containing model In this paper we will discuss the pros and cons of different methods of parallelization and describe the factors that motivated our design decisions We will then describe our parallel implementation using in detail this will be followed by performance analysis We also discuss the suitability of this algorithm for use in facial recognition and present our results We conclude with discussion of some possible extensions to both the parallel implementation and the facial recognition aspects Approximation to the Hausdorff Fraction This method uses an approximation to the Hausdorff Fraction to measure the similarity between two edge images of the same size This approximation is computed using subspace representation of the two edge images The distance for which the fraction is being computed is factored in by dilating one of the images by the distance For this application one of the images in the match will be model from stored database while the other will be region of new image To create the subspace we first convert each of the model images into column vector by reading the pixels in column major order We then construct matrix from these vectors We compute the eigenvectors and eigenvalues of this matrix and select the largest eigenvalues and create matrix from their corresponding eigenvectors This matrix is used to project each of the model images and any region of the new image into the subspace The subspace representation of the two images will each be vector The primary step in computing the approximation to the Hausdorff Fraction is dot product of these two vectors This method is described in detail in The subspace representations of the database models are precomputed and stored along with all of the matrices and data needed to perform the projection operation Regions of the image we are searching need to be projected into the subspace during run time This projection operation is computationally very expensive Therefore both the search algorithm and the parallelization method attempt to minimize the number of projections performed Note that the approximation is only accurate to within of the true Hausdorff Fraction so final decisions about the relative quality of match are made using the true Hausdorff Fraction Search Algorithm The search algorithm presented in attempts to minimize the number of projections and comparisons by performing examination of the new image The new image is subdivided into cells where each cell represents set of translations of the model with respect to the image Each model is translated to the center of the cell and compared with that region of the image dilated by the radius of the cell see Figure This amounts to rough comparison of this model with every possible translation in the cell If the resulting fraction is less than some threshold then the set of translations represented by that cell can be ruled out as match with that model If the resulting fraction is not below the threshold then the algorithm subdivides the cell into four quadrants and considers each of those This is repeated until the model is ruled out or the algorithm has recursed down to the point where each cell is one translation see Figure If model can not be ruled out by the approximation at the lowest level then the true Hausdorff Fraction is calculated If the model still can not be ruled out it is marked as possible match and the fraction and position are stored for later consideration Figure Image divided up into cells with model translation shown Figure cell is searched with strategy Thus the search is depth first and each cell of the image is an independent entity Projections of regions of the new image are computed for each cell at each level For efficiency all models which passed the test at higher level are compared to the projection and list of the survivors is passed to the next lower level The search algorithm is described in detail in Parallelization Issues The first major task in parallelizing this object recognition algorithm was deciding how to distribute the processing amongst the processors One option was to distribute the search cells across the processors Thus each processor would be assigned group of cells and would search each of these cells for all models in the database This method had some attractive features Cells are independent entities as are all image projections associated with them The projections could be computed and used locally for each of the models and no communication between processors would be necessary However this method requires each processor to have access to the entire database of models Our test database contained view each of models for total of models For database of that size having complete set of models at each processor is not unreasonable However any real application would require much larger database which would preclude the use of this method Our second option was to distribute the models across the processors Thus each processor would have subset of the models in the database and would search every cell in the image for its set of models This method is much more tolerant of large database than the first but it introduces some significant problems Each processor is searching through all of the cells in the image As such every processor will need most of the image projections calculated Image projections are very expensive so having each processor compute all of the projections locally is unacceptable Instead it is necessary to have processors store projections in global data structure as they are calculated so other processors can access them This introduces significant network traffic into the parallel version However since this method can handle large database much more effectively it became the only choice for implementation Once this implementation was chosen we were faced with two primary issues in parallelization One issue was how to efficiently compute and share the image projections To prevent processors from needing to access the same projections simultaneously we stagger the starting points of each processor across the image we are searching In an ideal case the processors will move from cell to cell in lock step without any conflicts If two processors happen to need the same projection simultaneously and the projection has not yet been calculated then simple locking mechanism ensures that only one does the calculation while the other waits So when given processor needs projection it first checks to see if the projection has been calculated If so it gets the projection and uses it If it has not been calculated it locks the projection calculates it and stores it in the global structure If it fails to lock the projection then another processor must be computing it so it waits until that computation completes The second issue was that of load balance This issue appeared to be deceptively simple since large quantity of models could be easily distributed across many processors The problem with this simple solution arose because of the organization of our database The views of each of the models were stored sequentially in the database given processor would be assigned most of the views of few objects If one of those objects appeared in the image that processor would have many more close matches than other processors and would recurse more deeply into the image This created distinct load imbalance We solved this problem by spreading the views of each object across the processors In real application it would be sensible to store the views of an object out of order to solve this problem With this change in place we achieved much more acceptable load balance Figure shows the load balance of the algorithm before and after this correction It is important to note however that it is impossible to predict which models will cause the deepest searches so there will always be certain amount of load imbalance Figure Load Balancing Performance Once our implementation was complete we measured its performance on the massively parallel processor We also compiled the sequential version for the and measured its performance The graph in Figure shows the performance results in terms of speedup over the sequential version Figure Speedup vs Number of Processors The graph clearly shows that our parallel implementation achieves less than ideal performance Ideal performance would be speedup of for test on processors These results were not as good as we had hoped so we attempted to identify the source of overhead which was limiting our performance We separately measured the time spent in each phase of the search The breakdown of time for different numbers of processors is shown in Figure Figure Breakdown of Processing Time The single processor graph shows that the parallel version when run on one processor performs nearly as well as the sequential version However when more processors are added we see that the time spent fetching projections from the global structure is significant source of overhead As the number of processors being used increases the fewer projections are calculated locally so more global accesses are required The graphs show that the overhead associated with fetching projections increases for more processors To solve this problem we would like to fetch the projections using access and do some other calculations while waiting for the data to arrive However the nature of the algorithm prevents us from knowing in advance which projections we need Thus by the time we know we need projection we have no other calculations to perform while waiting for the data Experiments With Facial Recognition With our parallel implementation complete we began to investigate the usefulness of this method for facial recognition Our goal was to see if the algorithm could successfully find faces in scene using the approximation to the Hausdorff fraction One test method we considered was inserting face models from our database directly into scenes and then seeing if we could match them This works well but is very artificial Instead we use images that are not in the database of the people who do appear in the database to see if we can effectively find those faces This is much more representative of situation We started the construction of our database with set of images This set consisted of poses each of different people We wanted to exclude some of these poses from the database so that we could search for them in scenes We elected to save the poses for matching and construct the database from the poses The resulting database is shown in Figure We used this database to construct subspace and the needed supporting data as is described in Our next step was to create set of images to search We did have access to the people who appear in our database so we decided to create synthetic images by inserting the edge images the ones we kept out of the database into images which contained other faces of roughly the same size We attempted to select images which contained significant number of faces and additional clutter to introduce the possibility of false matches We have included several of our synthetic test images and the results of our searches on them Each set of images includes the original grayscale and the corresponding edge image Each pair of images following consists of the synthetic image created by inserting the face we wish to search for and the same image with the best match overlayed in red The notation associated with the inserted face indicates that we inserted pose of person In instances where the search fails to identify the correct face the correct face is shown in blue while the result of the search is shown in red Coordinates of the match are column followed by row with the origin at the top left Figure Face database Original image and version Person inserted at Found person at Person inserted at Found person at Person inserted at Found person at Original image and version Person blue inserted at Found person red at Person blue inserted at Found person red at Person inserted at Found person at Original image and version Person inserted at Found person at Person inserted at Found person at Original image and version Person inserted at Found person at Person blue inserted at Found person red at Facial Recognition Results The results of our experiments with facial recognition were mixed We were pleased that often the algorithm successfully selected the correct person to match the face in the scene However the algorithm does sometimes fail and incorrectly selects another face or in rare cases something that is not even face However the key result of our tests was more subtle When we examined all of the possible matches which survived the Hausdorff approximation based search we found that the correct result was nearly always present Our test set was not large enough to suggest any statistical conclusions but we believe that the search algorithm is effective in quickly eliminating without eliminating good matches The final decision as to which element of the database is the best match is made with the true Hausdorff approximation We believe this is where the algorithm fails Thus it may be possible to use the approximate Hausdorff method to quickly search the image and then use more robust face matching algorithm to pick the best match from the survivors The method developed by Turk et al might be good choice for this application Conclusions It has been established that searching scene for given set of models can be conducted efficiently by using the approximation to the Hausdorff fraction In the first part of this project we have shown that this algorithm can be effectively parallelized Thus with enough processors at our disposal we can quickly search new scene for models in the database Further we have determined that this algorithm can be successfully applied to the problem of facial recognition Given database of faces and scene it is possible to use this algorithm to search the image for people who appear in the database This algorithm has potential applications as means of identifying unknown individuals This could be used by law enforcement agencies for searching criminal records Companies could use it to verify the identity of employees as part of their security More general problems such as face detection could be addressed with variant of this algorithm which searches for structures in scene This work could also be extended to search for given face in sequence of images Future Work and Improvements The primary limiting factor in this parallel algorithm is the time spent fetching projections from the global structure As we have already stated predicting the need for given projection would allow us to perform access and avoid wasting time waiting for the network to supply the data Future revision to this implementation should include some means of projection prediction simplistic approach would be to fetch all projections that might be needed The danger in this approach is that such scheme would increase network traffic and congestion significantly proper approach would be to employ something akin to branch prediction scheme with high accuracy Another possible approach to improving this algorithm might be to use breadth first search rather than depth first one This would allow you to accurately predict which projections you would need However this would also require storage of list of surviving models for each cell at each level as the search proceeds The memory requirements of these lists would be significant and perhaps prohibitive Yet another solution would be to use the first method of parallelization described above We would distribute the cells across the processors Each processor could compute the projection for its cells as needed and store them The problem of storing all of the models could be solved by subdividing the database into model sets processor would consider only one set at time When nearing completion of set the processor could begin reading the next set from file This would keep memory requirements to minimum However the demands on the file system might become the limiting factor in the algorithm with this implementation We see three main areas for future work with respect to facial recognition larger set of test images could be used in an effort to produce real statistics on recognition performance However these statistics will still be approximations because facial recognition is inherently Real test images as opposed to our test images could be used This would require the people in the database to naturally appear in the test images most likely new face database would need to be created It would also be interesting to see how the search algorithm performs under changing lighting conditions The true Hausdorff fraction that is computed to eliminate matches is not necessarily the best measure to use for facial recognition Edge detected images of faces are not necessarily good basis for final matching Perhaps better method would be to use matching scheme the method used in might be good candidate Certainly based matching appears to be useful for quickly and efficiently narrowing the search References Huttenlocker Lilien and Olson Object Recognition Using Subspace Methods Hiroshi Murase and Shree Nayar Visual Learning and Recognition of Objects from Appearance International Journal of Computer Vision Matthew Turk and Alex Pentland Eigenfaces for Recognition Journal of Cognitive Neuroscience Vol Number David Culler et al Parallel Programming in Proceedings of Supercomputing Chang Grzegorz Czajkowski and Thorsten von Eicken Design and Performance of Active Messages on the IBM Olivetti Research Laboratory Database of Faces Carnegie Mellon University Test Images for Face Detection Source Code	other	cornell
823	 Server Date Sunday GMT Wednesday GMT Virtual Reality Video Conferencing Virtual Reality Video Conferencing Implemented High Performance Graphics Engine Projects being developed as part of course Virtual Reality Video Conferencing Video Texture Mapping Design of Related Links Brian Smith my project advisor homepage VR Immersive Desktop Teleconferencing Interactive by Microsoft Project at Sun Microsystems Laboratories Manual Virtual Reality Modeling Language Desktop Video Conferencing Product Survey MBONE the Multicast Backbone on the Internet Graphics Engines List	other	cornell
824	 Server Date Sunday GMT Friday GMT The Weakest Failure Detector for Solving Consensus The Weakest Failure Detector for Solving Consensus by Tushar Deepak Chandra Vassos Hadzilacos and Sam Toueg This paper has pages To get postscript copy click here or here to get it from the mirror site preliminary version of this paper appeared in Abstract We determine what information about failures is necessary and sufficient to solve Consensus in asynchronous distributed systems subject to crash failures In we proved that failure detector that provides surprisingly little information about which processes have crashed is sufficient to solve Consensus in asynchronous systems with majority of correct processes In this paper we prove that to solve Consensus any failure detector has to provide at least as much information as Thus is indeed the weakest failure detector for solving Consensus in asynchronous systems with majority of correct processes Research supported by an IBM graduate fellowship NSF grants and Ames grant grants from the IBM Endicott Programming Laboratory and Siemens Corp and grant from the Natural Sciences and Engineering Research Council of Canada Maintained by tushar	other	cornell
825	 Date Mon Dec GMT Server Wed Apr GMT Cornell Theory Center Copyright Statement Cornell Theory Center Copyright Statement All contents copyright Cornell University All rights reserved For permission to reproduce any materials on the Cornell Theory Center World Wide Web servers contact Linda Callahan Director External Relations cal phone fax Software that is available for redistribution is identified and covered under terms described within	other	cornell
826	 Server Date Monday GMT Wednesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
827	 Server Date Sunday GMT Wednesday GMT Lecture CONCEPTS last lecture Simple expressions and programs statements and their evaluation examples CONCEPTS this lecture Compound statements and scoping rules blocks and declarations fun with else iteration with while and break fencepost errors HANDOUT Sample Prelim questions Prelim notes Review session is Sunday at Prelim is Monday PM Coverage is everything but there will be no detailed questions on the stack model Closed book closed notes mostly for your benefit Bring writing implement We do stress memorization We will forgive minor syntactic errors Room assignments Upson Phillips Do miss the prelim Make up exams are oral and guaranteed to be no easier than the real one Compound statements Another kind of statement we actually seen this already but had given it name This is what the curly braces do at least so far Sort of like begin and end in PASCAL Syntax an open curly brace then or more statements then closed curly brace square compound expression can include declaration statements but they must all appear at the beginning before any statement which is not declaration statement Example with declaration int square Scoping rules Nasty example do write code like this void main int int printf The rule is simple to figure out which is intended look outwards from the line you are on until you find You can add this to the stack model but little ugly and we wo do it We wo use this feature in anything very complicated in Where have we seen compound statements Conditional statements often involve compound statementsif test thenstatement else elsestatement test is an expression but thenstatement and elsestatement can be any statement It is good practice to use compound statements with conditional statements it makes your code much easier to read Where else have we seen compound statements Hint in this case they usually involve declarations Fun with else You do actually need to use else with ifif printf This can lead to totally unreadable code especially if you nest your if statements Do do this if if else There is reasonable way of doing multiway conditional statementsif if if else defaultstatement do personally find this incredibly readable but sometimes it necessary Iteration Today we mostly cover the syntax of iteration in We do some examples of its use in section Iteration involves executing some part of your program repeatedly as does recursion The easiest way to do iteration is with whilewhile expression statement Typically statement is compound statement semantics of while evaluate expression If it is false zero then we done with the while statement If it is true then evaluate statement then evaluate the while statement again Examplevoid countdown int count while count printf count count count printf Blastoff void main start countdown start printf start This example also shows off subtle but important property of the stack model Note that if the test expression is never your while statement will run forever How do we get out of while statement early while count printf count if return count count Break statements Suppose that instead of getting out of the entire countdown function we merely want to get out of the while statement NASA did goof the astronauts got impatient and decided to blast off before the countdown finished There is good way and bad way We only going to teach you the good way The break statement terminates while statementvoid countdown int count while count printf count count count if count break printf Blastoff What about nested while statements Again this allows unreadable code to be created The world has enough of this without you folks contributing Small example while while if abs break if test break The rule is that break statement terminates the smallest while statement that encloses it Iteration and the stack model As far as the stack model is concerned iteration primitives are much different than conditional statements They simply manipulate the program counter These primitives are sometimes called Control Flow primitives Fencepost errors With iteration and also with recursion it becomes very easy to make fencepost errors Suppose you want to build fence and you need to install posts which are apart How many fenceposts do you need void nastybug int count count while count count count something This kind of bug is hard to find in general	other	cornell
828	 Date Mon Dec GMT Server Thu Apr GMT Lab CS Laboratory Modeling and Scientific Visualization Introduction Scientific visualization is term which refers to the process of converting data into pictures This lab will demonstrate several of the techniques of visualization The techniques will be used to view simulated landscape complete with rivers and clouds The examples shown below are the result of calculating height field and displaying it as landscape The blue is flat polygon simulating water surface density field and displaying it as cloud either by volume rendering or by isosurface extraction followed by polygon rendering set of rivers determined by plotting streamlines of the gradient of the height field The gradient vectorfield and the streamlines are shown also The vectorfield can be considered an plan view of the landscape slopes The third image shows landscape with about stream start locations Procedure You will need to download the program The program caluclates field of altitudes to make landscape It also calculates scalar field of densities to use as cloud These two fields are manipulated to derive the slope of the surface then visualized New modules which are used include the Isosurface module which fits polygons to points of equal field strength in field AutoGlyph module which constructs an arrow at every point in vector field Streamline module which follows vector field in its direction of flow Refine module which interpolates points into field Map module which allows the data in one field to be interpolated onto the positions of another field You may want to look at the example programs in for further examples that use these modules Assignment Run the program few times to see what it does Try out various options on the control panel Modify the program to add the following features Modify the colors of the rivers by mapping the magnitude of the gradient the slope onto the streamlines then coloring them so that high slopes regions of the streams are white to simulate rapids while lower slopes are blue The program as given uses Map module to map altitude to the streamlines You will need to add another Map module and cotrol the colors based on the data component of the field One possible example is shown below Modify the surface color so that is green near ocean level and white at mountain peaks with pale yellow in between Use the ColorMap module Modify the river generator to start rivers at regular grid points say by on the surface Use the Construct module to make starting grid See the image above with stream starts for an example Modify the program to produce trees on the surface The Glyph module will produce arrows when given vector field If the type input of the Glyph module is given geometry say cone it will place it at every point on the surface If you use parametric surface as an input be sure to run it through Refine module with the level input set to triangles Use an Include module to limit the trees to band of elevations as shown below You will probably want to use Reduce module to lower the density of trees on the surface Modify the program to produce an animation of the cloud The animation should show the cloud changing from one density distribution to another by interplolating between two fixed density functions Make perhaps ten time steps in the sequence Some results from You will need to demo all of the assigned functions in one modified net with the appropriate interactors to control the functions you have added As usual the style of the program will be graded as will its function The cloud animation may be in separate program The Lab grading guide will be filled out by consultant during section to evaluate your work Back to Main Page Go to Lab Last modified Land Copyright Statement	other	cornell
829	 Server Date Sunday GMT Thursday GMT if publish it it is true some of my writings not had much published but have written some things proud of some of them have been flames of mine and others have been more thought out as conscientious objector to all armed conflict my first published letter was published in the grand rapids press few years back during the gulf war since that time however started keeping more of my work online lest you wonder also do write poetry and other things but probably rather be famous as an essayist anyhow like to argue so here some of my writings there dreadful mess going on in byron center which is suburb miles from where went to high school so wrote letter the unabomber suspect was mathematician so all mathematicians are suspected terrorists do think so so wrote letter to the editor of my newspaper my most widely read letter almost certainly was letter had published in utne reader while back this is letter sent them with which was much more proud no accounting for taste had letter printed in the tech couple years back about the undergraduate association at mit also published letter in the same newspaper regarding gay and lesbian issues in the process of writing letter on rotc policies at cornell wrote bitchy letter to the cornell review recently what humorless schmucks and yes like to argue we are the music makers and we are the dreamers of dreams aphex twin dan brown snowman last updated may	other	cornell
830	 Server Date Sunday GMT Tuesday GMT Reading Top Reasons You Never Want To Visit Reading You be in Pennsylvania Dutch Country Berks County Pennsylvania is considered an outlying part of Pennsylvania Dutch Country which consists roughly of the counties of Berks Lebanon pronounced and Lancaster with its center in Lancaster County The Pennsylvania Dutch really Dutch at all in fact they claim to be of German descent but the species has mutated to such degree that the Germans really want them either For lack of better term we refer to these beings as Dutchies There is only one waul in Dutchy Dutchies speak language entirely their own It is possible that it may have evolved from English lucky English speaker is occasionally able to catch one out of every hundred or so words Dutchy speaks In any case this language consists of number of consonant sounds and one vowel phoneme which can be written For example the word house in English would be rendered haus in Dutchy It is impossible really to describe how this word is pronounced saying hoss while trying to swallow your larynx is perhaps close approximation One other distinctive characteristic of Dutchy speech is the consistent transposition of the phonemes and This phenomenon is reputed to be the result of particularly gruesome accident involving Volkswagon Beetle and dyslexic farmer For example once overheard the manager of the produce department our local grocery store is called Weavers pronounced Veewaus and is run by food distribution company called and am not making this up Shur Fine heard her say something about putting up diwiders betveen the wegetables so that they vould get wexed Apparently the wegetables vere grexing One can understand vhy this vould be upsetting Do even think about trying to find good pizza The food that is eaten in Reading is quite like the food that people eat everywhere else Dutchies do have any appreciation for good food like pizza seen four pizza places in the exact same location go in and out of business one right after another But you can take comfort in the fact that although it is impossible to get real pizza in Berks County you never find better chicken barbecue This favorite food of the true traditional Dutchy is an entire chicken or pig for some of the larger representatives of the Dutchy species roasted over fire and eaten whole bones entrails and all One thing at which Berks Countians excel in making however is donuts But they do just make donuts they introduced an improved food variety all their own called faustnauchts not saying this right unless you blow chunks of your windpipe all over the place Faustnaucht is the Dutchy word for concentrated nutrition product few hundred years ago one Dutchy fellow named Jesus pronounced Cheesaus fed five thousand people with just five faustnauchts and couple of barbecued chickens have personally seen grown adults actually explode after eating half faustnaucht My dad puts faustnauchts in the trunk of his car during the vinter to give him better traction in the snow There is only one highway through Berks County Even if you actually wanted to visit Reading it turns out that it is not really possible There is only one highway that runs through Berks County It runs from west to east from County to Schuykill County If you want to go north or south in Berks County you just plain out of luck It actually easier to drive through Maryland if you want to go from say Harrisburg to Philadelphia And perhaps highway is really the right word to describe Berks County only road Most highways do have traffic lights every hundred yards for the entire length of the road from one end of the county to the other Disclaimer The opinions of this author were not even expressed in the above document Any mention of fictitious persons real or otherwise was not meant to reflect upon the character of the character upon whom it was meant to reflect In short the author does not wish to be held responsible for any of the above which he swears he did not even write pierce	other	cornell
831	 Date Sun Nov GMT Server Tue Apr GMT Student Projects Student Projects and school year Cornell Theory Center and Department of Computer Science The student projects listed below result from work performed for Special Investigations in Computer Science or for Independent reading and Research Most of the projects were extensions of the language IBM Visualization Data Explorer The students wrote code to construct new modules for use with Data Explorer Some projects used DX for visualization Others were direct applications The projects shown here were done for Bruce Land module to produce fractal landscapes by Jonathan Alferness Parallel trace visualization by Daniel Herman module to produce plants using by Alerk Amin Keyboard Systems Study by Simonetta Rodriguez Plant Geometry Generator by Chen PEEK polytope visualization by cross section and projection by Gordon Kindlmann Visualization of Dinosaur Egg by Jennifer Moyer blobby modeler for Data Explorer by Huang DX to WebOOGL converter by Felix Lung and David Wu LZW compression modules for DX by Chen NTSC simulator modules for DX by Hung Chen and Lin DX to VRML object translator module by Chris Kline Krieging Interpolator module for DX by Chaoyi Lang An improved volume rendering module for DX by Robert Amidon Fractal surface modules by William Nell rubber sheet simulator for DX by Chris Kline See also Cornell Theory Center Examples of visualization work from CTC final projects Cornell Theory Center Last updated by Bruce Land	other	cornell
832	 Server Date Monday GMT Wednesday GMT Homework	other	cornell
833	 Server Date Sunday GMT Thursday GMT The PREDATOR Project The PREDATOR DBMS Project Contents What is PREDATOR Paper describing the Enhanced Abstract Data Type paradigm Code design of PREDATOR How to install PREDATOR Tips on system development Coding conventions Testing Acknowledgements What is PREDATOR The PREDATOR database system PRedator Enhanced DAta Type DBMS is an DBMS built as research prototype to study how complex data types should be supported Existing technology is based on the notion of Abstract Data Types ADTs each data type is encapsulated through well known interface and the database system maintains an extensible table of ADTs Each ADT provides bunch of methods that can be applied from within an SQL query to operate on ADT values The PREDATOR system recognizes that the cost of ADT operations can dominate database performance Consequently the ADT notion is enhanced so that each data type can maintain use that for optimizing operations on the ADT and apply optimizations on expressions involving concatenations of ADT operations Further each data type can provide query language in which complex operations on that type can be expressed This Enhanced Abstract Data Type paradigm is the basic technology in PREDATOR Providing the support for this paradigm requires fundamental redesign of many components of traditional DBMS The purpose of PREDATOR is to fully explore the idea and to see how queries involving complex object expressions can be further optimized by exploiting interactions between The current focus of work is to build support for several different data types each of which can independent of the others The paradigm The paradigm is explained in detail in technical report also being submitted as paper to ACM SIGMOD This document also describes the architecture of PREDATOR the interesting design issues possible extensions of the current technology and open problems for future research System code structure The detailed code design is described here This may not always be upto date because the code base is constantly being updated For most students in you will only need to concentrate on the portion of the design document dealing with the SQL engine the portion dealing with new data types Installation instructions These instructions are only for Cornell students For others PREDATOR is not yet publicly available piece of software but it will be in few months Here are the installation instructions and some quick tests you can run System Development Look here for some tips on system development in PREDATOR Coding conventions When adding to PREDATOR it is crucial that you follow the same coding conventions that have been used relatively uniformly throughout the code Click here to get to list of dos and The document also tells you how to use RCS simple source code control mechanism used to manage the distribution of PREDATOR code Testing Initially after installing your code you should try some quick tests On more regular basis as you add code you should run test suite that is being developed for PREDATOR Details of this test suite and how to run it are here Acknowledgements PREDATOR is built using the SHORE storage manager as the data repository	other	cornell
834	 Server Date Sunday GMT Wednesday GMT Kristen Summers Logical Structure Types Toward Taxonomy of Logical Document Structures In Electronic Publishing and the Information Superhighway Proceedings of the Dartmouth Institute for Advanced Graduate Studies DAGS pages Boston May Abstract The automated discovery of logical structure in text documents is an important problem that has recently received good deal of attention it can enable the creation of flexible and sophisticated document manipulation tools that will greatly increase the impact of electronic documents This paper addresses aspects of the nature of these logical structures in order to develop categories of structures that reflect the variance in requirements for discovery and the variance in significance for applications complete taxonomy is not developed but relevant attributes are identified in three forms of categorization fundamental based on structure definitions discovery based on required observables to find structures and usage based on roles structures play in applications The attributes themselves are independent of the choice of particular logical structures to consider in given application and their direct implications are discussed You can view the full postscript file view an html version at the conference papers site or return to my home page	other	cornell
835	 Server Date Sundacp No match GMT Monday GMT Applet Voronoi Diagram Delaunay Triangulation If you were running Web browser such as Netscape then you would see Voronoi Diagram Delaunay Triangulation here The mouse Click the mouse in the drawing region to add new sites to the Voronoi diagram or Delaunay triangulation The Voronoi Diagram and Delaunay Triangulation checkboxes These toggle between the Voronoi diagram and the Delaunay triangulation Your current set of sites remains the same for both diagrams The Clear button Press this to begin new diagram with no sites The Show Empty Circles button Press this to see the empty circles for your set of sites Each Voronoi vertex or Delaunay triangle has corresponding empty circumcircle What is it The Voronoi diagram has the property that for each site clicked with the mouse every point in the region around that site is closer to that site than to any of the other sites The Delaunay triangulation is the geometric dual of the Voronoi diagram Alternately it can be defined as triangulation of the sites with the additional property that for each triangle of the triangulation the circumcircle of that triangle is empty of all other sites These closely related data structures have been found to be among the most useful data structures of the field of Computational Geometry Additional Information The actual data structure here is Delaunay triangulation The Voronoi diagram is built from the Delaunay triangulation The Delaunay triangulation is built within large triangle whose vertices are well That why in the Delaunay triangulation there are lines heading off to the upper left the upper right and down This technique makes the code simpler since otherwise additional code would be needed to handle new sites that are outside the convex hull of the previous sites The algorithm To insert new site we walk across the triangulation starting from the most recently created triangle until we find the triangle that contains the new site This triangle and any adjacent triangles that contain this new site in their circumcircle are eliminated and the resulting empty spot is retriangulated This technique is commonly called the Algorithm The expected time to insert new site is roughly where is the current number of sites Author Paul Chew chew	other	cornell
836	 Server Date Sunday GMT Tuesday GMT UNIMEDIA zum Einsatz multimedialer Techniken in der Lehre an der TH Darmstadt FB Informatik Wolfgang Henhapl FB Informatik Datenbanken Alejandro Buchmann FB Maschinenbau Praktikum zum Arbeiten mit parametrischen Rainer Anderl zum Einsatz multimedialer Techniken in der Lehre an anderen Paderborn Hypermedia die Ausbildung Verteiltes Lehren und Lernen WWW Conference Workshop Teaching Learning with the Web und Kostenrechnung Online HIS Hannover GmbH Dokumentation Lehrens und Lernens an Hochschulen der HIS GmbH Symposion der Gesellschaft Informatik Hypermedia in der und Weiterbildung vom bis zum Oktober Die Liste wird durch Ihre Beteiligung Schicken Sie uns Ihre Hinweise	other	cornell
837	 Date Sun Nov GMT Server Thu Jun GMT CS Final project animation Computer Science Cornell University Final Project Animations These animations were submitted as final class projects by students in Computer Science Cornell University during the through spring semesters This course provides an introduction to the principles of interactive computer graphics and scientific visualization Topics include and graphics algorithms perspective transformations and algorithms parametric surfaces lighting models image synthesis and application to scientific data analysis They were created using IBM Data Explorer The instructor is Bruce Land Animation from Maximum mpeg size is Mbytes average is Numbers are for reference and indicate no other ordering USS Hornet mpeg and description Mt Cyclone virtual Coaster mpeg and description Shadows mpeg and description DIDI the magic helmet mpeg and description The unabomber fatal mistake mpeg The Magic mpeg and description Ignag the one with whiskers mpeg and description Judgement Day mpeg and description Godzilla Megalon In Game of Chess mpeg and description Veritech Battle mpeg and description Typical Day on the Plains mpeg and description Enemy Invasion mpeg and description Tanks on Fire mpeg and description Nuke mpeg Barney Must Die The Future of Dragon Day mpeg and description Cornell mpeg and description Intergalactic Journey mpeg and description James Blob Saves Orphange mpeg and description Ride To Heaven mpeg and description Robbie vs the Daleks mpeg and description Attack of the fly mpeg and description The HEAD mpeg and description Pinball mpeg and description My Dixie Wrecked mpeg and description Origami Dinosaur Park mpeg Transformer from Hell to Heaven mpeg and description Captain Kirk has bad day mpeg and description Springtime in Ithaca mpeg and description Spring SnoSkiing mpeg and description Welcome to Rebel Attack mpeg and description mpeg and description Annihilation mpeg and description Conehead goes jogging mpeg and description Crew Boat Rowing on Lake mpeg and description Animation from Phoenix Rejuvenation bird is reborn Mbyte The Penalty Shot hockey player scores in breakaway play Orientation of the player body and hands are calculated from the trajectories of the puck and body Mbyte HOTH An ATAT from StarWars Mbyte Empire Strikes Back The Opening Battle starwars saga with bit of lab humor at the end Mbyte Knight Rider Kitt Karr Part III An automobile duel Mbyte Race driver view of car race Mbyte Dogfight dogfight between carefully modelled and Spitfire Mbyte House Design house is built Mbyte MacroMouse in The Hallway of Death spoof on certain games Mbyte Demento the Robot robot which rebuilds itself Mbyte Head Trip human head in strange surroundings Mbyte Riding Bike detailed bike and rider The bike includes spokes chain and pedals Mbyte Water Wonderful World diver hunts for treasure Mbyte Fly by the Pool Side fly trys to avoid pool cue Mbytes Fasten Your Seat Belt car crash with realistic crumpling Mbyte Trotting Quadraped Horse The title says it all Mbyte VR Trooper robot which changes shape Mbyte House of Lost Dreams Under Construction An accurately modelled house from actual plans Mbyte Bungee Jumper jumper who meets tragic end Mbyte As Time Goes By traditional alarm clock Mbyte Outpost StarWars scene Mbytes Dandelion dandelion grows goes to seed and blows away all in single day Mbyte Tank War An alogrithmically controlled tank battle The tank detects the terrain it starts on then follows streamline down the hillside while keeping its cannon aimed correctly Mbyte Voyager Journey Home spacecraft returns to earth Mbyte Surreal Descent octopus lands in bad spot Mbyte Silicon Frog frog with serious thirst who trys to hijack beverage truck with his tongue Mbyte The Match robot volley ball match Mbyte Rower at Sunrise person rowing shell on Cayuga inlet Mbyte Space Shuttle shuttle blastoff with volume rendered exhaust smoke Mbyte Light Death Insect meets streetlight Mbyte Tunnel of Doom exploration of very dangerous place Mbyte be Back rocket launch which includes very convincing thrust flame and Earth Mbyte It Bug not Spider An animation combining heirarchally modelled motion of bug with the motion of rubber sheet The shape of the rubber sheet was solved for each frame using Laplace equation with constraints derived from the bug position Mbyte The Great Space Coaster simulation of camera riding in roller coaster on the moon The coaster is an arbitrary parametric curve specified at runtime Mbyte Animation from Bubblebee Mbytes bumblebee with texture mapping Juggle Mbytes An invisible juggler Weird Science Mbyte From dragonfly to butterfly Virtual Fight Mbytes Choreography of two figures Day at the Pool Mbytes Particle systems at the pool Rad Spider Mbytes spider and her web GIS Mbytes Real GIS data of the Ithaca area and the airport Death Trek Mbytes Star Trek Death Star Drive Mbytes Oceanside driving Flight Mbytes flock of birds and parachute over real terrain Flush Mbytes Follow bug down the drain HBO Mbytes of the Observatory Hoop Mbytes Robot basketball Pursuit Mbytes running figure Race Mbytes racetrack and spectators Stage Robot Mbytes robot puts on show Tour of the Solar System Mbytes Fly through the whole solar system Related Topics MPEG software MPEG FAQ How to MPEG movies UNIX An Introduction to IBM Data Explorer DX Visualization at the Theory Center Comments about Theory Center online documents are welcome and may be sent to Last modified Dwyer Copyright Statement	other	cornell
838	 Date Mon Dec GMT Server Wed Mar GMT Lab CS Laboratory Using virtual camera Introduction This exercise introduces the concept of virtual camera The virtual camera is set of transforms which takes representation of set of objects and arranges for them to be shown in window By analogy film camera transforms the world into fixed size image viewed from certain point with certain focal length of lens For virtual camera we will need to specify where the camera is where it is pointed the width of the field of the camera and perhaps other parameters which real camera can not have clip planes or variable aspect ratio Procedure First you need to download several example files To do this click on each of the filenames shown below When the text window opens use the save as option to put the file in your own directory Name each file with the same name as shown below Open the program and its control panel When you execute it you will see that two image windows are opened One is controlled by the familiar Image module The other is controlled by Camera and Display module The Camera module gives you explicit control of the viewing parameters Whereas the image module always points at the scene by default an explicit Camera can point anywhere you want and can be controlled by the program itself On the control panel switch the selectors to the Animate position and run the sequencer The position of the Camera the from parameter and the up direction are now function of time The contents of the two compute modules which control the camera are shown here Bugs found as of In the program fragment hyperlink replace approxUP with norm approxUP in the second compute module expression Assignment Model TV sitting on table next to simple still life Model TV camera floating in space chassis lens tube lens Define interactors to control the position point up direction and zoom angle of the TV camera Use these interactors to orient the TV camera in space and to control Camera module to produce the image the TV camera would see Put the image on the front of the modeled TV as shown in the image below The cameraINscene program mirror is very similar to the TV set You will need to convert the control interactors into rotations and translations of the TV camera The Transform module allows you to rotate by an arbitrary set of basis vectors program fragment helps to explain how to take the three input vectors to from up and convert them to camera rotation matrix Your program does not need to show the recursive image if the camera happens to be looking at the TV screen See image below right It is more important to be able to control the camera in space and show the resulting image than to make fancy TV set or camera model Some results from Some results from Be prepared to demo your TV program during section for maximum of minutes You will be graded on the correctness of the camera control and the readability of the program You must document your code Layout small groups of modules which fit on one screen and connect them to other groups with transmitters You should use macros and comments in the Notation field of each module so that you and the grader can understand the program Control panels if any should be well organized labeled and with the appropriate numeric ranges The Lab grading guide will be filled out by consultant during section to evaluate your work Back to Main Page Go to Lab Last modified Land Copyright Statement	other	cornell
839	 Server Date Sunday GMT Friday GMT home sweet home the glass house what to be found altavista yahoo excite hyperreal the onion red meat cd world olestra haiku dan brown snowman last updated aug	other	cornell
840	 Server Date Monday GMT Tuesday GMT People at the Design Research Institute People at the Design Research Institute Frank Adelstein Harry Barshatzky Lois Brown Mike Cavanaugh Jim Davis Hrishikesh Dixit Srikanth Kannapan Matthew Morgenstern Suxuan Liu Greg Zack	other	cornell
841	 Server Date Monday GMT Monday GMT Schedule Course Schedule Key exp attendence is expected Class will be devoted to covering new material opt attendence is optional Class will be devoted to answering questions students raise about the current assignment tba Class contents has not yet been decided Date Contents exp Few words on programming make www Intro to CHIP exp CHIP Interface Demo in SUN LAB Discuss and assign phase due opt exp Phase due Assign and discuss phase due exp Discuss phase details Fall Break exp Discuss more phase opt Question Session opt Question Session exp Assign and discuss phase due opt Discuss phase details tba tba opt Last chance to ask phase questions much needed vacation	other	cornell
842	 Server Date Sunday GMT Friday GMT my life at the keyboard Computers have been part of my culture all my life My father worked for IBM Every so often we visit him at work and see the huge computer rooms Sometimes he bring home pieces of computers for us to see But had no idea what these things really did They were just cool looking Sometime when was or my father brought home some IBM documentation on programming languages and flowcharting tried to read them but they did not make any sense to me but this is not surprising since IBM is exactly famous for clearly written documentation In came to MIT During the first few weeks went on tour of the MIT Artificial Intelligence Laboratory which in those days included the Logo Lab do remember why went on the tour but remember that was with several other freshmen with whom lived at my fraternity but ca recall if we were all together at the AI Lab because we were together as new members of the frat or whether came to join that frat because of liking the people met at the AI Lab The former seems more likely especially since the house had strong representation at the AI Lab In any event we were playing with Logo and were left pretty much alone we had to figure it out by ourselves We had lot of fun with it So as an undergraduate would sometimes come to the AI Lab to play or hack with Logo and began to learn to program remember anyone teaching me think we must have taught each other Sometimes would try to use Lisp on the but it was too mysterious for me to figure out That summer worked for IBM as an operator position calling for about as much skill as an espresso maker But in my spare time at work was allowed to use the computer language APL and this time found textbook for the language so was able to learn some of it still had no idea how languages actually worked just used them In my sophomore year took the course which is the ancestor of the course now known as This course explained how computer language could be designed using simpler language as building blocks It also tried to give us some sense of the ideas of modularity and top down design and most crucially the idea of abstraction that one can make program which represents some concept or set of agreements and thereafter use it without needing to know how the concept was implemented The program becomes black box whose internal details are irrelevant Later that year took second course which explained how the simplest sorts of computer languages machine language could be implemented by hardware circuits was now able to understand computer programming down to the level of individual logic gates if wanted to This reinforced my sense of the value of keeping different levels separate in order to build large complex structure Later though would learn that one of the hardest problems is deciding where to draw the modularity lines and that putting one borders in the wrong place makes system slow and difficult to use The next major step in learning programming was student job at the Architecture Machine Group which is an ancestor of the Media Laboratory In those days group of students at the ArcMac were developing new operating system for use around the lab The operating system being new was full of bugs and these in turn demanded that there be constructed many software tools for examining the structures used by the program had the opportunity to look over the shoulders of those who were more experienced and even to use the tools bit to poke around It was while using one of these tools that suddenly understood that there is no actual meaning in the patterns of binary ones and zeros in machine and no significant difference between the information on disk and in the machine memory given region of memory can be an instruction or number or letter or picture The difference is solely matter of interpretation This was perhaps the biggest aha in my life and was happy that other people were around who could understand it and why it mattered It was while working at this same job that began to think not just about how to make program do something but how to make it easy for someone else to use This was also step towards being professional programmer worker who makes artifacts for others to use not just for own delight in making it It was also during this time that also began to be good enough designer that other people started taking my ideas for design and function seriously After graduated began to work in the real world as programmer My first job was at Imlac in Needham MA The Imlac was minicomputer what you call workstation now that was sort of an expanded with built in vector display processor It was programmed in assembly language Imlac big product was phototypsetting system CES which took advantage of the raster graphics to offer kind of WYSIWYG interface for the typesetting This was before laser printers kept this first job only year and then moved to new job with the Honeywell Multics Multics is an operating system of great historical importance It was first developed as partnership by MIT and General Electric as an experiment in practical very large system At the time it was the very cutting edge of the state of the art in computer science By the time joined the Multics group those days were past but the group retained some measure of pride and still had very high standards even though time had passed them by learned several important ideas from working with the Multics people First my understanding of interface the relation between program and user expanded to include the idea that the user might be another programmer It was important to make programs as building blocks by programmers whose needs you could not expect to easily anticipate second idea was that programs were meant to be read by people as well as machines The Multics group had developed programming process which required that all modification to the system be described and justified to group of senior programmers before being written and be read by some person other than the author before being installed This was necessary because Multics was far too large for any single person to understand it The coordination that this review board provided kept Multics stable and consistent as it grew and changed for more than years Though Multics is now nearly forgotten it set mark for software quality never equalled Working with Multics taught me to be careful in my designs to always to allow room for unanticipated future changes and to expect people to read my programs In my work at Multics came to know many people but one of particular note was Bernie Greenberg Bernie was one of the most brilliant programmers have ever met In addition he was very talented musician playing both rock guitar and baroque harpsichord with equal ease and he spoke several languages Bernie also me to Lisp At that time the MIT Artificial Intelligence Laboratory was developing the first Lisp Machines and Bernie was friends with several of the key workers on this project learned Lisp from Bernie not long before he left Multics to join new startup company to commercialize the Lisp Machine soon left as well to join Logo Computer Systems new firm which intended to implement version of Logo for the Apple II home computer Logo Computer Systems was the first time was ever with startup firm Instead of the formal regulations of Multics was with an adhoc group which included several close friends and lovers as well as some bizarre personalities At LCSI we worked very very hard because we knew that money was in short supply We would often work for to hours in row We did almost all our work in Lisp on Lisp Machines and gradually became an expert with this language In the end we managed to produce our product on time but then most of us left the company as result of political battles with the higher management This turned out to be blessing though because Alan Kay had just gone to Atari which was then quite rich and Alan was setting up research labs in California and Cambridge Almost the entire Boston staff of LCSI came to form the Atari Cambridge Research Center Atari gave us money to design the best work environment we could think of and freedom to work on problems that interested us Not only was able to work on music was able to hire one of my friends Tom Trobaugh to work with me At Atari knew the happiness of working with partner on problems we really cared about using the most powerful computers available Alas Atari began to lose money and one day it closed the lab After Atari went under enrolled in the MIT Media Lab as one of the first contingent of doctoral students The Media Lab The Media Lab encourages students to set their own directions in fact it insists on it This has both pros and cons The advantage is that you learn to be independent to think outside the common assumptions of the field The drawback is that you do always have the companionship of others while learning In my own case became interested in the linguistic phenomenon called paraverbals those inarticulate noises like uh huh and hmmm that help make conversation run smoothly There pretty large literature on the subject but had to discover it on my own and sure it would have gone faster with guide On the other hand with an experienced authority controlling my learning would have done what did The other important thing about the Media Lab is the constant focus on demonstrating one work Some people complain about it but very important To do good demo you have to be able to explain what you doing and why it matters to smart but uninformed person with just few short sentences You have to learn to be clear and you have to learn to express your idea for the benefit of the learner not the teacher And you have to learn grace under pressure wish everyone learned these skills One of the first projects worked on was the phonetic dictionary Remember when you were kid and you asked for the meaning of word and they told you to look it up in the dictionary fine idea except it hard to do when you only heard the word and so do know how it spelled This is especially true for English with its bizarre spelling rules The phonetic dictionary allows you to look up word by spelling it according to how it sounds not how it spelled You write some approximation of the sound of the word and the system consults dictionary organized by pronunciation The key to the thing was being able to accept wide range of phonetic spellings For example for the word headache you might write hedayk or hedake was pleased to see this project mentioned on the very first page of Stewart Brand book about the Lab My supervisor was Chris Schmandt known to all by his login name geek could write at length about his knowledge but there are lots of smart people in the world He has two qualities that are more rare First he no autocrat You can argue with him There no way to put on an air of superiority when you call yourself geek Second and even more valuable he kept his perspective In particular he was always taking off for week or two at time to bring his then baby daughter out into the wilderness learned from him that computer will happily sit idle for week while week lost from fathering is gone for ever My major project was the Back Seat Driver which was car that could give you driving instructions in the city of Boston It had street map so it knew the roads navigation system so it knew where it was and speech synthesizer so it could talk to To actually make this work needed car and not just any car The navigation system was supplied by our sponsor Japanese electronics firm and was designed to work with only one type of car top of the line luxury sedan also needed not one but two cellular phones in the car for the communications The Media Lab bought me what needed and kept the keys was surely the only graduate student in the USA with such lab equipment One day was demonstrating the Back Seat Driver to group from General Motors When took them out for ride they had great time shooting pictures of each another getting into Japanese car Off we went driving As usually happened at one point the driver missed turn Normally the consequence was that the BSD would calmly inform the driver of the fact and plan new route only in this case the driver was former race car driver and he quickly made an illegal Turn without even slowing down maneouver even seasoned Boston drivers never attempted This caused the program to crash but guess that better than crashing the car have to add something here about the demise of Lisp Machines and the rise of Unix and about becoming obsolete	other	cornell
843	 Date Mon Dec GMT Server Fri Dec GMT Interdependent Particle Systems Interdependent Particle Systems by Justin McCune Introduction Particle systems have been used to model variety of fuzzy objects such as water fire grass fireworks clouds smoke and others In no work that am aware of do the particles within the system interact with each other Instead to simulate the realities which they model the designers of the use specific starting configurations groups of particle systems and introduce torques spirals and other effects to the particle system Sometimes to simulate waterfalls and other fuzzy objects where collisions are necessary the particles are checked for collision against small number of external objects and are bounced off of the objects with which they collide Independent particle systems therefore do not experience pressure gradients do not collide with particles within their own system and only approximate the reality which they represent The results reported within this paper report on that do interact with their neighboring particles The motivation behind this research is an attempt to allow the interaction of two or more particle systems and to more produce more realistic model of particle systems Section reviews the principles of independent particle systems section presents the problems and methods used in this research section discusses the results section presents the conclusion and possible extensions while section presents the references Review of Independent Particle Systems Particle systems can usually be characterized by the following properties lifetime velocity color transparency size shape Almost all particles have lifetime velocity and color where the remaining properties are decided upon by the modeller Over the lifetime of the particle the particle will change some or all of its the color might fade from white to red before it dies Velocities of particles can increase decrease or alter directions due to gravity or collision with some object The other characteristic of particle systems is that there are large number of particles Water is technically comprised of billions and billions of molecules and particle system likewise represents what it models with many many particles though not billions and billions The typical particle system is comprised of thousands of particles where this could range from few thousand to hundreds of thousands depending upon the resolution needed and the size of the desired image Particle systems are used to model fuzzy objects such as fire water and other dynamic systems that are difficult to model with conventional methods mainly due to the wide variations in color and shape even for just one moment in time To provide well known example of particle system take look at the Genesis Effect in Star Trek II The Wrath of Kahn particle system is used to model first an explosion and then the spreading of fire around planet The Genesis Effect used thousand particles throughout the course of the animation Interdependent Particle Systems In an interdependent particle system particles can change based on the presence number proximity of neighboring particles In real systems comprised of molecules large densities tend to disperse until equilibrium is reached Molecules also exchange energy and that energy can directly affect the color of the light that the molecule emits or reflects With an interdependent particle system it becomes possible to simulate these effects For instance take fire particle system and water particle system and mix parts of the systems the result is steam An interdependent system of fire and water interacting to produce steam was the goal and motivation of this research The obvious and most difficult problem when dealing with an interactive particle system is the large number of particles To determine collision engergy exchange or other interactive effects on any particle the particle either must search or sum the effects of all its neihgboring particles The problem as most simply and correctly formulated is squared in complexity With hundred thousand particles however moving and changing squared particles per frame of an animation will take too long simplification is needed to make the system develop more quickly and is easily justified and arrived at when examining real systems In all systems we are concerned with particle dependency on its neighbors is usually proportional to or less than the inverse square of the distance between it and the neighbor With thousands of particles within system it is likely that much less than hundred particles will actually contribute significantly to the motion or energy level of any particle Thus there is but to determine what significant contribution is the distance where the average particle contribution will be less than significant and which particles are within that distance The problem is simplified but to determine which particles are within the distance without any other information than given by the particles themselves would still be an squared operation Therefore it is logical to introduce into the model the concept of bins Space is divided into regularly spaced equal volume bins Each particle is put into the bin corresponding to its location in space Thus there are two large lists one list of all the particles and the other an arranged set of bins containing pointers to the appropriate particle Ideally each bin would in any dimension be at least the size of the distance whereby particle is judged to possibly have significant contribution To determine the contributions of the neighbors to particle the program would need to search only the other particles within the bin that particle is in and all the particles within the immediately neighboring bins to deal with particles located near the boundaries of bin Since all particles within the threshold distance are guaranteed to be within the space searched particle is guaranteed to be modified by all significant contributors Though this would work it is impractical to implement due to memory limitations The ideal bin size would generally be only three to four times the size of particle However to account for all the places particle might move to during the progression of its life there will be large percentage of bins that most of the time are empty Given this and the fact that there are dimensions which must have bins allocated result in very large numbers of bins For instance taking hundred bins per each dimension results in the need for million more bins than particles hundred bins would also be inefficient for many parts of the particle system where there were large densities of particles again the lists to be searched would be in the hundreds per particle negating the effectiveness of using bins Therefore larger number of bins is necessary but using more bins would quickly exhaust the resources of almost any computer To solve this problem we must simplify the model even further losing much of the accuracy that could be obtained with the previous methods Each bin is now allowed to hold only number of particles temperature or some other most important data element Instead of containing variable size list of particles within the bin it contains set small number of informational elements This results in the loss of alot of useful information and will result in rough approximations that lose the accuracy of earlier models However interdependent reactions are still possible because there is some information available about any particle local region of space and its immediately neighboring areas of space The problem is transformed from one of searching through thousands of particles to one of communication accuracy By containing only such simple information spatial relation is lost as well as specific data and most importantly identity Simulation of collisions movement and temperature exchange is now possible only as probabilities and is no longer deterministic For example to determine the collision of particle moving through space with another particle we must bound the maximum number of particles in any given region of space If particle is attempting to move through bin then collision occurs with probablility equal to the number of particles within the bin divided by the maximum number of particles allowed in the bin For example if the maximum number of particles per bin is and there are particles in the bin that particle is attempting to move through then there is chance that particle will collide The communication issue is also problem that must be resolved In the efforts to research fire and water combining to form steam the appropriate physical model is each particle exchanges temperatures and sometimes steam is created sometimes the fire is extinguished Since the identity of any particle within bin is lost particle that moves from bin to another bin where it should change state and likewise decrement the opposing particles states will not have any specific particle with which to interact Therefore some means of communicating the change of state is necessary For example consider water particle moving into bin full of all the surrounding fire particles the water particle should transform to steam But the fire particles should have their temperatures altered as well or should have some proportion of fire particles die to account for the energy exchanged The bins therefore must be utilized to pass messages to particles that should die or undergo loss in energy One set of particles is choosen to perform the transition and issue the appropriate message the other is choosen to listen for the message and take the appropriate action In the fire and water example the water is the one which performs the tansition to steam and passes the message while the fire particles are the system that reacts to the passed messages One possible means of message passing and the one utilized in this research is to use the number of particles per bin as the means of message passing Temperature of given particles and motion vectors can be calculated based on these figures To differentiate water from fire water is given negative count Where it is obvious that two types of particles are present in certain bin it is assumed that fire extinguishes water with certain ratio of fire particles to water particles If the water particles transform they decrement the number of particle bins by the number of fire particles extinguished Before the move again they note the change and that percentage of particles will on average die For example take particle It moves into bin and after all other fire particles have moved it notes that there are particles including itself in the bin During the water movement portion of the frame water particles move into the same bin and are considered to exchange heat and vaporize with the fire particles Say that it takes two fire particles to vaporize one water particle then fire particles are extinguished while new steam particles are created The final bin count is steam is counted as neutral particle The final position of all particles in the frame is output and processing for the next frame begins Each is searched for those particles that should have died When particle is reached or any of the fire particles in the bin it notes that there are now particles in the bin when their used to be Thus out of the particles must have died The particle picks random number between and and if it number is less than it number is up and the particle dies It can happen the opposite way as well that moves into bin populated by water particles and should extinguish itself as well The water particles also need to know their state after all water particles have moved so that they will also be killed off in the appropriate situtation byproduct of the fact that probabilities are used to kill of particles is that the bin counts are accurate only on the average As time passes however local error and changes in the system based on the error could accumulate Therefore it is necessary to recount the number of particles of any type at the end of each movement phase This in some ways doubles the time required to animate any interacting particle system but is still linear in time and better than squared Thus the steps required to interact particle systems with message passing can be generalized as follows Remove dead particles of type from the particle system Move the type particles After all type particles have moved each type particle notes final state Remove dead particles of type from the particle system Move the type particles After all type particles have moved each type particle notes final state Results Though the above presented method solves many problems there are few that are more difficult to In particular conservation of momentum is difficult to simulating collision is easily done using probabilistic method and in closely approximating reality should be done through every bin which the particle moves However when collision occurs the only particle that can be affected unless message passing is again used is the source particle This problem encountered during the research can either be by ignoring interim bins completely as is done in this research or perhaps can have damping factor applied proportionate to the number of collisions that might have occurred Another difficulty is that there are even more parameters that must be tweaked into place to produce an image that approximates the reality and does approximate some alterante reality where flames progress upwards in very defined bands for instance An implementation of an interdependent fire system was investigated and can be seen by the results below The fire particle system image was originally created with attempted to use particles in the provided MPEG The particles are created during frames and after that are created from the particles that have already died The image was rendered using DX with color map and an opacity map The animation took approximately minutes to create running on RISC processor with MB of memory However it has been noticed that due to the bin limitations many of the particles go unused and essentially only slightly more than particles are being used Using only particles due to the current initialization sequence of the program slightly less full animation is produced but is comparable to the original and only takes minutes to create In the provided animation particle temperature is based on the number of particles within the same region of space while it motion vector is determined based upon the density of particles immediately within its own space as well as those bins that immediately neighbor the space damping factor is applied to the motion in the plane that produces circular when no particles are collided whereas in the vertical direction changes in motion are based on temperature Overall there are parameters including bin sizes that may be modified It is also important to note that if the bin size is selected to be too large visible artifacts will be generated The animation is also present as an MPEG There are some artifacts present in the animation of the flame that am not quite yet sure why they are there In the first frame of the animation provided top view is provided It is possible to see from this top view pattern that is an obvious artifact from using the bins some combination of the motion mechanism although am unsure as to why this is the case Also the flame tends to pulse from one frame to the next which is something that would preferably not am unsure what is causing the oscillatory motion There is another benefit to using bins with an interdependent particle systems parallelization As opposed to passing particles and all their associated information across bin boundaries only the information contained by the bins need be passed This can save given the amount of information each particle must pass as well as the fact that there can be good number of particles per bin up to more than times the amount of message passing that needs to be done Thus it should be possible to parallelize the application One other effect should be noted In independent particle systems groups of particle systems can be lessened or local processing abandoned altogether once sufficient information for given area of the output area has been determined there is no reason to use thousand particles to represent section of the screen only pixels by pixels wide In an interdependent particle systems this is not the case The entire process of the particle system is dependent upon the presence and number of its nearest neighbors stopping part of the particle system will eventually translate its effects to neighboring parts of the particle system that are still moving with unknown consequences Thus some of the optimizations that are possible for independent systems are not necessarily possible with interdependent particle systems Conclusions This work has demonstrated that an interdependent particle system approach is feasible and that it is possible to use some of the attributes of the particle system itself to model fuzzy objects model has been proposed to allow the interaction of two particle systems and could possibly be extended to more Many aspects of this work remain unexplored Future work will finish the investigation of the proposed model to interact two particle systems to result in third There are many aspects of interdependent particle systems where research could still be done For instance investigating the interactions used on independent systems to achieve the flickering of flame by adding spirals or clustering particles Or trying to simulate these effects by adding an air particle system to the field to simulate the convection of air Starting configurations that change over time and are not based on some random distribution of some preset starting configuration but perhaps based on preset data volumes It would also be interesting to see the results of wall of fire or some other configuration of flames modeled on parallel processor References Particle Systems Technique for Modeling Class of Fuzzy Objects William Reeves ACM Transactions on Graphics Vol No pp Particle Animation and Rendering Using Data Parallel Computation Karl Sims Computer Graphics Vol No pp	other	cornell
844	 Server Date Sunday GMT HYBRID Workshop on Verification and Control of Hybrid Systems Sponsored by DIMACS and SYCON October New Brunswick New Jersey Program Organizers sponsors and program committee Registration travel and accomodation information Registration form Program Sunday October Invited Lecture Chair Varaiya University of California at Berkeley USA Sastry University of California at Berkeley USA game theoretic viewpoint to verification problems for hybrid systems Invited Session Chair Alur AT Bell Labs USA Manna Stanford University USA Pnueli The Weizmann Institute of Science Israel Clocked transition systems Benveniste France Compositional and uniform modelling of hybrid systems Gupta XEROX PARC USA Jagadeesan Loyola University USA Saraswat Bobrow XEROX PARC USA Computing with continuous change Mackworth University of British Columbia Canada The evolution of hybrid intelligent systems Invited Session II Chair Ramadge Princeton University USA Sussmann Rutgers University USA Partitions of the state space regular synthesis and piecewise smooth feedback controls Ghosh Indian Institute of Science India Marcus University of Maryland at College Park USA Arapostathis The University of Texas at Austin USA Controlled switching diffusions as hybrid processes Kohn Sagent Corporation USA Nerode Cornell University USA Remmel University of California at San Diego USA Hybrid systems as Finsler manifolds II convexification of constranit manifolds Kohn Sagent Corporation USA Nerode Cornell University USA Automata comparison procedure for the verification of hybrid systems Contributed Session Chair Sastry University of California at Berkeley USA Weinberg Lynch MIT USA Verification of automated vehicle protection systems de Lemos University of Newcastle UK Hall University of York UK Extended RTL in the specification and verification of an industrial press Sintzoff Universite Catholique de Louvain Belgium Invariance and termination in structured dynamical systems Deshpande Godbole Gollu Varaiya University of California at Berkeley USA Design and evaluation tools for automated highway systems Godhavn Lauvdal Egeland The Norwegian Institute of Technology Norway Hybrid control in sea traffic management systems Haddon Godbole Deshpande Lygeros University of California at Berkeley USA Verification of hybrid systems monotonicity in the AHS control system Monday October Invited Lecture II Chair Sifakis VERIMAG France Pnueli The Weizmann Institute of Science Israel Hybrid systems the computer science view Invited Session III Chair Nerode Cornell University USA Mitter Borkar Chandru MIT USA linear programming model of logic Artstein The Weizmann Institute of Science Israel Stabilization with hybrid feedback Branicky MIT USA General hybrid dynamical systems modeling analysis and control Seidman University of Maryland Baltimore County USA The residue of model reduction Invited Session IV Chair Henzinger Cornell University USA Ho INTEL USA Automatic analysis of hybrid systems Halbwachs VERIMAG France Verification of linear hybrid systems by means of convex approximations Alur Kurshan AT Bell Labs USA Timing analysis with Cospan Larsen Aalborg University Denmark UPPAAL tool suite for verification of systems Contributed Session II Chair Benveniste France Caines Wei McGill University Canada On dynamically consistent hybrid systems Dimitriadis Shah Pantelides Imperial College UK Optimal design of hybrid controllers for hybrid process systems Holloway University of Kentucky at Lexington USA fault monitoring of hybrid systems using templates with dynamic time scaling Qiwen Weidong The United Nations University Macau Hierarchical design of chemical concentration control system Stromberg Linkoping University Sweden Switched bond graphs as to formal verification of hybrid systems Ji Weidong The United Nations University Macau Formal specification of stability in hybrid control systems Banquet Tuesday October Invited Lecture III Chair Sontag Rutgers University USA Brockett Harvard University USA Resource allocation for control Invited Session Chair Kurshan AT Bell Labs USA Heitmeyer Naval Research Laboratory USA The role of continuous and discrete variables in analyzing requirements specifications Maler VERIMAG France Pnueli The Weizmann Institute of Science Israel Asynchronous circuits and timed automata Sinclair Dublin City University Ireland Validation of hybrid systems by Narain Bellcore USA Proofs from temporal hypotheses via symbolic simulation Invited Session VI Chair Krogh Carnegie Mellon University USA Ramadge Princeton University USA decision rules in hybrid control systems Garg Cofer The University of Texas at Austin USA On controlling timed discrete event systems Shayman University of Maryland at College Park USA Kumar University of Kentucky at Lexington USA Modeling and control of discrete event systems via process objects and masked composition Kumar University of Kentucky at Lexington USA Shayman University of Maryland at College Park USA Supervisory control of systems using prioritized synchronization Contributed Session III Chair Guckenheimer Cornell University USA Puri Varaiya University of California at Berkeley USA Borkar Indian Institute of Science India of differential inclusions Henzinger Cornell University USA Linear approximations for nonlinear hybrid automata Cerans Viksna University of Latvia Latvia Deciding reachability for planar systems Hoffmann Klatt University of Dortmund Germany Modeling hybrid dynamical systems Kourjanski Varaiya University of California at Berkeley USA Stability of hybrid systems Park Kangwon National University Korea Kim Kwon Seoul National University Korea Model and stability of hybrid systems Panel Discussion Hybrid Systems Research Achievements Problems and Goals Moderators Henzinger Cornell University USA Sontag Rutgers University USA Panelists Guckenheimer Cornell University USA Kurshan AT Bell Labs USA Nerode Cornell University USA Reed Oxford University UK Sifakis VERIMAG France Varaiya University of California at Berkeley USA Wednesday October Invited Lecture IV Chair Pnueli The Weizmann Institute of Science Israel Lynch MIT USA Modelling and verification of automated transit systems using timed automata invariants and simulations Invited Session VII Chair Sussmann Rutgers University USA Cassandras University of Massachusetts at Amherst USA Optimal control problems in hybrid systems with some manufacturing applications Antsaklis University of Notre Dame USA Hybrid control using Petri net feedback controllers Krogh Carnegie Mellon University USA Cury Univ Fed Santa Catarina Brazil Niinomi Mitsubishi Heavy Industries Japan Control of hybrid systems using finite state approximations Bailey Grossman Gu Hanley University of Illinois at Chicago USA The analysis design and control of hybrid systems using persistent object stores Invited Session VIII Chair Schneider Cornell University USA Lynch MIT USA Vaandrager CWI The Netherlands automaton models for hybrid systems Chaochen Technical University of Denmark Denmark formal theory of limits of durations Ravn Technical University of Denmark Denmark Detecting interesting events Bouajjani VERIMAG France On the verification of duration properties Contributed Session IV Chair Reed Oxford University UK Bett Lemmon University of Notre Dame USA gain schedule synthesis of supervisory hybrid control systems Savkin Evans University of Melbourne Australia Petersen Australian Defence Force Academy Australia new approach to robust control of hybrid systems Raisch University of Stuttgart Germany DES approach to control of hybrid dynamical systems Larsen Aalborg University Denmark Pettersson Yi Uppsala University Sweden Diagnostic for systems Zhang Mackworth University of British Columbia Canada Specification and verification of dynamic systems by timed Larsen Aalborg University Denmark Steffen University of Passau Germany Weise Technical University of Aachen Germany Fischer protocol revisited simple proof using modal constraints Organizers Sponsors and Program Committee This workshop is organized as part of the DIMACS Special Year on Logic and Algorithms DIMACS is Science and Technology Center funded by the National Science Foundation and the participating institutions are Rutgers University Princeton University AT Bell Laboratories and Bellcore The of this workshop is SYCON Rutgers University Center dedicated to research in control theory and closely associated topics Organizing Committee Rajeev Alur alur Thomas Henzinger tah Eduardo Sontag sontag Program Committee Rajeev Alur AT Bell Labs USA Albert Benveniste France John Guckenheimer Cornell University USA Thomas Henzinger Cornell University USA Bruce Krogh Carnegie Mellon University USA Amir Pnueli The Weizmann Institute of Science Israel Peter Ramadge Princeton University USA Shankar Sastry University of California Berkeley USA Fred Schneider Cornell University USA Eduardo Sontag Rutgers University USA Hector Sussmann Rutgers University USA Joseph Sifakis VERIMAG France DIMACS Special Year Organizing Committee Eric Allender allender Robert Kurshan Moshe Vardi vardi Registration Travel and Accomodation Information Registration Please email the registration form to Pat Toci at toci There is no registration fee Travel and Hotel Information It is recommended that participants arriving by plane fly into Newark Airport Flying into Kennedy or La Guardia can add more than an hour to the travel time to DIMACS DIMACS has successfully and quite pleasantly used the Comfort Inn and the Holiday Inn both in South Plainfield New Jersey they are next to each other The Comfort Inn gives participants of DIMACS workshops the special rate of if two guests share room and the Holiday Inn gives DIMACS the special rate of per room includes continental breakfast The Comfort Inn phone number is The Holiday Inn phone number is The Comfort Inn provides free van service to and from Newark Airport You need to give them notice To travel between Newark Airport and the Holiday Inn we recommend ICS Van Service for inside the United States or The rate is per person It must be booked in advance From the New York airports participants may take the Grayline Air bus Shuttle to Newark Airport and then ICS Van service from there The first day of the workshop October will be held at the Holiday Inn All workshop events on October will take place at DIMACS located in the CoRE Building of Rutgers University Busch Campus in Piscataway New Jersey Both the Comfort Inn and the Holiday Inn provide free van service to and from DIMACS Participants arriving to DIMACS by car need parking permit Parking permits will be available in the hotels and at the registration table Please be sure to park in Lot For further questions regarding local transportation and accomodations or to obtain detailed driving directions to the hotels and to DIMACS contact Pat Toci at toci Students The participation of graduate students at the workshop is strongly encouraged DIMACS provides funds to partially reimburse the cost of travel and accommodation for students If you are student and wish to be considered for travel support please mark the registration form appropriately The support level per person will depend on the number of student participants	other	cornell
845	 Server Date Sunday GMT Monday GMT Handouts Semantics of Programming Languages Handouts Course Overview dvi file includes administrative information prerequisites syllabus textbooks information resource information homework and exam information and some practical advice Introduction to SML Harper postscript file Back to the homepage	other	cornell
846	 Server Date Sunday GMT Wednesday GMT Todd Peskin Resume TODD PESKIN Local Address Highland Road Ithaca NY Permanent Address Davis Drive Washington Crossing PA Objective To obtain summer internship where can utilize my knowledge in business and computer science Education CORNELL UNIVERSITY Johnson Graduate School of Management Master of Business Administration May Ithaca NY College of Engineering Master of Engineering May Computer Science Bachelor of Science May Computer Science Dean List Semesters Johnson School Clubs Operations Management Society Consulting Club Acacia Fraternity President Treasurer Orientation Counselor Engineering Summer Ambassador Lester Knight Scholar Experience Fall Summer and Summer BDM INTERNATIONAL Engineering Cooperative Aided in the development of two networked databases for the Department of Defense Created tested and altered client software for these databases Programmed using Microsoft Windows and Vermont Views Optimized numerous existing portions of the database software McLean VA Summer NEW JERSEY SURVEY Secretary for the State Geologist Scheduled meetings and routed calls Prepared memos letters and reports for internal and external communication Trenton NJ Summer EDUCATIONAL TESTING SERVICES Administrative Assistant Created program in hypercard for maintaining record of reports books and journals Utilized Word Processors Spreadsheets Link and Paint programs on Macintosh and IBM computers Princeton NJ Personal Fluent in Pascal SQL Scheme Lisp and Basic Familiarity with Unix Vax VMS Windows and Macintosh operating systems Basic knowledge of Spanish Enjoy skiing sailing and hockey	other	cornell
847	 Server Date Monday GMT Tuesday GMT Office Hours Office Hours Instructors Instructors office hours are held in the instructors offices listed on the first day handout and the instructors page Mon Tue Thu Telle Wilson Telle Wilson Telle TelleWilson TelleWilson Wagner WagnerWeber Wagner WagnerWeber Weber Weber Teaching Assistants TAs office hours are held in Upson Office hours in bold are open office hours Other office hours are by appointment only Sign up for appointments in Upson Mon Tue Thu Pierce Pierce Chen Pierce Pierce Chen Chen Paradis Shea Paradis Chen Paradis Shea Paradis Shea Shea Spring pierce	other	cornell
848	 Server Date Sunday GMT Wednesday GMT Distributed HTTP Server Richard Hsu Cornell Distributed HTTP Server Richard Hsu Fred Hsu Department of Computer ScienceCornell UniversityIthaca New York Abstract The web is growing at an exponential rate Companies academic institutions government and many other agencies are all moving toward this universal information highway As the amount of hypermedia meterials increases the burden on top of HTTP servers gets aggravated It is an essential task to find mechanism in which hypermedia data can be collected and stored in central repository and requested information can be forwarded to outside clients within reasonable period of time We have proposed implemented and tested several models The result shows clearly the superiority distributed HTTP servers over servers Furthermore HTML document access patterns are discussed and suggestions for future implementation of HTTP are presented clever and scalable model can be implemented with few changes in the current protocol and communication scheme Background Information Technical Analysis on HTTP Usage and Performance Distributed HTTP Server Project Details Conclusion About Richard Hsu Fred Hsu	other	cornell
849	 Date Sun Nov GMT Server Wed Sep GMT CTC Visualization Animations Cornell Theory Center Scientific Images and Animation See also the CTC Explorations page dynamic transition in simulation of million atoms simulation of the dynamical failure of notched solids under tension at the atomistic level using classical molecular dynamics and system sizes from to more than million atoms Research by Farid Abraham IBM Almaden Research Center Visualization by Bruce Land and David Schneider Diagnosis of Emphysema and Lung Cancer using techniques Modern radiologic techniques particularly computed tomography CT and magnetic resonance MR imaging acquire more data than are routinely displayed in diagnostic images Supercomputers can be very helpful in processing and presenting this information Image analysis used on appropriate images in conjunction with representative patient databases will permit the development of clinical analysis and decision support systems and will form an integral part of the diagnostic process in the future Research by Claudia Henschke and David Yankelevitz Cornell University Medical College Visualization by Catherine Devine SORTIE Simulation Model of Forest Growth simulation of years of forest growth under different conditions Research by Douglas Deutschman and Linda Buttel at Cornell and Simon Levin at Princeton University Visualization by Catherine Devine Molecular Visualization variety of research projects focusing on molecular visualization Projects range from imaging of chromosomes in petunias to the mechanism of Acetylcholinesterase to mechanisms of Chagas Disease Visualization by Richard Gillilan Model of Fabric Drape Drape the final shape fabric assumes when laid over an object is an important characteristic of fabric for both aesthetic and engineering applications Research by Bijian Chen and Muthu Govindaraj Department of Textiles and Apparel Cornell University Visualization by Catherine Devine Isospectral drums Recently it was proved that there exist nonisomeric planar regions that have identical Laplace spectra That is one can not hear the shape of drum For more information see technical report Research by Toby Driscoll Center for Applied Math Cornell Visualization by Bruce Land Keyboard Systems Study angular deviation data of wrist motion obtained with an exoskeleton measuring glove worn by human subjects using keyboards had previously been obtained by Hedge While human factors researchers had long used such measuring devices to obtain wrist motion data this data had not previously been visualized Tsunami simulations Tusnami are caused by underwater earthquakes which start waves propagating rapidly across the ocean Simulations help to understand and predict these large often dangerous phenomena Research by Phil Liu Department of Civil and Environmental Engineering Cornell University Visualization by Catherine Devine Past Visualization Examples General information about Visualization at the Theory Center is also available online Copyright Statement	other	cornell
850	 Server Date Sunday GMT Sunday GMT Wei Chen Bookmarks Wei Chen Bookmarks Cornell Department of Computer Science CUinfo Page The Cornell University School of Operations Research and Industrial Engineering Yahoo System Concepts RESEARCH RELATED TOPICS ICDCS Papers on failure detection US EDUCATION fastWEB Financial Aid Search Through the Web Financial Aid Information Page How to Succeed in Graduate School Binghamton University Home Page Ithaca College WWW Syracuse University Information System Yahoo Education Universities United States Rank PhD Programs in Computer Science America Best Graduate Schools News Rankings News Graduate Liberal Arts Rankings Computer Science Computer Science Faculty Research and Postdoc Positions Peterson Education Center US INDUSTRY COMPUTER INDUSTRY Digital Systems Research Center Home Page The IBM world wide web home page AT Home Page AT Bell Lab Xerox PARC Sandbox Nano and UbiComp Server Access HP Welcome to Digital Equipment Corporation Microsoft Corporation OSF Home Page IBM Research Homepage COMMUNICATION AND PUBLIC RELATION Cunningham Communication Hoovers company database Arthur Andersen Home Page Andersen Consulting Home Page JOB SEARCH Online Career Center ICPA Jobs for Technology Marketing Finance Professionals in Asia Pacific Rim Japan Singapore Hong Kong China and US Pacific Coast INTERNET CAREER CONNECTION Job tools MONSTER BOARD Job Search JobWeb Catapult International Student Guides NEWS Welcome to MSNBC CNN Interactive CHINESE STUFFS Tsinghua Veterans Homepage Chinese Students Soccer Tournaments Chinese Community Information Center IFCSS Welcome to IFCSS Professional Service ChinaNet homepage Welcome to Chinese Universities page China Monthly CSSA at Cornell University CHISA World Wide Web Server CND WWW SERVER TSINGHUA ALUMNI NEWS Chinese magazine Chinese stuff Chinese Electronic Magazines CHINA Home Page at CERNET SPORTS Official NBA Women Soccer World Front Page ESPNET SportsZone NBA Centennial Olympic Games Home Page Federation Internationale de Football Association ESPNET SportsZone Sports Information Server WEB SERVICES HotBot Search Engine NYNEX Interactive Yellow Pages Home Page WWWW WORLD WIDE WEB WORM WWW Browsers that can display Japanese FUN STUFFS April Fool Cornell Cinema Pictures in the newsgroups Welcome to the Experimental Multilingual Digital Greeting Card Centre The Internet MahJong Server FRIENDS AND FAMILIES He Qi Home Page Tsinghua University Suggestion Box for Reunion Likan Homepage COOL TOOLS Guide to LaTeX CANADA Welcome to Mageta International Inc US GOVERNMENT House Of Representatives Home Page MISC ITEMS SBA Map of Regions Edmund Automobile Buyer Guides INTELLICAST USA Weather Dealernet Book Classics INSPEC out of their minds The Spinners Ithaca Housing http Yahoo Business and Economy Companies Career Services Training Sales Everything HR OmniCom Associates Home Page THE CAIRO CONFERENCE HOME PAGE World Health Organization is Page PAHO Home Page Globalvision TravelFile Destination Information for CHINA	other	cornell
851	 Server Date Monday GMT Monday GMT CS Lectures Table of Contents Back to the CS home page CS Lectures When you see this symbol in this document press it to get the postscript file for that document It little cleaner than the html printout Sections in this document Introduction to Computer Systems CPU Organization Programming Procedures Recursion and Stacks Assemblers Linkers and Loaders Interrupts and Introduction to Logic Design Topic Introduction to Computer Systems Readings The What and Why of CS How Pascal Really Works How can we handle complexity Where do other courses fit in Intro to Design Design Strategies Design Documentation Anatomy of computer History of Modern Computers Generations of Computers Topic CPU Organization Readings The CPU Design Problem Registers and the Control Unit The program as machine language Put Data in Memory Implementing Loops The Unit ALU Register Transfer Languages Microprogramming Summary Topic Programming Readings Architecture Registers Data Sizes Memory Layout Instructions General Instructions Assembler Directives Instructions Assembler Data Movement Instructions Arithmetic Instructions Logic Instructions Control Addressing Immediate Addressing Data Register Direct Addressing Address Register Direct Addressing Address Register Indirect Addressing Address Register Indirect with Addressing Address Register Indirect with Displacement Addressing Address Register Indirect with Index and Displacement Addressing Program Counter with Displacement Addressing Program Counter with Index and Displacement Topic Procedures Recursion and Stacks Readings for this topic Writing an Absolute Value Function in Assembler Solution registers and JMP Solution Storing the return address in register Problems with Recursion Introduction to Stacks Solution Use Stack for Return Address The JSR and RET Instructions Saving State Function Prologs and Epilogs Prologs Another Example Stack Frames Using the Stack Frame to Pass Parameters Using the Stack Frame for Local Variables Parameter Order an Important Detail Accesing Parameters Problem Its Solution Frame Pointers Frame Pointers Detailed Example Subroutine Linkage Instructions Passing Arguments by Reference Case Study Memory Management on the Mac Virtual Memory Page Tables Summary Topic Assemblers Linkers and Loaders Readings for this topic Preparing an Assembly Program for Execution Machine Code Example The CLR Instruction Example The ADD Instruction Example The MOVE Instruction The Assembler Pass Build the Symbol Table Pass Generate Code and Build RLD Structure of Object Module Linking programs The Linker The Loader Summary Topic Interrupts and Readings for this topic What happens when you do something wrong How does processor call the service routine Supervisor versus user mode How exception is processed on Writing exception handlers Tracing Breakpoints Operating System Calls Reset Interrupts on the More properties of Peripheral Interrupts Summary Topic Introduction to Logic Design Readings Digital systems Gates Truth Tables Boolean Algebra Combinatorial and Sequential Circuits Sequential Circuits Physical Level Choosing technology Making Gates TTL Making Gates TTL cont Making Gates TTL cont Other Gates TTL Packages Fan Fan Out Physical to Logical Level Boolean Algebra Some Theorems of Boolean Algebra Proving Boolean Equations Generating Boolean Equations from Truth Tables Canonical Form Canonical Form is not minimal form Karnaugh Maps Rules of thumb for finding minimal expressions Mapping real problems to boolean equations Implementing SOP using only NAND gates Implementing SOP using only NOR gates Multiplexers Another Silver Bullet the Programmed Logic Array PLA The Programable Memory PROM Summary Back to the CS home page	other	cornell
852	 Server Date Sunday GMT Monday GMT Data Mining EMV Project Proposal Classification in Data Mining Eric Vitrano Common Level Class table methods open filename close filename write tuple char sends in char string of the whole record in ascii read tuple tuple number will read the tuple and return tuple instance returns char string which lists the scheme takes in char string and sets the scheme of the table to that scheme Class tuple method attribute number location to copy the attribute value to Data Mining Classifiers Stage Once the above groundwork is complete will implement version of an elementary data mining classification algorithm This algorithm will be based on the decision tree model with limited pruning summary of the algorithm in pseudocode form is as follows Tree Building MakeTree Training Data Partition Training Data Partition Data If all in in same class tree done Else for each attribute find best split Split and partition Partition All partitions from above Tree Pruning RemoveNode Node For all nodes in Node If node in Node has same class value as parent Split Evaluation Split Data For each attribute calculate goodness of an attribute return highest Data Partition Data into two sets based on goodness from The above algorithm will be implemented in Visual with the intention to build decision tree that will classify tuples into defined classes The tree must be trained using training set where the classes of the tuples is known and then tested on data to see if the returned classes are of the appropriate type The results can then be used for directing queries on incoming data as well as classifying existing data Stage When the above algorithm is implemented further algorithm will be implemented This next algorithm will either be related to SLIQ or will be something generated by observing the development and processes of the general case Possible areas of improvement would be pruning on the fly limiting the searches of the data and the amount of data needed to be kept in memory and classification of the data Time Estimates would expect the following schedule to be an approximate scheme for progress October Completion of groundwork steps November Completion of the general algorithm November Completion of Stage algorithm December Evaluation and further consideration of data mining classifictiaon EMV Home Page	other	cornell
853	 Server Date Monday GMT Wednesday GMT Final Examination	other	cornell
854	 Server Date Monday GMT Friday GMT CS Fall Lecture Lecture MaxFlow MinCut Theorem homepage Page Page Page Page Page Page Page Page	other	cornell
855	 Server Date Sunday GMT Monday GMT Reasoning About Uncertainty Up Teaching Experience Previous Reasoning About Knowledge Reasoning About Uncertainty COM Course Description Agents must reason and act in an uncertain world In order to do so intelligently they need to deal with and reason about this uncertainty This course discusses modeling and reasoning about uncertainty going from purely qualitative notions an event is either possible or it is not to quantitative notions such as probability an event has probability with some consideration of notions of plausibility We consider various logics of reasoning about uncertainty both propositional and and discuss the subtleties they reveal Finally we discuss how our approaches give us tools to understand and analyze central problems in the literature including nonmonotonic reasoning and problems of statistical inference particularly that of going from statistical information to degrees of belief Although many of the examples will be drawn from the AI literature the material is also relevant to distributed systems philosophy statistics and game theory We will try to make connections to work in all these areas While there is lot of material on this subject the course will focus on recent trends indeed the readings will include great deal of material	other	cornell
856	 Server Date Sunday GMT Thursday GMT CS Project TOP Distributed Network Visualization and Management network management system with topologies discovery and visualization faults detection and performance analises Leejanwun Vince Livince Wanglinhsian Overview Since the internet has been growing fastly at exponential rate with different sizes and types of networks connected together for data communications As the networks become larger and more complex high quality networking monitoring system with network status control faults detection and performance analises becomes vital necessity for any distributed computing environment Problems occurred in the network can be easily reflected and solved in very short time Our goal is to design and implement an efficient network management system with different networks topologies discoveries and display it through graphical interface to give clear view of the connections and status Faults detection and performace analises are also incorporated in the project Technical Backgrounds Simple Network Management Protocols SNMP SNMP is developed in in orderto provided simple and efficient protocol for network management data communications between different types of networks It is easy to implement on large network system without posing too much stress on the it is being supported by most of the internetwork architetures routers and bridges The exchange of information using SNMP is made through messages PDU which can be viewed as objects that contain both values and titles from higher perspective There are only five types of PDUs used by SNMP to monitor the network two for terminal data settings two for terminal data reading and one for monitoring events such as and Project Success Criteria deliverable software with GUI that displays different topologies and network status Manager interactions with the network The basic management specifications such as fault detection and topologies display and performanace analises achieved Successfu testing in simulated local area network Expected Educational Results Understand the use of the most popular networking management communication protocols Learn the different network models and management issues associated to the networks Capability to design management applications according to the specifications and considering some major issues such as security management configuration management fault management and accounts management Know how to manage network system References COMER Internetworking with Vol Principles Protocols and Architeture Prentice Hall Englewood Cliffs New Jersey COMER Internetworking with Vol II Design Implementation and Internals Prentice Hall Englewood Cliffs New Jersey	other	cornell
857	 Server Date Sunday GMT Tuesday GMT will he ever shut up music gives me goosebumps listen to lot of music and also enjoy performing oratorios in formal choruses while it seems ridiculous sometimes to make this distinction listen to some very different types of music classical including contemporary art music electronic including trance ambient and techno other including showtunes and well other sorta shame we have to make these distinctions we are the music makers and we are the dreamers of dreams aphex twin dan brown snowman last updated aug	other	cornell
858	 Server Date Sunday GMT Thursday GMT SYMPOSIUM ON TEACHING LOGIC Announcement and Call for Papers DIMACS Symposium on TEACHING LOGIC AND REASONING IN AN ILLOGICAL WORLD Rutgers University July Sponsored by the DIMACS Special Year on Logic and Algorithms and the Association for Symbolic Logic in conjunction with the Federated Logic Conference Hosted by Rutgers The State University of New Jersey Logic and logical thinking are central to all disciplines and are critical in the mathematical and computer sciences This symposium will explore the teaching of introductory logic and logical thinking with primary focus on the college level and secondary focus on the high school level The symposium will be interdisciplinary emphasizing and contrasting approaches used in mathematics computer science natural sciences and engineering The symposium seeks sharing of ideas rather than consensus on how to teach logic so that all participants gain an appreciation for the fundamental issues and ultimately are better able to motivate the importance of logic and to convey the foundations of logical reasoning to students Topics of interest include but are not limited to Pedagogical Approaches Cognitive Models of Logical Reasoning Empirical Studies Exemplary Course Material Innovative Approaches Courseware for Teaching Logic Submit an extended abstract maximum of pages by April Submissions in postscript form are preferred email them to lmc Mail paper submissions to David Gries Computer Science Upson Hall Cornell University Ithaca NY USA Notification of acceptance May Camera ready and electronic paper versions due July Accepted papers will be published in locally available proceedings and on the World Wide Web Organizers Susanna Epp DePaul University epp David Gries Cornell University gries Peter Henderson SUNY Stony Brook pbh Ann Yasuhara Rutgers University yasuhara For further information contact Peter Henderson Department of Computer Science SUNY Stony Brook Stony Brook USA pbh The symposium will be held prior to the Federated Logic Conference FLoC hosted by DIMACS as part of its Special Year on Logic and Algorithms FLoC includes the following conferences IEEE Symp on Logic in Computer Science LICS July Rewriting Techniques and Applications RTA July Conference on Automated Deduction CADE workshops July Conference on Automated Deduction CADE July August Verification CAV July August For further information see the FLoC home page at http Information about the Special Year can be found in http	other	cornell
859	 Server Date Sunday GMT Friday GMT Friends from Techo Friends from Techo Directory of Friends homepages	other	cornell
860	 Server Date Monday GMT Monday GMT Project Martix Products Back to Home Page Project Martix Products Date Assigned February Date Due February Introduction This project involves writing small assembly language program for multiplying matrices Your program will gets its input from and send its output to the BasePak runtime window Specs Overview Compute the matrix product AB AB mod where and are matrices of unsigned integers The minimum matrix size will be and the maximum matrix size will be Input parameters matrix of unsigned integers is the first matrix in the product matrix of unsigned integers is the second matrix in the product unsigned integer is the number of rows in unsigned integer is the number of columns in and the number of rows in unsigned integer is the number of columns in and satisfy Output parameters matrix of unsigned integers AB mod Arithmetic Do all arithmetic over integers mod use unsigned integer multiplication and addition and take only the word of multiplication results User interface The user interface of your program will be minimal is an assembly language program after all Your program should prompt the user for the parameters and successively then allow the user to enter the values of the elements of the matrix then the values of the matrix After these values have been entered your program should output the matrices and and then output the result matrix All numerical input and output should be in base Matrices should be output in standard order row of elements in the matrix should correspond to row of numbers on the screen For example if were matrix with elements and then would be output as Matrices should be input by prompting the user for elements one at time in the same order in which they would be output The text of the prompt should include the matrix name and the indices of the element currently being prompted for For example the matrix given above would be entered via the following exchange underlined text indicates the program output text indicates the user input Sample Run run of your program should look something like the following Result which corresponds to Documentation The usual documentation guidelines always explain how you using registers use symbolic constants whenever possible state the input and output parameters of all subroutines etc apply Your program should have at least subroutines one for inputting matrices one for printing matrices one for multiplying the matrices Each subroutine should begin with header that looks like this Name of function Synopsis brief description of what the function does who calls it why and any exceptional HLL description Put in high level language pascal description of routine Register usage Map out what registers are used for Input Conditions What should the format of the registers and stack be on entry to the routine Output Conditions What will the format of the registers and stack be when the routine returns Stack frame What does the stack frame look like For example Saved Registers Old Return Address Param Param The subroutine code should immediately follow the subroutine header Try to comment each line and use block comments and blank spaces to separate logical sections of the subroutine For example here the code of routine that swaps the two registers and if SWAP Prolog Save registers set up stack frame LINK set frame pointer no locals SP Save registers we use Compare and to see if we need to do anything If not then just jump to epilog and leave CMP BLT DONE If we get here Swap the contents of and using as scratch register tmp tmp Epilog Restore registers clean up stack frame return DONE SP Restore registers etc UNLK RTS Try to give high level description in the function header more detailed description in the block comments and in the individual line comments Do just repeat what the code says if possible In addition for this project be sure you document the following aspects of your program your method of laying out matrices in memory your indexing conventions Misc Your program should check that the values of and supplied by the user fall within the allowable range You probably need to adapt the signed decimal routines in the BasePak library for use as unsigned routines For this project simply taking the word of the return from would be acceptable for inputting unsigned integers though that be such great idea in real program and using will work for outputting unsigned integers as long as you remember to clear the high word of Submitting Hand in the following to the consulting office hardcopy of your program hardcopy of sample run of your program an electronic copy of your program on diskette Back to Home Page	other	cornell
861	 Server Date Sunday GMT Thursday GMT Multimedia Home Page Multimedia Home Page Eric Vitrano vitrano Contents Readings Project Readings Technical Introduction to Digital Video The World of Digital Video Poynton Colour FAQ JPEG Still Picture Compression Standard MPEG Algorithms for Manipulating Compressed Images Image Metamorphosis Resolution Independent Video Language Audio Engineering and Psychoacoustics Psychophysics and Modern Digital Audio Technology Methods for Encrypting and Decrypting MPEG Video Data Efficiently Multimedia Storage Servers Tutorial Disk Scheduling in Multimedia System MBone Provides Audio and Video Across the Internet RSVP New Resource ReSerVation Protocol Experiments with Lossless JPEG Codec Performance of Software MPEG Video Decoder Fast Software Processing of Motion JPEG Video Project The JPEG Watermarking Project is now proceeding Project Home Page EMV Home Page	other	cornell
862	 Server Date Mon Nov GMT bytes Mon Nov GMT Network Interface Architecture The architecture provides and communication over commodity networks for workstations and PCs It removes the large communication overheads found in the standard networking layers in the operating system defines an architecture which allows network interfaces to be mapped directly into without compromizing protection With the operating system is no longer involved with the sending and receiving of messages This allows much tighter integration of computation and communication with the effect that communication overheads are reduced dramatically is available on several platforms PCs running Windows NT and using DECchip based fast ethernet interface PCs running Linux and using DECchip based fast ethernet interface or using Fore Systems not ATM interface Sparcstations running SunOS or Solaris and using FORE Systems not ATM interface Funding for the project is provided through DARPA ITO contract ONR contract The initial versions of were developed under contract from Rome Laboratory Air Force Material Command Software Alpha Release for Windows NT is forthcoming RSN as they say Release for Unix is now available Download the software distribution and the Release Documentation This release supports the and systems mentioned above and is fairly flexible and easy to install some may point out unlike the previous release Please send mail to Matt Welsh for questions or problems about this release The earlier alpha Release for Unix is still available in There is little or no reason to use this release except that it includes Active Messages and different implementation of libunet Papers and talks Incorporating Memory Management into Network Interfaces Anindya Basu Matt Welsh Thorsten von Eicken Department of Computer Science Cornell University Submitted for publication November network interfaces allow applications direct access to the network without operating system on every send and receive Messages are transferred directly to and from by the network interface while observing the traditional protection boundaries between processes Current network interfaces limit this message transfer to region of physical memory to allow safe DMA This approach is inflexible in that it requires data to be copied into and out of this memory region and does not scale to large number of processes This paper presents an extension to the network architecture allowing messages to be transferred directly to and from any part of an address space This is achieved by integrating translation buffer into the network interface and coordinating its operation with the operating virtual memory subsystem This mechanism allows network buffer pages to be pinned and unpinned dynamically Two implementations of are described demonstrating that existing commodity hardware and commercial operating systems can efficiently support the architecture ATM and Fast Ethernet Network Interfaces for Communication Matt Welsh Anindya Basu and Thorsten von Eicken Proceedings of the Third International Symposium on High Performance Computer Architecture HPCA San Antonio Texas February Fast Ethernet and ATM are two attractive network technologies for interconnecting workstation clusters for parallel and distributed computing This paper compares network interfaces with and without programmable for the two types of networks using the communication architecture to provide and communication provides protected access to the network interface and offers latencies as low as usec over Fast Ethernet and usec over ATM The design of the network interface and the underlying network fabric have large bearing on the design and performance Network interfaces with programmable can transfer data directly to and from user space while others require aid from the operating system kernel The paper provides detailed performance analysis of for Fast Ethernet and ATM including performance on set of parallel benchmarks These results show that computing is possible on network of PCs connected via Fast Ethernet Copyright IEEE Personal use of this material is permitted However permission to this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists or to reuse any copyrighted component of this work in other works must be obtained from the IEEE Contact Manager Copyrights and Permissions IEEE Service Center Hoes Lane Box Piscataway NJ USA Telephone Intl Communication over Fast Ethernet Matt Welsh Anindya Basu Thorsten von Eicken Proceedings of Lyon France August Fast Ethernet can provide alternative to more esoteric network technologies for cluster computing We use network architecture based on the approach to implement and communication over Fast Ethernet with performance rivaling and in some cases exceeding that of Mbps ATM provides protected access to the network interface and enables latencies of less than usec over Fast Ethernet Network Interface for Parallel and Distributed Computing Anindya Basu Vineet Buch Werner Vogels Thorsten von Eicken Proceedings of the ACM Symposium on Operating Systems Principles SOSP Copper Mountain Colorado December The communication architecture provides processes with virtual view of network interface to enable access to communication devices The architecture implemented on standard workstations using ATM communication hardware removes the kernel from the communication path while still providing full protection The model presented by allows for the construction of protocols at user level whose performance is only limited by the capabilities of network The architecture is extremely flexible in the sense that traditional protocols like TCP and UDP as well as novel abstractions like Active Messages can be implemented efficiently prototype on an ATM cluster of standard workstations offers microseconds latency and bandwidth It achieves TCP performance at maximum network bandwidth and demonstrates performance equivalent to Meiko and TMC supercomputers on set of benchmarks The Network Architecture talk about given at the Berkeley NoW retreat by Thorsten von Eicken May and UNAM Bringing Parallel and Distributed Computing Closer Cornell WIPS Systems Work in Progress Seminar talk by Basu that describes the architectures of and UNAM People Thorsten von Eicken Anindya Basu Chang Grzegorz Czajkowski Deyu Hu Werner Vogels Matt Welsh For further information contact Thorsten von Eicken	other	cornell
863	 Date Mon Dec GMT Server Fri Dec GMT Modeling Human Facial Expressions Modeling Human Facial Expressions Daniel Hung and Steven Huang CS Topics in Computer Graphics Introduction Human faces are among some of the most difficult objects to model in computer graphics and have been in the attention of numerous attempts some almost as old as computer graphics itself Facial expressions are the result of the movement of skin layered atop muscles and bone structures and may have thousands of combinations As part of our coursework we propose to focus on this subject Our work will be divided into three parts survey of various techniques developed throughout the years an implementation of one such technique and the presentation of our results Limitations Due to time constraints it is unlikely that detailed implementation of any of the models is possible The goal of the project is thus to produce technology demonstration of technique The availability of suitable input devices or face mesh would limit the accuracy and aesthetic quality of the finished product We wish to be able to produce at the minimum wire frame animation of face mesh The results from the survey and the implemented model will be presented in class Prior Art General Structure Among the various approaches taken over the years distinctive generalization can be made There generally exists muscle motion simulator called variably as action units abstract muscle action procedures or minimum perceptible actions This layer enables the generation of expressions that are not necessarily humanly possible such as asymmetric movement of two sides of the face On top of the muscle layer we find an abstraction for humanly significant expressions This layer might include smile frown horror surprise and other expressions As the objective of many projects was to emulate the human face during speech there usually exists another layer above expressions that include phonemes speech primitives complete data set of phonemes allow the synthesized face to look like it is coordinated with speech which is played back separately Keyframing Keyframing was one of the earliest approaches taken and involved linear transformations from one face mesh to another The amount of computations were extensive and the data set large The approach was rather inflexible because the range of expressions that can be generated are limited by the keyframes that were previously digitized It is also difficult to generalize work on one face mesh to another Parametric Deformations second approach was to model the human face as parametric surface and record the transformations as movements of the control points to minimize the data storage requirements These approaches are still difficult to generalize over different face meshes One such attempt utilizes patches that were defined manually on an actual digitized face mesh The control points for the patches were moved to effect the distortion of the face While this method is powerful we know of no automatic way of defining the relevant control points for the patches Another such attempt used Rational Deformations to move points inside defined volume if not for the amazingly little understanding we have of them The human facial muscles are capable of large amount of expressions and realistic simulation of muscles requires the simulation of muscle action wrapping around the skull structure jaw rotation and folding and stretching properties of skin hybrid approach would be to simulate muscles that are not necessarily After the data set was complete we decided that the available functions to deform the face mesh were overly complicated and derived simple one Pd where is the time parameter running from to Po is the point where the force is applied Pd is the point of attractive force and is every face vertex in the bounding box The formula moves every vertex in the bounding box towards the attraction point Pd by magnitude inversely proportional to its distance from the point of force application Po An example of this muscle model is shown below This formula had an unacceptable side effect of seemingly to pinch the points close to Po towards Pd We abandoned it because we felt we needed smoother attraction which led us to cos pi Pd Po where we introduced new parameter defines the radius of influence and while closely related to the size of the bounding box is separate parameter In general however should cover roughly the same area as the bounding box Note that singularities appear if is much smaller than the bounding box Note that the Pd Po term in this formula moves all the vertices in the bounding box and the radius of influence parallel to the vector between the point of force application towards the point of attraction In effect the point of attraction actually defines plane of attraction for the bounding volume This is the formula we settled with and the cosine term does provide us with smooth deformation sample of this muscle model is shown below Not all muscles on the face apply force linearly Sphincter muscles around the lips for example do not work well with this formula unmodified We thus defined special case of the formula to deal with these muscles cos pi Pd There are two important differences The term was introduced to allow the muscle to contract in one axis and expand in another instead of uniform contraction or expansion The direction of motion is now defined by Pd which is in the direction of the point of attraction similar to formula The reason we inverted the sign of this formula was because we felt that positive should denote contraction and negative should denote expansion in order to be consistent with formula The example on the left below shows contracting sphincter muscle and the one on the right shows an expanding sphincter muscle Putting it all together Armed with the face mesh and the muscles what remains is the definition of parameters which is largely tedious task We present few expressions generated by IBM DataExplorer below for mpeg demos click on the links below the images MPEG demos of our work Click Here to see the smile animation Click Here to see the kiss animation Data Explorer files of our work Click here for the connections list of the mesh Click here for the DX macro which models linear muscle on the face Click here for the DX macro which models the facial mesh Note that this requires vertex list connections and lip connections file similar to the ones above in order to work Ahead The effects we have achieved are far from realistic The complexities of facial animation have not yet been fully explored but we believe we have come up with reasonable model for manipulating data less than vertices versus the much larger data set acquired by machines with good quality Other areas may be explored and those we feel are interesting are listed below skin Coordination of lip muscles with speech Motion of other facial elements such as eyeball or jaw Modelling of the interior of the mouth such as teeth and gums Modelling of hair features such as hair moustache beard or eyebrows References Arad Dyn Reisfeld and Yeshurun Image Warping by Radial Basis Functions Application to Facial Expressions Models and Image Processing Badler and Platt Simulation of Facial Muscle Actions Based on Rational Deformations Computer Graphics September Kang Chen and Hsu Automatic Approach to Mapping Lifelike Human Face Image and Vision Computing Minh de Angelis and Thalmann Design Transformation and Animation of Human Faces Visual Computer Primeau and Thalmann Abstract Muscle Action Procedures for Human Face Animation Visual Computer Nahas Huitric Rioux and Domey Facial Image Synthesis Using Skin Texture Recording Visual Computer December Nahas Huitric and Saintourens Digital Actors for Interactive Television Proceedings of the IEEE Tost and Pueyo Human Body Animation Survey Visual Computer March Waters Muscle Model for Animating Facial Expressions Computer Graphics July Maintained by Steven Huang and Dan Hung Last Modified December	other	cornell
864	 Server Date Monday GMT Friday GMT Help on Searching NCSTRL Documentation Help on Searching You can search for document with either simple search or fielded search Simple Search Simple search consists of single text entry box on the NCSTRL server home page Enter keywords in this box digital library to search the author title and abstract fields of the bibliographic entries for technical reports The entire NCSTRL collection is searched The search returns documents whose bibliographic entries contain all the words you enter in either the author title or abstract fields Fielded Search The fielded search form has three logical components First there are three text entry fields for bibliographic keyword entry and two radio buttons to specify whether the keywords entered should be anded or ored together Second there is menu of the publishers in the NCSTRL collection and check box to use all publishers Finally there is text entry field in which you may specify document identifer To specify search criteria do the following If you wish to specify search criteria based on bibliographic keywords author title or abstract fill one of the keyword fields see the rules for bibliographic keyword matching Author The author first or last name or names Title The words in the title of the document Abstract The words in the abstract of the document and select the AND or OR radio button Select at least one of the publishers from the list on the form or select the checkbox to search all publishers Unfortunately each Web browser has different rule for multiple selections in menu Consult the documentation for your browser for help with this Document Identifier The identifying name of the document unique for any given publisher Your entry will be matched against any substring of the document identifiers the entry will match and document identifier entry is always anded to bibliographic keyword entries only documents which meet the bibliographic keyword criteria and the document name criteria will be returned Please take note that not all documents in the collection have abstracts If you want your search request to include documents without abstracts enter your search criteria under Title as well as Abstract Your search criteria will be rejected if you do select at least one publisher or the all checkbox and specify at least one bibliographic keyword or document identifier Rules for bibliographic keyword matching Words that you enter in the three bibliographic keyword fields Author Title Abstract are matched to bibliographic entries according to the following rules Each word that you enter matches any word in the respective field that begins with respective word For example the word comp matches computer computation comprehensive etc You may choose either the logical connector AND or OR between the bibliographic keyword fields by using one of the radio buttons below the fields For example if you select the or button and the word robot in the Title field and robotics in the Abstract field the search will return documents that have either robot in their titles or robotics in their abstracts If you select the and button the search will return only those documents that have robot in their titles and robotics in their abstracts You may also use logical connectors and and or within fields For example if you enter robotics or vision in the abstract field the search will return documents that have the word robotics or vision in their abstracts If you enter robotics and vision in the abstract field the search will return documents that have both the word robotics and vision in their abstracts Multiple words that are not separated by and are assumed to be and separated For example if you enter computer vision in the abstract field the search will return documents that have both the words computer and vision in their abstracts Finally you may use parentheses to group words For example if you enter Gries or Teitelbaum and Field in the author field the search will return documents authored by Gries or by Teitelbaum and Field Note Do not use short common words or single letters in the bibliographic keyword fields the You will be asked to your search if the keyword you enter matches too many words in the database Up to Main Information Menu NCSTRL Documentation Any comments or questions Contact us at help	other	cornell
865	 Server Date Sunday GMT Monday GMT DeeJayer Guide for ISDN Record Hops DeeJayer Guide for ISDN Record Hops by Aswin Introduction Being DJ is position of power You are in charge of what songs are being played However it also bears heavy responsibility What you are doing should be what the people want So for me being DJ means to always play better music To push my limits so to speak That is the attractive thing about being DJ In plain words like to play hot music So much for the blabla let see how it works How to Use Our Equipment Turn on the main switch on the extension box on the far right corner of the desk turn that switch off at the end of the hop Make sure everything is on The amplifier should have the buttons for tape and tuner on do ask me why There is an extra small switch box with three buttons mic tape and Make sure is pressed We have and TAPE to play music On the Mixer you use for BOX for and TAPE for the lower double tape deck Now we play some music Do not put the sliding switches over since this can distort the music Everytime you put up new song check the volume level When you program be ready to adjust the volume if you are on the floor How to program This is the player Put in cd Close the slide When programming track make sure you know the disc and the track in advance Press program then press one of the disc buttons on the left then press the track number on the right if then press and the two digits This should all happen in quick order How to change cd and program when music is playing Press exchange to open the slide Put in the cd you want Press exchange again Then program as before How to program TAPE Will be put in later version What to Play We have three sorts of music we mainly dance to Jitterbug Music Like Bill Haley Jerry Lee Lewis Big Joe Turner speed up to beats per minute Lindy Hop Music Old Swing Band Music Like Benny Goodman Glen Miller Count Basie Duke Ellington up to West Coast Swing Music Like BB King Bonnie Raitt Delbert Mc Clinton up to Almost all cd are marked with the speed kind and quality CDs are also marked by color is blue WC is red LH is yellow orange means Carolina Shag CS When you start you can never do wrong by playing songs that are marked So play those lot When you start picking more of your own music be aware of the following It is the style of the rhythm section that determines the dance style not just the speed faster tune might feel more like and feel like WCS and slower tune might have an older style bouncy beat and feel more like slow Lindy Only when you get more experienced you should bring more and more of your own music hope do not sound to rigid since every DJ has different taste and style It often happened to me that song that liked very much at home did not work at all on the dance floor Music for dancing is pretty specific So get some experience first before you start experimenting As the ratio use the following guideline Jitterbug Lindy Hop West Coast Swing For example could play etc Play for the People Try to play what people like If hardly anybody is dancing to song it is probably not good tune Do not tire people to play fast songs in row Also there are lot of beginners at the dances especially early in the evening normally play only few songs over night This is als the case for WC Play slow one and then faster one Variation is the key to your success Length of Songs Five minute songs are too long If song is very long over minutes try to fade it out If there is great song that you would like in it entire length then consider having people change partners several times so people do not have to dance with the same partner for long time This is called mixer Mixers are done as follows quote Announce at the beginning that it is mixer Then when you want people to change partners lower the music and announce the change make sure that people are really changing partners they normally do not hear you quote Sound Level Every song is recorded at different sound level Therefore DJ should always monitor the sound level at the start of each song Sometimes it is also desirable to adjust the treble and bass using the equalizer for further reading see here By Aswin	other	cornell
866	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
867	 Server Date Sunday GMT Monday GMT CS Topics for CS The following are prerequisites for the course If you feel you do not meet one or more of these please contact me praveen cs to discuss whether you should enroll for the course Knowledge of the basics of relational database systems as taught in CS The broad topics that you should have at least passing familiarity with are the relational data model the relational algebra and calculus SQL file structures heap and isam and indexing structures These will be very briefly covered again at the start of the course Ability to program with The projects for the course will involve adding code to database system written in If you have experience writing code you might feel that you can pick up Some of the background info in the course home page might help you If you have never programmed in or you should talk with me before enrolling for the course Also take look at the information on the term project to get an idea of what sort of programming is required Introductory courses in data structures CS or equiv and operating systems	other	cornell
868	 Server Date Monday GMT Wednesday GMT The contest The fabulous contest page Here in land we have problem Look at the other CS course home pages has got an logo has some thing with lambda on it has that funky scrolling text and even has lame but still better than nothing picture of their textbook What do we have Nothing We need help Here your chance to make difference Create borrow or steal picture for us Here are the rules The picture must be in either GIF or JPEG format The picture must be fairly small see the course home page for examples Send your submissions via to jfoster You should either uuencode or binhqx your file attaching file in Eudora will be sufficient Do send in anything you would want your mother to see Winners will receive absolutely nothing but will be acknowledged on the home page The entries so far authors have been omitted but keeping track Muscular guy lifting CS Dept Mac Big little tiny CS Fancy with some floating stuff Fancy version The zone Ominous warning Back to reality	other	cornell
869	 Server Date Monday GMT Sunday GMT Problem Sets CS Problem Sets Thorsten von Eicken Fall Problem Set Handed out Due by Problem Set Handed out Due by Problem Set Handed out Due by Problem Set Handed out Due by Return to CS Home Page	other	cornell
870	 Server Date Sunday GMT Saturday GMT ORWELL Removal of Tracked Objects in Digital Video ORWELL Removal of Tracked Objects in Digital Video Alfred Hong Heji Kim Wang Department of Computer Science Upson Hall Cornell University Ithaca NY US http Table of Contents INTRODUCTION BACKGROUND INFORMATION SPECIFICS Hausdorff Tracker EVALUATION RELATED WORK AND EXTENSIONS REFERENCES Introduction Object tracking in sequence of images can provide base for multitude of digital video processing applications such as removal of object in the scene Although numerous editors are available and removal OTR is mostly manual process Using the existing feature in RiVL we implement application that allows the user to specify and remove an object then reconstruct the background to result in new video sequence Our work primarily focuses on algorithms for the domain of stationary backgrounds with single moving object In addition to OTR we also extend this work to segment the from the background we can use the resulting segmentation for variety of video processing effects such as overlaying the on top of different sequence The resulting application is an ideal test bed for experimenting with various OTR and segmentation algorithms We reconstruct the background and use different techniques for segmentation as illustrated in the diagram below Figure Orwell OTR and Segmentation Overview The rest of the paper is organized as follows Section provides some background on RiVL and the Hausdorff tracking algorithm Section discusses vision algorithms we employed to our ends Section reviews the work we have done Section concludes with current status and future research directions Key words Hausdorff distance segmentation background reconstruction image filtering Background Information RiVL RiVL is resolution independent video language which has video and audio as first class data types Jonathan Schwartz has implemented RiVL as extension for multimedia processing The high level operators used in RiVL are independent of video format and resolution and provides the necessary infrastructure to test our ideas generates the code for RiVL functions that need to perform low level image processing routines that are not already included in the RiVL library The implementations of median and mean filters use the functions generated by for computations Hausdorff Tracker The Hausdorff tracker is object tracking system for continuous sequence of images The model of the tracked object is represented by binary produced by applying Canny edge operator over smoothed version of the image of the input image Taking advantage of the fact that the motion of the object is roughly an affine transformation between any two consecutive frames the algorithm matches all the possible translations and scales of the model to specified search window shown as red dotted box in Figure Generally the best match has the most points which overlap with transformation of the model Since we use this best match as model for the next image once the tracker begins to wander the results can deteriorate quickly Figure Hausdorff tracking algorithm explained Specifics This section discusses the implementation of the algorithms accessible from the Orwell Editor The first subsection discusses The second subsection discusses the background reconstruction algorithms assuming stationary camera and the third subsection discusses the segmentation algorithms Hausdorff Tracker The tracker in RiVL returns scale and translation coordinates for each image Performance of the tracker depends on setting the correct parameters for the search size of the search window scaling factors and the forward and backward distance which limits the allowed dissimilarity in match We must make between the laxness of the constraints and the processing time required to track the object The Hausdorff tracker also works better for larger images Background Reconstruction We need the background to replace the tracked object from the original sequence and to possibly segment the object We experiment with three different approaches to background reconstruction temporal median filter temporal mean filter and physical space search The first two approaches for the background reconstruction are temporal mean filter and the temporal median filter Temporal Mean Filter TMEF The TMEF technique computes the mean pixel value by taking the arithmetic average of the whole frame sequence and assigns this result to the pixels in the background frame This technique averages out the tracked object in the scene with possible blurring effect We implement this filter by averaging each of the RGB values independently Temporal Median Filter TMDF TMDF builds the background frame by computing the median pixel value from sorting the images in the video sequence This techniques relies on the assumption that any portion of the tracked object appears in any one particular location in less than half the image frames We implement this filter by finding which frame has the median using its value and then reconstructing the background using the corresponding RGB values Both temporal filters are pixel level operations we wrote in only allows twenty frames maximum to be entered as input to function and because medians of medians is not median we could not implement true median function over the entire video sequence Instead we compute the median for several different samples each sample composing of twenty frames set at equal intervals and allow the user to decide over the best result Physical Space Search Physical space search finds the frame where the bounding box of the tracked object does not overlap with the one in the currently processed frame that is the part of background needed to replace the object is the one that has not been occupied by the object in the previous frames Using assumptions of motion continuity we initially search for the the background for the current image near the frame where we found the background for the previous frame this way we can avoid comprehensive search For the initial frame we must search the entire sequence for all possible background replacements Although we prefer the closest frame that contains the background we also want to find multiple scenes in which the background resides in case that another moving object has moved into the background It is also possible to partition the bounding box into smaller blocks and search for the background in pieces If we assume single moving object in the sequence then it is possible to use one frame which has the object removed and the background reconstructed as the background for the entire sequence However due to shifting lighting levels it is desirable to reconstruct the scene for every frame or every block of frames Figure shows the result of the background covered by the subject head reconstruced Figure Sequence illustrating and background reconstruction Object Segmentation Image Segmentation Segmentation or separating the tracked object from the background is one of the core problems in vision that has yet to be adequately solved for unconstrained settings We explore motion differencing second differencing and background subtraction for this classical problem Figure Segmentation methods Image Differencing Motion differencing applies threshold over two consecutive images to produce binary image indicating the regions of motion We extend motion differencing to use three consecutive frames With second differencing we perform binary AND operation on the difference image of the first two frames and the last two frames to segment out the moving object in the middle frame Moving objects are more clearly segmented when there exists less overlap of the moving object with itself in consecutive images we choose the three consecutive frames such that there has been sufficient motion Figure Segmentation methods Background Subtraction Background subtraction involves application of threshold over the background with the image containing the moving object This techniques works well only when used with faithful copy of the background Evaluation Figure Input video sequence We used the above video sequence of frames as one of the inputs for our test Images were recorded as Motion JPEGS with Sun Microsystems camera using Parallax board Mean Median Figure Temporal filter results The example images above are the results from temporal filters The reconstructed background image from the mean filter has slightly visible blurring effect caused by the moving object As the number of frames in the video increases this effect will become negligible We can further process the mean filter with smoothing function and then sharpening function to further rid of the shadowing effect Figure Segmentation results for background subtraction We choose the eyeball test metric commonly used by many vision researchers to determine the quality of the segmentation Background subtraction produced the best segmentation with the smoothest edges and the least number of holes within the object Motion differencing performed the worst since it tends to give an irregular outline of the motion and includes portion of the background which belongs to the object in the previous image but not in the current image this effect appears as an undesirable white outline around the object in the right pair of images below The second differencing method shows improved results over regular motion differencing but is still not as solid as background subtraction Second differencing has an advantage over background subtraction since reconstructing the background is not necessary Some sort of is necessary for all cases to fill in the holes and smooth the edges Figure Segmentation results for second differencing and motion differencing We set out with goal one of and the other of The overall quality of depends on the accuracy of the Hausdorff tracker and the fidelity of the reconstructed background We feel we have accomplished OTR as long as the background does exist We have had less success with segmentation and leave much room for future improvements Related Work and Extensions Multimedia and vision are highly experimental areas embodying numerous possibilities Although tracking and are active ares of research in vision there appears to be virtually no established work on automating object removal using background reconstruction We can extend this project along these orthogonal directions solve object removal for moving camera to handle zooms and pans handle subtle problems in object removal such as object shadow reflection etc integrate Orwell with full video editor as well as include more functionalities such as allowing the tracker to backtrack to reset the object position refine segmentation with morphological operators References Tracking Objects in Complex of the Fourth International Conference on Computer Vision with Noh and Rucklidge Jain Kasturi and Schunck Machine Vision Ousterhout John Tcl and the Tk Toolkit Massachusetts Swartz Jonathan and Smith Brian RiVL Resolution Independent Video Language Submitted to the Workshop July Toronto CA Teodosio Bender Salient Video Stills Content and Context preserved Proc ACM Multimedia pp	other	cornell
871	 Server Date Sunday GMT Monday GMT Address Address and stuff Department Jonathan Swartz Department of Computer Science Upson Hall Cornell University Ithaca NY Department fax Office Upson Hall Home Jonathan Swartz Spencer Road Ithaca NY	other	cornell
872	 Server Date Monday GMT Thursday GMT About the Design Research Institute Design Research Institute Overview The Design Research Institute is an organization of collaborating industry and academic scientists and engineers devoted to research bringing computer science and computation technology to bear on problems of engineering design DRI was established in by Cornell University and Xerox Corporation and is located in the Center for Theory and Simulation in Science and Engineering on the Cornell campus in Ithaca New York The Institute was founded on the principle that American research universities represent major resource that can and should be employed in America effort to improve its industrial global competitiveness At present five Xerox scientists form the nucleus of DRI collaborating in research with Cornell faculty students fellows and visiting scientists in the College of Engineering Research problems are motivated by industry but solved through the pooled talents and expertise of the combined DRI community It is anticipated that additional companies and Cornell units will participate as the Institute grows The DRI mission is Pace to Product that is to develop technologies and methodologies for accelerating the design and engineering of products DRI research currently encompasses three themes Information capture and access developing Corporate Memory of Design heterogeneous information base capturing designs and design experiences and featuring query and browsing capabilities in support of engineering processes and decisions Computational Prototyping developing scientific computing algorithms and applications and computing environments for their use to enable mechanical fluid and other physical systems to be simulated by computer reducing the need for building hardware prototypes Collaboration technology developing tools and methods for sharing of engineering information and creating shared engineering work spaces Since the issues of engineering productivity addressed by DRI are of concern to much of American industry goal is to secure federal or other outside funding to support the Cornell associates of DRI Industry staff are supported by their companies Most DRI research is Software prototypes are implemented to demonstrate concepts and show feasibility and results are published in technical reports and journals As appropriate technology is expected to be freely transferred into partner companies DRI Partners The Design Research Institute is partnership of industry academia and government Industry Corporations can participate in the Institute by engaging in the research of DRI generally by establishing groups of research scientists and engineers on campus Companies take the lead in setting the research agenda and have access to the research results of all of DRI Academia Cornell University is the host institution for the Design Research Institute Faculty staff and students in the College of Engineering work closely with industry scientists in collaborative research DRI offices and laboratories are located in the Center for Theory and Simulation in Science and Engineering and in the Department of Computer Science and collaboration extends to the Sibley School of Mechanical and Aerospace Engineering and the Departments of Electrical Engineering and Theoretical and Applied Mechanics Future involvement is expected in other units of the College of Engineering as well as the School of Industrial and Labor Relations and the Johnson School of Management Government It is anticipated that government or other external organizations will fund part of the research of DRI since the research goal of the Institute is to develop technologies that will enhance the competitiveness of all of American industry Such funding will support Cornell affiliated staff not industry staff Mission Accelerating the Pace of Product Development The research mission of the Design Research Institute is to develop technologies and methodologies for increasing the pace of development of products such as aircraft computing and communications equipment automobiles machine tools office equipment and composite materials DRI research is expected to lead ultimately to shorter product development cycles This focus on the time element of engineering reflects the importance of time to market in today global competitive environment Research projects seek to leverage massive computation multimedia networks and heterogeneous database technologies to enable more effective engineering by both individuals and work groups Three themes form the heart of the DRI research agenda information capture and access computational prototyping and collaboration technology Research in these areas is directed toward facilitating more effective engineering and developing means to eliminate or accelerate engineering tasks Information Capture and Access One goal of DRI is to develop technologies for an enriched information and document environment that enables increased worker productivity in tasks especially that of engineering design DRI research in information capture and access involves multitude of technologies distributed databases and persistent object storage document image processing and management multimedia and user interface technology information science for heterogeneous data and knowledge representation and organization centerpiece for this work is vision of Corporate Memory of Design distributed collection of all the information pertaining to product development documents drawings schedules catalogs field service records minutes of meetings records of decisions and histories of past projects Initial contents of the DRI prototype Corporate Memory will be engineering reports in scanned and synthetic document form engineering drawings photographs of engineers along with records of their areas of expertise and project assignments and computational prototyping programs complete with documentation and sample visualization output The Corporate Memory will not be centralized but rather will be spread across many computers in many sites linked by network It will be closely integrated with public information sources such as electronic libraries and national online databases The Corporate Memory will support wide variety of uses through specialized interfaces tailored to various applications For example an engineer may receive automatic notification of any engineering change on his project by electronic mail manager may have permanent project status window on his or her workstation refreshed by program that continuously queries the Memory for schedule references departmental document scanner may automatically file in the Memory all documents pertinent to particular project Parametric design programs may sift through previous designs for best matches to new requirements The clients of the Memory will all share layer of intelligent access capabilities such as querying browsing natural language interfaces and of the content of the Memory An information capture and access testbed is now being implemented It is based on several existing information and document systems ranging from an electronic notebook system to network document and database access systems to information filters and interfaces These systems will be integrated into unified environment supporting experiments with and development of enabling technologies for the Corporate Memory Computational Prototyping Computational prototyping involves the simulation by computer of complex physical systems and visual display of their behavior to engineers This process enabled by network access to supercomputers graphics workstations scientific visualization technology and new parallel computing algorithms will replace some of the time consuming building of hardware prototypes with interactive design at the workstation Successful simulations have to date been achieved in several key physical domains including flow of fluid and heat in thermal ink jet free surface ejection of droplet from an acoustically excited pool of liquid electrostatic interactions of toner particles in xerographic development system lubricant flow in bearings and charge transport in semiconductors New methods have been developed to solve these problems on supercomputers Ultimately the simulations will run fast enough for interactive use by engineers An emerging focus area in Computational Prototyping is Systems In collaboration with departments of Electrical Engineering and Theoretical and Applied Mechanics computational tools are being developed that will lead to an improved understanding of MEMS electromechanical behaviors Specific areas of research include reliability and failure modes in these structures as well as techniques for sensitivity analysis and optimal design of MEMS This project is being funded by the NSF MEMS program research goal is to develop flexible powerful yet friendly environment supplying computational and graphics resources that enable an engineer to employ simulation as an everyday design tool The DRI vision is of an integrated environment providing simulation and visualization capabilities for engineers at Xerox and other partner companies driven by Cornell supercomputers Intelligent browsing capability and online documentation are key components of the vision Building toward this goal is Protolab computing environment for engineering simulation featuring automatic generation of simulation programs from descriptions and an object oriented library of models and methods research proposal on the development of Protolab submitted jointly with General Electric and Cornell Computer Science has been selected as potential funding candidate by ARPA Collaboration Technology The Design Research Institute recognizes that the way engineers work together as team is as important as their individual contributions Thus collaboration technology forms the third component of the DRI research agenda DRI activities in this area are in providing shared access to objects in the Corporate Memory and in enabling effective communication among engineers Toward the latter cooperative engineering environment is under development featuring structured dialog among members of team to facilitate resolution of engineering changes during product design Research in this area is just beginning but is expected to grow to involve analysis of engineering processes and development of additional tools to facilitate collaboration Of special interest is enabling effective teamwork among engineers separated by several time zones Corporate Participation Companies joining the Institute typically will participate by locating research staff on campus In the case of Xerox the founding partner group of seven scientists within the Corporate Research Group was permanently established at Cornell Xerox provides to Cornell yearly grant which offsets the cost of its offices and support services Corporate partners benefit from participation in DRI in several ways The companies leverage both their intellectual investment and their financial investment through participation in collaborative research with university faculty and students as well as scientists from other partner companies Government or other external funding is expected to support the Cornell affiliates Through collaboration partner companies have direct involvement in establishing the research agenda of the Institute Problems can be drawn from an industrial context and distilled into fundamental research questions This approach provides new scale and perspective that is unusual in academic research but which promises exceptional synergy Partner companies also have convenient first access to research developments in DRI including research involving scientists from other companies There are many avenues of technology transfer including joint projects with company units and hosting of visiting scientists on campus Intellectual Property Rights Most research in the Design Research Institute is intended to be open and Results will be available for use by partner companies as developed and will be published in scientific journals as appropriate To cover ownership rights to inventions deriving from current DRI research an intellectual property rights agreement has been reached in principle between Cornell and Xerox It provides that rights to inventions of Xerox employee shall be covered by standard Xerox policy and that rights to inventions of Cornell employee shall be covered by standard Cornell policy In the case of joint invention by Xerox and Cornell employees rights shall be jointly owned Joint ownership generally implies that each party has the right to use or license the invention independently as either party wishes In the case of DRI joint ownership has been redefined by the parties for the mutual benefit of both parties When additional corporate partners join DRI the issue of intellectual property rights will be revisited but it is expected that agreements developed to cover the new partners will be similar to the model Steering Committee and Institute Organization Policy for the Institute is established by Steering Committee whose membership includes representatives of Cornell and each of the partner companies At present the committee consists of three Cornell members and five Xerox members When additional corporate partners join DRI an Institute office will be created to augment the offices of the individual companies director is expected to be named at that time Until then Cornell and Xerox are sharing in the administration of DRI As the Institute grows it is envisioned to include separate branches focusing on key areas of DRI research The branches will engage various units of Cornell and partner companies and government agencies may participate in any or all of the branches as they choose Design Research Institute Engineering and Theory Center Cornell University Ithaca NY	other	cornell
873	 Server Date Sunday GMT Monday GMT Resume Vineet Ahuja ahuja Current Address Hasbrouck Apartments Ithaca NY Permanent Address floor Botanic Terrace Conduit Road Hong Kong Objective To obtain permanent position as software engineer Education Cornell University Ithaca NY Master of Engineering Computer Science GPA nbsp December Pune Institute of Computer Technology Pune India Bachelor of Engineering Computer Engineering Graduated with Distinction nbsp August Relevant Coursework Engineering Computer Networks Automata and Computability Theory Software Design for High Performance Architectures High Performance Computer Systems Multimedia Systems High Capacity Information Networks Databases and Management Systems Computer Organization Software Engineering Data Structures Artificial Intelligence Computer Graphics Operating Systems Projects Stable Storage Server nbsp Spring Design and implementation of distributed stable storage server for an electronic commerce system Parallel Ray Tracing in nbsp Spring Parallelisation of public domain ray tracer RayLab in Compositional using the method Secure Video Transmission nbsp Fall Researched method for secure transmission of video streams based on the RSA encryption standard Handwritten Character Recognition nbsp June package for recognition of handwritten English characters and form parsing with automated database entry written in and Visual Basic under Windows Financial Accounting nbsp Fall financial accounting package for managing account books and preparing final accounts written in COBOL Research Efficient Computation of Parallel FFTs Researched methods to decrease communication overhead and computation of the FFT on distributed memory parallel machines Parallel Matrix Vector Multiplication nbsp Fall Design and implementation of optimized algorithms for parallel matrix vector multiplication on distributed memort parallel machines Experience Summer Intern nbsp June Thinking Machines Corporation Design and development of GlobalWorks Run Time Environment OS for clusters of workstations Computer Skills nbsp Pascal COBOL Assembly HTML OWL MPI Active Messages Platforms Software FrameMaker Matlab Awards and Prizes First runners up in project competition for Handwritten Character Recognition Activities Founder of club at Pune Institute of Computer Technology	other	cornell
874	 Date Mon Dec GMT Server Spring Evening Prelim Exam Schedule Spring Evening Prelim Exam Schedule Updated October Feb Feb Feb COM CHEM ARME CHEM BIOAP CHEM MATH CHEM MATH CHEM MATH DEA MATH ENGRD Feb Feb Feb ABEN ARME ARME BIO BIOAP BIOAP BIO BIOES CHEM BTRY CHEM COM ADM CHEM ECON MATH COM ECON MATH ENGRD ELE MATH ENGRI ELE MATH ILRLE ADM MATH ILRLE MATH MATH PHYS PHYS MATH SOC PHYS MATH MATH Mar Mar Mar ARME COM BIOBM CHEM COM CHEM COM COM CHEM COM COMM CHEM EDUC ENGRD COMM ENGRD ENGRD ENGRD ILRST ENGRD SPAND MATH ENGRD MATH NS MATH MATH OR IE OR IE PHYS PSYCH SPAND AM Mar Mar Mar CHEM BIOAP DEA COM CHEM MATH ENGRD ENGRD MATH PHIL MATH MATH MATH MATH MATH MATH MATH MATH MATH MATH Apr Apr Apr ABEN ARME ARME ARME BIO BTRY BIOES BIO CHEM CHEM BIOAP CHEM ILRLE ELE CHEM ILRLE ENGRD COM PHYS ADM ILRST MATH MATH PHYS PHYS Apr Apr Apr CHEM ARME COM CHEM BIOAP ADM COM CHEM MATH COM CHEM MATH ECON CHEM MATH ECON CHEM MATH ELE COM NS ENGRD EDUC SOC ENGRI ENGRD PHYS ENGRD PSYCH OR IE OR IE AM Apr Apr Apr BIOAP ARME BIOAP COM CHEM MATH COM ELE MATH COM ENGRD MATH COMM MATH MATH ENGRD MATH MATH ENGRD MATH MATH ENGRD MATH MATH MATH SPAND	other	cornell
875	 Server Date Sunday GMT Wednesday GMT Courses currently enrolled in This is list of all classes am enrolled in Fall Comments or questions about this web page Send mail to sxsrivas	other	cornell
876	 Server Date Monday GMT Thursday GMT Topics for prelim Topics on prelim programming Base classes and derived classes Inheritence Functions Instance variables Protected keyword Constructors for derived classes Virtual functions Pure virtual functions II Program correctness Induction Assertions Truth validity Hoare triples Preconditions and postconditions The assignment rule Loops Loop invariants Bound functions steps to proving loop correct Developing loop using an invariant You need to understand but not memorize the lists of step for these last two III Gofer Types Int Char Bool Float Tuples Lists Functions Function definitions Basic pattern matching integers Pattern matching with lists and tuples Where clauses Polymorphic types etc what is the type of map Currying and partial application The isomorphism Just kidding Did you know that Currying was actually invented by Schonfinkel So it should be called Schonfinkelization functions Map Filter Anonymous functions Lazy evaluation and infinite lists Just the basic concept nothing tricky Efficiency considerations fib recursively tail recursively You do need to know about list comprehensions	other	cornell
877	 Server Date Monday GMT Wednesday GMT Midterm Examination	other	cornell
878	 Server Date Monday GMT Tuesday GMT Zeno Papers Papers from Zeno Research Compressed Domain Transcoding of MPEG Brian Smith Soam Acharya Abstract Current compression formats optimize for either compression or editing For example motion JPEG MJPEG provides excellent random and moderate overall compression while MPEG optimizes for compression at the expense of random access Converting from one format to another process called transcoding is often desirable over the life of video segment In this paper we show how to transcode MPEG video to without fully decompressing the MPEG source Our compressed domain transcoding technique differs from previous work because it uses new technique that is optimized for software implementation and because we compare the performance of working implementation of our compressed domain transcoder instead of just counting the number of multiplies needed to transcode Our experiments show that our compressed domain transcoder is to times faster than an optimized spatial domain transcoder and offers another benefit single parameter can improve the speed of transcoding at the expense of the quality of the resulting images This is important to many applications Acrobat Gzipped postscript VR Immersive Desktop Teleconferencing To appear in ACM Multimedia Jefferson Han Brian Smith Abstract Current systems provide user interface This paper presents application called VR that provides richer interface VR is distributed system that allows users to connect to worlds and interact with other using live video and audio embedded in virtual space This paper describes prototype implementation of VR including the user interface system architecture and detailed look at the enabling technologies Future directions and metaphors for this space are discussed HTML version Acrobat version Compressed Domain Processing of Images To appear in Imaging Journal Brian Smith Lawrence Rowe July Abstract This paper addresses the problem of processing video data in the compressed domain The operations covered are those where pixel in the output image is an arbitrary linear combination of pixels in the input image which includes convolution scaling rotation translation morphing image composition and transcoding This paper further develops an approximation technique called condensation to improve performance and evaluates condensations in terms of processing speed and image quality Using condensation video can be processed at near rates on current generation workstations Acrobat version Massively Distributed Video File Server Simulation Investigating Intelligent Caching Schemes Alexander Castro Edward Lazzerini Vivekananda Kolla December Abstract This paper the final report in graduate multimedia systems course presents the results of simulation study that compares the effectivesness of different caching schemes within the DVFS architecture HTML version Acrobat version Survey of Compressed Domain Processing Techniques Reconnecting Science and Humanities in Digital Libraries University of Kentuky Brian Smith Oct Abstract This short paper surveys current techniques for compressing compressed multimedia data including compressed audio video and images HTML version Acrobat version Resolution Independent Video Language Presented at ACM Multimedia Jonathan Swartz Brian Smith November Abstract As common as video processing is programmers still implement video programs as manipulations of arrays of pixels This paper presents language extension called Rivl pronounced rival where video is first class data type Programs in Rivl use high level operators that are independent of video resolution and format increasing portability simplifying code reuse and reducing development time This paper also describes Rivl interpreter and the strategies the interpreter uses to optimize Rivl programs These optimizations include classical programming language optimizations such as common subexpression elimination and out of order execution image and video specific optimizations such as computing only those images that will affect the output and an optimized memory manager HTML version Acrobat version Query By Humming Musical Information Retrieval in an Audio Database Presented at ACM Multimedia Asif Ghias Jonathan Logan David Chamberlin Brian Smith November Abstract The emergence of audio and video data types in databases will require new information retrieval methods adapted to the specific characteristics and needs of these data types An effective and natural way of querying musical audio database is by humming the tune of song In this paper system for querying an audio database by humming is described along with scheme for representing the melodic information in song as relative pitch changes Relevant difficulties involved with tracking pitch are enumerated along with the approach we followed and the performance results of system indicating its effectiveness are presented HTML version Acrobat version Name Server Presented at the Workshop Peter Liu Brian Smith Lawrence Rowe July Abstract This paper describes general purpose name server for This name server maintains host addresses and port numbers of services running in distributed vironment and allows clients to query about them It starts services on demand so services are guaranteed to be available and it provides simple authentication protocol for better security The name server is also designed to be tolerant Multiple backup servers can be started on different hosts and failover occurs when the main server goes down In addition the name server provides mechanisms to interface with external modules for extending its functionality Acrobat version Tcl Distributed Programming Presented at the Workshop Brian Smith Lawrence Rowe Stephen Yen May Abstract This paper describes an extension to that introduces suite of commands for creating systems This extended abstract provides examples of using the RPC abstraction and the distributed object system Acrobat version Tutorial Unpublished manuscript Brian Smith Lawrence Rowe September Abstract This document provides tutorial introduction to HTML version Acrobat version Rivl Tutorial Unpublished manuscript Brian Smith Jon Swartz December Abstract This document provides tutorial introduction to Rivl HTML version Acrobat version Protocol Unpublished manuscript Brian Smith May Abstract This paper describes protocol for audio and video file servers is the transmission protocol used in CMT the Continuous Media Toolkit Acrobat version Experiments with Lossless JPEG Codec Master Report Kongji Huang May Abstract This master report describes set of experiments conducted to test the effectiveness of the lossless JPEG encoding method Acrobat version	other	cornell
879	 Server Date Sunday GMT Friday GMT Program Clarifications Program Clarifications November Added November Part Part asks you to compare the running time of Parts and Unfortunately since we sorting only elements both parts execute in less than second So for Part answer this question Which part or should execute faster Why Added November In say that it has one argument array Then in the function it refers to These should be the same So the function should be void elemptr int for elemptr malloc sizeof elem if NULL printf Error out of memory at exit rand Added November Mac Memory Limits Macs have memory limit that you can statically declare only bytes of data As result we have to change the number of things that you have to sort Part Each int is bytes so should be able to fit ints However we need little room for additional stuff like function calls which take up memory so we only sort integers For the output print every integer per line Only the size of the array in changes Part Each elem is bytes so we could only fit As result dynamically allocate the array You do know how to do this so give you the code We will sort an array of elems printing every for output Change to void elem int elem malloc sizeof elem if NULL printf Error out of memory exit for rand Also your main should be void main void elem you add the rest of the code Recall the duality presented in class is pointer to an elem However we dynamically allocated an array for to point to As result is the first element of that array and is the last element In your quicksort function you can treat as though it was an array of elems Part We will sort an array of pointers to elems printing every for output Only the size of the array in changes Added November Partitioning Example There is very minor typo in the partitioning example On page in the third line it says However since This should be	other	cornell
880	 Server Date Monday GMT Wednesday GMT Topics for prelim Topics For the Prelim Basic constructs basic types int char float double cin cout control statements for loops while loops if switch function declaration reference parameters vs value parameters Complex types strings definition array of characters terminated by functions for manipulating strings strcmp strcpy arrays including arrays structs arrays of structs structs of arrays of etc typedefs const declarations static declarations Pointers declaring pointers operators how to use them understanding programs that contain them pointers to structures field relationship between pointers and arrays indexing pointers and pointer arithmetic ptr arrays and pointers as parameters in functions Classes basic declarations private vs public friend functions vs member functions operator overloading overloading the assignment operator constructors null constructor copy constructor constructor with arguments destructors const member functions Memory Management definitions of static automatic dynamic data using new and delete using new and delete for arrays using new and delete in conjunction with classes shallow copy vs deep copy Software Engineering Programming Style how to divide programs up into and files why divide up programs into and files how to write comments Note you do not have to comment any code on the test unless you are directly asked for comments but some explanations be useful for gaining partial credit if you make mistakes the difference between declarations and definitions interfaces and implementations public vs private member functions and data members of classes	other	cornell
881	 Server Date Sunday GMT Tuesday GMT Lecture REVIEW previous lecture problem algorithm program language computer distinction execution trace program structure output statement conditional expression operators input function CONCEPTS this lecture expressions arithmetic relational logical conditional operator precedence and parenthesization function application convergence divergence strict evaluation programs output libraries READING Teitelbaum Sections Roberts Section Section Expressions Familiar from grade school arithmetic Consist of operators and operands constants An operator applied to its operands is an application are parenthesized to indicate structure Reduce to single value by process of evaluation Evaluation of an expression can be traced The process used in evaluation and tracing is expression simplification Simplification To evaluate expression repeatedly replace an innermost application within by its value using the appropriate rule of arithmetic Stop when has been reduced to single value Note evaluation not required Expressions in Operations Binary Operators Examples Unary Operators Meaningidentitynegation Examples Relational Operators Operator Meaning In relational operations are just arithmetic operations they yield integer values interprets as logical false All other integers are treated as logical true In particular relational operators use to mean true Remember that the equality relation is Using means something else in never use in an expression Examples Expressions in Precedence Parentheses can be used to group operators explicitly In the absence of parentheses operator groupings are determined by operator precedence High Low unary binary An operator with higher precedence groups more tightly than an operator of lower precedence Operators of same precedence group to the left Example groups as The Two Uses of Programs You can always add parentheses to make the intended meaning clear Example is the same as as far as the computer is concerned But to realize that the value of this expression is and not human needs to remember precedence order Programs are written to be executed by computers and to be read by humans In many respects the latter is the most important part My personal rule is to always use parentheses if the meaning of the expression is at all ambiguous Extra parentheses never hurt Expressions in Function Applications name arguments arguments is list of expressions separated by commas The value of this expression is obtained by applying function name to the arguments The number of arguments in the argument list must match the arity of the defined function name There are no functions built into Functions are defined externally by libraries Examples abs sqr GetInteger hypotenuse Expressions in Conditional Expressions condition The value of conditional expression is the value of if condition evaluates to or the value of otherwise Since relational operators use values and for true and false this allows choice of value based on the outcome of relational test But condition is not limited to relations Examples First the condition is evaluated and then either the or the is evaluated but not both Convergence and Divergence Evaluation of an expression diverges if the result of an application is undefined Evaluation converges if it does diverge Example diverges An operator is strict if it evaluates all of its operands It is if it does necessarily evaluate all of its operands Example are strict diverges conditional expressions are Expressions in Logical Expressions Logical operators are used to combine the logical values true and false in various ways andF or FT not FF FF FT TF TT TF In logical values are represented by and so the logical operators are also arithmetic operators Operator Meaningandor not Examples Logical expressions are Programs void main void statements All programs have this general form statements are commands that direct the computer to do something The statements are executed from left to right in order The program stops after executing the last statement Output printf format expressions This is the only statement you need for now Prints output to destination usually window on the screen format is quoted string giving the desired form of the output expressions are the things to be printed If there are no expressions format is just constant string to be output	other	cornell
882	 Server Date Sunday GMT Thursday GMT PSSPD Parallel Solution of Sparse Symmetric Positive Definite Systems PSSPD Parallel Solution of Sparse Symmetric Positive Definite Systems is sparse matrix package for solving large sparse symmetric positive systems on machines This package is implemented in ANSI using arithmetic The Interface MPI is used for communication among processors PSSPD is parallel direct sparse solver It solves sparse symmetric positive system by computing the sparse Cholesky factorization where is permutation matrix PSSPD is designed to be run on all processors in communicator in parallel The sparse matrix and the right hand side vector are distributed among the processors in the communicator However PSSPD does assume any particular distribution of matrix or vector among the processors user guide to PSSPD is available here For further information regarding PSSPD please contact the author csun	other	cornell
883	 Date Mon Dec GMT Server Fri Feb GMT Lab CS Laboratory Phong Lighting Introduction In this exercise you will code the lighting equation as series of compute statements You will bypass the default illumination model which is built into the Image module By doing this you will be able to control lighting effects directly For example you will be able to define spotlight or make the intensity of an object drop off with distance Procedure First you need to download several example files To do this click on each of the filenames shown below When the text window opens use the save as option to put the file in your own directory Name each file with the same name as shown below The program implements spotlight entirely within DX using compute modules Ambient diffuse and specular terms are each computed and added together to obtain the intensity of each point Follow the flow of the program to see how the intensities are computed For the initial program it is assumed that the light is at finite distance from the objects but the viewer is very far away in direction Some examples of the program output are shown below The first shows spotlight oriented along the with width of width of means dot The small white dot is an icon showing where the light is The arrow is an icon showing the direction of the spotlight The next image is the same light position but with the spotlight so that the light is omnidirectional The bright spots on the surfaces near the light are due to large dot in the diffuse term Notice that the diffuse reflection has the color of the surface while the specular reflection has the color of the light white You can turn off the default shading in DX by collecting single AmbientLight with the object you are rendering An AmbientLight ingores normal information All you see is the color defined for the object as if it were lighted from all directions uniformly The example program constructs surface calculates the surface normals then throws away the lighting information to produce an unshaded surface because there is an AmbientLight module The colors you calculate become the color of the objects in the image module Note that you must use the module to show the image because the must be available to the program Do not use an Image this exercise leave the viewing distance at infinity that is leave the Camera module perspective flag at Modify the program to use the dot formulation of specular lighting rather than dot Make an interactor to choose which model you are using All surfaces get more shiny at high angle of incidence Modify the specular term to simulate this effect Below is an example of what the modified program might generate The specular reflection on the vertical plane is releatively diffuse because the angle of incidence is near zero The specular reflection from the horizontal plane is narrow because the angle of incidence is high the light is grazing the surface Clarification You need to make some part of the specular term dependent on the angle of incidence arccos dot The light shown is omnidirectional light The definition of the reflection vector is given on page of Watt The spotlight as given to you has soft cutoff with angle Modify the program so that instead of dropping off as power of cosine the intensity is uniform for angles less than certain value and zero for angles more than that value Angle is measured here from the vector Include an interactor to choose between the cutoff methods The two images below show soft cutoff spotlight and hard cutoff spotlight Note the jagginess at the edge of the hard cutoff light which results from very abrupt cutoff function Try to minimize the jagginess in your program Modify the program to fly the light through scene consisting of few objects The light should be spotlight which flys curved path with the direction of the spotlight tangent to the path for about half the flight then the spotlight should suddenly lock onto one object and remain locked for the second half of the flight One frame of possible animation is shown below Bugs as of The term Ip in the calculation of the specular term should be moved to the final calculation so that dot is calculated The Compute module does not understand transform objects so do use Rotate Scale Translate or Transform modules when you are building your scene Be prepared to demo all of the functions specified in the first three bullets above ambient lighting diffuse lighting light position light directionality and specular reflections of two kinds in one program All interactors should be labeled have appropriate ranges and step sizes and be in no more than two control panels The code should be well documented and organized Be prepared to demo the flying light in separate program What seem to be the differences between the dot and dot specular lighting models in terms of the appearance of objects Write the formula you used to make surface more shiny at high angles Write the formula you used to impelment sharp cutoff spotlight Back to Main Page Go to Lab Last modified Copyright Statement	other	cornell
884	 Server Date Sunday GMT Thursday GMT Huang Favori Links Page Favorite Links Formosa National Taiwan University Computer Science Information Engineering NTU The NTU CSIE WWW Site Taipei Municipal Chien Kuo Senior High School Cultural Division TECO in Houston Taiwan Indenpendence Party UFO News World China Times Taiwan China Times US Chinese Media Information Net Taiwan Chinese Web Home Page Sina Net Chinese Cyber City CNN New York Times USA Today Pictures Hacking Games American Go Association NNGS Home Page Yahoo Computer Games Page WWW Search Engines My Yahoo Yahoo Excite HotBot Lycos Inktomi Total Search Archie Request Form Investments Stocks Fidelity Investments Home Page My Friends Career Center Office of Academic Career Development Office National Association of Colleges and Employers JOBWEB Online Career Center Margaret Riley Internet Job Guide Academe This Week Trinity Partners TNL Internet Solutions Career Sites Asia Net Dream Jobs Map MapQuest Vicinity Corporation City Net Miscellaneous Cornell Library Cornell ISSO SCOLA Home Page Hits World Interactive nest egg Hello China Greyhound Internet Station Student Services fastWEB Financial Aid Search Through the Web Cascade Connections NCSA Home Page Weather Internet Flower Shop Taiwan Love Songs CUCS WWW Statistics Ithaca Internet Classifieds Ithaca MarketPlace Internet Shopping Network Computer Discount Warehouse AT Universal Card Services Universal Communications Network Video On Line Electronic Newsstand Homepage The Electric Postcard Study Aboard Electric Center ROT Last modified Thu Nov	other	cornell
885	 Server Date Monday GMT Tuesday GMT Distributed Systems Research links This page holds some links to other projects or research groups doing work related to the work going on in the Horus group We are aware that this is only very small subset of the actual work going on and apologize for all the omissions If you have link that you think should belong here please let us know Related projects at Cornell The Cluster Communication project Project Zeno and the Continuous Media Toolkit The NuPrl Automated Reasoning System Projects on reliable group communications in more or less alphabetic order Amoeba project at the Vrije Universiteit Amsterdam Mars project at the Technical Universiy of Vienna Navigators project at INESC Lisbon at the University of Newcastle UK Phoenix at EPFL Lausanne Rampart at AT Bell Labs Relacs at the University of Bologna RMP at the University of West Virginia The Team project at the University of California San Diego Totem at the University of California Santa Barbara Transis project at the Hebrew University Comments to Werner Vogels	other	cornell
886	 Server Date Sunday GMT Monday GMT Course Material Additional Course Material Java Textbook Title Java How to Program Authors Deitel and Deitel ISBN Publishers Cost Programs in this book are available at http and at http Other sources of Java programs http Java Virtual Machine detailed specification of the Java Virtual Machine can be found here JVM is stack machine unlike JRM which is register machine but you may find it fun to read parts of the spec of JVM	other	cornell
887	 Server Date Sunday GMT Tuesday GMT SUKHPAL SANGHERA other routes Sukhpal Sanghera Some Routes From My Home CAML Programming Language ML Programming Language Courses Spring Computer Science Technical Reports HTML NewsStand NILE Collaborative Project of Computer Scientists and Physicists in Distributed Computing Horus Group Communication System in Distributed Applications Frequently Asked Questions From Borland Computics and Physics Around the World Particle Data Group Jobs Much Music Paaaaaarty	other	cornell
888	 Server Date Sunday GMT Monday GMT Jean Aswin Swing Dance Page The Jean Aswin Swing Dance Page Upcoming Local Classes by Jean Aswin The Next West Coast Swing Party is on Saturday Nov The next parties are on Nov and Dec PM PM Intermediate WCS Workshop PM PM Dance Location The Greater Ithaca Activities Center GIAC Albany Street corner of Court Street great wood floor Location of the ISDN Record Hops is currently The GIAC Gym at Albany Street SW corner of Albany and Court enter on Court Start time is PM Shout Sister Shout Sequence from our current Intermediate series We teach West Coast Swing Lindy and Jitterbug Click here for information about our upcoming classes There are other teachers teaching Swing and Ballroom There is overview of upcoming classes including other teachers available Class Material Notes Some notes that we hand out to people taking our classes Other Links The Ithaca Swing Dance Network ISDN Home Page The US Swing Dance Server	other	cornell
889	 Server Date Sunday GMT Tuesday GMT Support for Complex Applications using the Horus system Next Introduction Support for Complex Applications using the Horus system Werner Vogels vogels Robbert van Renesse rvr Dept of Computer Science Cornell University Ithaca NY December Abstract distributed application involves more than just protocols for the dissemination of video and audio data As in any other distributed application protocols are necessary that guarantee the consistency and security of shared data objects The Horus system offers framework for building complex distributed systems that involve any number of protocols as well as variety of protocols for the different aspects of distributed application including some protocols specific to applications We believe that this integrated approach is superior to combining different toolkits and illustrate this with detailed example of an existing application Introduction Horus Horus and Conclusion and ongoing work References About this document Robbert VanRenesse Tue Dec EST	other	cornell
890	 Server Date Sunday GMT Thursday GMT Regular Language to SQL Query Translation Translation of Regular Questions into SQL Constructs COM Final Project Report Spring Alfred Hong May Table of Contents Problem Description General Approach Results and Evaluation Discussion Conclusion and References Problem Description Web sites today that provide query to backend database are done mostly via keyword or categorical search forms These search parameters are preselected and usually inhuman Since the query parameters are preselected the answers are fixed and static to the user Replacing these fixed query forms with natural language query could make things more human more natural and more flexible middleware mechanism that converts natural language question into the backend database language to perform the user query request might do the job Since relational databases are very popular SQL will be the target database language for conversion Table of Contents General Approach The approach in general involves Identifying target domain for testing of concepts Researching possible techniques for dealing with the problem Implementation using questions the author came up with Testing out implementations and Refinement and retesting Identifying Target Domain Natural language processing is difficult subject To tackle the focus of this project specific domain is chosen for ideas and The domain of querying for flight schedules is thus chosen Using sample schedule information from USAir flight schedule database the following relational database table definition and record shows the type of information that is dealt with FLTS toCity fromCity beginDate endDate leaveTime arriveTime flightNum frequency stops stopCities meals fare San Francisco CA Ithaca NY PHL With the domain specified certain assumptions are made to simplify the task of natural language question to SQL construct translation Focus on simple queries user usually do not ask complex SQL queries that involve not exists or groupings for instance Time and dates these need special treatment because of the variety and complexity of formats used Query against one database table only dealing with multiple tables is complex task because of ambiguity resolution difficulties with table joins Punctuations not dealt with One sentence questions only Techniques Researched Several possible to tackle the problem were looked at GAP and semantic features with semantic features Procedural semantics and question answering conversational agents Information retrieval concepts and Template matching Of these techniques although some tests were initially done with using and GAP features not with flight schedules the extra and GAP features are really not necessary for the problem Simple with semantic features suffice The idea of using some combination of question answering conversational agents information retrieval concepts and template matching came about from the realization that the number of synonyms and phrasings possible for asking for flight schedule is actually quite diverse requiring rather large lexicon for small domain Table of Contents Results and Evaluation with Semantic Features Because of the nice structured format of SQL queries flight schedule questions can be directly mapped to that of parts of SQL queries As shown in Table for San Francisco can be mapped to the WHERE destCity San Francisco construct and for May can be mapped to the WHERE departDate construct Table Translation Mapping for the Sentence What flights are available for San Francisco from Ithaca for May SentenceSQL What flights are availableSELECT flights FROM schedules for San FranciscoWHERE destCity San Francisco AND from IthacadepartCity Ithaca AND for May The following is the result from parsing the sentence What are the departure times for houston tomorrow SELECT TIME DEPART TOMORROW IAH from to Sample questions for testing were solicited from users given that they need to purchase ticket to San Francisco tomorrow from Ithaca The following are example questions What are the available arrival times for Miami for tomorrow What are the departure times for Houston for tomorrow How many stops are there to San Francisco for flight When does flight arrive in Orlando today What is the cheapest flight available to San Francisco tomorrow Can you book me the cheapest flight can take to San Francisco tomorrow Do need to stay Saturday night to get the lowest fares How many flights do you have available going to San Francisco tomorrow Can you check tomorrow flight schedule to San Francisco for me need to fly to San Francisco tomorrow Is there any flights available Question types can be parsed but not the others for reasons mainly of not anticipating certain words and different sentential structures For results see the results documentation and code As note questions and involve the realization that the cheap concept means SELECT MIN FARE operation is needed Question is type question Question involves COUNT operation and question has sentences that violates the defined assumptions Question Answering Conversational Agents Information Retrieval Template Matching The results of the method could be improved with further refinement as sentential constructs are discovered This is not ideal however which motivates the search for other means of tackling the problem Questions are often asked in bits and pieces this is quite true for querying flight schedules This requires the flight schedule answering system to be aware of what has been asked in session then results can be further refined by the user with several questions Viewed in this way multiple sentences would not be major problem since it is allowed Even though the number of synonyms required are quite large lexicon need to exhaustively cover all possibilities that the user may present to the system For example flight flight schedule schedule reservation refer to the same thing other inferences are possible through other combinations of words with helper words and different word arrangements For instance to go to miami in the context of flight schedules implies flying to miami To parse all possible combinations of questions also require large number of rules The sentences need to fly to San Francisco tomorrow Is there any flight available and the sentence Is there any flight available to San Francisco tomorrow are the same queries Notice however that key phrases are the same to San Francisco tomorrow and any flight The idea is that if these can be identified then maybe sentence boundaries and syntactic structure are not as important and the lexicon need to concentrate only on key Fig Interface of Flight Schedule Query Application To test the idea out application has been written Fig As shown there are several parts to the interface The user inputs queries clicks on the Analyze button and key are extracted from the input and stored Extraction of key concepts is done by regular expression matching with lexicon that ignores irrelevant words akin to in information extraction in the context of flight schedule query In the figure the history text box shows that the concepts flights atlanta and tomorrow are extracted from the sentence which is shown directly under the line Actually the extraction of to atlanta instead of just atlanta would be better for indicating atlanta as destination city is followup question that requests for flights to houston instead The extracted information then is used to do template matching to SQL syntax this has not been implemented yet The user can input successively to refine or change their queries until the Reset button is chosen to restart new session Using also makes it easy to interface to Web page with backend relational database engine Evaluation of this application can not be done since it has not been completely developed yet However the pattern matching and key concept extraction component certainly show promise at this point Thus with combination of question answering conversational agents information retrieval and template matching techniques maybe the flight schedule query problem can be dealt with feasibly Table of Contents Discussion Conclusion and Future There are other problems that were overlooked What if the user mistype their questions What if the user does not follow correct English grammar rules In this case current methods of query on the Web are definitely at an advantage Then again these Web sites are limited and return relatively large sets of data that require further interpretation on the part of the user In general natural language processing is difficult subject Even with specific domain chosen problems are abound In terms of the method if lexicon that deals with all possible flight schedule scenarios is used dates times and flight numbers are given special identification parameters city names with multiple words are given special treatment and grammar rules are refined by repeated testing then query system could be possible However even if the sentences could be parsed the parsed result can not be used readily integrating such system with web is not straightforward because of the resident LISP used for the Even if it is done it is rather resource intensive This led to researching other possible ways to make it more feasible Hopefully the alternative method embodied by the application as discussed in the previous section will prove to be promising Future Work Interface LISP and the to web page Continue work on application over the summer Table of Contents References Allen James Natural Language Understanding ed Redwood City CA Almasi et al Technology to Make Information Available on the Web In Proceedings of the Fourth Workshop on Enabling Technologies Infrastructure for Collaborative Enterprises WET ICE Apr Berkeley Springs West Virginia IEEE Computer Society Press Los Alamitos CA pp Table of Contents	other	cornell
891	 Server Date Sunday GMT Friday GMT publishing with the World Wide Web publishing with the World Wide Web Jim Davis and Carl Lagoze Xerox and Cornell University Abstract The goal of publishing is to simplify digital publishing over the Internet We would like digital publishing of matter technical reports course notes brochures be as easy as sending email is now but with the virtues of archival storage and easy searching that we associate with electronic libraries We propose protocol Dienst to allow communication between clients and document servers by encoding messages within URL preliminary version of this protocol now runs at eight sites and we describe some of its features Next we present tools for automating the maintenance of document collections Finally we discuss the problems had with the Web as it stands hoping to motivate changes that would improve performance of digital library systems such as ours library with no limits However one may sing the praises of those who by their virtue either defend or increase the glory of their country their actions only affect worldly prosperity and within narrow limits but Aldus is building up library which has no other limits than the world itself Desiderius Erasmus wrote these words in praise of his friend Aldus book publisher of the century More than years later digital publishing may finally enable us to fulfill this vision providing universal access to all the world information What in the way The existing technologies WWW gopher and even anonymous FTP make reproduction and transmission fairly fast and cheap but do little or nothing to help writers write or readers find or read documents In our view the problem is that they provide too little structure to the document collection All of them present basically the same abstraction namely hierarchy of files but do nothing to help the user locate file within hierarchy Every site is different Some group reports by year others by project name but even if every site on the Internet organized its hierarchy identically it would not be enough because every site also has its own conventions for naming files indicating data formats and making searchable indices writer who wishes to contribute has basically the same problem easy to copy file into an anonymous FTP area but hard to make sure that it indexed properly considerate writer might want to provide the same document in several formats to increase the chances of accessibility but this is nuisance We claim what needed is new higher level protocol that hides the underlying details and the underlying tools to simply library management This paper presents our first steps towards the universal library We describe protocol for universal access and the server that implements it For those familiar with our server in this paper we describe not the currently running protocol but rather the one we have submitted as an Internet Draft DIENSTPROT which corrects number of design flaws in the working version We regret any confusion this causes We present number of tools that integrate with our server to make publishing document relatively easy We also discuss the steps we took to bring large existing collection online from paper Finally since our protocol is based on the World Wide Web we also describe some of the problems we observed in using it in the hope that others at this conference will have solutions we can adopt Our focus on publishing requires explanation We realize that some content providers will not place their intellectual property on the net until clear definitions of legal rights and mechanisms for payment and protection are in place We have nothing to contribute in these areas Nevertheless there are number of providers such as universities or corporate internal groups for whom these issues are less pressing and we believe that we can thus make some useful contribution without working on the additional issues raised by economics Dienst provides uniform protocol for document access Dienst is protocol for search retrieval and display of documents Dienst models the digital library as flat set of documents each of which has unique name can be in many formats TIFF GIF Postscript and consists of set of named parts Dienst supports interface to this document model Messages may be addressed to every document server to particular server to one document or to particular part of document message is encoded into the path portion of URL and contains the name of the message the recipient and the arguments if any message may be sent to any convenient Dienst server the nearest for example which will execute it locally if or forward it as appropriate Dienst appears to be single virtual document collection and hides the details of the server distribution Note that the actual implementation does not use an object oriented language we use message passing only as convenient conceptual model Each document in Dienst has unique identifier which names each document in manner This identifier called DocID serves exactly the same role as URN and when URNs are fully specified we will adopt them DocId has three components naming convention publisher and number To ensure that each DocID is unique each component or rather the institution that issues each component guarantees that the next component is unique thus each naming convention controls namespace of publishers and each publisher issues set of numbers For each publisher there must be at least one server to handle messages for the documents issued by that publisher In our view the minimum commitment publisher must make to issue document is to store and deliver the document to the network When Dienst server receives message for document it locates the closest server for the document publisher and forwards the message to it Dienst messages address four types of digital library services user interface services which present library information in format designed for human readability repository services which store the document and support retrieval of all or part index services which provide search and miscellaneous services which provide general information about server Of these four services only the first is used directly by human The others used by programs in particular other Dienst servers but also by other digital library or publishing systems For example the Stanford Information Filtering Tool SIFT obtains bibliographic records through the index interface and we are currently designing gateway to the WATERS WATERS system We encourage other developers of digital library systems to provide both and to their systems All services except the last are optional at given site This allows maximal flexibility in the way that particular server implementations interoperate For example one server may exist solely as user interface gateway providing transparent access for users to particular domain of indexes and repositories We see this flexible interoperability as key to the development of digital library infrastructure where the collection will span multiple sites and continents Repository servers store documents in multiple formats key difference between Dienst and other current digital library systems is its ability to represent documents in multiple formats Most current digital libraries present documents in exactly one form PostScript Although PostScript is almost always available for newly produced documents there are problems with relying on it to the exclusion of all other formats First most older works are only available in paper making scanned page images the only practical means of bringing the material online We describe our experiences in doing that below Second looking forward we can expect to see other document representations become popular Surely at World Wide Web conference we can claim that HTML will be used third reason is that for some applications other formats are just better For example if one wishes to do full text indexing on document collection the plain text is more useful than the PostScript file and if one wishes to display just single page collection of page images may be better than searching through PostScript Therefore Dienst conceptual data model allows each document to be stored in one or more formats The Dienst protocol includes message that requests document for list of formats in which it is available We specify formats with MIME MIME Dienst does not support the notion of explicit conversion between document formats as does System Putz repository willing and able to provide document in given format should simply list that format even if it is only obtained through conversion service Diversity is the rule on the Internet and each site supporting Dienst is likely to store their documents in different way The Dienst protocol hides all detail of the underlying storage organization this is in sharp contrast to FTP Gopher and bare HTTP where the underlying hierarchy is visible Each Dienst repository includes function which maps from DocID and format to the actual storage pathname on that server This hides both details of file system structure and file typing or naming conventions from outside users Thus one may request say the second page of the TIFF version of document from server without needing to know where and how it is stored Index servers support search An index server accepts queries in some query language and searches for document records that satisfy the query In our model an index server is totally distinct from repository Repository data is likely to be huge but index servers store only which is quite modest in size The choice of query language is crucial to the power of an index server As we did not wish to make this choice the Dienst protocol is designed with one initial query language and provision for extension to support others Every query language is based on an underlying model for the meta data it queries The initial query language in Dienst assumes minimal data model where documents have an author title and abstract in addition to the publisher and number query may refer to any of these fields if it refers to more than one then the terms are connected with an implicit and Thus one might query for all documents published by author Wilson at publisher Stanford search request returns document of type consisting of records containing on all the matching documents This follows the encoding proposed for Uniform Resource Characteristics URC URC The URC draft proposes fields such as title author and and URL all of which which are obviously applicable we have added number of experimental attributes prototype implementation runs at eight sites An initial version of Dienst and prototype implementation were developed as part of the Computer Science Technical Report CSTR project an effort to create an online digital library of technical reports from the nation top computer science universities This version was installed at the five universities that form the project Cornell CMU Berkeley MIT and Stanford and shortly thereafter at Princeton Dartmouth and Rochester Here we describe few of its features full account may be found in Dienst One uses Dienst by connecting to any convenient Dienst server that supports the user interface services using standard Web client This server will display form for searching the collection Unless the user restricts the search to single publisher all Dienst servers are searched in parallel Each Dienst server is made aware of all other Dienst servers by fetching list of all servers from single central Thus when new server comes online other servers become aware of it after only short time The results from search are displayed as list of the DocID author title and date for each matching document and include URL for each document Selecting one displays the document in more detail including list of the available formats obtained as described above The user can retrieve the document in any of the formats Some repositories include page images as dot per inch GIF files When this is the case the user interface service is able to display the document page at time inline on the user Web client We found that such pages are readable on most monitors and saves considerable network bandwidth compared to the dpi TIFF images In addition some sites also store reduced size thumbnail page images which allow the user to quickly browse through document and then click to view interesting page say one that contains graphic in version Although we do not have any formal user studies anecdotal evidence says that this is very powerful and helpful feature The server also allows the user to download print all or selected pages of the document Local users may print directly while remote users can download PostScript version of the document and then print it manually Since all documents are not available in PostScript the server has the ability to translate from TIFF images to level PostScript on the fly Maintaining the Document Collection Our goal is to simplify the process by which an author publishes digital documents Much of the work in this area is at the document creation layer that is enhancements to HTML HTML editors Our approach is to allow authors to use their traditional text production system LaTeX troff Word etc and then provide tools by which they can submit the results of that text processing to digital library Dienst simplifies digital library maintenance Digital library technology will only propagate beyond the technologically savvy if such systems require minimal human intervention especially by trained experts Two points are obvious First authors are concerned primarily with writing documents and getting them published Submission to digital library should require little more skill than using word processor Second many of the organizations that wish to publish documents government agencies academic departments small companies have little technical expertise These organizations might tolerate the need for reasonable skill level to install digital library system we intend to address the skill level required to install the digital library system in future work However they surely will not tolerate the cost of systems expert to maintain the library At Cornell we have implemented set of tools that mostly automate the process of managing digital library The tools are closely integrated with the Dienst digital library server They are similar in spirit to those implemented for the Wide Area Technical Report Server WATERS system known as Techrep but whereas Techrep is designed to maintain the centralized index and unstructured document repository that is characteristic of WATERS the tools described here are tailored for the distributed indexes and structured repositories characteristic of Dienst Our design goal was to make the digital library maintainable by document librarian DL with relatively computer training This DL serves four major roles as the general manager of the collection as the reviewer of document submissions to protect against counterfeit document submissions as the clearing house for copyright issues and as the archiver of document hardcopy This system has recently been installed in the Cornell Computer Science Department and is now the means for all technical report submissions Authors add documents with an HTML form The submitter prepares document for submission by producing PostScript representation Rather than plethora of document formats from variety of word processors we determined that PostScript represents lingua franca that could be generated from virtually all word or text processing systems We recognize that there will be documents that can not be represented in this fashion but estimate that there number will be very few and that techniques for managing them can be developed as the process matures The author submits document by completing an HTML form that contains text fields for bibliographic data about the document These fields are the document title author pathname of the PostScript file abstract and submitter address The submitter can quickly complete this form by cutting and pasting text from the document source The document librarian validates submissions to the library The document librarian in the role of gatekeeper of the system learns of each submission through an automatically generated message No document actually enters the database until the DL manually checks the submission In addition the DL acts as the legal gateway ensuring that the authors complete copyright release form that gives the department permission to make the document available over the internet When manual checking and copyright clearing are complete the DL uses simple command to assign DocID to the document and signal that the document is ready entry into the database The remainder of the process is fully automated Software that is integrated with the digital library server generates the bibliographic entry from the submitter entry checks the validity of the postscript file builds the actual database entry and generates the GIF images for online viewing and browsing of the document The image conversions in this process are done with the Extended Portable Bitmap Toolkit PBMPLUS PBMPLUS consists of number of filters for conversion between variety of image formats TIFF GIF Bitmaps etc and small set of portable formats and set of tools to perform manipulations rotations color transformation scaling on the portable format files PBMPLUS has the advantages of being free quite reliable usable on wide variety of graphical formats and quite powerful in its basic image manipulating capabilities Document librarian controls document withdrawal library system must be able to handle author requests for document withdrawal The reason for withdrawal may be invalidation of the published research or newly published results in another document For purposes of maintaining the integrity of collection we have made the document librarian the control point for this operation Document withdrawal via simple command replaces the bibliographic file with an entry whose only attributes are the document number and WITHDRAWN flag all other bibliographic information is deleted This ensures that the DocID is not reused for another document Furthermore the withdrawal moves the original bibliographic file and associated image and postscript files to location that is not accessible to the document server Hardcopy is sometimes required While electronic document delivery is the raison of our system we recognize that publication quality hardcopy is sometimes needed The document librarian must produce paper copy for archival storage and for people who do not have electronic access In our system printing of TR is done using package provided by Cornell Information Technologies called EZPUB allows users across campus on various platforms to print to central Xerox DocuTech publishing system This is publication quality printer that offers very and resolution dpi and document setup facilities such as binding different paper types etc With command in the Dienst document management suite the DL can specify that multiple copies of TR be printed on the DocuTech The command does automatic setup of the print job including formatting of standard Cornell Technical Report cover page We have just begun to use this automated system in the Computer Science department at Cornell At later time we will evaluate the effectiveness of the system with special attention payed to the number of documents that require special submission procedure are not translatable to postscript Obviously if the ratio of these is high to the number submitted documents we need to rethink the design of the system Digitizing existing documents is mostly manual task We describe above system for almost complete automation of the document submission process At Cornell we faced the additional task of converting an existing collection to digital form While some of the tools described above were useful for this task large amount of manual intervention was required The Cornell Computer Science Department has been publishing technical reports since As of September the department had published TR with an average length of pages total of over pages The digital record for many of these TR is either not easily available or in format that is difficult to interpret with current hardware and software for example document formatted in an extinct copy of WordStar that is only available on floppies for CPM system The common form that exists for all existing documents is hardcopy the department maintains archival copies of the entire TR corpus production scanning facility on campus allowed the department to convert the entire corpus to group TIFF images Over nine month period all hardcopy pages were scanned to individual TIFF files and downloaded via FTP to disk in the Computer Science Department Each TIFF file ranges in size from around one kilobyte for blank page to almost two megabytes for page that contains high quality photographic image The total collection of pages images now occupies around gigabytes It should be noted that scanning collection even as modest as the Cornell CS TR is time consuming labor intensive and not without problems Even the most careful scanning technician occasionally misses pages skews pages or misses part of page due to unnoticed fold when the page is put on the scanner bed These problems are difficult if not impossible to detect automatically In addition any problems that are detected are computationally intensive to correct For example simple rotation of dpi TIFF image due to incorrect scanning orientation can take up to thirty minutes on reasonably equipped SPARCstation An example illustrates the difficulty of correcting scanning problems We discovered after all scanning was complete that many of our older TR were scanned from pages that were oriented in landscape mode two pages The result was TIFF file containing two page images which made correct page mapping impossible in the document server While it was easy to find files with this problem by reading the height and width from the TIFF header with publically available TIFF package Leffler reasonably quick correction required handcrafting to split the files Even with the handcrafted code the location and correction process took over week of compute time on powerful workstation In addition to manual scanning of documents we also had to manually enter the bibliographic files While it would have been easy to write translators between and other common bibliographic formats such as BibTex refer etc consistent electronic bibliographic format was not available for all the TR The Web is an imperfect document viewing technology Basing our system on the World Wide has had both benefits and shortcomings The obvious benefit is wide availability over publically available browsers The shortcoming is that HTML HTTP and Web browsers lack number of features important for digital document display and navigation In this section we enumerate these features with the goal of inspiring discussion and enhancement of the technologies by the Web community Facilities for display of compound documents The Web has insufficient mechanisms for displaying documents that consist of multiple textual and parts In the electronic mail world this issue is addressed by MIME Multipurpose Internet Mail Extensions MIME Although HTTP uses MIME typing to allow browsers to map to the proper viewer for document documents are allowed to have only single MIME type multipart MIME is not one of them The only facility for documents is the ability to embed images either GIF or Bitmap in an HTML document Yet there are gross inefficiency problems with image embedding since the HTTP browser must initiate an HTTP GET message for each embedded image For document with many embedded images this can lead to unacceptable document download times Furthermore there are other types that one might like to embed in documents for example MPEG clips Ability to display TIFF images Among the many digital image formats GIF JPEG PBM etc TIFF is the most flexible and extensible The TIFF specification is constantly evolving with the latest being Revision finalized in TIFF The most significant evolution from the standpoint of reducing network bandwidth in image transfers is the growing number of compression schemes for TIFF images The ability to display TIFF images in HTML documents would take full advantage of this rich image standard and permit immediate display of images produced by scanners fax machines and most paint and programs without computationally expensive conversion to GIF format Arbitrary rectangle section from the client Viewing of document images on the Web would be greatly enhanced if the user of client were able to select across an arbitrary rectangle in the image and transmit the selected coordinates back to the server The server could then retransmit zoomed image of the selected image if the higher resolution were available which it often is in high resolution TIFF image Image zooming is an important feature when the image being viewed is document page that contains figures or tables with small fonts Client feedback on display capabilities main contribution of Dienst is that it supports the notion of multiple formats for the same document The user can select among the available formats and use the view appropriate for that format We would prefer to at the server end chose the best format to display on the respective client This would be possible if the client HTTP request contained information on the display capabilities of the client system especially display depth and size Authentication The ability to restrict who is able to access document is an essential feature of production digital library While our system is intended for publishing limiting access is required even in this domain say for example documents that should only be read by members of campus community or employees of corporation To do this we require that server be able to guarantee the identity of those making protocol requests Summary We have described system Dienst that simplifies document publishing on the Internet This system makes two important contributions First Dienst provides uniform protocol for search retrieval and display of documents This protocol addresses flexible document model where each document has unique name can be in multiple formats and consists of set of named parts These parts can be physical such as pages or logical such as chapters and tables In addition the protocol allows full interoperability between distributed digital library servers The result is that the user sees single virtual document collection Second Dienst provides set of tools that permit easy management of digital library These tools automate document submission permit document librarian to manage the collection and facilitate the production of archival hardcopy We plan over the next year to build on this technology in number of ways Installation of the digital library server is too difficult We intend to implement tools that will the server The search engine in the current implementation is primitive We intend to include more advanced search engines for example search to make document discovery in collection more powerful and easier The current strategy of conducting parallel search over all servers does not scale over very large number of servers We intend to use about individual document servers to improve the search strategy With this facility one could for example choose to search only those libraries that have high probability of containing computer science documents We plan to examine and possibility incorporate current work on copyright servers so Dienst might be used for commercial documents Finally we hope to use some of the current work in identifiers to refine the method by which documents on the net are addressed in Dienst Acknowledgements This work was supported in part by the Advanced Research Projects Agency under Grant No with the Corporation for National Research Initiatives CNRI Its content does not necessarily reflect the position or the policy of the Government or CNRI and no official endorsement should be inferred This work was done at the Design Research Institute collaboration of Xerox Corporation and Cornell University and at the Computer Science Department at Cornell University References Cohen Danny Cohen Format for Bibliographic Records Dienst James Davis Carl Lagoze protocol and server for distributed digital technical report library Cornell University Computer Science Department Technical Report June DIENSTPROT James Davis Carl Lagoze Dienst Protocol for Distributed Digital Document Library Internet Draft EZPUB Cornell Information Technologies How to Use and the Docutech Printer at Cornell Information Technologies November Leffler Sam Leffler Public TIFF package Available via ftp from MIME Nathaniel Borenstein Ned Freed MIME Multipurpose Internet Mail Extensions PBMPLUS Jef Poskanzer Extended Portable Bitmap Toolkit Available from many anonymous FTP sites including Putz Steve Putz Design and Implementation of the System Document Service Xerox PARC SIFT Online service at http TIFF Aldus Corporation TIFF Revision Specification URC Michael Mealling Encoding and Use of Uniform Resource Characteristics Internet Draft WATERS Kurt Maly Edward Fox James French and Alan Selman Wide Area Technical Report Server Published online in http Biographies Jim Davis works for Xerox at the Design Research Institute consortium at Cornell University which which seeks ways to improve the engineering design process He received PhD in from MIT Media Technology Laboratory His thesis the Back Seat Driver was computer program which provided spoken driving instructions to the operator of car in Prior to that he worked in research and development at number of places including Atari Cambridge Research Laboratory At the DRI he works on developing electronic corporate memory His most recent project is system for shared group annotation using the World Wide Web He also plays electric bass and is learning Dutch Carl Lagoze works for the Computer Science Department at Cornell University as Senior Software Engineer in the CSTR project He received Master of Software Engineering from the Wang Institute of Graduate Studies in After receiving his degree he worked in both academia and the commercial world developing tools for the generation of editors Over the past two years he has discovered the joys of digital libraries and the fascinating world of information capture and access From the view of his friends he is doing something on that information superhighway Lagoze is also the proud parent of the cutest baby ever and an avid cyclist and canoeist contact author davis	other	cornell
892	 Server Date Sunday GMT Wednesday GMT Class List Fudan Classmate List Picture of the Class China Section Huang XuanJing Ye DanJin csli Zhao Jie hkcc Bao Lu lbao Mao DiLin dlmao Wu ChengRong cwu Ye XiaoMeng sherman Lin Li ssysc Zhao Bin ssysc Hua LiXin Shanghai People Insurance Company Pudong Branch Fan Lei fanshi Zhang Yiming wind Huang Bangyu ben ben Current Wang Haibo wang Chen Ying Xie Jie bullsha Liu Jun stefan Lee liyege yglee Wang Ji wj Xu JunJie jimmyxu Wu XueBo Hua YiXing Ask ChengRong Wu Shen Yu asunaro Li Shen Computer department Bank of Communication Head Office Xian Xia Road Shanghai Japan Section Zhang YiQiang Henry henry Address NANAKUBO JAPAN Tel home Fax home henry Tel office Fax office Singapore Section Zhang XiaDong zhangxd Fan Shiqing sqfan Zhu Chang Ask Shiqi Fan USA Section Wu JianMing SLC UT Tel jwu Jiang Nan njiang Zhang LiXin MEB CS dept Univ of Utah UT lizhang Du Fan dufan Lin Ling llin Zhou Yi Tan Lei Raymond lei raymondt Tang WeiYu wtang Wang HaiHong whh Song SunTian eagles esong Yan Zhimei mayy Cheng Xun Home Santa Ynez Apt El Colegio Goleta CA Home Ph Birthday or Office Ph xun Xiang YuanYuan yuanyuan Guo HaiYing hguo Jin Jing jing Ye Yan yye Address Henderson St Apt Bloomington IN Phone Yu Yingjun Zhou LiDong ldzhou send mail to all Last updated on Please send comment report changes to ldzhou	other	cornell
893	 Server Date Sunday GMT Thursday GMT Cornell Info sites Cornell Info links Cornell CS Technical Reports CUINFO Cornell Gopher Directions to and from Cornell Cornell Directory Cornell Staff Directory Cornell Student Directory Courses Classes Exams Cornell Calendar Cornell Arts Music Bailey Hall Concerts Cornell Musical Events Ithaca Weather Forecast World News Briefs USA Weather Map Beginner Guide to HTML	other	cornell
894	 Server Date Sunday GMT Friday GMT Resume Front Page Yoosun Resume Cover Page Resume	other	cornell
895	 Server Date Sunday GMT Saturday GMT The Real Anindya What Anindya really looks like am the guy on the left cool Back to Anindya Homepage Back to Cornell Computer Science Homepage	other	cornell
896	 Server Date Sunday GMT Sunday GMT Kolla so called friends If your name is not here and you think you are my friend please feel free to inform me Sorry for that My friends Maybe not Krothapally Sudha Doppalapudi Ravi Kiran Maddiptla Adarsh Tummala Sudheer Chaparala Sandeep Kalari Parichai Aerrabaotu Rajashekar Pavuluri Kiran Kumar Seelam Rajashekhar Reddy Joseph Basani Kura Devender Galla Narsimha Rao Tattukulla Bhramaramba Kallem Murali Gudipalli Sugadeesh Kadapa Vijay Kumar Pasha Abdul Hadi Gouse Rajeev Nagabhrava Prashant Reddy Damalaceruvu Amith Yamasani Avinash Gupta Kartik Kapadia Hrishikesh Dixit Vadi Praveen Kumar Ahuja Vineet Balaji Iyer Joseph Mathews Pinisetti Nitish Pinisetti Nandita Narayanan Arvind	other	cornell
897	 Server Date Monday GMT Wednesday GMT General Information	other	cornell
898	 Server Date Sunday GMT Monday GMT Jon hotlist Selections from my hotlist Politics Welcome to the White House National Performance Review Home Page Government Politics Central Intelligence Agency Home Page The Department of the Treasury Internal Revenue Service Constitution Table of Articles Commercial CD Connection Commercial Services on the Net Mother Jones CyberDeals Ordering Info Internet Shopping Network PERIPHERAL PRO Global Electronic Marketing Service Internet Mall Reference Reference Reference Works Index to Multimedia Information Sources The Jargon File Hypertext Webster Interface Computing Linux Documentation Project The Python Programming Language League for Programming Freedom Resources The tcsh man page Miscellaneous Xerox PARC PubWeb Server Welcome to Danfuzz World World Wide Web of Sports CYBERSIGHT Carnegie Mellon University CALIFORNIA Banned Books Netsurfer Digest Home Page The Beer Page	other	cornell
899	 Server Date Monday GMT Saturday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
900	 Date Mon Dec GMT Server COMPUTER SCIENCE COURSE DESCRIPTIONS COMPUTER SCIENCE DESCRIPTIONS OF COURSES Note Courses in brackets are not offered this year The Department of Computer Science is part of both the College of Arts and Sciences and the College of Engineering COM Fundamental Programming Concepts COM Introduction to Computer Programming COM Introduction to Computer Programming COM Introduction to Computer Programming COM The Computer Age also ENGRG COM Creating Web Documents COM Computers and Programming also ENGRD COM Structure and Interpretation of Computer Programs also ENGRD COM Taste of UNIX and COM Introduction to Scientific Computation also ENGRD COM Discrete Structures COM Introduction to Digital Systems and Computer Organization COM Introduction to Theory of Computing COM The Science of Programming COM Programming Languages and Software Engineering COM Data Structures COM Programming Languages and Logics COM Introduction to Compilers and Translators COM Practicum in Compilers and Translators COM Systems Programming and Operating Systems COM Practicum in Operating Systems COM Computer Graphics and Visualization also ARCH COM Practicum in Computer Graphics also ARCH COM Numerical Analysis COM Parallel Computing for Scientific Problems COM Introduction to Database Systems COM Practicum in Database Systems COM Distributed Systems and Algorithms COM Robotics and Machine Vision COM Robotics and Machine Vision Lab COM Foundations of Artificial Intelligence COM Practicum in Artificial Intelligence COM Introduction to Theory of Computing COM Introduction to Analysis of Algorithms COM Applied Logic also Mathematics COM Independent Reading and Research COM Programming Languages and Software Engineering COM Modern Programming Languages COM Practical in Distributed Systems COM Practicum in Distributed Systems COM Computer Architecture COM Parallel Computing for Scientific Problems COM Robotics and Machine Vision COM Robotics and Machine Vision Lab COM Introduction to Automated Reasoning COM System Concepts COM Advanced Programming Languages COM Compiler Design for Architectures COM Concurrent Programming COM Advanced Systems COM Theory of Concurrent Systems COM Frontiers of Parallel Computer Systems COM Topics in the Theory of Distributed Systems COM Matrix Computations COM Numerical Optimization and Nonlinear Algebraic Equations COM Numerical Solution of Differential Equations COM Multimedia Systems COM Robotics COM Robotics Laboratory COM Machine Vision COM Natural Language Processing COM Reasoning about Knowledge COM Reasoning about Uncertainty COM Analysis of Algorithms COM Theory of Computing COM Introduction to Symbolic Computation COM Computational Geometry COM Computer Science Colloquium COM Seminar in Systems and Methodology COM Seminar in Programming Refinement Logics COM Topics in Parallel Architectures COM Topics in Computer Graphics COM Seminar in Programming Languages COM Topics in Numerical Analysis COM Seminar in Numerical COM Seminar in Distributed Systems COM Seminar in Natural Language Understanding COM Dynamic Manipulation and Scientific Computation COM Robot Cafe COM Proseminar in Cognitive Studies II also Cognitive Studies Philosophy Linguistics and Psychology COM Seminar in Natural Language Understanding COM Seminar in Computational Algebra COM Seminar in Theory of Algorithms and Computing COM Special Investigations in Computer Science COM Special Investigations in Computer Science COM Special Investigations in Computer Science Search the Courses of Study Go to College of Engineering Course Descriptions page Go to Courses of Study home page Write to with your comments and suggestions	other	cornell
901	 WWW Alert Redirection response from server is not handled by this client Date Mon Feb GMT Server Location http Document moved Document moved This document has moved here	other	cornell
902	 Server Date Sunday GMT Thursday GMT Home Message of the Week As of Hope you guys had fun solving those word problems probably about as much fun as had grading them Next up is prelim good we in the home stretch Course Description CS is credit course that introduces fundamental computer programming and concepts Programming projects are written in the programming language Some assignments will also use Matlab CS assumes no prior knowledge of computing and has no prerequisite computer science courses However majority of the students in recent years have had some programming experience prior to taking The course may be taken for letter grade or if your college or program advisor allows it General Information CS Instructors Tim Teitelbaum Upson Mike Godrey Upson Office Hours Tu Th Hal Perkins Upson Office Hours Th Todd Wilson Upson Office Hours Tu Teaching Assistants All ocnsulting hours in Upson Andrew Chew Upson achew hours open by appt Patrick White Upson white hours open by appt David Wu Upson Usually in office TR hours open knock on Upson first by appt dwu Course Administrator Laurie Buck Upson Office Hours pm and See Laurie to take care ofadministrative problems not related to the technical content of the course including scheduling conflicts for exams and errors in posted grades Undergraduate Office Upson Open Tutoring All tutoring by TA will be out of Upson Call or visit the Undergraduate Office to sign up for tutoring appointments if you are having trouble with the course You must sign up at least hours in advance If you need to cancel an appointment you must call the Undergraduate Office in advance If you miss two tutoring appointments without calling to cancel you will not be given further appointments Lectures Lectures for and meet at the same times The first five lectures August through September for both and will meet in Olin at and Beginning Tuesday September lectures for CS and CS will meet separately Lecture section numbers times and rooms are as follows Lectures CS Sections CS Sections DayTimeRoom meeting at on Tuesday has been canceled If you are registered for that section you should attend section instead Sections are required part of the course used to clarify topics covered in lecture discuss programming problems and work additional problems and exercises Graded programs and exams are returned in sections and sample solutions and practice exams are handed out there All sections for CS each week will cover the same topics However there will be some variations in problems and exercises depending on the instructor and the interests of the students in each section Computing Facilities Programming assignments will use Metrowerks CodeWarrior programming environment on Macintosh computers The computer room in the basement of Carpenter Hall is the primary lab for CS CS students have priority in this lab and this is where you will find CS consultants extra copies of handouts unclaimed work and posted announcements and grades There are around Macintosh IIci computers in the Carpenter lab each with of main memory and MB hard disk running Apple System The Carpenter lab is open when the Engineering library is Normal hours are Sat Sun Hours will be restricted during vacations and university holidays Although Carpenter is the primary lab for CS CodeWarrior is available on all of CIT public Macintoshes that have enough disk space and RAM to support it During peak periods you may want to use machine at another location to avoid long lines in Carpenter No food or drink is allowed in the computer labs Please keep the area clean and recycle Consultants On duty in the Carpenter Hall basement daily and most evenings starting The exact schedule will be announced in class and posted in Carpenter Consultants will Help you find program errors Consultants will not fix your programs for you they will suggest how you can find errors and fix them yourself Receive assignments Return prelims and programs that were not picked up in sections Bring you ID card with you when you pick up an exam Receive regrade requests Provide tutoring but only during slack periods Texts and Other Materials Text The Art and Science of by Eric Roberts recommended Getting Started with Matlab by Rudra Pratap optional The readings listed in the syllabi are suggested readings to help you follow the lectures and section material Exams in CS are not based on the reading list they are based on material covered in lectures sections and assignments You are not responsible for material in the book that is not covered in class Handouts Distributed in class limited of extra copies will be available in Carpenter Communications Announcements are posted on the bulletin board to your right as you enter the Carpenter lab and are on the newsgroups Software Cornell Information Technologies CIT provides Metrowerks CodeWarrior and Matlab on all of its public Macintosh computers To access Matlab you will be given user name and password all students in CS use the same user name and password Do not give this password to others Do not forget the password The course staff has been instructed not to give the password to anyone If you forget it you will have to see your instructor Disks You will need few inch floppy disks for your programming assignments No student files may be left on CIT public machines they are cleanedout every day You must store your files on your own floppy disks You also should keep copies of all your work on separate disks This site is under construction Sorry for any inconviences Last Updated on Sunday October If you have any comments or suggestions please email them to dwu	other	cornell
903	 Server Date Sunday GMT Saturday GMT Image and Video Transition FX for Rivl Image and Video Transition FX for Rivl Fernandez Valerie Ohm and Amith Yamasani October Overview Rivl is language extension to for manipulating images and video sequences It comes with set of primitives such as fade rotate overlay etc The purpose of this project is to extend the set of primitives and use them for creating complex transitional effects between two images or video sequences Deliverables set of primitives to create transitional effects between two images or on one image by creating sequence of intermediate images Effects would include Flip Deform Squish Peel Melt Morph The same transitional effects on video sequences Milestones Study the implementation of Rivl and understand the internal representation of images and video sequences Work on some of the simpler transitional effects such as Flip Melt and Peel Get these effects working on single image and on transition between two images The algorithms will be modified to work on video sequences Implementation of the other effects like Squish and Deform to work on both images and video sequences Test the functions extensively and optimize them for maximum speed If time permits Create simple interface to accept points on two images and use the points as references for the morphing of one image to the other Documentation parts of which could be done concurrently with the coding and testing Technical Overview The effects Flip This is basically shearing operation with fixed line on either of the two axes The parameters would be the position and orientation of the fulcrum the image and the angle through which to flip the image In the case of flipping video the frames would be processed one by one with the angle increasing gradually Melt The image seems to melt into liquid and flow down out of sight This would involve generating random smooth wave and shearing the image with the wave The wave would also have to change in shape gradually so that it does look like curtain falling This effect simulates the folding up of piece of paper over and over again How the image is to be folded can be determined by parameters to the function The image can be folded as an opaque piece of paper or as transparent one Peel This is real cool effect like peeling off sheet of paper placed over another one Even video sequence can be peeled off to expose another sequence The direction of peeling can be specified as parameter This effect could be extended to rolling it away like scroll Squish Squishing an image would cause it to get compressed with bulge in the middle is variant of this where the squishing is little springy This involves shearing the image unevenly applying sine function to the shear and gradually increasing the amplitude of the sine wave Deform Deforming an image would involve squeezing rectangular image into nonrectangular area which could be quadrilateral or an oval First the image would be resized in both dimensions to fit the bounding rectangle of the destination shape and then it would be sheared to fit the actual shape In most of these effects as one video sequence gets transformed the next sequence fills the background	other	cornell
904	 Server Date Monday GMT Monday GMT Instruction Set Simulator Back to Home Page Project Instruction Set Simulator Date Assigned March Date Due March Before new processor is built the architects usually implement an simulator This simulator runs programs written for the new architecture so that the instruction set can be for usability and work on software can be started before the hardware is available This assignment involves the implementation of simulator in assembly language We will give you an assembly language program which accomplishes part of this task and you will add whatever assembly language code is necessary to make the simulator fully functional This project is due Thursday March at the start of class You are encouraged to work in groups of at most two in building this program The completed program should simulate machine language instructions stored in simulated memory The simulator should Actually only implement physical memory address through An attempt by simulated instruction to fetch or store memory address in the range through should cause an exception Memory fetches and stores to addresses in the range through should cause input or output to occur memory fetch to an address in this range should cause to be printed out in hexadecimal followed by question mark The simulator should then accept hexadecimal constant to be input from the keyboard and should return that input as the fetched word memory store to an address in this range should cause to be printed out in hexadecimal followed by colon and the value to be stored also printed in hexadecimal When started your simulator should enter an input loop which allows values to be entered into the simulated memory The input loop should behave as follows Read hexadecimal constants one per line The first will be count in words the second will be legal memory address Your simulator should then read hexadecimal constants per line the first at memory location the second at and the last at This should be repeated until count of is input The simulator should then start executing instructions from location Once the simulated processor has executed HALT instruction the simulator should print in hexadecimal the contents of registers PC status register bits and the contents of its memory addresses through Since there is no mechanism for creating reset or device interrupt in the software simulator these interrupts need not be addressed What to Modify Make the following modifications to the instruction set simulator Remove any bugs which might be lurking in the loop Complete the implementation of any opcodes which are missing or not fully implemented Complete the implementation of any Bcc cases which are missing or not fully implemented Implement the cases in LOAD and STORE Make HALT compliant with the specification Make sure that the simulator reads to valid memory locations in all cases In particular look at the implementation of RTI and at the interruption handler When could these routines make invalid memory accesses Fix any problems that you find If bad memory access of this sort occurs in the interruption handler or in the RTI implementation print an error message and halt the simulator Make any other modifications necessary to bring the simulator into compliance with the specification Mark your modifications in the simulator source code with highly visible comments Rows of asterisks accompanied by word or two explanation of the type of modification are recommended reader should be able to easily distinguish your modifications from the original source code Examples rts and What to Hand In Please hand in the following in single envelope marked clearly with your name hardcopy of the full source of the completed simulator program hardcopy of the ouput produced by the option for the simulator run on the example given in the Specification hardcopy of the output produced by the Run option for the simulator run on your own additional test cases disk containing the assembly language for your simulator clearly named Back to Home Page	other	cornell
905	 Server Date Sunday GMT Monday GMT CS Final Report Parallel FFTs FFTs are currently calculated in phase cycles of communication and computation the number of cycles being equal to the number of dimensions of the problem The communication phase is distributed matrix transpose and is implemented with an personalized black box function So dimensional FFT would need cycles phases FFT distributed transpose FFT distributed transpose Data is initially distributed such that each processor has an rowsxcolumns block of the matrix column block distribution number of rows columns of the problem size and respectively the number of processors Each process then computes the FFT of its local data and calls the distributed transpose function which results in each processor having matrix of size The FFT of this matrix is computed followed by another distributed transpose phase Problems in the communication phase Motivations Implementing the distributed transpose operation as black box can be inefficient due to unused processor cycles while waiting for and sending data and idle floating point units while doing the sends and the recieves The function starts by collecting data for all the processors so that the data is stored linearly and can be sent directly to the other processors The nth rows of columns each goes to the nth processor so the collecting is done trivially block copying column at time the matrix is stored in column major Once that is done the processor sends out signals to all other processors indicating that it is ready to recieve data from the other processors and then proceeds to send its data to the other processors when it recieves ready signal from the processors It then waits for all its incoming data to arrive and then does transpose on the local buffer The recieving end At the recieving end the processor wastes processor cycles while waiting for data from all processors to arrive so it can do transpose on the buffer Synchronization wait It also wastes the FPUs the has while doing the flow control and operations of data from the network interface to memory since these require only integer arithmetic The sending end The sending end suffers lot of overhead if the message being sent is greater then in length see section The thrust here is to break one big message into number of messages smaller than Eliminating Synchronization Waits We try to eliminate synchronization waits by performing operations on the small blocks that are exchanged between processors thereby shifting stance from collective communication to communication This requires modification in the initial data distribution to lead to an efficient implementation of the computation which changes to column cyclic The distributed matrix transpose phase changes to collecting block for processor and performing the last part of the computation of cycle on that block before sending it to the processor As the distribution is column cyclic the data has to be collected in rows of stride The processor that recieves the block transposes it and performs the first part of the computation of cycle that is to be applied on that block and scatters the data with stride across the rows This loop is unrolled once so that processors do not waste any time waiting for data That is every time the processor polls the network for an incoming packet it gets the data it needs and can operate on it see figure So forms of waiting are eliminated The need to wait for all blocks since we can operate on each block independently The need to poll the network for each block since we unroll the loop and schedule the communication so that we get the packet every time we poll the network Once processor has got all its data it can perform the main body of the computation Limitations We find that the cost of copying the data into and out of the message packets is prohibitive sAs the data has to be gathered before sending and scattered after recieving with stride we can do only an element wise copy of the data and that is very inefficient Limiting packet size The implementation of Active Messages over the sends messages in chunks Messages greater than have to wait for an acknowledgement from the recieving processor before the next chunk can be sent and therefore suffer the entire roundtrip latency of the network The call to therefore does not return till all chunks have been sent To avoid this overhead we send packets of size so that can return immediately and the processor can get its next packet ready for sending This allows some parallelism in the send operation Each message is collected from the packet of size collectd from the matrix as described in the previous section with row stride and column stride of rows in packet of columns in packet After collecting packet the last part of the computation of cycle is applied to it before sending it At the recieving end each packet is transposed and the first part of the computation of cycle is applied to it followed by scatter operation into the buffer with column stride The elements of each column are copied contiguously This is done number of times till the buffer has received all its data or till the sending side has finished sending the buffer Note that as in the previous case the loop is unrolled so that each processor is sending data to processors and recieving data from processors to avoid waiting for packets from the network Limitations We find again the cost of the copying between buffers to be prohibhitive to attaining good efficiency Note that the copying in this case is more than the copying in the earlier case as we have to collect data with stride from the main array into the buffer as in the previous case and then from there copy data into packets with row and column stride and respectively to be sent through the network At the recieving end the packet is copied into the buffer with column stride After all the packets have arrived the buffer is merged into the main buffer with contiguous copy of all columns lot of this copying is element wise except for the copying of the of the packet into the buffer and the into the main array which is done column wise and therefore we can not take advantage of block copying functions here Results Conclusions and future work We have seen that this approach will not work as is due to the copying and computation overhead it introduces Our next step will be to look into how these overheads can be removed	other	cornell
906	 Server Date Sunday GMT Friday GMT Fall Homework Sets Fall Automata and Computability Theory Homework Sets Click on for postscript version Homework Due Solutions Homework Due Solutions Homework Due Solutions Homework Due Solutions Prelim Solutions Homework Due Solutions Alternative solution for ii from Francis Homework Due Solutions Homework Due Solutions Homework Due Solutions Prelim Solutions Homework Due Solutions Homework Due Homework Due home page	other	cornell
907	 Server Date Sunday GMT Friday GMT is toolkit for interactive development of graphics in multimedia and applications is an extension package to the scripting language Graphics rendering for the Microsoft Windows environment is implemented over the Microsoft is designed to develop fast graphics applications for desktop computers It provides an for easy interactive development of graphical environments such as Games Virtual Reality Video Conferencing Virtual Seminar Rooms etc can be embedded into GUI as well as scripted to provide near animation This toolkit is intended to work in any or without any hardware accelerator available for graphics support has been developed as research project by the Multimedia Research Group Project Zeno at Cornell University Department of Computer Science An Introduction to and DirectX is programming system developed by John Ousterhout at the University of California Berkeley and now at the Sun Microsystems Lab which is easy to use and which has very useful graphical interface facilities Tcl tool command language is the basic embeddable scripting language while Tk toolkit is graphical user interface toolkit based on Tcl for constructing widgets has been implemented over almost all the existing platforms Also it provides core library to develop extension features to the toolkit Microsoft DirectX Software Development Kit provides set of APIs that provides the developers with the resources needed to design applications such as the next generation of computer games and multimedia applications is an API that provides advanced software solutions for typical provides interface that allows applications to easily implement complete graphical system and interface that applications can use to take control over the rendering pipeline as well as the accelerator hardware Manual CommandsThe interpreter and script commands to implement graphics GE LibraryThe Graphics Engine library of functions which extends the use of	other	cornell
908	 Server Date Sunday GMT Thursday GMT CUCS Hockey Home Page Welcome to CUCS hockey Schedules The schedule for the season The schedule for public skating Skaters new and old should try to make it and work on their skating The Hockey Czars Takako Hickey Nick Howe Dave Walker who needs to get home page Jason Hickey Becoming new player In order to become new CUCS player you must meet one of the following critera You must be graduate student faculty staff or researcher in the CS department or You must be significant other of any of the above or You must be sponsored by someone who is already CUCS hockey player If you are sponsored by someone then you are allowed to play with us for up to scrimmages If everything works our for you and for us then we will deem you CUCS hockey player If things do not work out we do not like your style of play then we will politely refuse your request to become player There is one exception to this policy We maintain list of people who play goalie whom we call if we are short for scrimmage If you would like to get on this list drop us line Keeping in touch We maintain two mailing lists and one newsgroup The mailing list for general announcements Scrimmage announcements and team rosters will be sent to this list You probably want to be on this list Send mail to hockey cs to get on it The mailing list for CUCS hockey discussions Anything that might be of interest to CUCS hockey players but is important enough to post to local newsgroups that is gatewayed to cs Anything posted to is resent to Anything sent to cs appears in This newsgroup is only available to people with CUCS accounts If you have problems accessing newsgroup link click here CUCS Hockey Lore Notes from Rhonda talk In DVI and Postscript form Here you will find basic explaination of the game rules tactics etc Lynah Rink Rules and Policies Please read this An explanation of how the CUCS Hockey finances work Information about CUCS Hockey equipment rentals Photo gallery Hockey around the Web NHL Home Page at Hawaii Klootzak Internet Hockey Archive Today NHL Games The FAQ part and part NHL Schedule Team home pages If you have problems accessing newsgroup link click here This page is maintained by the Hockey Czars hockey Comments and suggestions are welcome Click here to send us mail	other	cornell
909	 Date Mon Dec GMT Server Thu Jun GMT Lab CS Laboratory Parametric Surfaces Introduction This exercise is concerned with building surfaces for computer graphics It will introduce various types of parametric surfaces Procedure First you will need to download two files To do this click on each of the filenames shown below When the text window opens use the save as option to put the file in your own directory Name each file with the same name as shown below After downloading the files start DX then open and execute Each module when opened has explanation of its function One of the Compute modules performs the main operation of mapping grid to coordinates to make the parametric surface The others just produce pi and produce the variables Assignment Quadric surfaces Modify the Compute in to produce unit sphere Use another Compute module to convert the sphere to superquadric That is if the vector is quadric surface then is superquadric surface where the power of vector just means the power of each term Try values of from to or so You will need to handle negative values of and in the compute Make the value of set by an interactor The two images below show sphere modified by and respectively Figures of rotation Modify the program to produce figure of rotation given by cylinder radius where is the axis of the rotation Modify the program to produce figure of rotation which approximates the shape of drink bottle The bottle should have at least neck and body with bottom Two bottles modeled in spring are particularly elaborate juice bottle Coke bottle Bottles modeled in beer bottle vase soda bottle Note that the form used in compute module is conditional If is not equal to zero then do else do This allows arbitrary functions to be constructed For example try to make funnel Modify the original program to convert the torus into spiral spring with four complete turns Animate the spring so that one end of the spring remains fixed and the other end undergoes simple harmonic motion The spring should not pass through itself and the motion should repeat every frames Model sphere which moves sinusoidally that is with the end of the spring and appears to be attached to the spring One frame of an animation is shown below Bugs as of The comment in the Construct module is incorrect It should read make grid spanning to Be prepared to demo and explain the superquadric function your soda bottle and spring animation The Lab grading guide will be filled out by consultant during section to evaluate your work Back to Main Page Go to Lab Last modified Land Copyright Statement	other	cornell
910	 Server Date Monday GMT Monday GMT Mesh Generation Mesh Generation Paul Chew My work on mesh generation has been motivated by the finite element method widely used technique to obtain approximate solutions to partial differential equations The first step of this method is to divide the given problem region into elements creating mesh number of algorithms have been developed to automate this process but most of these algorithms do not provide guarantee about the quality of the resulting mesh for instance an element may cross region boundary or there may be some flat triangles leading to poor error bounds have developed efficient techniques for producing meshes of guaranteed quality for problems in the plane and for curved surfaces the elements produced are all triangles that are close to equilateral in shape all region boundaries are respected and the user can control the element density producing small elements in interesting regions and large elements elsewhere am working to extend this technique to full problems producing tetrahedral meshes Example Mesh Example Surface Mesh The Mesher in Action postscript animation of the mesher at work The colors represent grades for the various triangles red implies bad shape yellow implies too large blue implies boundary is too long and green implies all right An Interactive Meshing Demo Mesh polygonal shape of your own choosing The input for this is currently very slow the whole demo is still being modified Some References Paul Chew Mesh Generation for Curved Surfaces Proceedings of the Ninth Symposium on Computational Geometry ACM Press Paul Chew Triangular Meshes Department of Computer Science Tech Report Cornell University	other	cornell
911	 Server Date Sunday GMT Saturday GMT Expanding Your Horizons Expanding Your Horizons Expanding Your Horizons in Math Science and Engineering is program for middle school girls designed to encourage them to study science and math The first EYH conference was held at Cornell in and involved about girls and their parents Since that time the program has expanded and in workshops were offered and nearly girls from all over Tompkins County participated Why EYH The Text The Data The Doonesbury Cartoons How does EYH work From the recruiting brochure What this Expanding Your Horizons Conference about It an opportunity for girls in grades and their parents to learn about careers that use mathematics and science You get information straight from the source Come meet women who are doctors engineers computer scientists biologists chemists veterinarians You can ask them questions like In your lab do you work with other people or What was your favorite class in high school See for yourself how important mathematics and science classes are What will do activities You have chance to perform scientific experiments work with computers study barnyard animals and lots of other great stuff And what is really great is that you get to choose which workshops you want to go to and we do our best to make it so Each will have cool science mathematics or engineering activities and women who are real scientists engineers or mathematicians What do get You get fun day filled with great science engineering and mathematics activities folder full of interesting materials about mathematics engineering and science lunch and science toy What do the accompanying adults get to do There will be special workshops for the adults to show them how to help you explore mathematics science and engineering If they have any questions about careers for women in mathematics science and engineering there will be plenty of professional women to offer answers The adults will get to go with you to one or two workshops and see all the cool stuff you are doing Above all there will be plenty of coffee for them to drink Computer Science Workshop The Computer Science workshop is called Image Processing In it we show girls how computers store and manipulate pictures We use program called popi to manipulate pictures of the girls Click here for our handout on Image Processing Click here for some manipulated pictures	other	cornell
912	 Server Date Sunday GMT Thursday GMT Joint Partners Joint Partners If you are working with partner for the current problem set fill out the form below This will join your NOODLLE directories for this project This means that you will both be able to work on the same files in your combined current directory None of you other directories will be effected Your Login Your Password Partner Login Partner Password	other	cornell
913	 Server Date Sunday GMT Tuesday GMT online papers by Jim Davis publications The documents contained in these directories are included by the contributing authors as means to ensure timely distribution of scholarly and technical work on basis Copyright and all rights therein are maintained by the authors or by other copyright holders notwithstanding that they have offered their works here electronically It is understood that all persons copying this information will adhere to the the terms and constraints invoked by each author copyright These works may not be reposted without the explicit permission of the copyright holder publishing with the World Wide Web Int WWW Conference Also available in postscript Dienst An Architecture for Distributed Document Libraries Communications of the ACM April Vol No page Also available in PostScript Shared Annotation for Cooperative Learning submitted to Computer Support for Cooperative Learning conference pages Dienst Building Production Technical Report Server Chapter in Advances in Digital Libraries Springer Verlag	other	cornell
914	 Server Date Monday GMT Wednesday GMT Audio System For Technical Readings Abstract Topic Audio System for Technical Readings Time Date January Place UpsonHall Cornell University Ithaca NY The advent of electronic documents makes information available in more than its visual form information can now be We describe computing system AsTeR that audio formats electronic documents to produce audio documents AsTeR can speak both literary texts and highly technical documents presently in La TeX that contain complex mathematics Visual communication is characterized by the eye ability to actively access parts of display The reader is active while the display is passive This role is reversed by the temporal nature of oral communication information flows actively past passive listener This prohibits multiple views is impossible to first obtain view and then look at details These shortcomings become severe when presenting complex mathematics orally Audio formatting which renders information structure in manner attuned to an auditory display overcomes these problems AsTeR is interactive and the ability to browse information structure and obtain multiple views enables active listening Raman raman Last modified Wed Aug	other	cornell
915	 Date Mon Dec GMT Server Complete List of Cornell Web Pages CUinfo List of WWW Sites This list is sorted in alphabetical order and includes all World Wide Web home pages at Cornell with the exception of personal home pages If you would like to to have your Web page listed here please fill out this registration form or send with URL to Search the complete list of Web pages at Cornell Acacia Fraternity Academic Technology Center Cornell Information Technologies Academic Technology Services ATS Administrative Systems Distributed Technologies Advanced Electronic Packaging Facility Aegean Dendrochronology Project Africana Library Africana Studies and Research Center Agricultural and Biological Engineering Department of Agricultural Experiment Station Geneva Agricultural Resource and Managerial Economics Department of Agriculture and Life Sciences College of Agriculture Energy Program Air Force ROTC Cadet Wing Alpha Chi Omega Sorority Zeta Phi Chapter Alpha Chi Rho Fraternity Alpha Epsilon Pi Fraternity Beta Chapter Alpha Gamma Rho Zeta Chapter Alpha Omicron Pi Sorority Epsilon Chapter Alpha Phi Alpha Fraternity Alpha Chapter Alpha Phi Delta Chapter Alpha Sigma Phi Iota Chapter Rockledge Alpine Ski Team Alumni Affairs and Development Division of Alumni Federation Amateur Radio Club Amnesty International Group Ithaca Animal Science Nutritional Toxicology Animal Science Department of AnimaLife Anthropology Department of APLYSIA Hometank Neuroscience Database Project Applied and Engineering Physics School of Applied Mathematics Center for Archaeological Fieldwork Server Archaeology Department of Architecture Department of Arecibo Observatory ARME Extension Program Art Computer Art Arts and Sciences College of Asian Studies Department of Astronomy Department of Athletics and Physical Education Department of Atmospheric Sciences Program Atomic and Solid State Physics Laboratory of Bailey Hortorium Ballroom Dance Club Bear Access Project Cornell Information Technologies Beta Theta Pi Fraternity Beta Delta Chapter Big Red Trumpets Bio Pl Plant Physiology Biochemistry Molecular and Cell Biology Graduate Field of Biochemistry Molecular and Cell Biology Section of Biodiversity and Biocollections The Cornell University MUSE Project Bioengineering Society BioG Biological Control Guide to Natural Enemies in North America Biological Sciences Division of Biomechanical Engineering Program in Hospital for Special Surgery Biomedical Engineering Society BMES Biometrics Unit Biophysics Graduate Field of Biotechnology Computing Facility Biotechnology Center for Advanced Technology CAT Boyce Thompson Institute for Plant Research Breast Cancer and Environmental Risk Factors Program on Business Services Campus Insights Campus Life Information Technologies Campus Life Housing Dining Residential Programs and more Campus Store Canine page information on diseases of dogs Capital Facilities Statutory Office for Career Services Catherwood ILR Library Cayuga Lodge Student Cooperative CBC Rowing Club CBS Centers formerly Copy Centers CEE Civil Engineering Cells in Frames project ATM over Ethernet Center for the Environment Central Technical Services Cornell University Library Chemical Engineering School of Chemistry Department of Chi Alpha Christian Fellowship Chi Omega Theta Alpha Chapter Child Abuse Prevention Network Project Chinese Bible Study Info Page Chinese Christian Fellowship Mandarin ChiNET Psi Upsilon Alumni Christian Fellowship CCF Church of Christ Bible Study CIT Publications City and Regional Planning Department of Civil and Environmental Engineering School of Class Notes Classic Computer Club Classics Department of Coalition for Life CCFL Collection Development Policies College Republicans Communication Department Instructional Server Communication Department of Community Rural Development Institute CaRDI Community Relations Office of Comparative and Environmental Toxicology Institute for Computational Fluid Dynamics Laboratory Computer Graphics Program of Computer Science Undergraduates Association of Computer Science Department of Design DEA courses Concert Commission Concert Series Continuing Education Summer Sessions School of Cornell Abroad Undergraduate Overseas Study Program Cornell American The American Society Cornell Chimes Cornell Chronicle Cornell Cinema Cornell Club of Northern New Jersey Cornell Composting Cornell Cooperative Extension Cornell Fund Cornell High Energy Synchrotron Source CHESS Cornell Information Technologies Main Server Cornell Law Review Cornell Magazine Cornell Research Foundation Cornell Review Cornell Tradition Cornell University Home Page Cornell University Instructional Server Cornell University Library Cornellian CORSIM The Cornell Microsimulation CRP Computers in Planning Ecuador Economy Connection to the Cornell Network Project Cuba Studies Group CUErgo the Cornell Ergonomics Web CUinfo Cornell University Information System Dairy Markets and Policy Program on Delta Chi Fraternity Alpha Chapter Delta Delta Delta Alpha Beta Chapter Delta Gamma Chi Chapter Delta Kappa Epsilon Fraternity Delta Phi Epsilon International Sorority Delta Rho Chapter Delta Sigma Rho Tau Kappa Alpha Speech Debate Honor Society Delta Tau Delta Fraternity Beta Omicron Chapter Design and Environmental Analysis Department of Design Studio Mechanical and Aerospace Engineering Diagnostic Laboratory Dickson Hall Distributed Technologies Systems Integration Magazine Distribution Center formerly General Stores Durland Alternatives Library Dutch Club East Asia Program Ecology and Evolutionary Biology Graduate Field of Ecology and Systematics Section of Economics Department of Education Program Planning in Agricultural Extension and Adult Education Education Experiential Learning Systems Education Department of Electrical Engineering School of Electronic Review Shelf Emerson Manufacturing Laboratory Engineering Materials by Design Engineering Library Engineering College of English Critical Surfing English Department of ENGRI Environmental Systems Engineering Entomology Department of Entrepreneurship and Personal Enterprise Program Environmental Biology Program Boyce Thompson Institute Environmental Conflict Management Program on Episcopal Church Equal Opportunity Office of Equine Research Park Ergonomics Research Group Evangelical Fellowships Experimental Ponds Facilities Management Family Life Development Center Farming Alternatives Program Feline Health Center Feminist Action League Filipino Association CFA Fine Arts Library Finger Lakes Runners Club Floriculture and Ornamental Horticulture Department of Flow Cytometry and Imaging Facility Flying Club Food and Nutrition Policy Program Food Engineering Lab Food Industry Management Home Study Program Food Agriculture and Development Cornell International Institute for CIIFAD Footbag Club Forensics Society Fracture Group Fruit and Vegetable Science Department of FSAE Race Car Team Gaming Club Cornell Strategic Simulations Society Gannett Health Center Gateway Theatre Genetics and Development Graduate Field of Genetics and Development Section of Geological Sciences Department of includes the Institute for the Study of the Continents INSTOC Glee Club Government Department of Grad Life Bible Studies Grades on Disk Arts College Electronic Grading Program Graduate School Greek Epigraphy Project Habitat for Humanity Cornell Chapter Hangovers An Cappella Subset of the Glee Club Help Desk Cornell Information Technologies History Department of Hong Kong Christian Fellowship Hotel Administration School of Hotel School courses Research Design Analysis Program Evaluation Research Design Human Ecology Human Ecology College of Human Resource Services Human Service Studies Department of Hybrid Electric Vehicle Team IEEE Cornell Chapter Industrial and Labor Relations School of Information Resources Cornell Information Technologies Injection Molding Program Institute for African Development Institute for Social and Economic Research CISER Institute of Food Science Institute on Science and the Environment for Teachers ISET Integrated Pest Management Program Interactive Multimedia Group Interfraternity Council International Agriculture and Rural Development Graduate Field of International Agriculture Program International Christian Fellowship International Legal Studies Program International Service for the Acquisition of Applications ISAAA International Students and Scholars Office International Studies Mario Einaudi Center for International Workplace Studies Program Italian Language Program Ithaca Tangueros Ithaca United Soccer Club Japan Association Japanese Animation Society JASA Theory and Methods Editor Page Jewish Infoline Jewish Studies Program of Johnson Graduate School of Management Johnson Museum of Art Judicial Statistical Inquiry Form Kappa Alpha Theta Iota Chapter Kappa Delta Omega Chi Chapter Kappa Kappa Gamma Psi Deuteron Chapter Korean Bible Study Korean Church Korean Graduate Student Association Kosher Dining Hall Kroch Library Asian Collections Kultura Magazine Lambda Pi Chi Alpha Chapter Lambda Theta Phi Fraternidad Latina Chi Chapter Landscape Architecture Department of Latin America Studies Program Latino Studies Program Law Library Law School Legal Information Institute Lesbian Gay Bisexual Transgendered Resource Office Levin Lab Linguistics Department of Local Government Program Electronic Information Center Local Roads Program Luso Brazilian Student Association Macromolecular Diffraction Facility MacCHESS Management Library Mann Library Materials Science and Engineering Department of Materials Science Center Math Club Math Department Instructional Computing Lab Mathematics Library Mathematics Department of Meaningful Learning Central Mechanical and Aerospace Engineering Sibley School of Medical College Medical Sciences Graduate School of Medieval Studies Program Cornucopia Microbiology Graduate Field of MicroElectroMechanical Systems MEMS Mideast Library Collection Minorty Organization Of Architecture Art and Planning Mircobiology Section of Modern Languages Department of Molecular Beam Epitaxy Facility Museum Educational Site Licensing Project MESL Music Library Music Department of National Agricultural Biotechnology Council National Data Archive on Child Abuse and Neglect National Nanofabrication Facility at Cornell Native Americas Magazine Natural Resources Department of Naval ROTC Near Eastern Studies Department of Network and Computing Administrators Network and Computing Systems NCS Neurobiology and Behavior Graduate Field of Neurobiology and Behavior Section of News Service Northeast Regional Climate Center Nuclear Studies Floyd Newman Laboratory of Nutrient Analysis Laboratories Nutritional Sciences Human Anatomy Physiology Nutritional Sciences Division of Office of Information Technologies Library Reference Services Operations Research and Industrial Engineering School of Organization for Labor Action COLA Ornithology Lab of Outing Club Participatory Action Research PAR Pathology Department of Peace Studies Program Persian Student Association Pesticide Management Education Program Pharmacology Department of Pharmacology Field of Philosophy Department of Phonetics Laboratory Physical Sciences Library Physics Department of Physiology and Biophysics Department of Physiology Graduate Field of Physiology Section of Pi Beta Phi New York Delta Chapter Pi Kappa Alpha Fraternity Beta Theta Chapter Pi Kappa Phi Fraternity Planning Design and Construction Plant Biology Graduate Field of Plant Biology Section of Plant Breeding Plants Genes and Global Food Production Plant Breeding and Biometry Department of Plant Pathology Department of Plantations Path Guide Cornell Plantations Policy Department Preservation and Conservation Department of Law Historic Preservation Information Project Professional Development Program Project Making Cornell University Project Mandarin Protestant Cooperative Ministry Psi Upsilon Psychology Introductory Psychology Psychology Department of Public Affairs Institute for Public Computer Labs Cornell Information Technologies Public Service Center Purchasing Department Rare and Manuscript Collections Division of Cornell University Library Religious Studies Department of Research Office for College of Agriculture and Life Sciences Resource Information Systems Institute for Rhizobotany Project Rigid AirFoil Team Romance Studies Department of Root and Soil Research Center for Rugby Mens Rural Schools Program Russian Language Program Sage Chapel Choir Sailing SALALM Sass Research Group SCAS Soil and Water Management Science Technology Studies Department of Science and Technology Magazine SciTech Seal Serpent Society Senior Class Campaign Shake Ultimate Frisbee Team Shaolin Kung Fu Association Shoals Marine Laboratory Sigma Chi Delta Fraternity Sigma Delta Tau Alpha Chapter Sigma Gamma Rho Sorority Lambda Omicron Chapter Sigma Lambda Latinas Unidas Iota Chapter Sigma Phi Epsilon Fraternity Beta Chapter Ski Club Ski Racing Club Home Page Social Science Update Society for Creative Anachronism SCA Society of Women Engineers Sociology Department of Soil Crop and Atmospheric Sciences Department of Something to Grow On South Asia Program Southeast Asia Program Space Plasma Physics Lab Sponsored Programs Office of Statistics Biometry Statistical Methods II Statistics Center Statler Hotel Student Employment Services Student Linux Users Group CSLUG Student Services Office of ILR Student Services Student Terminal Operations Supervisor STOS Students for the Ethical Treatment of Animals Taiwanese Student Association CTSA Society CTAS Tango Cafe Tau Beta Pi Cornell Chapter Tau Kappa Epsilon Fraternity Scorpion Chapter Technical Reports Department of Computer Science Technologies for Learning Center Technology Access and Business Assistance Cornell Office for COTABA Technology Connection Cornell Business Services Textiles and Apparel Department of Thai Association CTA Theoretical and Applied Mechanics Department of Theory Center Tomato Genetics Cooperative Training for Technology Cornell and Beyond Travel Office Travelers on the Electronic Highway Undergrduate Admissions Office University Assemblies University Controller Division of the University Council University Print Shop and Electronic Composition Services Uris Library Web Resources Plant Soil and Nutrition Laboratory UTOPIA Venezuelan Students and Scholars Association Veterinary Medicine College of for Research and Advanced Studies Office of the Visual Communications Lab Waste Management Institute Water Resources Institute Willard Straight Hall Program Board Wilson Synchrotron Laboratory Women Handbook Work and Environment Initiative World Tae Kwon Do Association Cornell Chapter of the Writing Program John Knight Writing Program WWW Virtual Library Physiology and Biophysics Young Israel of Cornell Youth and Work Program Zeta Psi Fraternity Psi Chapter Zoology Graduate Field of	other	cornell
916	 Server Date Sunday GMT Friday GMT HTML asWedit pPCx The pPCx page pPCx stands for parallel predictor corrector package and is parallel version of the PCx code for Linear Programming developed at the Optimization Technology Center at Argonne National Labs This is work in progress people involved from the Cornell side are Thomas Coleman Chunguang Sun and Michael Wagner and Steve Wright from Argonne The basic framework for pPCx is predictor corrector interior point method for linear programming Most of the work in an interior point method lies in solving symmetric sparse positive definite system of linear equations we use new parallel multifrontal Cholesky factorization developed by Chunguang Sun that efficiently handles We also take care of dense rows and columns efficiently so that we can exploit sparsity in the normal equations as much as possible The constraint matrix is stored in distributed form thus enabling the solution of very large problems that can not be solved on single processor The code is written entirely in with MPI extensions and will thus be easily portable to other architectures The testing is being done in the ACRI on the IBM at the Cornell Theory Center Here are few of the papers that are relevant for the development of this code Wright Modified Cholesky Factorizations in Algorithms for Linear Programming Preprint May Mehrotra On the implementation of interior point method SIAM Journal on Optimization pp For other interior page pages check out Interior Points Online Back to the Please send comments or suggestions to mwagner Last update Fri Oct EDT	other	cornell
917	 Server Date Monday GMT Monday GMT Program Program IMPORTANT When you type in the program remember to change the following lines in the CompoundCurve function Change int xm int ym to double xm double ym Click this link to retrieve the Program folder Program Folder Spring pierce	other	cornell
918	 Server Date Sunday GMT Saturday GMT Some Dirt for YOU Me singing in the Shower Pretty scary	other	cornell
919	 Server Date Monday GMT Saturday GMT Resources Resources Manual Pages Interesting Web Sites Newsgroup Last modified Oct	other	cornell
920	 Server Date Sunday GMT Thursday GMT Knowledge Base This page is intended to be answer general questions for developers On Solaris linking Tk gives me the error Undefined first referenced symbol in file socket getpeername gethostbyname You need to add to the LIBS line in the Makefile System Lab Specific How do access the files in my Unix account from my Windows and NT desktop Open Explorer Go to the menu Tools Map Network Drive and enter in the Path entry box For example would use in Then you will be able to access your files from the mapped drive Note that as of the server Dawn is not visible in the Network Neighborhood list but steps above work anyway How do use Windows applications in Unix You can use the windd command to log on an NT machine Type windd in an xterm and the windd desktop will come up Type the name of an NT server such as vulture in the Application Server entry box and press return That will bring you to the NT login screen Notice that WinDD runs Windows NT only but most applications should work without problems You miss the NT desktop though Also WinDD does work on display If you want to increase the size of the WinDD dekstop try giving the option when you start windd windd Where is purify for the different CUCS systems On Solaris On SunOS The answers to the following topics will come up shortly How do maintain binaries of different platforms in the same file system want to compile for both SunOS and Solaris but now need to do make distclean each time want to compile binaries for different platform Use symbolic links cd and look at the directory structure use it to manage four configurations with single source base More explanations will come up shortly What is purify Why can it help me with my development There is no purify on Linux What alternatives can use What is the flag when compile Tcl What is the Engineering Manual What is CVS How do develop test suite for my applications quick example for writing test suites How do compile my extension into shared library am working on an example Cornell CS Department Specific Is there quick example for CVS	other	cornell
921	 Server Date Sunday GMT Monday GMT CS Department Annual Report Annual Report Welcome to the version of the Annual Report of the Cornell Department of Computer Science You can either view the full table of contents or else select one of the major topic items listed below Message from the Chair Research and Professional Activities of Faculty Research and Professional Activities of Research Scientists Technical Reports List Faculty and Staff Roster The project of the Computer Science Department has all the department technical reports available on the Web for your perusal All of the projects in the department are also available on the Web Return to Departmental Home Page If you have questions or comments please contact www Last modified February by Denise Moore denise	other	cornell
922	 Server Date Sunday GMT Tuesday GMT The Art Gallery Welcome to The Art Gallery You need Netscape to visit this gallery because all pictures here are inline jpg images If you use Mosaic close it run Netscape and come back In order to see the first picture click key button below After this you will need just to click current picture to see the next one Pictures are here All pictures here are taken from user groups on Internet Some people tell that their picture are not for commertial use Please take it into account when copy picture Here will be Ascii Art Gallery	other	cornell
923	 Server Date Monday GMT Monday GMT Index Structure and Interpreration of Computer Programs Computer Science Department Cornell University Spring Course Materials Downloadable Software MacMarlais in StuffIt format Emacs the editor for use with MacMarlais version in StuffIt format StuffIt Expander software which you need to decompress Marlais and Emacs Handouts Notes on Dylan Notes on Programming Style MacMarlais error descriptions Miniquiz Miniquiz Solutions Dylan cheatsheet Downloading files using Netscape Using the Emacs editor Using MacMarlais Using the debugger Printing The Substitution Model Emacs Reference Card Miniquiz Induction Lists Miniquiz Solutions Miniquiz Symbolic Differentiator Dylan Code Data Abstraction Miniquiz Solutions Generics Dylan Code Structural Induction Object Oriented Programming Sorting Dylan Code The Enviroment Model Reasoning about Resources Miniquiz Miniquiz Solutions Priority Queues Code Priority Queues Prelim Info Prelim will be Thursday March from to Practice Prelim in PostScript format Practice Prelim in TeX format Practice Prelim in WWW html format Practice Prelim Solutions in TeX format Practice Prelim Solutions in PostScript format Practice Prelim Solutions in WWW html format Practice Prelim in PostScript format Practice Prelim in TeX format Practice Prelim in WWW html format Final Exam Study Guide in WWW format If you interested in the inner workings of the Dylan interpreter download mini version written by Justin Voskuhl It written in Pascal so you can look at the source code It can display the substitution model steps for the expressions it evaluates as well which may be useful to some students for prelim Problem Sets Problem Set Problem Set Problem Set Supplement to PS Problem Set Problem Set Problem Set Problem Set Source Code Code Star Trek Contest Winners Dan Oberlin David Bartholow Sean Welch Joe Lee Lecture Notes Lecture Introduction Lecture Dylan Lecture The Substitution Model and Higher Order Procedures Lecture Special Forms Lecture Lists Lecture Tail Recursion Lecture Data Abstraction Lecture Symbolic Differentiator Lecture Generic Functions Lecture Generic Operations Lecture Analysis of Algorithms Lecture Side Effects Lecture The Environment Model Lecture Local State Lecture Destructive List Operations Lecture Object Oriented Programming Lecture New Language Brenda Lecture More Brenda Lecture Generic Function Dispatch Lecture More About Generic Dispatch Lecture Garbage Collection Lecture Macros Lecture Streams Lecture Infinite Streams Lecture Quicksort Lecture Priority Queues Lecture Computability home page Last Modified by JEH	other	cornell
924	 Server Date Sunday GMT Friday GMT The Real Deal of the Network Computer The Real Deal of the Network Computer by MULVA Jeffrey Moore jmm cs William Lee wwlee cs Check out the Mulva Report And just what is this madness With all of the hype surrounding the new network computer and platform independent programming languages such as Java we decided to design our own network computer to see what type of hardware and software we would get using at the price point computer will not contain many things which we take for granted when discussing personal computers For example hard drive becomes optional equipment as does keyboard and mouse By removing these devices presents an interesting problem and raises many other questions We want to find out what these problems are and obtain solution for them In order to do this we must first design network computer of our own to discover exactly what buys We priced it using off the shelf readily available hardware Our implementation is only theoretical because we did not actually build working prototype mainly because computer scientists and that not what we do The main purpose of this exercise is to get an idea of the performance obtainable from network computer We want to determine how much of the network computer hype is real and how much of it is marketing For more information refer to the NC Specification document and what do we learn from this lot We learn how to estimate the performance of system that currently does not exist This is valuable skill because this type of evaluation must be done on new project of this type to see if the end result will be usable If the result product is not usable or the performance is less than that of what you can currently get it will not sell With this in mind we want to know if the Network Computer will revolutionize the computer industry or just be another fad that will quickly die Also there are some other social aspects to this For example if the machine does not contain hard drive and you receive electronic mail where is the mail stored This would be new paradigm for the computer industry and we are trying to determine whether the NC is technologically superior to personal computer or if it is lot of hot air and how does it tie in with High Performance Computer Architecture We trying to see if this computer is high performance at all From what we can tell we ca see that this type of computer provides at least the same performance as other computers in the same price range It is not clear that this computer will perform at speed which closely resembles modern personal computer and how do we measure success If we can get data that conclusively shows the performance of NC it will be possible to estimate the overall performance of the system For example if we use NC with an ethernet connection browsing the WWW will it have the same performance as personal computer browsing the WWW These are just some of the questions that must be answered and finally how are we progressing Project Proposal Price the computer Modify Web Browser Create Web Project Web Page Distribute Survey Gather data from web browser Checkpoint Create poster Final Report Poster session MULVA Name of Jerry Seinfeld girlfriend which rhymes with part of the female anatomy Courtesy of the Junior Mint episode of Seinfeld Visitors since April	other	cornell
925	 Server Date Sunday GMT Sunday GMT Fall Course Materials Fall Foundations of Artificial Intelligence Course Materials Newsgroup Handouts Lecture Notes Homeworks and Solutions Handouts and Project Information Lisp Lisp Environments Useful Common Lisp and AI Links Note Many of these files are Postscript files their names end in No browser we know of can display them directly so you either have to specify helper application like ghostview to display them for you or you can download the file and do something with it locally for example in unix you could lpr it to which understands Postscript Netscape Navigator in the PC lab at least on some machines is already configured to use ghostview If you try it and it work try this Handouts Tentative Course Syllabus last modified General Course Information last modified html Lecture Notes Introduction to AI Aug Defining Artificial Intelligence postscript postscript per page html Sep Uninformed Search postscript postscript per page html Sep Heuristic Search postscript postscript per page html Sep Optimal Search postscript postscript per page html Sep Admissible Heuristics Adversarial Search postscript postscript per page html Sep Minimax Motivation for Pruning postscript postscript per page html Sep Pruning in Game Playing postscript postscript per page html Sep Introduction to Machine Learning postscript postscript per page html Sep Decision Tree Learning postscript postscript per page html Sep Issues in Decision Tree Learning postscript postscript per page html Sep Learning as Search postscript postscript per page html Sep The Version Space Algorithm postscript postscript per page html Sep Genetic Algorithms postscript postscript per page html Sep Neural Networks Feedforward Networks postscript postscript per page html Oct Neural Networks Backpropagation postscript postscript per page html Oct ML Applications postscript postscript per page html Oct History of AI Systems postscript postscript per page html Oct Forward Chaining Systems postscript postscript per page html Oct Backward Chaining Systems postscript postscript per page html Oct Knowledge Representation Semantic Nets postscript postscript per page html Oct Representing Facts in Logic postscript postscript per page html Oct Resolution Theorem Proving Conversion to Clause Form postscript postscript per page html Oct Unification Selection of Clauses postscript postscript per page html Nov Intro to Planning The Frame Problem postscript postscript per page html Nov Partial Order Planning postscript postscript per page html Nov Partial Order Planning II postscript postscript per page html Nov Hierarchical Planning Reasoning Under Uncertainty intro postscript postscript per page html Nov Probabilistic Reasoning Bayesian Inference postscript postscript per page html Nov Belief Networks postscript postscript per page html Nov Natural Language Processing intro postscript postscript per page html Nov Syntactic Analysis parsing postscript postscript per page html Nov Sentence Analysis chart parsing postscript postscript per page html Nov Conceptual Sentence Analysis the CIRCUS parser The Problem of Inference postscript postscript per page html Nov Machine Learning of Natural Language no notes Homeworks and Solutions Homework due Monday html Homework Solutions html Homework due Monday html Homework Solutions html Lisp code for counting games Homework Homework due Wednesday Homework Solutions from Fall We covered all of the material on that midterm html Solution to Midterm html Solution to Midterm html Homework that clarification for problem was added at on Here is the clarification Unless otherwise specified you can assume that either the system adds the fact that JB is Dodge Van to the KB at query time or the fact that JB is Dodge Van already exists in the KB The postscript document has been modified only to include this clarification due Monday Homework Solutions Note that program information is also available in the folder on the drive of the PCs Program due Monday html Program Solution html Program due Wednesday html Program Solution html Program due Friday due date Monday at the beginning of html Handouts and Project Information Course Syllabus and Project Information last modified Project Ideas Format for project proposal due at class time on Tues PC lab postscript html Due Dates Format for status reports postscript html Here are some examples of code with good procedural and data abstraction as well as good consistent indentation Courtesy of Ed Wayt and Oumi Mehrotra Generic Plan for Finishing the Project On Time It will be easier if you write your code in stages The code reviews provide intermediate feedback on your progress Here is how suggest working on the code If for some reason you think that your particular project does fit well into the structure below let me know and can help you create schedule that does First think about the major modules that your project requires and the knowledge structures rules state descriptions board representations that need including any related constructor functions and accessor functions as described by Winston in our main text Implement the modules as stubs lisp functions that have no substantive code but that specify all of the necessary parameters and that make calls to the appropriate module stubs Write the code to implement your generic knowledge structures completed for code review Oct Get the system running from beginning to end as soon as possible just on simple example This will invariably require making many simplifying assumptions Design the inference engine or control strategies needed for your system specific search strategy rule interpreter move generator learning algorithm completed for code review Nov Finish the implementation of the AI part inference engine control strategies learning algorithm of your system Incrementally remove the simplifying assumptions by adding the necessary code Evaluate the system appropriately Be sure to leave enough time for the evaluation it is an IMPORTANT component of the final grade by project end Lisp introduction to lisp list primitives defining functions conditionals recursion data abstraction mapping iteration debugging structures objects Lisp Environments The Allegro Lisp Editor the lisp for the PC lab Using Lucid Lisp with Emacs only useful if you have an account on the CS machines and want to use Common Lisp on those machines rather than the PC lab Useful Common Lisp and AI Links Common Lisp The Language Guy Steele Tulane Common Lisp Tutorial Johns Hopkins Common Lisp Tutorial Common Lisp Resouces from CMU AI Repository including the Lisp FAQ Free Common Lisp implementations from the Lisp FAQ Machine Learning Databases at UC Irvine It probably best to first check the end of the page for the README file associated with the data bases Return to home page	other	cornell
926	 Server Date Monday GMT Saturday GMT CS Assignment Grades CS Assignment Grades Final Course Grades Homrwork Assignment Assignment Grading Remarks Grader Ioi Lam Homework Assignment grades Homework Assignment grades Assignment Grading Remarks More assignment Grading Remarks Grader Ioi Lam Homework Assignment grades Assignment Grading Remarks Homework Assignment grades Homework Assignment grades Exam Exam Grades Last modified Nov	other	cornell
927	 Date Mon Dec GMT Server Fri Feb GMT Lab CS Laboratory Getting started with DataExplorer These instructions will introduce you to DataExplorer DX and the lab facilities in the Cornell University Computer Science department and in the Cornell Theory Center DX is software package intended to be used for scientific visualization At the start of the semester we will use it as platform for various computer graphics procedures Machines to run DX are located in room in Upson and in room in the TC building There are several sections Basic Information Your First DX session see below UNIX for CS DX Data Structures DX use notes and warnings Further Information Submitting Still images and animation for the course Web pages Creating MPEG animation files There are some DX techniques outlined in the DX Repository which may be useful later in the semester You may also want to look at some student programming projects using DX Disk Space We have set up temporary Gbyte partition for CS use at You should consider it scratch space for MPEG compression Materials are subject to deletion after hours To use it Make sure on the HP machines that is in your path On the IBM machines skip this step Issue the command klog then enter your IBM system password On the IBM machines skip this step Issue cd command to Make directory for your materials Your First DX session To get started login to one of the machines or IBM On the IBM machines you will need to start using the command On the HP machines starts automatically The first time you login you will need to load few files and modify your file If you do know how to do this in UNIX ask consultant or check ou the UNIX intro page Click here to download some utilities you will need When the dialog box appears save the file as in your home directory Execute the command tar This will put the utilities in new directory called Add the line setenv DXMACROS to your file Note that myid is placeholder for your user id Execute the command source This will cause the macros to become available to DX when it starts up This command is executed automatically whenever you login or open new window Anytime you start session make sure you have running type csh then start DX by typing At the end of session On the IBM machines kill by typing Then logout On the HP machines logout from the desktop DX has extensive help including tutorials and complete manual which you can look at by clicking the Help menu in the upper right of the editor window You can also click the middle button over any object module menu to get context sensitive help Back to Main Page Go to Lab Last modified Land Copyright Statement	other	cornell
928	 Server Date Monday GMT Thursday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
929	 Server Date Monday GMT Thursday GMT Tour of the CSRVL Tour the CSRVL Here is sequence of images captured from video of the CSRVL Believe it or not this is more or less how the lab looks on daily basis These are all GIF files about each The CSRVL consists of two adjoining rooms on the floor of Upson Hall at Cornell University The main lab is used by faculty and students involved in research in robotics and machine vision Therein can be found all of the equipment needed to build test debug and run experiments with our mobile robots along with number of workstations and personal computers used in machine vision processing as well for programming the mobots The teaching lab is used by undergraduate and graduate students taking courses in robotics and vision These include an undergraduate course in vision and robotics and graduate seminar in machine vision The teaching lab contains dozen Sparc IPX and IPC machines for use by these students as well as the Puma and Zebra robotic arms view of the hallway outside the lab floor Upson The door of the teaching lab The door of the main lab We big on safety view of the main lab from the door The Puma robotic arm in the teaching lab Lily recharging in the teaching lab The row of Sparc IPXs in the teaching lab Tommy recharging in the teaching lab next to molson the compute server The Sparc IPCs in the teaching lab Another view of the Puma arm small machine room within the main lab horus and kama are sitting here kama in the machine room Rosemary our newest mobot with guts exposed in the main lab thokk where sit in the main lab The electronics bench in the main lab looking towards the teaching lab Looking towards the corner of the main lab from thokk Camel along with some junk on the floor of the main lab disclaimer attached to thokk Two guys who were unfortunate enough to be in the lab while was filming Looking towards the electronics bench from the back of the main lab Return to the CSRVL Home Page Welsh mdw	other	cornell
930	 Server Date Sunday GMT Thursday GMT Masters of Engineering Projects This year all our projects will address issues associated with the development of an environment for designing specifying implementing and testing Adaptive Mesh Refinement AMR methods for tackling very complex problems ex spiraling coalescence of two black holes from computational sciences The participants in the development of this environment will have the opportunity to work on very specific projects that can be developed individually but at the same time will require some degree of interaction in the design validation and testing phases Thus in addition to the opportunity of acquiring specific skills and knowledge by working on very narrow and interesting problem the opportunity to see and understand the procedure of designing and implementing complex software for parallel and distributed platforms will be given Projects Intelligent Graphical User Interface for AMR Parallel Runtime Support System for AMR Dynamic Load Balancing Algorithms for AMR Parallel PDE solvers using AMR methods Parallel structured grid generation for complex geometries Scientific computing benchmarks for multithreading on parallel and distributed platforms Study the impact of restructuring CG scalar algorithms and codes in terms of CG performance on MPPs Intelligent Graphical User Interface for AMR This project requires the design and implement an intelligent for specifying geometries operators and various parameters required to solve numerically PDE problems This project consist of two components Problem specification Visualization Existing Problem Solving Environment PSE PELLPACK will be extended This project is recommended for students with interest on GUIs PSEs and in general for computing environments Parallel Runtime Support System for AMR This project requires the design and implementation of communication and threaded modules requirted for the efficient implementation of and control primitives for parallel AMR methods Existing communication software like MPI AMs and threaded packages like Qt and will be utilized This project is recommended for students with interests both on systems parallel parallel compilers and computational sciences An interaction with Bernoulli and projects is expected Dynamic Load Balancing Algorithms for AMR This project requires the development implementation and evaluation of of dynamic load balancing algorithms for AMR direct like generalized spectral bisection and its derivatives and curves and ii incremental The objective is to develop module for and ii acquire useful knowledge in solving an instance of very difficult combinatorial optimization problem dynamic load balancing of adaptive computations on network of heterogeneous workstations and MPPs Existing algorithms and software will be extended and new ones will be build This project is recommended for students with interests on the solution of practical optimization problems related to parallel and distributed computing Parallel PDE solvers for problems using AMR methods This project requires the implementation of library of routines for the discretization and solution of wave equation on MPPs and SMPs Both and multithreaded paradigms will be used and evaluated In addition accuracy and stability of multithreaded computations will be analyzed languages like HPF and low level like plus message passing will be used This project is recommented for students with interests in parallel numerical computing and scalability analysis An interaction with project is expected Parallel structured grid generation for complex geometries This project requires the development of parallel algorithms and implementation of library of parallel grid generation modules using Algebraic Methods Elliptic Methods Moving Algebraic Methods languages like HPF and low level like plus message passing will be used This project is recommented for students with interests in parallel numerical computing Existing scalar algorithms and code will be used An interaction with is expected Scientific computing benchmarks for multithreading on parallel and distributed platforms Study the impact of restructuring CG scalar algorithms and codes in terms of CG performance on MPPs This project requires the development of Conjugate Gradient algorithm suitable for multiprocessors and includes the implementation of CG using Typhoon parallel compiler Issues related to expensive dot product operations will be studied How much the algorithm restructuring can help in improving performance compared to well known CG algorithm Is it worth the effort and possible increase in space complexity How much the code restructuring can help in improving performance compared to straight forward cg code Is it worth in doing the extra step in exploring functional parallelism on top of the How much will cost to use multithreading in implementing functional parallelism ii masking some of the global address space overheads Is the overhead worth the increase in software complexity What about error and stability For more information contact	other	cornell
931	 Date Sun Dec GMT Server Mon Nov GMT Cornell University Evangelical Fellowships Cornell University Evangelical Fellowships Welcome to the unofficial home page of the Evangelical Fellowships at Cornell University Hopefully all the fellowships will soon have their own pages accessible from here Who Are We Summer Christian Fellowship Community Bulletin Board Page of the Who Are We Campus Crusade for Christ Chi Alpha Chinese Bible Study Cornell Chinese Christian Fellowship Cornell Christian Fellowship Cornell International Christian Fellowship Grad Life Bible Studies The Holy Ghost Connection Hong Kong Christian Fellowship Japanese Bible Study Korean Bible Study Korean Church Student Group The Navigators to the Community Bulletin Board Community Events And Announcements Racial Reconcilation Studies Cornell Christian Listserver Local Churches Taken from Page Other Christian Internet Sites Statement of Faith Mission Statement Summer Christian Fellowship Let the party begin the summer all the groups below and more meet together at least once week for fellowship the building of our faith and for reaching others For more info on summer contact Jay Marland to the Page of the Month Great Link page of the Cornell Chinese Christian Fellowship Good News Page Who Are We Summer Christian Fellowship Community Bulletin Board Page of the Back to the Last updated sort of Sept Send comments to Ard Louis at ardlouis	other	cornell
932	 Server Date Monday GMT Saturday GMT CS Problem Set CS Problem Set Stochastic Stereo Vision postscript copy of the assignment IMPORTANT for problem you should look at the postscript of the handout and not the photocopied handouts in class since the images were blackened out by the photocopying process Test Images You should make your own test images in addition to the ones here The problem set is finalized you need only submit the results for these two images below left and right random dot stereogram as seen in of assignment left and right images from stereo camera You should submit the results starting from zeroed disparity map and using this starting map If you are using linux or NT on an IBM you should use this short image The map was generated using simple windowing sum of squared differences method Be sure to use value of Delta otherwise this disparity map will have the wrong size Using the ADT image libraries The following versions of the library are available SunOS available on the cs dept machines as with the appropriate header files in DO NOT use on your command line Sunlab located in with header files in Other locations library and header files Solaris available on the cs dept machines as with the appropriate header files in be sure to include on your command line Sunlab you wo need the Solaris version Other locations library and header files Linux Here is the ELF library and tarfile containing the header files AIX thanks to Christoper Kline here is copy of the email he sent me Windows NT changed my mind the chances of easily getting Visual code to compile with another compiler is minimal If you want to use gcc then maybe we can talk debates to jmiller Problem Set If the maximum absolute value of disparity is then the disparity image should lose only pixels on each side because of the Cyclopean model not as mentioned in the HW assignment This would yield disparity image that is Yes mixed this one up It should only be pixels on each side when using the cyclopean model If you correct the mistake be sure to double the Delta constant to when using the tree images so that the disparity map gave you will be the right size What is the termination condition When the average of the demon energy is near zero The demon energy can temporarily be zero but the average will not be zero unless the system is near equilibrium Since the average is near zero the standard deviation has to be near zero and therefore the ration of the two is nearly see equation in Barnard Paper The termination condition is NOT zero energy for the system any interesting answer should have energy How can make my own test images Answer write program to generate the images Answer generate them in matlab there are set of matlab files in read the documentation simple image is rand background rand moving object copy background copy forground copy forground shift by imSaveF save images note we multiply imSaveF by since gray images have values and rand generates values in range What does ergodic mean good answer to this was recently posted to What are areas have optimization techniques been applied to image restoration and reconstruction Grimson Terzopoulos Geman and Geman Leclerc Hung et al shape from shading Ikeuchi and horn stereo motion and optical flow Ullman Horn and Schunck Hildreth Murray and Buxton Barnard Jain texture Hassner and Slansky Kashyap et al Cross and Kain edge detection Torre and Poggio Tan et al image segmentation Silverman and Cooper Li perceptual grouping Lowe Mohan and Nevatia Herault and Horaud interpretation of line drawings Leclerc and Fischler object matching and recognition Fischler and Elschlager Davis Shapiro and Haralick Bhanu and Faugeras and Meiri Modestino and Zhang nasrabadi et al Wells III Friedland and Rosenfeld Li Li pose estimation Haralick et al	other	cornell
933	 Server Date Sunday GMT Monday GMT Resolution Independent Video Language ACM Multimedia Electronic Proceedings November San Francisco California Resolution Independent Video Jonathan Swartz Department of Computer Science Upson Hall Cornell University Ithaca NY US swartz Brian Smith Department of Computer Science Upson Hall Cornell University Ithaca NY US bsmith http This work is supported by funding for the Xerox Design Research Institute and the US Air Force under contract ACM Copyright Notice Table of Contents ABSTRACT INTRODUCTION THE RIVL LANGUAGE Image Operations Sequence Operations THE RIVL INTERPRETER Implementation of Image Computing Implementation of Sequences Memory Management RELATED AND FUTURE WORK REFERENCES Abstract As common as video processing is programmers still implement video programs as manipulations of arrays of pixels This paper presents language extension called Rivl pronounced rival where video is first class data type Programs in Rivl use high level operators that are independent of video resolution and format increasing program portability simplifying code reuse and reducing development time This paper also describes Rivl interpreter and the strategies the interpreter uses to optimize Rivl programs These optimizations include classical programming language optimizations such as common subexpression elimination and out of order execution image and video specific optimizations such as computing only those images that will affect the output and an optimized memory manager Introduction In order to support the development of multimedia applications programming languages should include audio video and images as true data types just as characters text and numerical values are true data types in today languages The operators in multimedia language should be format independent so that video and images of different formats can be easily intermixed like integers and floating point numbers in most modern programming languages The operators in multimedia language should be resolution independent so that high or low resolution input data produces better or worse results just like single and double precision floating point numbers produce more or less accurate results in numeric computations Platform independence and code reuse will be useful side effect of multimedia programming languages and just as optimizing and parallel compilers can take existing programs and make them run faster so optimizing multimedia compilers will speed up multimedia programs Rivl pronounced rival is language extension and optimizing system designed with these goals in mind Rivl provides video data type and video operators that are format and resolution independent Format independence means that MPEG video can be freely intermixed with JPEG Postscript and uncompressed images Resolution independence means that operations in Rivl cut the first five seconds of the video clip are well defined whether the film resolution is or frames per second or the image size is or These features relieve the programmer of tedious low level details and allow runtime system to execute Rivl program quickly on low resolution data for crude output for prototyping or debugging and slowly on high resolution data for more refined output Rivl approach to video manipulation has significant advantages over current approaches Rivl programs are easier to read write and maintain than their counterparts Rivl code is platform independent Rivl expresses video and image editing operations in format and resolution independent way Rivl separates the description of video operations from their implementation allowing the Rivl runtime system to improve the execution efficiency of Rivl programs We have implemented an interpreter for Rivl as an extension to the Tcl language an approach that allows us to easily embed Rivl in other applications This paper describes the design and implementation of the Rivl language the Rivl interpreter and its optimizer The rest of the paper is organized as follows Section illustrates the Rivl language through series of examples Section discusses the Rivl interpreter and how it optimizes image and video operations Section reviews related work and concludes with current status and future research directions The Rivl Language This section illustrates Rivl programs through series of examples Since Rivl is an extension of Tcl Rivl programs have access to all the primitives of the Tcl language Rivl extends Tcl with two data types images which represent still images and sequences which represent video segments timestamped set of images Table lists some of the Rivl primitives for manipulating images and sequences The table is divided into five classes Currently supported formats include JPEG MPEG and Postscript Geometric The image operations in this class move and resize the image the sequence operations speed up slow down and temporally shift the sequences Assembly This class provides cut and paste type operations on images and sequences Conversion This class provides functions to convert between images and sequences and to map image operations over the frames of sequence Transforms Image transforms used in this paper Sections and contain examples that clarify the use of image primitives and sequence primitives respectively Table Image and sequence primitives Type Image Sequence Description operations operations Read from disk Write to disk Geometric Translate an image in space shift sequence in time Scale an image in space scale sequence in time Rotate an image around its center Assembly Crop the specified region to make new Concatenate multiple end to end Overlay multiple in place Conversion Convert between list of images and sequence Apply script to each image in the sequence Transforms Fade the image by specified percentage Resample the image at specified size Apply blur filter to the image Make transparent all pixels below certain intensity Image Operations Consider the following Rivl fragment set expr set expr Program Whirlpool effect is Rivl image and is floating point value between and The first line calls to shrink about its center by factor of and assigns the result to The second line calls to rotate about its center by and again stores the result in Figure shows the effect of this fragment with several values of The repeated use of set in this fragment is cumbersome To remedy this problem we borrowed an idiom from Scheme any operator with the character appended destructively modifies its first argument Taking advantage of this notation we can rewrite program as expr expr Notice that the destructive operation omits the in front of its first argument whereas the form requires the This artifact is caused by the way Tcl implements point we discuss in related paper More complex effects can be constructed using Tcl constructs for looping branching procedure creation and recursion The Rivl program in figure creates fractal Sierpinski Gasket from an arbitrary image Figure Output from program for Figure Fractal program and output for Sequence Operations sequence the Rivl abstraction for video can be thought of as set of images Like image commands sequence commands can be composed to express new operations For instance common video editing operation is assembly when two sequences are connected and written The following Rivl fragment assembles the first seconds of the sequence and the sequence writing the result to all files are MPEG format set raiders set bobo raiders raiders bobo An important primitive in Rivl is applies image effects to sequences executing given script for each image of sequence and combining the resulting images into new sequence is similar to map in Scheme For example consider the command clip evaluates the template command on each image in clip substituting the current image wherever appears in the template The results are gathered and returned as new sequence Thus this command returns new sequence containing thumbnail versions of the images in clip Sometimes rather than applying the same operation on each image in sequence it is desirable to vary the operation over time For example consider the operation of fading sequence to black This effect can be achieved by calling on each image in the sequence with parameter that decreases over time In this case must call procedure with parameter that indicates the time of the image being modified To this end performs the following additional substitutions Substitute the time stamp of the current image in seconds Substitute the length of the sequence in seconds Substitute the relative time of the current image divided by Using this mechanism can be expressed clip expr When combined with sequence assembly operations simplifies the expression of effects that are often used in transitions between two parts of movie For example the procedure in figure connects two sequences with transition The first parameter transition is script to be passed to MovieA movieB are the two sequences to be joined and duration is the time in seconds to apply the transition effect Thus connectWithTransition expr jack jill connects two sequences jack and jill with five second fade proc connectWithTransition transition movieA movieB duration set lengthA movieA set lengthB movieB Untouched parts of first and second movie set begin movieA expr duration set end movieB duration lengthB Apply timed effect to end of first movie overlay with beginning of second movie set movieA expr duration lengthA set movieB duration set middle transition begin middle end Figure Procedure to connect two sequences with an arbitrary transition The Rivl language extension thus provides powerful notation for programming with video Rivl high level semantic description of video operations also allows the interpreter to optimize the execution of Rivl programs The next section describes these optimizations The Rivl Interpreter This section discusses the implementation of the Rivl interpreter In the first two subsections we discuss the efficient implementation of image and sequence operations In the third subsection we discuss memory allocation issues for video computing and describe Rivl custom memory management system Implementation of Image Computing There are two ways to optimize still image computing First we must make sure that individual image operations such as scales rotations are efficient These issues have been addressed at length in the graphics literature and good algorithms are readily available Second we must be intelligent about which operations we call in what order to achieve our final result feature of Rivl that allows us to exploit the second type of optimization is lazy evaluation also known as execution Rivl only computes video data when it is needed for output or display The result is that at computation time Rivl can plan more intelligent computing strategy than if each command were executed immediately and independently The Rivl interpreter alternates between two modes of operation mode and mode In mode the interpreter evaluates Rivl programs recording and storing operations in directed acyclic graph DAG whose edges correspond to images and whose nodes correspond to primitive operations scale or overlay This process is typically very fast since image operations are recorded but not executed In effect the DAG represents dynamic instruction trace of the Rivl program execution Consider the following program which overlays scaled and rotated version of the image onto the image set tiger tiger tiger set flowers flowers tiger flowers Figure shows the graph created by this program Both and are implemented with pair of translations surrounding an or the translations move the origin of the scale and rotate operations to the center of the image Figure Sample image graph call to triggers the mode In principle the Rivl interpreter traverses the graph from inputs to output computing intermediate images until the output image is computed But before computing the images the interpreter perform several optimizations Two optimizations graph restructuring and calculation are described below Graph restructuring The first optimization modifies the graph so its output is equivalent but the computation is more efficient Such modifications include combining or swapping adjacent nodes For example figure contains six adjacent affine transformations Rivl collapses these nodes into single affine transform figure This optimization improves both the computation speed and the quality of the final image by reducing the number of times the image is resampled calculation The second optimization introduced by Shantzis is to compute only those regions of each intermediate image that affect the final result In our example program only small portion of flowers is visible in the final result figure on right It is sufficient to read in and blur only this portion Rivl calculates regions for intermediate images for every edge in the DAG the have region the need region and the result region The have region at an edge is the region of pixels provided by the edge left node The need region at an edge is the region of pixels needed by the edge right node Finally the result region is the intersection of have and need This intersection contains all the pixels that both have defined values and affect the final output image Only the pixels inside the result region need to be computed Figure shows the regions computed for each intermediate image in our example graph In particular only small region is calculated for each of the two lower images Following these optimizations the Rivl interpreter computes the graph result image writes the image to disk and returns to processing commands in mode Figure Restructured image graph Result regions Implementation of Sequences Our implementation of sequences borrows many ideas from our implementation of images since many optimizations prove especially beneficial for sequence computing We will use scrolling titles as sample task to motivate this section The following program adds scrolling credits to the last seconds of second minute movie set credits credits expr credits credits expr set raiders set outseq credits raiders outseq Program Adding scrolling credits to the end of movie The titles are stored as Postscript program that generates long image The function makes the titles background transparent The program converts the image to sequence credits scrolls credits upwards over time using and scales and shifts credits to the desired time range sec The final overlays the titles onto the raiders movie and the result is written to the file Like image commands sequence commands are stored in graph called the sequence graph until the sequence is computed in response to command Figure shows the sequence graph for program in which each node corresponds with one line of the program The sequence graph is used to generate set of image graphs that correspond to the sequence individual frames Figure Sequence graph for scrolling titles Suppose we want to compute the frame in the output sequence at time We perform two passes over the sequence graph backward pass and forward pass In the backward pass we compute timestamp for each edge An edge timestamp indicates the time value at that edge that influences output frame As we traverse the graph each and node we encounter potentially alters the timestamp The top of figure shows the timestamps computed for In the forward pass we build an image graph corresponding to output frame As we traverse the sequence graph each and node we encounter adds node to the image graph uses the timestamp to determine which frame to read uses the timestamp when substituting values for and The bottom of figure shows the image graph computed for To compute the whole sequence we repeat the image graph generation algorithm for all relevant output times at increment of where fps is the desired frame rate in of the output sequence For program ranges from to The resulting graphs are merged into single compound image graph as shown in figure Figure Generating the image graph for Figure Image graph for entire sequence The optimizations of section are used to process the compound image graph to produce the output images along with two additional optimizations image subgraph reuse and detection Image subgraph reuse In figure the subgraph containing and is replicated many times It is more efficient to use single subgraph with multiple output edges as shown in figure In this way the pixels of are read and masked only once and the various nodes share common input In general Rivl detects and merges redundant image subgraphs whenever possible form of common subexpression elimination detection In our example the first seconds of appear unchanged in the output An obvious optimization is to avoid unnecessary decompression and compression by copying the compressed data directly to the output In formats such as MPEG direct copying is not always possible on every frame since MPEG sequences contain frames that are encoded as differences from other frames and can not be decoded in isolation However MPEG streams are often divided into groups of pictures GOPs usually to frames long that are independent from other GOPs When reading and writing MPEG Rivl transfers groups of pictures directly whenever possible Figure Image graph for entire sequence with shared subgraph Memory Management In addition to optimizing image and sequence calculation the Rivl interpreter contains custom memory management module to cache previously computed images and cope with very large images To understand the utility of caching images consider the evaluation of the graph in figure The output of the node is used many times it is advantageous to cache this image The Rivl memory manager detects this case freeing each image only when it is no longer needed in the current graph evaluation Another issue is whether to store images after graph evaluation ends Interactive applications of Rivl often require repeated evaluations of slightly changing graph Because the language restricts the way image graphs can be modified the image associated with an edge remains accurate for the lifetime of the graph and can be cached Unfortunately we have no special knowledge about which images to cache for future graph evaluations In principle the user can access any edge that was ever created Mistakenly discarding data is nonfatal since we can always recompute the data but such mistakes hurt performance To address this issue Rivl provides an command to allow applications to set the priority of an image The memory manager discards low priority images and keeps high priority images in memory For instance video editor built using Rivl calls to raise the priority of displayed images so that the results of special effects can be quickly viewed We are looking into algorithms and heuristics for automatic priority adjustment For example images generated by expensive operations and images that have been referenced repeatedly in the past are candidates for high priority The initial implementation of Rivl treated images as indivisible memory buffers Unfortunately this representation performed poorly for large images The Rivl memory manager divides large images into pages of manageable size figure Pages are handled as independent entities by the memory manager allowing an image to be cached in parts In addition large images with considerable blank space are efficiently represented by set of pages figure Figure Dividing large image Representing sparse image To illustrate the utility of Rivl memory management policy we consider the execution of the scrolling titles program program under standard memory model in which the entire image is read into virtual memory buffer for the duration of the program Assuming color image this requires MB of storage In contrast Rivl accomplishes the task as follows The title region is divided into ten equally sized pages given Rivl current maximum page size Rivl allocates loads and masks each page of data only when necessary The results of each call to are cached for future requests Rivl discards pages as soon as they are no longer needed The memory footprint is MB enough for Rivl to hold two pages at once In summary the Rivl interpreter uses variety of strategies to optimize execution of Rivl programs They are Graph restructuring Combining or reordering nodes in the graph for speed calculation Computing only the parts of an image that affect the output Direct transfer detection Copying compressed data directly to the output when possible Image subgraph reuse Sharing common subexpressions in the image graph Image caching Caching images if they are needed later in the graph evaluation Image subdivision Dividing large images into manageable pieces Related and Future Work Many commercial packages are available that provide software libraries of image manipulation functions Some use execution to achieve similar optimizations as those mentioned in section These include the Pixar system described by Shantzis and Silicon Graphics ImageVisionLibrary Holzmann Popi allows image transformations to be specified with concise expressions at mechanism that permits rapid prototyping of new image primitives We are adapting this idea to Rivl None of the above mentioned systems provide language support for motion video Some systems Data Explorer or Khoros provide graphical programming environment where image programs are expressed as flowcharts Although this way of expressing image operations is an improvement over pixel manipulation the limitations of flowcharts for expressing complex programs are Furthermore the support for motion video operations in these systems is limited or Matthews Gloor and Makedon VideoScheme combines Apple QuickTime movie player with video manipulation language In VideoScheme the user works with objects close to the underlying implementation of video data such as pixel arrays and frames This access gives users considerable flexibility in creating new image operations For example algorithms for detecting cuts in video can be easily built out of pixel array primitives In contrast Rivl high level of abstraction allows it to exploit delayed computation for improved efficiency and its resolution independence makes programs more portable Rivl is implemented with lines of code and lines of Tcl code It has been ported to the Sun OS HPUX and Linux operating systems Rivl has been used to build simple video editor Rivl and its editor can be found at http The Rivl language is still evolving We are extending the core set of Rivl primitives to support other types of video processing such as image analysis computer vision and morphing With the right primitives we hope to build rapid prototyping environment for exploring video content processing We are also building parallel implementation of the Rivl interpreter using workstation clusters In this implementation Rivl program will run quickly using low resolution images on small cluster slowly using high resolution images on small cluster and quickly using high resolution images on large cluster The interpreter will automatically parallelize the Rivl program using both coarse grained parallelism one image one process and fine grained parallelism one image multiple processes References Aho Sethi and Ullman Compilers Principles Techniques and Tools Reading Mass pp Data Explorer software package IBM Foley et Computer Graphics Principles and Practice second edition Reading Mass Holzmann Gerald Popi AT Bell Laboratories Murray Hill NJ Le Gall MPEG video compression standard for multimedia applications Communications of the ACM April Vol pp Matthews James Peter Gloor and Fillia Makedon VideoScheme Programmable Video Editing System for Automation and Media Recognition ACM Multimedia Proceedings pp Pennebaker JPEG still image data compression standard Van Nos and Reinhold New York Poskanzer Jef The Extended Portable Bitmap Toolkit PBMPLUS Postscript Adobe Systems Incorporated Mountain View CA Shantzis Michael Model for Efficient and Flexible Image Computing SIGGRAPH Proceedings pp Ousterhout John Tcl and the Tk Toolkit Massachusetts Rasure and Kubica The Khoros Application Development Environment Experimental Environments for Computer Vision and Image Processing editor Christensen and Crowley World Scientific Silicon Graphics ImageVision Library Silicon Graphics Mountain View CA Swartz Jonathan and Smith Brian RIVL Resolution Independent Video Language Submitted to the Workshop July Toronto CA http Footnotes The Rivl image type is unrelated to the canvas image type	other	cornell
934	 Server Date Sunday GMT Saturday GMT Term Project Parallel Ray Tracing in Vineet Ahuja Amith Yamasani We propose to parallelize an existing implementation of ray tracer called Raylab which is public domain software This sample scene reduced here took approximately minutes to render on the sequential version We have finished learning and now intend to investigate strategies for parallelization of the code We will then convert the program first to program is currently in and then to We hope to come close to of The program will be implemented on the port of DATE TIME	other	cornell
935	 Server Date Sunday GMT Wednesday GMT Fall Syllabus Fall Automata and Computability Theory Syllabus Below is tentative list of topics to be covered in the course They fall into three major areas Finite Automata and Regular Sets Pushdown Automata and Context Free Languages Turing Machines and Effective Computability Each area will comprise roughly third of the course The entire body of lecture notes is available in postscript format by clicking here or you can obtain hardcopy for from Linda Mardel in The lecture notes are soon to be published as textbook by For that reason am very interested in your comments and suggestions In particular will pay you for each mistake typo misspelling etc that you find that do already know about known errata Suggested supplementary readings are taken from the text by Hopcroft and Ullman Introduction to Automata Theory Languages and Computation In addition to these specific topics it is important that by the end of the course you have good general understanding of what it means for set to be regular recursive and of the capabilities of finite automata pushdown automata and Turing machines and of how to describe sets using regular expressions and grammars Finite Automata and Regular Sets Chps Lecture Course Roadmap and Historical Perspective Lecture Operations on Sets Lecture Finite Automata and Regular Sets Lecture More on Regular Sets Lecture Nondeterministic Finite Automata Lecture The Subset Construction Lecture Pattern Matching and Regular Expressions Lecture More on Pattern Matching Lecture Regular Expressions and Finite Automata Supplementary Lecture Kleene Algebra and Regular Expressions Lecture Homomorphisms Lecture Limitations of Finite Automata Lecture Using the Pumping Lemma Lecture DFA State Minimization Lecture Minimization Algorithm Lecture Relations Lecture The Theorem Supplementary Lecture Collapsing Nondeterministic Automata Supplementary Lecture Automata on Terms Supplementary Lecture The Theorem for Term Automata Lecture Finite Automata Lecture and Regular Sets Pushdown Automata and Context Free Languages Chps Lecture Grammars and Languages Lecture Balanced Parentheses Lecture Normal Forms Lecture The Pumping Lemma for CFLs Lecture Pushdown Automata Supplementary Lecture Final State vs Empty Stack Lecture PDAs and CFGs Lecture Simulating NPDAs by CFGs Supplementary Lecture Deterministic Pushdown Automata Lecture Parsing Lecture The Algorithm Supplementary Lecture The Algorithm Supplementary Lecture Parikh Theorem Turing Machines and Effective Computability Chps Lecture Turing Machines and Effective Computability Lecture More on Turing Machines Lecture Equivalent Models Lecture Universal Machines and Diagonalization Lecture Decidable and Undecidable Problems Lecture Reductions Lecture Rice Theorem Lecture Undecidable Problems about CFLs Lecture Other Formalisms Lecture The Supplementary Lecture While Programs Supplementary Lecture Beyond Undecidability Lecture Incompleteness Theorem Lecture Proof of the Incompleteness Theorem Supplementary Lecture Proof home page	other	cornell
936	 Server Date Monday GMT Thursday GMT Prelim Prelim General Info Thursday March pm The Prelim review session will be held on Sunday March at pm in Baker Room Assignments Olin Upson PH Kimball PI Olin Olin Spring pierce	other	cornell
937	 Server Date Sunday GMT Tuesday GMT Poetry Poetry Author Note wrote most of these poems over the past year not too surprisingly my emotional turmoils are often reflected in the verses The Emigrant Soldier What soil sand or rock did tenderly kiss as the holy ground of my homeland Whose water wine or sweetened liquor care lift to quench my thirsty throat From whom did accept gold silver and that which glitters in payment for the crimson stains upon my metal Undisturbed save by the chilly winds of wilderness slept under foreign skies with unknown shrubbery my bedding My resting place lay unmarked save by rusty broken sword The Electric Kiss In the darken world of digital songs bounded by whirling bits of zeroes and ones We kissed Devoid of sensations yet felt your lips upon mine tender moist tinted with the lightest touch of passion smelled the scent of your fragrant locks and tasted the wetness of your mouth Though separated by time place and physical laws We kissed uncaring unbound enjoying only the moment joining the pleasures of nanosecond With sadness and tearful reluctance we parted separated Ended the Electric Kiss Declaration The smile of your tender lips brightens my leaden heart The swirl of your soft flowing locks warms like the sun The batting of your gentle eyelashes makes my steady hand quake The laughter in your glittering eyes makes my life full of joy Oh dear one How do love you How fleeting the ticks of clock when am with you Soft chuckles and heartfelt laughter did enjoy with you What little else can say but love you Prisoner No rings of iron nor ropes of hemp bind me No walls of concrete enclose me No cuffs of steel nor pillory of wood shackle me Yet am prisoner Memories of our tender kiss muffles my voice Thoughts of our shared secrets restraints my action The door to my cage is unlocked open Yet remained within Yet am prisoner Prisoner in loving you Three Loves What is love they asked Which love answered Tell us of the first they asked cried as thought of the answer but no tears came It had dried long ago screamed as memories came back but no sounds of agony issued It had silenced long ago Trembling answered The first love is like poisoned blade thrust in your heart by the pale hand of loved one so slowly twisting uncovered my hand from my chest and black blood yet flowed trickling down to stain the floor As we walked they asked again What is love they asked Which love answered Tell us of the second they asked lifted leather sack and opened it My heart beats within surrounded by sharp glittering glass shards shook the bag and felt the pain Cursing spit out mouthful of scarlet That is the second love answered Pain from thousand cuts twisting churning the gentle touch of your loved one placed your heart in bag of broken glass As we walked they asked again What is love they asked Which love answered Tell us of the third they asked cried no tears came but blood streaked Streaked down my face screamed but my voice cracked my throat tightened in noose fell on my knees The beating heart within the sack The sword wound upon my chest Nothing Nothing Tell us of the third they pressed again ca gasped There is Voices Under the pale moon chatted with digital shadows Men and women with voices flowing through web web of tubes Each mask of electrons wears Deceitful smiles of delight flashed in their curious eyes game of romantic intrigue they played without tender yielding flesh without gentle kisses or red roses without any form of golden bands drifted amidst sea of banshee sounds Blind and Numb hear the Lake of Souls Save me save me Ha ha ha ha Tell me of that IMHO the cried and laughed with them Yet in the end They are little more than distant voices as am to them Tender is the Night Tender is the night when Luna luminous glow fell upon your lovely face and stars winced in bright jealousy Soft is the evening breeze that the whispers of air send your locks rippling like ocean waves caressed the gentle curves of your neck feeling the comforting smoothness of your skin Gently kissed your half closed eyelids Embracing you felt our bodies tremble in tingling resonance our hearts pounded fearful yet full of love delightful joy Tender is the night when Luna grew bashful behind the formless clouds and stars twinkled in glitters of envy Envious of us Modes Whistling breeze through tattered veils Broken shards of light and shadows Pale transluscent marble floor Dried droplets of blood and tear Wandering did breathless moans of lust Tender whispers of yearning yet echos Pacing the thoughts Ringing laughters and fleeting smiles Lonely House Two Tattered Veils Three Broken Windows and Four panels of Stained Floor And would be the one to hold you down kiss you so hard take your breath away Dark Winds over Sethanon With cynical intelligence and festering passion fought upon the wall of grey Sethanon beneath Dark Sun and Dark Moon Each moment hectic exertion Each moment sorrowful introspection Fleetingly fell the sands of time As the embers of hope grew dimmer Howling winds cleaved its chill to my bone Grimacing steel laced through my flesh tasted the bitterness of my blood Hot salty tears streaking down my soul Once you and kissed farewell in street devoid of others Farewell Kiss Like stringless kite flew my caring thoughts of you No longer able to enter your world No longer able to warm your heart saw the tragedy acted out Neither laughter nor joy in the finale Only frozen shards of dreams remain In that sudden moment understood little the promises that would never be In that blinking of the eye Your face was unfamiliar no longer the one had known Snow descended in my world So cold so cold that could not love so cold that it expose my every hidden regret You and kissed farewell in an alley with no others letting the wind mock my weakness incapable of pushing you away You and kissed farewell in the chaos of night my heart waiting anticipating sorrow and despair At Buttermilk Fall Tho brilliant sunlight streamed across my face And glittering blue flowed the sky above me Dark and shadowy swirled my thoughts Tho grass swayed in breeze And aqua lotus leaves floated upon the rippling pond Black and grey trembled my feelings small tome of love poems the gentle reminder of that difficult truth is better to loved and lost then loved at all Depression and Desolation mine Dark Shadowy Black and Grey Until thought of your gentle face your hazel eyes and dark locks your beautiful carefree smile Slowly gradually almost imperceptiblly the corner of my lips turned smiled as thought of you Monologue Broken Verses In the silence of the night am troubled In the noise of the day am worried Shards of my dreams rained upon me their sharp points and razor edges bled me Why is it that must ever turn inward to face that abyss within To be alone in confronting the demons Why ask why Do you not hear the laughter within the wind Mocking silly laughters that sends chills up my spine Do you not hear the cries within the cackling fire Taunting eerie cries that burns me No tears no sadness No screams no sorrow Only embers of resentment now remain In the end only the flame of anger and hatred remains to burn away the excessive emotional burdens to burn away the impurities to burn away all but the focus sighed at the sands the rocks the azure heavenlies If must fight on alone so be it In the end if must pay so be it So be it laughed there is no joy in the sound laughed Musings to Demons In the twilight of broken visions when my left arm clots of scarlet my constant companions are but two Death and Despair Where are my tears long wondered Perhaps they fled this cruel mortal shell leaving me expressionless What twisted creature within me mocks That should laugh and taunt my own misery Death and Despair Death and Despair How you been with me always false laughter or an joke mocking my own screamless torments can not break your companionships Longing for the end Mayhaps Blood stained white roses Teardrops upon broken granite Lightning in gray tempest These are but few of my favorite things Thunderstorm Sky gray edge to edge Thunderous boom resound heavenlies Billiant glare lights above Tear drop rain softly caressed Amidst storm stood awed Stilled at Nature mood Thunderstorm II Through eye edge steel sky held Sudden flashes ripped blacken clouds Echoed still thunderous clash Chilled rain washed my burning tears Impressions Colored shadows filtered in ambient light Neon brilliance stared out to cloaked streets Airy curly lazily drifted puffs of virulent cigarette smoke Harshly speedily pressingly pounded drums voices and metallic strings Hazel transluscent emerald and scarlet ebbed vessels of ethanol Notes trembled through walls floors and wavering forms Portraying feverish beating dream Familiar faces lighted by inhaled tobacco whispered softly into ears Why do people come to such places do know but hey barkeep could you get me another one References Possession from Fumbling toward Ecstacy Sarah McLachlan Arista Records Farewell Kiss from Farewell Kiss translated from Chinese	other	cornell
938	 Server Date Sunday GMT Thursday GMT CS Course Staff Multimedia Systems Computer Science Department Cornell University Fall The People in Charge Instructor Brian Smith Upson Office Hours Mon pm Email bsmith Teaching Assistants Tibor aacutenosi Upson Office Hours Th pm Email janosi Kian Fai Leong Upson Office Hours TBA Email kleong Course Administrator Cindy Robinson Upson Email cindy All routine administrative matters are handled by the course administrator including petitions for regrade and misrecorded grades home page	other	cornell
939	 Server Date Sunday GMT Wednesday GMT Ankit Patel homepage Photo Galleria Personal Dad and Mom Brother	other	cornell
940	 Server Date Sunday GMT Tuesday GMT CS Exams Exams There will be three hour preliminary examinations and hour final ExamDateTime Prelim Prelim Prelim Review Sessions Will be held at pm on Sundays before each prelim and before the final exam Review sessions are scheduled on Sunday and in Olin Last Updated on Friday September PM Any Comments or Suggestions Email them to dwu	other	cornell
941	 Date Sun Nov GMT Server Mon Sep GMT Bruce Land CV Publications academic Land Sastre and Podleski Tetrodotoxin sensitive and insensitive action potentials in myotubes Cell Physiol pp Gartner Land and Podleski Genetic and physiological evidence concerning the development of chemically sensitive ionophores in cells Neurobiology pp Land Podleski Salpeter and Salpeter Acetylcholine receptor distribution on myotubes in culture correlated to acetylcholine sensitivity Physiol London pp Land and Salpeter Basis for computer program for mask analysis of EM autoradiograms An appendix to Salpeter McHenry and Salpeter Resolution in EM autoradiograms IV Analysis of autoradiograms Cell Biol Salpeter and Land Physiological consequences of acetylcholine receptor and esterase distribution in vertebrate endplates La Transmission Neuromusculaire Foundation Maisson Land Salpeter and Salpeter Acetylcholine receptor density affects the rising phase of miniature endplate currents Proc Nat Acad Sci USA pp Land Salpeter and Salpeter Estimation of kinetic parameters of acetylcholine binding in intact neuromuscular junction Proc Nat Acad Sci USA pp Land and Farmer Computer assisted training in reading skills Proceeding of the Johns Hopkins first national search for applications of personal computers to aid the handicapped IEEE Computer Society Press Oct Land Harris Salpeter and Salpeter Diffusion and binding constants for acetylcholine derived from the falling phase of miniature endplate currents Proc Nat Acad Sci USA pp Bartol Land Salpeter Salpeter MonteCarlo simulation of miniature endplate current generation in the vertebrate neuromuscular junction Biophysical Journal pp Land and LoPerfido case for scientific visualization in undergraduate and graduate classrooms Journal of Computing in Higher Education pp Land and Gillilan IEEE Supercomputing workshop on Chemistry and visualization Scientific Visualization of Chemical Systems Proceedings of the Conference on High Performance Computing and Communications pp Land Teaching computer graphics and scientific visualization using the dataflow block diagram langauge DataExplorer IFIP Transactions University Education Uses of Visualization in Scientific Computing North Holland pp Hedge McCrobie Land Morimoto and Rodriguez Healthy Keyboarding Effects of wrist rests keyboard trays and preset tiltdown system on wrist posture seated posture and discomfort Proc of the hunam factors and egronomics annual meeting Vol pp Hedge McCrobie Morimoto Rodriguez and Land Painfree Computing Use of preset tiltdown keyboard system and new tools for visualiziong wrist postures lead the fight against carpal tunnel syndrome Ergonomics in Design Vol number pp Doerr and Land in press Using DataFlow Language and the World Wide Web for Scientific Visualization Computer Applications in Engineering Education Publications commercial Land INTERSTAT statistical analysis package for the Apple II computer Serendipity Systems Ithaca NY Land and Farmer program for computer assisted training in reading skills DYNACOMP Rochester NY Land stopwatch simulation to demonstrate the Macintosh user interface Nibble Mac Magazine Vol page Land toolbox windows Nibble Magazine Vol page Land Enhanced menus Nibble Mac Magazine Vol page Land Recursive drawing of dragon curve on the Macintosh Byte Magazine April Lectures Kelly Lecture Series Innovation in undergraduate teaching at Oregon State Nov Using language to teach computer graphics Awards First place in the Instructional Materials competition of the ACM SIGUCCS User Services Conference XXIV Regional level winner of the Johns Hopkins first national search for computing to aid the handicapped Title assisted training in reading skills Computer and Electronics Activities Design and installation of cell sizing circuit for laser cell sorter Patent Contributing Editor for Nibble Mac Magazine ESEI Design Trumansburg NY Layout and artwork for the printed circuit board of complex motor controller High School Spencer NY Taught hour course on BASIC computer language for teachers and students computers were and Apple II microcomputers including graphics and business applications Serendipity Systems Ithaca NY Development of statistical analysis system for the Apple microcomputer sold more than copies Department of Neurobiology and Behavior Cornell University Taught hour course on the interfacing of microcomputers to lab instruments Topics included conversion digital control and program considerations Design and construction of analog and microprocessor Intel driven generators for field behavior studies for professors Robert Capranica and Ronald Hoy	other	cornell
942	 Server Date Monday GMT Thursday GMT MPEG Browser MPEG Browser What is MPEG Browser Until now we could view mpegs just like we could watch movies Unfortunately we were unable to take the advantage of digital format have not seen mpeg players allowing user to skip to arbitrary frame fast forward rewind etc Even more importantly the video was basically sequence of frames with no structure But it is obvious that video higher structure than frames we can partition video into shots scenes and larger chunks like movies tv shows etc We can also partition the video accoding to the content for example we might want to select segment of video in which particular actor appears provides an interface for browsing video User can play video stop at arbitrary point fast forward What is the advantage of MPEG Browse over other video players MPEG Browse adds very limited yet useful structure to the video it partitions the video into shots Based on these information the browser can skip to the next shot much like CD player can skip to the next song The scene break algorithm was developed by Ramin Zabih Justin Miller and Kavin Mai For more details about the algorithm see works in two modes preprocessing and browsing Preprocessing is necessary for two reasons the algorithm for detecting scene breaks does run in real time and the decoder is not fast enough which means that in order to skip to some place in the movie the user would have to wait about as long as it would take to play the sequence Preprocessing is madatory since the information generated is essential to the work of browser The preprocessing has to be done only once the information for each mpeg file is saved on the disk in file where the filename is the name of the mpeg In addition to video browsing supports wide variety of options both command line and menu Most options have no effect after the start of the video but future releases will allow change of many options like dithering frame rate or skiping frames at arbitrary times runs on Linux SunOS Solaris and probably any machine other which has wish and can compile Berkeley Visitors Download distribution of MPEG Browse Send comments and suggestions to Robert Szewczyk szewczyk	other	cornell
943	 Server Date Monday GMT Saturday GMT CUCS Other Servers Other Servers Home Page General Information Academic Information Cornell CS Gopher Cornell CS Anonymous FTP Other Cornell Web Pages CS Department Home Page	other	cornell
944	 Server Date Sunday GMT Monday GMT CS Course Materials Course Materials Most of our materials are in Portable Document Format pdf Project Info Lectures Assignments Readings Download Acrobat Plugin Project Info Deadlines September White Paper Submission October Project Written Proposal October Project Progress Report November Project Presentations December Conference Paper Submission Project Materials Project Proposal Instructions Project Homepage Template Suggested Projects Project Questions Answers Lectures Topic Introduction pdf Topic Digitizing Audio and Video pdf Topic Color in Video pdf Topic Video Compression pdf Topic Introduction to Compressed Domain Processing pdf Topic Rivl pdf Topic Morphing pdf Topic Video on Demand pdf Topic Networks pdf Topic Lossless Compression pdf Topic Audio Compression pdf Topic Video Compression Take pdf Topic Compressed Domain Processing Take pdf Topic Networking Take pdf Topic Salient Stills pdf Topic Speaking and Writing pdf Assignments Homework due Introduction to NETPBM library Homework due Readings Paper Review Form Analog Video Representations Blinn James The World of Digital Video IEEE Computer Graphics and Applications September Poynton Technical Introduction to Digital Video John Wiley Sons pp Poynton Colour FAQ Video Compression Wallace Gregory The JPEG Still Picture Compression Standard IEEE Transactions on Consumer Electronics Le Gall Didier MPEG Video Compression Standard for Multimedia Applications Communications of the ACM April Audio Compression Houtsma Psychophysics and Modern Digital Audio Technology Philips Journal Research Vol pp Zwicker Eberhard and Zwicker Tilmann Audio Engineering and Psychoacoustics Matching Signals to the Final Receiver The Human Auditory System Journal of the Audio Engineering Society March Video Processing Smith Rowe Algorithms for Manipulating Compressed Images IEEE Computer Graphics and Applications September Tang Methods for Encrypting and Decrypting MPEG Video Data Efficiently Proc of the Fourth ACM International Conference on Multimedia Boston MA November Beier Neely Image Metamorphosis Proc of SIGGRAPH July pp Video on Demand Gemmel et Multimedia Storage Servers Tutorial IEEE Computer May Reddy Disk Scheduling in Multimedia System Proceedings of the First ACM Conference on Multimedia San Francisco CA August ACM Press Networks Macedonia Brutzman MBone Provides Audio and Video Across the Internet IEEE Computer April pp ftp Smith Priority Driven Protocol Zhang Deering et RSVP New Resource ReSerVation Protocol IEEE Network vol no pp September http Download Acrobat To download netscape plugin to read PDF files press here for Windows MB press here for Macintosh MB press here for Sun OS MB press here for Solaris MB press here for and higher MB press here for other systems home page	other	cornell
945	 Date Sun Dec GMT Server Wed Nov GMT Welcome to Cornell Chinese Mandarin Christian Fellowship Page Yes We have been back at the OFFICAL SITE offered by Cornell University for registered student organization	other	cornell
946	 Server Date Monday GMT Monday GMT Distributed Manipulation and Mechanical Systems MEMS Distributed Manipulation and Mechanical Systems MEMS Description Recently graduate student Jim Jennings research associate Daniela Rus graduate student Russell Brown Professor Bruce Donald and lab alumnus Jonathan Rees now at MIT developed team of autonomous mobile robots that can perform sophisticated distributed manipulation tasks such as moving furniture The robots run robust SPMD protocols that are completely asynchronous and require no communication Grad student Karl Professor Bruce Donald and EE Professor Noel MacDonald are building massively parallel array of microactuators in the Cornell National Nanofabrication Laboratory The array is SCREAM chip containing over actuators in square centemeter and can orient small parts without sensory feedback Our microfabricated actuator arrays could be used to construct programmable at any scale or to build IC walking VLSI chips Demos Massively parallel actuator arrays Recent Publications New papers Donald and MacDonald Silicon Actuator Arrays for Micro Manipulation Tasks IEEE Workshop on Micro Electro Mechanical Systems MEMS San Diego California February Accepted to appear Donald and MacDonald Classification and Lower Bounds for MEMS Arrays and Vibratory Parts Feeders What Programmable Vector Fields Can and Can not Do Part IEEE International Conference on Robotics and Automation ICRA Minneapolis Minnesota April Accepted to appear Donald and MacDonald New and Improved Manipulation Algorithms for MEMS Arrays and Vibratory Parts Feeders What Programmable Vector Fields Can and Can not Do Part II IEEE International Conference on Robotics and Automation ICRA Minneapolis Minnesota April Accepted To appear Published papers Distributed Robotic Manipulation Experiments in Minimalism in International Symposium on Experimental Robotics ISER Stanford CA Moving Furniture with Teams of Automonous Mobile Robots with Jennings and Rus in Society of Japan International Workshop on Intelligent Robots and Systems IROS Pittsburgh PA Sensorless Manipulation Using Massively Parallel Actuator Arrays with Mihailovich and Noel MacDonald Proc IEEE International Conference on Robotics and Automation San Diego CA May demo and more detailed explanation Program Mobile Robots in Scheme with Rees Proc IEEE International Conference on Robotics and Automation Nice France May pp Information Invariants for Distributed Manipulation with Jennings and Rus in The First Workshop on the Algorithmic Foundations of Robotics Peters Boston MA ed Wilson and Automatic Sensor Configuration for Planning with Amy Briggs Proceedings IEEE International Conference on Robotics and Automation San Diego CA May Kinodynamic Motion Planning with Xavier Canny and Reif Journal of the ACM Vol No pp Provably Good Approximation Algorithms for Optimal Kinodynamic Planning Robots with Decoupled Dynamics Bounds with Xavier Algorithmica Vol no pp Provably Good Approximation Algorithms for Optimal Kinodynamic Planning for Cartesian Robots and Open Chain Manipulators with Xavier Algorithmica Vol no pp am writing book entitled Information Invariants in Robotics draft of the first quarter of this book appeared as paper in Artificial Intelligence Here it is Information Invariants in Robotics Revised MS based on the paper On Information Invariants in Robotics Artificial Intelligence Vol Jan pp Recent Theses and Papers of PhD Students Patrick Xavier PhD Except for the thesis these TR are mostly superseded by three more recent journal papers listed starting here Amy Briggs PhD Her Papers and Thesis Russell Brown PhD His Papers and Thesis Jim Jennings His Papers More papers are avalable through the Cornell CS TR server Pictures We have developed team of small autonomous mobile robots that can move furniture around in our lab for group portrait of our robots Click here to see picture of Tommy and Lily mobot pushing couch Click here to see picture of Tommy and Lily rotating couch Click here to see picture of Tommy the mobile robot drawn by Loretta Pompilio Click here to see pictures of people and robots working in the lab Our lab was on The Discovery Channel Beyond and you can find out more about it here Other people and robots in the Cornell Robotics and Vision Laboratory Cornell Robotics and Vision Laboratory home page	other	cornell
947	 Server Date Sunday GMT Saturday GMT Cornell University Home Page Academic Units Admissions Alumni Parents and Friends Big Red Sports Campus Tour coolsites cornell CUinfo and Other Web Sites Guest Book News and Events Searches and Directories This is Cornell Visiting the Campus Have comments or questions about this Web site Let us know in our Guest Book URL http Last modified November Cornell University	other	cornell
948	 Server Date Monday GMT Friday GMT CS Fall Lecture Lecture MaxFlow homepage Page Page Page Page Page Page Page Page Page	other	cornell
949	 Server Date Sunday GMT Monday GMT CS Course Handouts Handouts are available outside of Upson Last Updated on Sunday September PM Any Comments or Suggestions Email them to dwu	other	cornell
950	 Date Mon Dec GMT Server Wed Mar GMT Lab CS Laboratory Physically Based Animation Introduction In this lab you will use physical forces and accelerations descriptions of processes to animate objects There are several good reasons why you may want to compute motion of objects based on forces rather than attempt kinematic description of object motion It is often easier to write an expression for the forces on an object differential equation than it is to directly describe the motion Dynamic systems based on forces evolve automatically so than the motion is physically correct given the correct equations This automatic behavior relieves the animator of attention to lots of boring detail For chaotic systems it is impossible to write kinematic description Refer to the section on dynamics in the CS page for more information about solving dynamic systems Three examples are shown here of systems which would be difficult or impossible to animate by manual kinematic description gravitation Water waves Billards impact system Assignment Download load macros and move to your directory Bug as of After you donwload the open it and remove the Set module then replace it with new Set module then reconnect it and save it The internal state of the module seems to be messed up Execute the programs to understand their behavior then modify them as follows Modify the to allow other force laws besides inverse square Provide an interactor to set the exponent on the law from inverse first power to inverse fourth power Can you make stable orbit with just two gravitating bodies for inverse first power or inverse third power force laws Modify the linear wave equation given in program to simulate water by making the acceleration proportional to depth Refer to the dynamics section for more information on water waves Make the function which represents the bottom of the region containing the water have some variation with position perhaps gaussian hillock Note correction on missing minus sign was added When the modified program is running correctly the water wave should slow down over the bump and will bounce off the bump if it is above the surface Modify the program you just wrote to simulate cannon firing ball through the air and into water where it starts wave Use Euler integrator for the ball and the given Verlet integrator for the water The ball should have initial conditions of position corresponding to the muzzle of the cannon and velocity consistent with the cannon altitude angle with the horizontal and azimuth horizontal direction You should be able to set the altitude and azimuth of the cannon via interactors which means you will have to detect where and when the ball hits the water surface which is flat until the ball hits it You will need to figure out how to notify the water simulation that the ball hit perhaps by adding sudden velocity to the water where the ball hit There should be interactors to set the force of gravity on the ball and the air drag coefficient For the ball assume that ax ay az where vx vy vz are the components of the velocity and ax ay az the components of the accelaration Be prepared to demo the two programs in section You will also need to demonstrate mpeg movies of final results including An orbit if any in an inverse first power field One paticular cannon shot into the water You should be able to explain your programs You should use macros and comments in the Notation field of each module so that you and the grader can understand the program Control panels if any should be well organized labeled and with the appropriate numeric ranges Some results from The Lab grading guide will be filled out by consultant during section to evaluate your work Back to Main Page Last modified Land Copyright Statement	other	cornell
951	 Date Sun Dec GMT Server Mon May GMT Blobby Modeler Blobby Modeler Version May Huang Acknowledgements Anu for lending me the book Asif for giving me good ideas every now and then Bruce Land for the guidance and patience Mom and Dad for the money it cost to come here and so much more and Mabs for making everything worthwhile My most heartfelt gratitude This document contains information relevant to the development of Blobby Modeler including summary of previous research leading to the actual project Instructions on the installation and operation of the software are likewise provided An Introduction to Blobby Modeler What it is what it does and some theoretical foundation on how it came to be Goals hope to achieve in the development of this software Design methodologies and implementation stages Installing and using Blobby Modeler Conclusion and summary of features accomplished and perhaps some future directions References to some relevant publications Introduction Established geometric modeling techniques exist to handle most engineering components including free form shapes such as car bodies and telephones More recently there has been lot of interest in modeling natural phenomena such as smoke clouds mountains and coastlines where the shapes are described stochastically or as fractals None of these techniques lends itself to the description of soft objects This class of objects includes fabrics cushions living forms mud and water Geoff Wyvill Craig McPheeters and Brian Wyvill As early as James Blinn began exploring methods to model molecular structures which was often done with or models In the interest of both artistic variety and scientific accuracy new model that can appear more like real electron density cloud for covalent bond The conventional approaches to model such shape via the familiar bicubic or quadric surfaces is difficult for elaborate molecules For this reason we seek to simulate an actual electron map with quantum mechanic representation of atoms as density function of the spatial location For example hydrogen atom might be represented as exp where is the distance from location to the center of the atom If several atoms are present in the scene the effects of their density field are simply added Extracting surface of constant value across the field the molecular density cloud can be formed Blinn named this the blobby model Years later Wyvill McPheeters and Wyvill decided to apply the technique more generally to the modeling of soft objects which are traditionally awkward at best to render They presented modification to Blinn exponential function with one which is computationally cheaper Additionally their function has the desirable quality of being able to ignore an atom which is too far from the point in question They first defined bicubic function where is the intensity of influence is the distance between the point in question and the atom and is the radius of influence of the atom An almost equivalent but more efficient version of the function is where the values of and are found by solving with the following constraints yielding In Shigeru Muraki took it one step further and applied blobby models on range data to visualize very interesting objects such as human faces Immediately obvious from his research is that to achieve reasonable degree of realism modeling anything other than simple molecules blobby model should be composed of large number typically hundreds of atoms IBM DataExplorer DX provides primitive modules that can be used to create blobby models However since the creation of the model involves the placement of many atoms manual design ceases to be good option quickly The Blobby Modeler was designed to ease the task of the creation of models as well as compute the resulting density field to prevent overloading DX Blobby Modeler was written in and in the spring semester of as partial fulfillment of requirements toward CS Master of Engineering Project under the supervision of Bruce Land Cornell University Department of Computer Science Goals The following are design goals of Blobby Modeler Ease of use the software should adhere to familiar user interface conventions to minimize the learning curve and increase productivity quickly Simplicity the software should be easy to use and maintain because it should run alongside DX It should fit in modest amount of memory Speed the software should be fast enough to increase productivity rather than decrease it Portability the software should be portable across Unix platforms and should be usable in the Cornell Theory Center IBM AIX Computer Science Department Undergraduate Laboratory and on SunOS will attempt porting to Linux as test of System machines Designing Blobby Modeler modeler running on conventional computer has the difficulty of unsuitable input devices Some attempts were made to allow for the mouse to control two of the dimensions and the keyboard the third but personally think that is clumsy and awkward to use Instead adapted the approach taken by many personal computer graphics tools as well as graphics workstation software provided three editing windows through which all degrees of freedom can be encompassed Blobby Modeler hosts editable windows fixed with the xy yz and xz views In addition it provides free window in which camera can be placed in and the model previewed The rendering in the free window is simplistic and in fact crude However complicated preview window can slow down the response of the software considerably and defeats our goal to be lean and mean By virtue of proximity Blobby Modeler was written on SunOS platform specifically one running SunOS The target platform would ideally be any platform that DX would support Though have not been able to test over many operating systems and versions fairly confident that the code should port quite easily To facilitate the development of the user interface selected the Toolkit versions and respectively Since this is an interpreted language and offers only complicated link to also selected an called Embedded Tk ET version by Richard Hipp drh is available at various sites including among others ET is available at Roughly speaking divided the tasks among and by writing in code that is very CPU intensive The portion turned out to include only the functions that generate the field including horrible loop and those that manage the free window which implement the transforms and projections In the portion notable feature is the liberal use of global variables to store partial results This is done to improve performance by reducing redundant recomputations Most values involving trigonometric functions are cached in these variables and recomputed only as necessary All in all the fragments are simple and straightforward composing only some of the total number of lines of code The portion of the software handles most of the interactions handling drawing selecting windows refreshes and others About of the program is involved here Since this was my first program it performance can likely be improved by rewriting some routines The help text is worth mentioning though implemented small widget in Tcl that can display very small subset of HTML There are subtle differences between my implementation and HTML Unlike HTML carriage returns are significant in the help text nested formats do work and formats can not span different lines Despite that conversion between the two formats should not be difficult Conclusions and Future Directions At its present state Blobby Modeler is complete editing platform ready for Undoubtedly as it undergoes actual usage problems will arise and enhancements will be made Glaringly absent however is the ability to move the atoms in an animation With that capability Blobby Modeler can probably be used to model scenes such as boiling water Animation will definitely be desirable addition Aside from spherical atoms it will also be interesting to incorporate atoms of other shapes to aid in the construction of the scene Cubes will certainly be easy to work with for instance The free window can of course be vastly improved to include its own renderer It will prevent the small trouble of having to go over the DX in order to render the scene Despite the possibilities this project has achieved its goal of providing fast interface for the designer of blobby models It is my hope that actual users will determine the usefulness of the program References Blinn Generalization of Algebraic Surface ACM Transactions on Graphics Wyvill McPheeters Wyvill Data Structure for soft objects Visual Computer Wyvill McPheeters Wyvill Animating soft objects Visual Computer Muraki Volumetric Shape Description of Range Data using Blobby Model ACM SIGGRAPH Ousterhout Tcl and the Tk Toolkit Watt Computer Graphics Last Modified May Steven Huang	other	cornell
952	 Server Date Sunday GMT Saturday GMT Koichi Kamijo Koichi Kamijo is now in Japan Temporarily address Japan Tel Office Koichi Kamijo IBM Japan Shimotsuruma Japan Tel direct Fax kkamijoh Japanese is also ok Note resume working some day between and Until then telephone may not be activated and access time to would be at most once week English Japanese	other	cornell
953	 Date Mon Dec GMT Server Mon Jun GMT Normals Computing the normal to surface There are several ways of computing normal to surface If the surface is defined as list of triangles then one way of computing the normal is to compute the normalized of two edges of the triangle Three vertices of triangle are shown below as and If we denote then the normal is given by If the surface is defined as list of general polygons then the Newell method is good way to calculate the normal It produces an average normal if the polygon is not quite planar It also is not confused by vertices Calculate the following where is the number of vertices in the polygon The normal is then norm nx ny nz If the surface is defined as parametric equation then differential methods may be used to derive the normal If the equation for parametric surface is where and are two parameters then the surface normal is given by Comments about Theory Center online documents are welcome and may be sent to Last modified Land Copyright Statement	other	cornell
954	 Date Sun Nov GMT Server Mon Feb GMT Cornell Theory Center Overview About the Cornell Theory Center The Cornell Theory Center at Cornell University is one of four National Advanced Scientific Computing Centers established by the National Science Foundation It is actively supported by NSF the Advanced Research Projects Agency ARPA the National Center for Research Resources at the National Institutes of Health NIH NY State and its corporate sponsors The Theory Center resources have been used by more than researchers in fields as diverse as aerospace engineering economics and epidemiology Its staff offers technical expertise in software visualization and parallel processing to its users and investigates new highly parallel processing resources for the scientific community in order to increase the usability of these computers through systems development and through examination of techniques to improve performance variety of education and training programs are also offered to high school undergraduate and graduate students and their professors The Theory Center reputation as computing resource is based on its Interdisciplinary research collaborations among academia industry and government researchers Integrated and highly parallel computing environment education and training programs Powerful local national and international technology exchange networks For additional information about the Cornell Theory Center see the CTC Site Report from the December issue of IEEE Computational Science Engineering CTC Tenth Anniversary pages which describe the center history facilities and more Cornell Theory Center Frank Rhodes Hall Hoy Road Cornell University Ithaca New York Telephone Facsimile technical questions consult questions about other programs and activities cal Search Contacts Comments Copyright	other	cornell
955	 Server Date Sunday GMT Monday GMT CS Possible Term Projects Term Projects for All projects will involve significant amount of coding in If this is something you are not familiar with you should start early on the project The projects will be either on PREDATOR or on MINIBASE few projects will be and require neither system would rather you did the PREDATOR or the projects since you will learn the most from these Those of you who have done or an equivalent introductory database course should not do the MINIBASE projects In all the projects there will be an emphasis on coding according established conventions documenting the code and code stability would rather have you write code that does few things well rather than do many things in very unstable fashion You should choose your project by the of October but encourage you to do so earlier and start on your projects There should not be several groups working on the same project topics Also where possible try to match the projects to your interests and your background Many projects need persons and if you can find your own groups that is ideal If you want me to put you in group with someone else can do that In either case early into the project you will need to identify what each person is going to do and you will be graded individually on the net result PREDATOR Projects PREDATOR is client server DBMS built by me as research prototype The main research purpose of the system is to explore techniques to support large number of data types in an extensible manner meaning that it should be possible to extend the system to support fields of new type like video or image without changing the system significantly Part of PREDATOR is relational database system supporting subset of SQL Most of the course projects will either involve extending and enhancing the SQL functionality or it will involve adding support for new data type Add the relational query optimizer persons Currently PREDATOR does not have serious query optimizer Instead it just uses the join order provided in the query This project involves incorporating the optimizer into PREDATOR is an independent library which can be used to customize and design query optimizer Work will involve finding out about integrating it with PREDATOR query evaluation and demonstrating query optimization on simple join queries Develop query plan visualization tool and query execution visualization tool persons The purpose of this project is to build graphical tool that displays query plan the result of query optimization and also displays the execution of that plan possibly by displaying how the computation is proceeding Add path and function indexes persons This project involves getting good understanding of the way indexes are used in query processing Path indexes are complex indexes which can be implemented on top of the existing simple index functionality in PREDATOR They are very important in and database systems In this project you will need to provide fully working path index capability specifying an index in SQL recording its presence in the catalogs using the index if applicable in query optimization and actually retrieving from the index at This project will give you very good grasp of the internals of query processing engines Evaluate the Wisconsin benchmark persons The Wisconsin benchmark is an industry standard DBMS benchmark that is used to measure the performance of relational DBMS The project has two parts first implement GroupBy and OrderBy features that are currently not supported in PREDATOR Second execute the benchmark and try to enhance the performance to whatever extent is possible This is invaluable experience if you plan to work on performance related issues in real DBMS Evaluate the benchmark persons The benchmark is an advanced query processing benchmark and some of the functionality for this benchmark is not yet in PREDATOR This project will involve balance of adding some functionality so that some of the benchmark queries run and improving the performance of those queries Again like the previous project this is good exposure to practical benchmarks that people care about Implement an image data type RIVL persons PREDATOR already has very elementary image data type This project will implement large part of the support for images found in RIVL Brian Smith system with operations to rotate clip overlap etc an image Implement an image data type Vision persons PREDATOR already has very elementary image data type This project will involve interacting with Ramin Zabih to incorporate his feature extraction algorithms and use these extracted image features to index the image data Implement video data type or persons Add video data type with support for the various operations defined in RIVL Brian Smith system Implement an audio data type or persons This requires some knowledge of audio data and the likely operations on audio Audio data needs to be added as data type along with manipulation functions Implement text document data type or persons Add document data type along with NLP operations on the document based on Claire Cardie work This will require interaction with the NLP people Implement data type for chemical molecules or persons Pharmeceutical companies have huge databases of chemical molecular structures and much of their research involves searching this database for spatial matches of molecules This project will try to support molecule structure as data type in the database Operations on the molecule will be based on research that Paul Schuh and others have done in this area The project will involve interactions with that group Build language embedding for PREDATOR persons Any commercial SQL system allows queries to be embedded inside host language like COBOL etc This project will build embedding of PREDATOR SQL Integrate external databases into PREDATOR PREDATOR has an extensibility mechanism that allows new query processing engines to be incorporated into the system This project will extend this mechanism to integrate external databases for instance an Informix server into PREDATOR Ensure functionality person PREDATOR is system implemented with server However the nature of the system has not been tested and there are several problems This project will fix all the problems and demonstrate capability Build full compliant parser upto the level of type checking and transformations or persons The current version of SQL is small subset of the ANSI standard This project will make sure that the ANSI standard is implemented to the extent of parsing and type checking If persons work on this some query transformations will also be required in this project Implement materialized caching with indexed retrieval For quite while researchers have suggested that the results of queries can be cached for later use in executing another query This project will provide some portion of this functionality Since this is an ongoing topic of research this project must go along with paper survey of this topic MINIBASE Projects Implement trees Implement Join and Join Implement two new buffer replacement policies Implement Indexes Implement and Aggregation Other Projects Build DBMS persons upto such groups Data mining is this exciting new area that blends AI with databases The idea is that there is information or patterns hidden in database that are not very evident For instance from medical databases various statistical patterns can be extracted or empirical rules This project must go with data mining paper survey The purpose of the project is to implement some of the algorithms suggested in the literature and see how they perform Implement data clustering algorithms persons This is another aspect of data mining see above Here we are looking to classify large amount of data into few groups or clusters based on some properties The point is to do this efficiently Several algorithms have been proposed in the literature The project will involve implementing few of them Build standalone optimizer and randomized optimizer persons Query optimization is and has been very important topic in database query processing In this project you will build query optimizer using two or three different approaches The purpose is to compare the alternatives suggested in the literature This project must go along with paper survey on query optimization Build simple OLAP Analytical Processing system persons OLAP is very refined form of query processing that involves large amount of precomputation of answers The queries typically involve several aggregates and the answers are presented graphically Build database components persons is protocol that Microsoft has developed on top of to allow multiple databases to connect and interoperate This project will involve using this protocol to build compliant database components and will be built on NT using visual Since you will not have lot of help on Visual from me or the TA you should already be familiar with this environment if you plan to take on this project	other	cornell
956	 Server Date Sunday GMT Monday GMT CS Projects and Surveys CS Projects and Surveys NAME SURVEY PROJECT CONTACT ANDERSON SUSAN Replication vs Partitioning Sequoia benchmark Praveen BALAKRISHNA BHARDWAJ AASTHA heterogeneous databases CAMARGO FABIAN OLAP Sequoia benchmark Praveen CASTRO ALEXANDER databases and WWW CHAO EDWARD MING data mining association rules Praveen CHEN query opt standalone qopt CHEW ANDREW garbage collection video RIVL CHIU query optimization statistics collection Praveen HSU JERRY databases and the www text data type HUANG JIN benchmarking wisconsin benchmark HUANGYUTITHAM databases video video data RIVL JHAVERI ASHISH data mining data mining Praveen KOSTER DAVID SIMON tree indexing Sequoia benchmark Praveen LANDIS SEAN indexing techniques Image indexing LEONG KIAN FAI transaction processing audio data type LIAU query optimization Praveen LIN LIBBY data mining data mining Praveen LIN query opt standalone qopt LUNG FELIX data mining association rules Praveen MALIK INDIRA data mining data mining Praveen NGUYEN MAI database user interfaces GUI Praveen NGUYEN OLIVIER database user interfaces GUI Praveen SACHDEVA ANIL query rewrite query rewrite Praveen SHARMA ROSEN DB javabase Praveen SRIVASTAVA SUNIL query optimization Praveen SUWANTAEMEE financial database management financial data management Praveen TAMHANKAR SANDEEP database mining query rewrite Praveen TEO JINGCHONG selectivity and cost estimation statistics collection costs Praveen VALERJEV NIKOLA transaction models molecule data type VAIDYANATHAN ANU OLAP cube algorithms Praveen VITRANO ERIC data mining data mining Praveen WANG indexing external DB in PREDATOR WANG database benchmarking wisconsin benchmark WU MICHAEL db javabase Praveen	other	cornell
957	 Server Date Monday GMT Friday GMT Cornell CS Modeling and Simulation Project Overview Project Overview The goal of the Cornell Modeling and Simulation project is to facilitate the construction modification and evaluation of simulations and other engineering analyses by scientists and engineers We are creating an environment that permits these processes to be described at an appropriate and natural semantic level The tools we are developing allow the user to describe the computations using familiar concepts from mathematics and physics instead of traditional programming languages such as Fortran or In addition we are developing tools that convert these descriptions into efficient codes for sequential and parallel machines The approach we have been taking is to integrate the tools and technologies of geometric modeling symbolic mathematics numerical analysis generation and formal methods to create new methodology and environment for engineering analysis and simulation These technologies have all been used before to attack engineering analysis problems but used in isolation They are far more potent when used in concert within single integrated environment Three major components of this approach are discussed below Automate techniques for generating the equations that govern the behavior of physical systems This includes physical element and variational techniques Develop language for describing engineering analysis problems based on the natural mathematical and physical concepts of the problem differential equations minimization principles and geometric and topological objects Develop transformation techniques that convert this language into efficient executable code on variety of different architectures both sequential and parallel These transformations capture mathematical analysis techniques and make them applicable to wider range of code generation tasks than other approaches Of particular interest are techniques for meshing geometric objects discretizing ordinary and partial differential equations and code optimization	other	cornell
958	 Server Date Monday GMT Tuesday GMT ENSEMBLE GROUPWARE SYSTEM Ensemble Copyright Notice Cornell University This software was developed by members of the Horus Project Staff Robbert van Renesse Kenneth Birman Werner Vogels tel fax rvr tel fax ken tel fax vogels Students Mark Hayden Alexey Vaysburd tel hayden alexey Department of Computer Science Cornell University Ithaca New York Read the following license for the use of the Ensemble carefully If you accept these terms and conditions press the accept button at the bottom of this page You will then be presented with the download instructions for ensemble For more information contact one of us directly LICENSE TERMS AND CONDITIONS The Software below refers to the Ensemble system developed by the Horus Project in either or form and related documentation and work based on the Software means work based on either the Software on part of the Software or on any derivative work of the Software under copyright law that is work containing all or portion of the Ensemble System either verbatim or with modifications Each licensee is addressed as you or Licensee Cornell University as the parent organization of the Horus Project holds copyrights in the Software The copyright holder reserves all rights except those expressly granted to licensees and Government license rights Permission is hereby granted to use copy modify and to redistribute to others If you distribute copy or copies of the Software or you modify copy or copies of the Software or any portion of it thus forming work based on the Software and make distribute copies of such work you must meet the following conditions If you make copy of the Software modified or verbatim it must include the copyright notice and this license You must cause the modified Software to carry prominent notices stating that you changed specified portions of the Software LICENSEE AGREES THAT THE EXPORT OF GOODS TECHNICAL DATA FROM THE UNITED STATES MAY REQUIRE SOME FORM OF EXPORT CONTROL LICENSE FROM THE GOVERNMENT AND THAT FAILURE TO OBTAIN SUCH EXPORT CONTROL LICENSE MAY RESULT IN CRIMINAL LIABILITY UNDER LAWS Portions of the Software resulted from work developed under Government Contract and are subject to the following license the Government is granted for itself and others acting on its behalf nonexclusive irrevocable worldwide license in this computer software to reproduce prepare derivative works and perform publicly and display publicly Disclaimer of warranty Licensor provides the software on an as is basis Licensor does not warrent guarantee or make any representations regarding the use or results of the software with respect to its correctness accuracy reliability or performance The entire risk of the use and performance of the software is assumed by licensee ALL WARANTIES INCLUDING WITHOUT LIMITATION ANY WARRANTY OF FITNESS FOR PARTICULAR PURPOSE OR MERCHANTABILITY ARE HEREBY EXCLUDED Lack of maintainance or support services Licensee understands and agrees that licensor is under no obligation to provide maintanance support or update services notices of latent defects or correction of defects for the software Limitation of liability indemnification Even if advised of the possibility of damages under no circumstances shall licensor be liable to licensee or any third party for damages of any character including without limitation direct indirect incidental consequential or special damages loss of profits loss of use loss of goodwill computer failure or malfunction Licensee agrees to indemnify and hold harmless licensor for any and all liability licensor may incur as result of licensee use of the software	other	cornell
959	 Server Date Sunday GMT Saturday GMT Your way to Upson Hall Find Upson within the Cornell Campus clickable map How to find room in Upson Hall Take stairs or elevator to the floor Turn right and right again Follow the floor until you almost at the end Back to front desk	other	cornell
960	 Server Date Sunday GMT Friday GMT The Effect Ithaca Premier Modern Rock Band is Rick Aaron guitar Joel Baines drums Dexter Kozen bass and vocals Scott Perretta guitar and vocals Click to see upcoming gigs gigography contact information sets pages of other local bands	other	cornell
961	 Server Date Monday GMT Tuesday GMT People in the Horus Project The Project Directors Kenneth Birman Robbert van Renesse Horus Project Isis Toolkit Practice and Theory Distributed Systems Security Editor in chief of ACM TOCS Distributed computing fault tolerance group communication replication security The Researchers Roy Friedman Werner Vogels distributed computing distributed algorithms group communication virtual synchrony total ordering shared memory distributed operating systems systems cluster networks internetworking The Students Kathy Guo Mark Hayden Takako Hickey Alexey Vaysburd Networking reliable multicast scalable virtual synchronous multicast groups Ensemble Distributed Systems Communications Protocols Flow Control Resource Management Horus Object Tools The Stratus Team Brad Glade Eugene Ortenberg distributed computing group communication communication scheduling software reliability and predictability Former Group Members and Visitors Silvano Maffeis Michael Kalantar Guerney Hunt Dave Cooper Distributed Object Systems OMG CORBA Object Groups Object Replication Electra ORB Large scale ordered multicast Flow control for multicast protocols in local area networks security privacy distributed computing mobile computing David Karr formal specification verification protocol stacks temporal logic weak consistency Comments to Werner Vogels	other	cornell
962	 Server Date Sunday GMT Tuesday GMT Shading The source	other	cornell
963	 Server Date Sunday GMT Friday GMT David Karr home page David Karr home page This is the WWW home page used by David Karr karr Here my view of the Web from the bottom up David Karr my personal data and research interests Other students in the CS department at Cornell The ISIS and Horus projects at Cornell The Department of Computer Science at Cornell The CUINFO Web server at Cornell Other Web servers at Cornell University global directory of Web servers The Virtual Tourist World Map powerful set of Internet White Pages for finding people addresses Collections of selected pages from all over the Web The Whole Internet Catalog and Yahoo Facilities for selecting few best matches out of millions of pages on the Web Lycos and Alta Vista Alta advanced query form can sometimes direct the search more precisely Here are some Web pages maintain presentation of the Securing and Hardening Horus project and in particular Java applet that verifies the properties of Horus protocol stacks Java applet that solves traditional puzzle about matching birthdays with the capability to solve some related puzzles My collection of resources about LEGO toys Pictures of my kids Here are few other Web resources find handy or interesting list of USENET FAQs My collection of documents on how to write HTML documents including home page for the World Wide Web Also see the World Wide Web FAQ An article by Vannevar Bush published in the Atlantic Monthly in July that is relevant to the WWW today The Jane Austen Information Page All about the latest author of hit screenplays Worth visiting even if only to see what can be done on the Web HTML proves to be wonderful vehicle for literary criticism The complete plays of another popular screenwriter William Shakespeare can be searched with quite powerful tool though with creaky old interface that is barely adaptable to the Web Motorcycle pages the Home Page and information about BMW motorcycles collection of photography FAQs and documents Sailing pages the index at Yahoo and Mark Rosenstein Sailing Page Pages about contra dancing and folk music The Piano Page The Puzzle Archives the best of and more links to puzzles and brain teasers Also see Zeno Coffeehouse for puzzles in the realm of philosophy The excitingly graphical and trendoid home page of The Annals of Improbable Research The Constitution of the United States of America The weather forecast for Ithaca Last updated April David Karr karr	other	cornell
964	 Server Date Sunday GMT Friday GMT WELCOME TO GRID GENERATION PROJECT AT CORNELL GRID GENERATION PROJECT AT CORNELL Paul Chew Nikos Chrisochoides and Steve Vavasis Research Objectives Mathematically Guaranted Quality Quadree and Octree based approach Delaunay Triangulation based approach Robust Minimize human interaction Parallel Grid Generation Applications For more information contact	other	cornell
965	 Server Date Sunday GMT Thursday GMT Janeen favorite stuff Few Of My Favorite Things Contradancing Rollercoasters Art downhill skiing water skiing hiking biking aerobics funky food fine wine good friends and Lots Laughs	other	cornell
966	 Server Date Sunday GMT Sunday GMT Project Pages Project Web Pages Spatial Audio Authors Jonathan Alferness Patrick Nichols Steve Reseigh Catherine Starkey Compressed Domain Image Processing in Rivl Authors Gun Alppay Dan Gelb Watermarking Images Authors Jeff Ragusa Vasantha Badari Jose Machuca Audio Rendering Authors Deepak Balakrishna Ashish Jhaveri Virtual Reality Video Texture Mapping Authors Aastha Bhardwaj Ankit Patel Indira Malik Video Encryption Authors Michael Paul Bringle Web Based Video Editing Authors Kinkok Chan Li James Wang Mike Wu CD Jukebox Authors Oliver Chang Felix Lung David Wu MPEG Reconstruction Library Authors Chen Weiwei Lin Chiu Jinqchong Teo Compressed Domain Format Converter for JPEG and Authors Tader Chang Bo Dong Stephen Lee Project Proposal Authors Chris Currivan Bill Lewis Project Proposal Authors Tom Daley Xun Wilson Huang Rachit Siamwalla Compressed Domain Image Comparisons and Indexing Authors Aaron Deever Trina Russ Hani Jamjoom Video Morphing Authors Henry Andrews Robert Szewczyk Andras Ferencz Proposal for the CD JukeBox Authors Ilya Finkelshteyn Nikhil Shrikhande Direct Hardware access through Safe Language for Multimedia Applications Authors Chris Hawblitzel Frederick Smith Visualization of Music Authors Vincent Hammer Dexter McLean Computer Assisted Animation Authors Jerry Hsu Michael Wong Yoo Sun Chung Anthony Yan Video Parsing and Querying Authors Jing Huang Vera Kettnaker Video Conferencing Authors Ioi Lam Amy Wong Xiaoming Liu Huang Video Database Authors Andrew Chew Tanasak Huangyutitham Watermarking Authors Nikolay Mateev Lidong Zhou JPEG Watermarking Authors Brian Nicks Eric Vitrano Web Based Image Crawler proposal Authors Wei Tsang Ooi Sunil Srivastava Xiaodong Song Distributed Application for Facilitating the Shared Functionality ofMultiple Drives Authors Sicco Tans Chris Zaccarelli Using Multiple Mulicast Groups for Layered Video Authors Linda Wu Rosen Sharma home page	other	cornell
967	 Server Date Monday GMT Sunday GMT Project Presentation Schedule Project Presentation Schedule All presentations will take place in Presentations will last minutes with minutes for questions The presentations are open to faculty students staff the homeless and roaming animals In other words everyone is welcome We have an overhead projector Win machine and projection screen available list of project proposals is available here Session Monday Project Video Encryption Michael Paul Bringle Project Computer Assisted Animation Jerry Hsu Michael Wong Yoo Sun Chung Anthony Yan Project Web Based Video Editing Kinkok Chan Li James Wang Mike Wu Session Monday Project Spatial Audio Jonathan Alferness Patrick Nichols Steve Reseigh Catherine Starkey Project CD JukeBox Ilya Finkelshteyn Nikhil Shrikhande Project Visualization of Music Vincent Hammer Dexter McLean Project Audio with Localization Chris Currivan Bill Lewis Project Audio Rendering Deepak Balakrishna Ashish Jhaveri Session Monday Project Compressed Domain Image Processing in Rivl Gun Alppay Dan Gelb Project Compressed Domain Image Comparisons and Indexing Aaron Deever Trina Russ Hani Jamjoom Project MPEG Reconstruction Library Chen Weiwei Lin Chiu Jinqchong Teo Project Compressed Domain Format Converter for JPEG Tader Chang Bo Dong Stephen Lee Session Tuesday Project Video Morphing Henry Andrews Robert Szewczyk Andras Ferencz Project Video Parsing and Querying Jing Huang Vera Kettnaker Project New Color Content Comparison Algorithm Xiaodong Song Project Video Database Andrew Chew Tanasak Huangyutitham Project Web Based Image Crawler Wei Tsang Ooi Sunil Srivastava Session Tuesday Project Watermarking Nikolay Mateev Lidong Zhou Project Watermarking Images Jeff Ragusa Vasantha Badari Jose Machuca Project JPEG Watermarking Brian Nicks Eric Vitrano Project Video Conferencing Ioi Lam Amy Wong Xiaoming Liu Huang Project Virtual Reality Video Texture Mapping Aastha Bhardwaj Ankit Patel Indira Malik Session Tuesday Project An Adaptive Forward Error Correction Protocol for Multimedia Streams Sicco Tans Chris Zaccarelli Project Using Multiple Mulicast Groups for Layered Video Linda Wu Rosen Sharma Project CD Jukebox Oliver Chang Felix Lung David Wu Project Direct Hardware access through Safe Language for Multimedia Applications Chris Hawblitzel Frederick Smith Project Streaming MPEG Tom Daley Xun Wilson Huang Rachit Siamwalla	other	cornell
968	 Server Date Tuesday GMT Friday GMT Publications related to Tushar Chandra research Publications related to my research Research in Distributed Computing Message passing systems For my thesis studied unreliable failure detection in asynchronous distributed systems together with Vassos Hadzilacos and my advisor Sam Toueg We showed that surprisingly weak failure detector denoted is sufficient to solve Consensus and Atomic Broadcast two fundamental problems that can not be solved in asynchronous distributed systems click here to find out more We then showed that is the weakest failure detector for solving these problems in asynchronous systems click here to find out more For summary of research on failure detection click here Sam and also developed fast and message efficient algorithms for reliable broadcast Click here to download postscript document describing our work Sam Vassos and showed that it is impossible to solve the group membership problem in purely asynchronous systems click here to find out more To get an overall picture of the state of research in the area of in message passing distributed systems have look at Modular Approach to Broadcasts and Related Problems by Vassos Hadzilacos and Sam Toueg Shared memory systems Together with Prasad Jayanti and Sam Toueg studied how to deal with faulty objects in shared memory systems Click here to find out more Other Research Siddharth Chandra and used undecidability to formally challenge the rational expectations hypothesis in economics Click here to find out more Selected list of publications My thesis short abstract Unreliable Failure Detectors for Reliable Distributed Systems short abstract The weakest failure detector for solving consensus short abstract Shared Objects short abstract Time and message efficient reliable broadcast postscript document Undecidability in Economics Formal Challenge to Rational Expectations short abstract Maintained by tushar	other	cornell
969	 Server Date Monday GMT Thursday GMT Zeno Potpourri Potpourri The project is named for Zeno of Elea who posed many paradoxes related to the nature of motion One of his paradoxes called The Arrow deals with the cinematographic nature of motion in other words although reality is made up of instants in which everything is still if we take those instants one after another we have motion This is precisely what this project deals with taking frozen instants of time shipping them over network then putting them together to create motion Little is known about Zeno of Elea His fame derives mainly from four paradoxes of motion attributed to him by Aristotle None of Zeno writings have survived but few passages by other authors are purported to be direct quotations It is known that Zeno lived in the fifth century and that he was devoted disciple of Parmenides Parmenides maintained that reality is one immutable and unchanging all plurality change and motion are mere illusions of the senses Zeno proposed series of paradoxes designed to show the absurdity of the views of those who made fun of Parmenides Zeno paradoxes have been the object of extensive historical research especially in the last hundred years Taken from Zeno Paradoxes Edited by Wesley Salmon The Company Inc Zeno Links MPEGator documentation CoffeeHouse Trivial note if you search the web for Zeno of Elea you find about hits About of them have to do with chickens Follow this link to find out why short biography of Zeno longer biography of Zeno What Scientific American says about zeno	other	cornell
970	 Server Date Sunday GMT Monday GMT Resume References for Nicholas Howe Resume References Resume PostScript References PostScript	other	cornell
971	 Server Date Sunday GMT Tuesday GMT karl	other	cornell
972	 Server Date Monday GMT Thursday GMT PORTS	other	cornell
973	 Server Date Monday GMT Thursday GMT Project Proposals CS Project Proposals Thorsten von Eicken Wednesday Mar Proposals related projects Splash benchmarks in on the Splash is benchmark suite consisting of parallel applications for shared memory machines developed at Stanford is the latest version of Splash containing several new applications as well as the original ones The suite is divided into two categories kernels and applications Kernels are routines commonly used by applications Here is sample of them Kernels Complex FFT Blocked LU Decomposition Blocked Sparse Cholesky Factorization Integer Radix Sort Applications Ocean Simulation Water Simulation with Spatial Data Structure Water Simulation without Spatial Data Structure and others Implement the kernels listed above and one or two applications depending on the level of difficulty in or Your implementation will be judged on correctness and performance careful explanation of the results is expected along with detailed timing breakdowns The source code of the benchmarks for shared memory machines is available on the Web You can choose to port the existing code to or or write your own from scratch once you understand the problem You should also read the paper entitled Programs Characterization and Methodological Considerations published in All these can be obtained from the Web This project will expose you to parallel programming using languages in both shared and distributed memory machines The Splash benchmarks are widely accepted in the research community Besides is parallel extension of that has become very popular over the years You can do your project on any available platform but we suggest the because these languages are currently well supported by us PVM over Active Messages on the PVM Parallel Virtual Machine is very popular software package that supports parallel computing on networked of workstations It provides user library with routines for communication between processes PVM communication is baed on protocols hence only parallel applications can get reasonable performance Try improve the performace of PVM by implementing its major communication routines over Active Messages on the and benchmark them against as well as MPI Parallel VMRL renderer on the in or Implement parallel renderer for the VRML virtual reality modelling language This would allow very complex VRML documents to be downloaded and scenes rendered hopefully in on system such as the You would also need way to send the rendered image quickly to some desktop workstation simple connection works for prototype but what about sending the rendered image back over ATM parallel POVray or other raytracer in or Implement parallel POVray or other raytracer This is similar to the above but probably has less feel unless you manage to do it VERY quickly POVRay is freely available raytracing package which runs on wide range of UNIX systems try parallelizing aspects of it say by dividing the rendering space between CPUs and implementing on system such as the parallel file system on Implement parallel file system on top of the regular filesystem on each node This is most easily done as library within benchmark comparison and survey All of the parallel systems in the department can run programs written in the parallel language The ATM cluster Fast Ethernet cluster and multiprocessor SPARCs The Berkeley and UCSB groups have number of nice benchmarks we would like to get an understanding for their relative performance on all of the above systems as well as how they scale say when running with as opposed to CPUs Linda over Active Messages on the Linda is simple only six operations yet powerful extension to existing sequential languages that allows parallel execution of programs The computing model is slightly different from what you been shown so far in the course Messages and new tasks to be executed are put into tuple space and they can be retrieved from there by any process One does not have to specify the address of sender of receiver the tuple space is shared between all processes Reception of messages is based on pattern matching Based on the simple concept of tuple space one can program all kinds of synchronization blocking and communication or multicast message passing etc The project will be to implement Linda system over Active Messages on the as an extension to The work will include understanding of Linda model and using fast communication subsystem and threads in order to get very efficient system related projects These projects specifically deal with our system for networking Four implementations of exist three for ATM cards one for Fast Ethernet In these projects you will augment the existing system either on one of these implementations or combining several of them over the ATM network or over Fast Ethernet Implement and demo version of CUSeeMe over the ATM network or over Fast Ethernet Requires independence since nobody in our group knows how CUSeeMe works The idea here is to explore methods of video teleconferencing using the approach As opposed to sending video between two workstations with an ATM fiber between them how can protocols be designed for robust multicast video conferencing An alternative to CUSeeMe would be system such as the MBONE using or some other video conferencing package such as ivs Gateway between Fast Ethernet and ATM using Design and build gateway between Fast Ethernet and ATM using This can either be at the raw level or at the IP level Kernel Endpoint for One with is that it allow existing applications and kernel facilities to easily share the network device with The idea is to implement endpoint where data generated from IP sockets in the kernel is sent and received through the endpoint In this way you are treating the kernel endpoint as kind of Ethernet driver say While any communication using the kernel endpoint will no doubt be slower than endpoints the idea is to allow many applications to multiplex on one kernel endpoint and for existing apps to at least run You would not need to implement IP or other protocols essentially you would replace the kernel functions for sending data to an ATM or Ethernet card with routines which to the kernel endpoint The best platform for this is the ATM or Fast Ethernet implementation of on Linux This is an expert project best undertaken by someone with Linux kernel hacking experience IP packet filter on ATM adapter over Fast Ethernet and ATM currently use simple protocol which is not compatible with IP Implement simple packet filter for either for Fast Ethernet or ATM so that packets are in the correct format You may not wish to implement all aspects of the IP protocol but that would be plus Flow control for Active Messages on Fast Ethernet Fast Ethernet poses interesting flow control problems because acks compete with regular packets for bandwidth Design good flow control algorithm for Active Messages that works well on shared medium fast ethernet Fast RPC Pick up last year Fast RPC project and actually make it work Distributed Shared Memory Pick up last year DSM project make it work and run the Splash benchmarks over it Network performance tool Netperf for Implement the standard network performance tool Netperf for Gang Scheduling for the Cluster In gang scheduling all processors working on single parallel application schedule themselves synchronously so that communication and computation phases can be coordinated and reduce latency for data exchange This might require some kind of interesting modifications to the kernel scheduler and some sort of clock synchronization so that all processes in say application run at the same time across the network of machines This is an expert project best undertaken by someone with Linux kernel hacking experience USIT related projects USIT is toolkit we developed to help build parallel and distributed programming environment on the ATM cluster Currently there are utility programs to set up daemons on set of machines within the cluster and to start running programs and forwarding between your local machine and the cluster Those who will be using the cluster to run programs and other application programs may also find the toolkit useful At lower level USIT provides both and interfaces for job control forwarding job scheduling channel allocation etc within the cluster These interfaces can be used to customize particular execution environment your application requires PVM over using USIT PVM is popular software package that allows heterogeneous network of parallel and serial computers to appear as single concurrent computational resource PVM consists of two parts daemon processes that users install on machines that use PVM and user library mainly for communication between processes In this project you are to explore the possibility of implementing basic PVM daemon functionalities on using the interfaces USIT provides and if necessary implement additional interfaces for USIT Other Benchmark the Liedtke microkernel system Jochen Liedtke published the paper On microkernel construction in last SOSP The abstract is included below The project will be to read the paper thoroughly understand the problems and proposed solutions download the described code and benchmark it Abstract From point of view the microkernel concept is superior to large integrated kernels On the other hand it is widely believed that microkernel based systems are inherently inefficient and they are not sufficiently flexible Contradictory to this belief we show and support by documentary evidence that inefficiency and inflexibility of current microkernels is not inherited from the basic idea but mostly from overloading the kernel from improper implementation Based on functional reasons we describe some concepts which must be implemented by microkernel and illustrate their flexibility Then we analyze the performance critical points We show what performance is achievable that the efficiency is sufficient with respect to and why some published contradictory measurements are not evident Furthermore we describe some implementation techniques and illustrate why microkernels are inherently not portable although they improve portability of the whole system Return to CS Home Page	other	cornell
974	 Server Date Sunday GMT Sunday GMT Lecture CONCEPTS last lecture types functions substitution recursion CONCEPTS this lecture specifications READING Teitelbaum Section Specifications specification is contract between producer and consumers Example electrical outlets Specification if you put two pieces of metal of the appropriate shape into an outlet you will get Volts at Hz between them specification details what the consumer can assume about the component which is what the producer the power company must deliver You can think of specification as legally binding contract How the power company generates the power is not part of the specification Hydro power or Coal or hamsters on treadmills Software specifications Functions are software components In software producers are implementors and consumers are clients When defining function you are implementor when using function you are client function specification consists of its signature and its correctness specification exp for int exp int int return exp signature function taking two int and returning an int correctness specification if then exp will yield xn Signatures The number of parameters that function takes together with their types and the type of the result it returns are its signature Note that the body of the function does affect the signature In function application the number and type of the arguments must match the signature exp is wrongexp Hello is wrongprintf exp is wrong Correctness Specifications correctness specification states what function does without saying how it does it for It consists of precondition and postcondition this distinction will be clearer in few weeks The precondition restricts the permissible arguments The postcondition describes the result in terms of the arguments xn In general correctness specification states If the arguments in function application satisfy the precondition then the application will yield value that satisfies the postcondition if then exp will yield xn If the precondition is not satisfied the result is not defined can be anything or diverge exp diverges for exp exp exp exp exp function should never be called with arguments that do not satisfy the precondition Because conditional expression is evaluating exp never calls exp in exp exp exp Implementations Many implementations can satisfy given specification int fourth int return int fourth int return square square int fourth int return exp The specification should not describe the implementation which the implementor has freedom to change This is why specifications are vital to the design of large programs Use of Mathematical Functions Can use arbitrary mathematical functions in specification but Be sure the mathematical functions are for all arguments permitted by the precondition minor flaw in for because xn is not defined for and Correction for and and not both or for and and for and Counting id int count int lo int hi int id return lo hi id count lo hi id For example count count count count count count count count count count count Sum of squares int sumSquares int lo int hi return lo hi square lo sumSquares lo hi For example sumSquares Factorial lo hi int multIntegers int lo int hi return lo hi lo multIntegers lo hi For example multIntegers int factorial int return multIntegers	other	cornell
975	 Server Date Monday GMT Tuesday GMT The ISIS Project The ISIS Project ISIS is system developed out of study of fault tolerance in distributed systems The system implements collection of techniques for building software for distributed systems that performs well is robust despite both hardware and software crashes and exploits parallelism The basic approach is to provide toolkit mechanism for distributed programming whereby distributed system is built by interconnecting fairly conventional nondistributed programs using tools drawn from the kit Tools are included for managing replicated data synchronizing distributed computations automating recovery and dynamically reconfiguring system to accommodate changing workloads ISIS has become very successful hundreds of companies and Universities currently employ the toolkit in settings ranging from financial trading floors to telecommunications switching systems The ISIS project has moved from Cornell University to Isis Distributed Systems subsidiary of Stratus Computer Inc The Horus project was originally perceived as redesign of the Isis group communication system but has evolved into general purpose communication architecture with advanced support for the development of robust distributed systems in wide variety of settings first version of the Horus software is available to research institutions at no cost Some links that may be of interest Isis Distributed Systems Stratus Computer Inc The Horus project The ISIS publications and reports The old outdated ISIS home page maybe only of interest to net historians	other	cornell
976	 Beyond Our episode of Beyond entitled something like Cooperating Robots of the Future aired the following times on the Discovery Channel Thursday September pm Eastern and Pacific Friday September am Saturday October pm This show was the season premere and our segment is the final segment of the show If you want more information you can call the Discovery Channel at and ask for the Programming Department Our segment is Series Show Episode	other	cornell
977	 Server Date Monday GMT Monday GMT CS Course Information CS Course Information Prerequisites Tutoring Consulting Texts and References Handouts and Videotapes Requirements and Grading Grading and Regrades Academic Integrity Instructor Brian Smith Upson Office Hours pm and by appointment Teaching Assistants Sugata Mukhopadhyay Upson Office Hours Fri PM and by appointment Evan Moran Upson Office Hours PM and by appointment Ulla Bartsich Upson Office Hours PM and by appointment Sections Mon Upson Evan Tues Upson Ulla Wed Hollister Sugata Sections will be used to augment the lectures present detailed examples computer demonstrations discuss problem sets and projects and review for prelims In addition some required material will only be presented in section Attend one section each week You may attend any of the sections regardless of your registration However it would be helpful if you attended the same section each week Course Administrator Laurie Buck Upson Office hours Mon pm pm pm Thurs pm pm All routine administrative matters are handled by the course administrator including petitions for regrade and misrecorded grades Prerequisites CS or equivalent Students are expected to have programming experience using PASCAL or another procedural language like Ada or Fortran We will assume familiarity with recursion arrays records pointers linked data structures and stepwise refinement Tutoring The course TAs will be available during regular office hours for extended consulting help Schedule an appointment by calling the undergraduate office at Upson at least hours in advance If you do not schedule an appointment you may find the TA busy helping another student and thus unable to spend time with you Consulting Consulting help will be available in Upson Consulting hours are listed below pm pm Fri pm Consultants will answer questions about the computer system programs homework assignments and other things related to the content of the course To help ensure that consulting time is used to best advantage we ask you to observe few ground rules When your program does work try to decipher the error message find the location of the error in your listing and look at the relevant registers and memory before seeing consultant Have current listing of your program written in good style to show to the consultant Consultants will not spend time attempting to trace uncommented machine code Plan to spend no more than to minutes of the time If you need more time then set up an appointment with the TA Texts and References Required Clements Principles of Computer Hardware Second Edition Publishers Motorola Family Programmer Reference Manual Prentice Hall Macintosh Assembly System BasePak Heath Co Optional Patterson and Hennessy Computer Organization and Design Morgan Kauffman Bartee Computer Architecture and Logic Design Book Company Ford Topp Assembly Language and Systems Programming for the Heath Tanenbaum Structured Computer Organization Third edition Prentice Hall You are not required to buy the optional books However the book by Ford and Topp has an excellent presentation of assembly language programming for the family Patterson and Hennessy is good book for computer architecture All books are available on reserve in the engineering library Handouts and Videotapes Informational handouts and assignments will be distributed in lecture and section Please do not lose them Once the limited supply is exhausted we will not produce additional copies Some copies of the handouts will be available outside Upson The teaching staff will not have extra copies of old handouts The lecture will be videotaped Copies of the videotapes will be placed on reserveand available for viewing in the Uris library media center If you miss lecture for any reason you are strongly encouraged to watch video tape Requirements and Grading This course contains two major projects The first project involves writing large program in assembly language The second project involves design and implementation of processor using design tool You should work in groups of two on the programming and hardware design projects except for the first programming assignment When working in group submit for grading single printout that includes the names of both students in the group The same grade will be given to both students expect both students to be equally able to answer questions about the program or project Written problem sets should be done individually Written problem sets should be turned in to either consultant before the due date or at the beginning of the lecture on the due date Students will be asked to demonstrate their programming assignements to TA or consultant Sign up sheets for project demonstartions will be available later Late assignments will receive no credit but partial credit will be given for incomplete work If you can not meet the due date of an assignment because of serious illness or other extraordinary circumstances contact the the Course Administrator Upson before the assignment deadline for an extension Graded assignments will be returned by the consultants during consulting hours the day after the assignment is due Graded exams wil be returned by the consultants during consulting hours two days after the assignment is due You will need to show an ID to pick up an assignment Answer sheets for all homework assignments and prelims will be distributed one week after the assignment is due These should be studied and understood Homework questions have been known to reappear on examinations Grading and Regrades Grades will be posted indexed by secret ID number you provide across from Upson If you believe that we have made grading error please first discuss the matter with one of the course consultants or teaching assistants If after such discussion it appears that mistake has really been made bring the error to our attention but no later than one week after your assignment has been returned To submit problem set program or exam for regrading obtain regrade request form from one of the consultants or from outside Upson Fill out the request form and leave the request along with the assignment in question in Upson regrade request can cause your grade to go up or down Regraded assignments will be returned by the course consultants Your course grade will be computed as follows curve two prelims each absolute homework absolute programming project absolute programming project absolute hardware design project absolute hardware design project Exams will be graded on curve homeworks and projects will graded on an absolute scale Prelims will be on Thursday March in Upson and Tuesday April in Kimball and will last minutes There will be no final Late homeworks will be accepted up to seven days after the due date but each day an assignment is late will result in one demerit For every demerits point value equivalent to of homework assignment will be deducted from your grade For example if you accumulate demerits over the semester points equivalent to of homework grade of your total grade will be deducted from your cumulative score demerits will result in one full homework grade being deducted from your cumulative score etc You can work off demerits by handing in assignments early Each day an assignment is handed in early works off one demerit Academic Integrity The work you submit in CS is expected to be the result of your individual effort You are free to discuss course material approaches to problems and details of the system with your colleagues instructors and Computer Services consultants but you should never misrepresent someone else work as your own Permissible cooperation should never involve student possessing copy of all or part of another student program or other work regardless of whether that copy is on paper or in computer file on hard disk or floppy disk The only exception to these rules is when two students work together to submit joint project It is also the student responsibility to protect work from unauthorized access For example do not discard copies of your programs in public places Violation of the Academic Integrity Code very often results in failure in the course and permanent notations on your Cornell academic records If you have any question as to what constitutes ethical behavior ask the instructor first we will not be sympathetic to claims of ignorance or misunderstanding of the rules Back to the CS home page	other	cornell
978	 Server Date Sunday GMT Friday GMT White Paper Final Project Final Project The magic Nobuhiko Mukai Cornell Copyright animation Story This animation tells magic story where funny man appears He gets on an airplane and takes off During the flight he flies over mountainous area and drops ball into body of water which causes wave Then he flies near clock tower and his airplane explodes However when we look at the clock tower the clock disk opens and he appears inside of the clock tower Technique Animation The ball falling and water wave are animated using physical description Euler integrator is used for the falling ball and Verlet integrator is used for the water wave Scientific Visualization The mountain and cloud are made by random function and the color of the mountain is mapped according to the height The river color is mapped according to the magnitude of the gradient and trees are made by cones Texture Mapping The title flag is made by texture mapping two dimensional image is used and changed to simulate the waving flag Volume Texture Mapping The two tone color of the airplane is made by volume texture mapping Bump Mapping In order to simulate real lawn bump mapping is used The normals of the lawn is changed little bit by random function Image Techniques In the second scene the first scene image fades out and the second scene image fades in gradually Fire work In order to simulate the bomb explosion bomb size and color are changed as time passes	other	cornell
979	 Server Date Sunday GMT Friday GMT Roy Friedman Roy Friedman List of Publications Papers in Journals Attiya and Friedman Correctness Condition for Multiprocessors SIAM Journal of Computing To Appear Earlier version appeared in ACM Symp on the Theory Of Computing Also available as Technical Report Department of Computer Science The Technion Attiya Chaudhuri Friedman and Welch Shared Memory Consistency Conditions for Execution Definitions and Programming Strategies SIAM Journal of Computing To Appear Earlier version appeared in ACM Symposium On Parallel Algorithms and Architectures Also available as Technical Report LPCR Department of Computer Science The Technion Attiya and Friedman Limitation of Fast Consistency Conditions for Distributed Shared Memories Information Processing Letters Vol No Pages Friedman Implementing Hybrid Consistency with High Level Synchronization Operations Distributed Computing Vol No Earlier version appeared in ACM Symp on Principles of Distributed Computing Also available as Technical Report Department of Computer Science The Technion Papers in Conferences Friedman and van Renesse Strong and Weak Virtual Synchrony in Horus To appear in SRDS Also available as Technical Report Department of Computer Science Cornell University Friedman and Birman Using Group Communication Technology to Implement Reliable and Scalable Distributed IN Coprocessor TINA TR will be available soon Friedman Goldin Itzkovitz and Schuster Millipede Easy Parallel Programming in Available Distributed Environments To appear in van Renesse Birman Friedman Hayden and Karr Framework for Protocol Composition in Horus ACM Symp on Principles of Distributed Computing Attiya and Friedman Programming Based Multiprocessors the Easy Way ACM Symp on Parallel Algorithms and Architectures Also available as Technical Report LPCR Department of Computer Science The Technion Technical Reports Baldoni Friedman and van Renesse The Hierarchical Daisy Architecture for Causal Delivery Technical Report Department of Computer Science Cornell University Dolev Friedman Keidar and Malki Failure Detectors in Omission Failure Environments Technical Report Department of Computer Science Cornell University Friedman and Birman Trading Consistency for Availability in Distributed Systems Technical Report Department of Computer Science Cornell University Friedman and Vaysburd Implementing Replicated State Machine Over Partitionable Networks Technical Report Department of Computer Science Cornell University Friedman Keidar Malki Birman and Dolev Deciding in Partitionable Networks Technical Report Department of Computer Science Cornell University Friedman and van Renesse Packing Messages as Tool for Boosting the Performance of Total Ordering Protocols Technical Report Department of Computer Science Cornell University Submitted for publication Friedman Using Virtual Synchrony to Develop Efficient Fault Tolerant Distributed Shared Memories Technical Report Department of Computer Science Cornell University Back to Roy home page	other	cornell
980	 Server Date Sunday GMT Tuesday GMT This Month Favorites This Month Favorites Favorite Vegetable Cabbage All pounds of it it looks like cabbage is going to be next month favorite vegetable too Sigh Favorite Tune Telemann Oboe Concerto in minor Favorite Quote Langevin There special French word for that of course all French words are special Favorite Flavor Wombat Fudge Favorite Place Williamsport PA pierce	other	cornell
981	 Server Date Sunday GMT Monday GMT Framework for Protocol Composition in Horus Next Introduction Framework for Protocol Composition in Horus Robbert van Renesse Kenneth Birman Roy Friedman Mark Hayden and David Karr Dept of Computer Science Cornell University Abstract The Horus system supports communication architecture that treats protocols as instances of an abstract data type This approach encourages developers to partition complex protocols into simple microprotocols each of which is implemented by protocol layer Protocol layers can be stacked on top of each other in variety of ways at First we describe the classes of protocols that can be supported this way Next we present the Horus object model that we designed for this technology and the interface between the layers that makes it all work We then present an example layer that implements group membership protocol Next we show how given set of required properties an appropriate stack can be constructed We look at an example stack of protocols which provides totally ordered communication between group of processes The work contributes standard framework for protocol development and experimentation provides high performance implementation of the virtual synchrony model and introduces methodology for increasing the robustness of the protocol development process Introduction Classes of Protocols Horus Objects Common Protocol Interface Example Membership Protocol Protocol Properties and Inheritance Example Typical Protocol Stack Reference Implementation Effort The Argument Performance and Overhead Status and Challenges Related Work Conclusion Acknowledgements References About this document Robbert VanRenesse Mon May EDT	other	cornell
982	 Server Date Sunday GMT Monday GMT David Karr LEGO Collection David Karr Collection No am not affiliated in any way with the LEGO Group Please see my disclaimer for details David Karr This document is the home page of World Wide Web resource located at http There is also version of this document that version can be expected to load faster Hot list The Official World Wide Web Site my Guide to the LEGO FTP archive Joe Construction Toy Home Page Michael Everything LEGO my list of LEGOmaniacs on the Web If you been here before you might want to check the list of what new updated on May Contents Why this Web site on separate page Models by David Karr Models by Jane and Polly Karr Models by other people on separate page Other resources on the Web also see the separate pages for Academic Web sites and Personal Web pages Citations received Why This Web Site used to get an occasional question about why created this Web site See my explanation on its own Web page Models by David Karr This is where show photographs of my own designs Most of these are fairly recent since unfortunately have very little evidence left of any of my childhood work Nowadays design most of my models for use with minifigures but adapting from the style that developed over many years around the figures built myself because they were the only ones available Look at the following pages for complete discussion and links to the images of the models My vehicle collection Includes sports car dump truck motorcycle with sidecar and large sedan My aircraft collection Includes models of two airplanes styled after World War fighters My space collection Includes space cruiser with cabin for five and an unmanned rocket My rail road collection Includes old and new editions of my favorite steam locomotive and passenger car to go with it My ship collection Currently includes only an oil tanker but that plenty Miscellaneous pages including toy cannon and machine gun that fire bricks woman pushing handtruck of my own design wheelchair and hairdryer utilizing scoop Models by Jane and Polly Karr My daughters Jane and Polly have put together quite number of models of their own and have added important enhancements to some models put together think some of these designs and enhancements give insight into the way young children play with Overview Work by Jane turned in Work by Polly turned in Models by Other People It seems impossible to keep up with all the wonderful models that people have posted on the World Wide Web but take look at my links to few of my favorites including an animation of walking spider complete house large red dragon Cadillac convertible and several other beautifully finished models Other Resources on the Web To try to sort through the many available Web pages very roughly categorized them as follows Information Servers Academic Web Sites on separate page Usenet News Trading Opportunities Personal Web Pages on separate page Miscellaneous Good Stuff Information Servers Here are some servers that think most people will want to see The Official World Wide Web Site Yes the LEGO Group has been on the Web officially since March They have here page with some blurbs about their product line along with some very interesting historical information with pictures information about caring for or replacing your bricks discussion of trademarks and related issues and press releases The FTP archive The FTP archive is very extensive collection of files assembled by Paul Gyugyi It includes images of models programs for drawing reviews of sets and so forth The archive is currently located in Austria thanks to Brian Ward For more but possibly less complete view of the same collection look at my hypertext guide to the archive The Construction Toy Home Page Joseph Lauher has put together substantial resource here not only about but about other toys as well This page has features on Technic Model Team and trains as well as images of brochures and catalogs both from the Samsonite era in the US and more recent times and the Model of the Month This page also featured Summer Building Contest in This page has other unique features such as an explanation of molecular bricks molecules that into wall Yahoo Recreation Toys LEGOS links Yahoo has collected many links under this heading though to large extent these duplicate links you would find here or on Michael Everything LEGO page The Raving Toy Maniac Page This site maintained by Eric Myers offers all sorts of Internet and Web resources for toy enthusiasts These include very good collection of links on The Internet Toy Pages Page but again see Michael Dorneich list number of the pages that are currently in the list of LEGOmaniacs on the Web really should be in the above list due to the depth and breadth of their content My apologies to everyone whose excellent efforts have failed to properly acknowledge here Academic Web Sites There are so many Web sites at schools of all sorts from fourth grade up through graduate school that had to list them on separate page Happy hunting Usenet News The Usenet news group for topics is hypertext version of the FAQ Frequently Asked Questions list is maintained by Tom Pfeifer pfeifer in Germany version not necessarily is in the FTP archive also described above In early number of subscribers to participated in roll call by each posting his or her response to survey Andy Watkins and archived as many of these responses as we could and continue to archive responses to the occasional revivals of the survey These archives are combined in an summary now available via convenient table of contents The NIC keeps page of statistics on the newsgroup which may be interesting to view see their guesses about how many of us read the newsgroup and how many hundreds if not thousands of dollars each of our postings costs the Net Trading Opportunities There are frequent sales and auctions of on the newsgroup Some of these are for real collectors items but many break up sets to redistribute the pieces in different assortments and in my opinion this is very good thing in light of LEGO current organization of their sets In Todd Lehman ran one of these auctions nicknamed AucZILLA literally for months This auction was so big it even has its own home page on the Web worth visiting as long as it stays on line if you want to see what kind of prices to expect for various pieces in Internet auctions Todd has written an excellent Auction Shipping FAQ with helpful information on buying and selling over the Internet Jason Mantor see his home page has put his enterprise RTL Bricks on the Web You can select specific part from the RTL Bricks catalog in specific color and order it in bulk There is also marketplace for individuals to post ads to buy or sell of whatever kind they desire The site has some raytracings of original designs and promises other services in the future Global Wholesale Toys has page offering purchase of sets at about discount from normal prices Their prices still seem quite high compared to but perhaps that merely indicates that normal prices in New Zealand are much higher than in the United States Personal WWW Pages Quite large number of people have put their own lore on the Web or have volunteered to identify their regular home pages as those of LEGOmaniacs tried to make as complete list of these pages as can There are some real gems on these pages too many for me to list above so highly recommend you peruse the nearly complete list of LEGOmaniacs Web pages Miscellaneous Good Stuff The Bayer Group as it turns out supply ABS plastic to the LEGO Group page featuring the Super Car and explaining the connection images are linked to shots of various parts of the car Gryphon Software Corporation is advertising product called Gryphon Bricks drawing program for models built of bricks and other elements Citations Received recently been awarded Positive Thanks guys And there review of this Web page in the October issue of Web Review Last updated Mon Nov EST David Karr karr	other	cornell
983	 Server Date Monday GMT Friday GMT CS Department Researchers Researchers in the CS Department We have directory listing of all the people in the department giving the email address office number and phone number for each person You can find out more about individual researchers in the department by accessing their home pages These are the Researchers including scientists research associates and who have home pages Frank Adelstein Paul Chew Annual Report home page David Cooper Nikos Chrisochoides Jim Davis Roy Friedman Paul Jackson Dean Krafft Annual Report home page Christoph Kreitz home page Carl Lagoze Bruce Land Annual Report home page Yuying Li Yanhong Annie Liu Silvano Maffeis Matthew Morgenstern Clark Olson Rick Palmer Annual Report home page Daniela Rus Annual Report home page Robbert van Renesse Annual Report home page Erin Shaw Chunguang Sun Werner Vogels Howard Richard Zippel Click here for some information on how to set up your own home page To set up pointer from here to your home page you have to edit this file yourself	other	cornell
984	 Server Date Monday GMT Tuesday GMT Disclaimers and Other Information Disclaimers and Other Information This is some of the information you should know about the Cornell University Computer Science Department local World Wide Web server Accuracy of Information The information in the local CS Web is provided and maintained by many different people so use any information you find here with that in mind While we will try to keep the information here and accurate we can provide no guarantees If you encounter inaccuracies or material please send mail to the author of the document in question or to www File Permissions on the local Web Some of the information on the CS Web is department specific Any links to files residing off directories explicitly marked for external access will not be traceable by those outside the CS department network If you see links to files which you feel should be accessable by the world please send mail to the author of the document containing the link or to www Presentation of Information The html documents on the CS Web were created to be used with the Netscape Web browser If you have another type of browser some documents may not appear as you would expect In addition some of the files available are in other formats that may or may not be easily converted and readable by your browser Disclaimer Unless otherwise noted the information contained in the Cornell Computer Science Department Web is not necessarily endorsed by the Department or by Cornell University Views expressed by individuals on this local Web are the sole responsibility of the individual Any questions or comments about the disclaimers or information here should be sent to www	other	cornell
985	 Server Date Monday GMT Thursday GMT Zeno Mission Our Mission The goal of our research group is to make multimedia data first class data types in our computing environment To this end we are building technologies supporting the storage communication and processing of multimedia data In contrast to other commercial and research approaches which require specialized hardware operating systems or networks to be usable the technologies we are designing fit into the current research environment Our premise is that the current hardware software and communication infrastructure is sufficient to support research into continuous media systems and applications We are verifying this hypothesis by building working systems Our Approach to Research Our group uses an systems approach to building applications We find killer applications that can almost be built using the current technology and try to build them In doing so we inevitably find components of the application that require new algorithms we optimize interactions between the components and we build frameworks for combining the components The value in such research is in the study of the interaction between components the occasional creation of component technologies and the technologies that result Examples of such are and the Berkeley MPEG player both of which were developed while building CMT Current Projects We are building DVFS serverless distributed video file system We are developing algorithms for directly processing compressed video data We are developing Rivl language that treats images audio and video as first class data We are supporting distributed programming extension to We have built Lossless JPEG codecfor use by other researchers	other	cornell
986	 Server Date Monday GMT Thursday GMT Zeno Software Zeno Software Warning this page is still under construction Note Not all software is available in all configurations What software do you want Rivl CMT Lossless JPEG JPEG Processing For what operating system Source Code SunOS RedHat Linux Solaris	other	cornell
987	 Server Date Sunday GMT Sunday GMT Flapdragon House of Squiddle Coop Flapdragon House of Squiddle Locking you out since An opening in Flapdragon There is an opening starting at Flapdragon If you like to find out more call and ask for Kerrin or any of the other denizens Flapdragon Quote of the Indeterminate Time Period in honor of the election Zab would mind eating Bob Dole referring to the fact that Zab is neither vegetarian nor Republican Flapdragon is now in its second year and going strong with an all new set of members who no longer live in Flap but still handle the homepage still have gotten around to updating the webpage but will get the new member list and the new quote list up in the next week or so And somebody got to take some new pictures Some basic information We located at Seneca Ithaca NY and our phone number is Click here for definitions of squiddle and flapdragon Take look at the ahem somewhat edited and newly extended Flapdragon Quote List Eating Members Note the pictures no longer reflect who really lives here We fix that eventually Kerrin Flannigan Rob Miroballi Sudha Sundharesen Elizabeth Zab Palmberg Ravitte Gall Cheryl Heinz Nat Miller And flapdragon wannastillbe Yaron Minsky your friendly keeper of the homepage Links to Flapdragon Blood Relations Zab sib Yaron bro And no flapdragon page would be complete without picture of us playing flapdragon gt Yaron Minsky yminsky Last modified Sun Nov	other	cornell
988	 Server Date Sunday GMT Thursday GMT Friends from Reliance Life at Reliance The most memorable gift from Reliance Poonam put our entire MIS Department together on this farewell card Given to me on the one of the most memorable days of my life Thanks everybody it could have been better And we all got together at Holiday Inn Sitting from left Nischal Mahesh Chetan Sushovan Manish and Abhishek Standing from left Priya myself and Ratna And after long day work when we returned back to the Sanghvi Towers on Adajan Road then followed all the fun and pranks and with Umang Kani Raju Rangeela Karwa Kurlekar Pujari Karkare Bhaiya Saboo Sardar	other	cornell
989	 Server Date Tuesday GMT Saturday GMT Research Stuff Currently am working on an implementation of image database The implementation that we are trying to do is one written in First in Rivl and latter in Visual or Visual Basic The idea of this database is to use as many images as we can handle from the web and run program on each one which generates an electronic discription of the image Then second program will take this database and sample image and generate list of the top images with similar descriptions There are several similar databases out there right now Links to those will come latter Most of these databases use color histograms to describe their images color histogram is list of colors and the amount of each color in the image Color histograms are good for certain things but little example with demonstrate where they fail Suppose you have picture of sunset picture is coming If this was compaired to randomly generated image that resemble the snow you sometimes see on TV but in color the result could be perfect match It is obvious that it is not perfect match but each images has exactly the same amount of each color in it The goal then of this database is examine other methods of compairing images that better represent humans perception of similarity Currently we have comparision which incorporates positional data as well as the color data Hopefully have better description of this later As long as it can be released	other	cornell
990	 Server Date Sunday GMT Monday GMT Parallel Raytracing in Parallel Raytracing in Final Project Spring Vineet Ahuja Amith Yamasani Abstract This project is parallelisation of public domain raytracer It is implemented in Compositional on the Raytracing in itself is easily parallelised as the screen can be split up into several areas and each area can be given to one processor The problem arises when antialiasing needs to be performed to reduce the aliasing effects due to finite sampling Due to this boundaries between processors need to be kept at minimum One also needs to worry about balancing the load well between the processors depending on the complexity of the scene Transferring all results back to one processor to write to disk also becomes an issue We have attempted to tackle these problems and come up with as efficient solution as possible given the constraints of the language and the size of the problem set Compositional is language that supports structured parallel programming that is being developed at Caltech by the Computational Biology group It provides structured parallelism in the form of par blocks and parfor loops and unstructured parallelism in the form of the spawn statement Functions preceeded by the keyword atomic are used to implement mutual exclusion for functions that work on shared data Sync variables are used for synchronization and the global keyword is used to modify pointers so that they can refer to local and remote memory Sync variables work by suspending the thread that tries to read the variable till the variable is written to by another thread Processor objects are objects that control the computation on processor and they are defined in the regular manner except that the global keyword is used before the class definition Data transfer functions have to be defined while calling functions that lie on another processor object so that data like arrays and other user defined data structures can be copied and sent to the other processor Raytracing We picked up public domain implementation of raytracer called RayLab and worked on parallelising that Raytracing is method of rendering graphics scene that considers the rays entering the viewers eye The method traces the path of those rays from the eye to the scene and calculates the intensity and color of that ray depending on the ray path and reflections As calculating the ray value is independent from the calculation of all other rays parallelisation is trivial The difficulty in parallelisation arises from the need to perform antialiasing Antialiasing is used to reduce the jaggies in the ouptut image caused by the finite sampling rate of the screen finite resolution This is done for each pixel by considering the immediate pixels to the east the south and the for Parallelisation Strategy Blocked row distribution The easiest method is to divide the screen into strips where is the number of processors and allow each processor to ray trace its own strip The problem with this method is load balancing For example if all the objects in the scene were to lie on strip then the nth procesor would have to do the most work leaving the first processors idle after they have completed their own strips Strategy Column and row cyclic distribution Another static division method this one divides the screen into small squares of pixels where is the number of processors Each of the pixels in that square goes to different processor This is basically the column and row cyclic division see the figure above The problem with this method is that doing is no longer straight forward as all the current pixel neighbours are on different processors and performance becomes an issue if processor has to go across the network connecting the processors to each pixel Strategy Hungry Puppies This method works by dividing up the screen into strips of lines each processor is designated as the master and the rest of the nodes are slaves Each slave node requests work from the master and goes back to ray trace its strip On completion it returns the quantized ray traced strip and gets more work from the master by quantization we mean converting the values of the RGB value of the pixel from float to char to throw on the display This goes on till all the strips have been ray traced So each slave is hungry puppy that runs to the master for work The master node then writes the entire raytraced scene to disk Another problem is antialiasing What does processor do with the last row of its strip It needs the next row which is on the another processor to antialias it We have two different implementations to handle this problem In one we compute the next row on this processor as well so doing the computation twice once on this one and once on the processors that actually owns the line In the other we send the unquantized last and first rows of each strip in addition to the quantized values of all but the last row of each strip so that the master node can antialias the last rows of all the strips therefore avoiding any redundant computation At this time this version has bug in it so all performance results discussed in the next section are with respect to the first implementaion The obvious problem with this method is scalablity Since all the slaves are sending so much data to the master there is lot of contention for resources on the master This obviously limits the number of processors that can be thrown at the problem Details We define types of processor objects see section dispatcher and tracer dispatcher is essentially the master processor that dishes out the work and the tracer does the actual raytracing of each strip Node contains both dispatcher and tracer since it would be waste of processor to dedicate it to just sending strip numbers to each tracer and disk writes We timed the disk writes and ray tracing in the serial version and found raytracing pixel is times more expensive than writing it to disk We found problem with in that when data was being sent to another processor by means of data transfer functions there is unnecessary copying of the data before it is packaged in the data transfer function We avoided this problem by defining copy constructors that do not actually allocate memory for data referred to by pointers We just make the new object point to the data of the old object and do not define destructor that releases the memory This was the only way we could think of avoiding the extra copies Sync variables are used when the dispatcher is waiting for the tracers to complete their work so no cycles are wasted in waiting in dummy loop but the dispatcher main loop is suspended till the sync variable is set by the function of the dispatcher that decides there are no more strips to be traced The function that dishes out work in the dispatcher called NeedLines is an atomic function since it has to increment counter while giving out the next strip Now if this function is called simultaneously by tracers or almost simultaneously the value of the counter might not make any sense if both the copies of NeedLines access the counter together Speedup The graph below shows speedup number of processors where speedup is defined as the ratio of the time taken to run the serial implementation to the time taken to run the parallel version The speedup is almost linear but doesnt have slope of This is because of the bottleneck created on processor which also needs to act as the dispatcher and thus the tracer on processor is as efficient as the tracers on the other processors Communication Computation time The series of graphs shown below show breakup the time taken by the code to run into the computation time and the communication time As can be seen from the above graphs the performance of the program is maximum at granularity of about lines per chunk At lower granularity the communication overhead becomes too high At higher granularity again the efficiency goes down This is due to load imbalance as some processors get more work and others get less work and stay idle for longer time This is shown to be true from the load balancing graph below Load Balancing The graph below shows the ratio of maximum work done by processor to the minimum work done by processor so showing how effectivley the load balancing policy is At low granularity the processor ends up taking much longer to do its work because it is interrupted very often by the dispatcher which is invoked by the other tracers At slightly higher granularities the load is much better balanced Again at very high granularity the load imbalance is due to some processors getting more intensive work than others and Conclusions We found to be overall very effective language to work with in that it allowed us to think about parallelism in structured manner However we also found the compiler we worked with to be very inefficient in code generation To fairly compare our parallel implementation with the original serial version we had to recompile the serial version with the compiler otherwise the output code of the compiler for the ray tracing code and therfore the computation intensive part of the program was faster than the code Another problem is with the data transfer functions which we mentioned earlier Raytracing We feel that the best way to handle antialiasing is using shared memory multiprocessors so that processors can readily access the neighbouring rows that are handled by other processors Also since each processor needs only the first row of the next block to antialias its last row it is almost certain that the neighbouring processor would have completed raytracing that row and the processor can therefore immediately use that data This statement is made under the assumption that all the processors carry the same outside of the raytracing	other	cornell
991	 Server Date Sunday GMT Thursday GMT Ithaca Ageless Jazz Band Welcome to The Ithaca Ageless Jazz Band Home Page Press Clippings Band Members Band Song List Schedule of Upcoming Events Contacting the Band Associated Links If you have any comments or questions regarding this page please contact Robbert If you wish to see how many times this page has been accessed click HERE This page created with Netscape Navigator Gold	other	cornell
992	 Server Date Monday GMT Tuesday GMT SimLab SimLab Software Release Includes Algebra Topology and Mesh Generator This is the initial release of the SimLab software This release includes mathematical functionality for algebraic and topological computations Weyl as well as code using Weyl for creating triangulations of planar areas How to get the SimLab software Implemented using the Common Lisp Object System CLOS in Common Lisp the release is available by ftp as compressed gzip tar file bytes together with plain text file bytes that describes how to install the software These are files are available via FTP at the site in the directory as README and An illustration of the mesh generation application The purpose of mesh generation algorithm is to take as input the boundary of region of space and create as output triangulation of This process is required for variety of numerical modeling methods such as the finite element method FEM The quality of given triangulation can be measured in variety of ways and is important for maintaining the numeric stability of the algorithm such as FEM that use the mesh The SimLab code for mesh generation described here created by Paul Chew provides bounds on the minimum and maximum angles of the triangles of the mesh The process of creating guaranteed quality mesh is illustrated in the following figures The first figure illustrates the input The boundary of the region is drawn in black while the region for which mesh is required is the area shown in green The Input The guaranteed quality mesh created by the automatic mesh generator is shown below The Output For more information on this use of the SimLab software see the MADEFAST pages All code is copyrighted Cornell University This code has been developed by Paul Chew Paul Jackson Sekhar Muddana Rick Palmer Todd Wilson and Richard Zippel in the Simlab group at Cornell University This material is NOT in the Public Domain but permission to copy this software to redistribute it and to use it for any purpose is granted subject to the restrictions and understandings described in the README file contained in the distribution This work was supported in part by the Advanced Research Projects Agency of the Department of Defense under ONR Contract by ONR Contract and in part by the Army Research Office through the Mathematical Science Institute of Cornell University Rick Palmer rick	other	cornell
993	 Server Date Monday GMT Tuesday GMT Homework Homework Handed out Tue Feb Due Part on Tue Feb Part on Tue Feb This assignment must be done in groups of two with different partner than homework in one solution per group printed not manuscript The little problems below will get you started with writing programs on the Measure the LogP parameters for Write program that determines the LogP parameters for the various remote access primitives You should determine produce table the processor overhead on the requesting side the processor overhead on the serving side the gap between successive requests the latency for the following primitives read of an int write of an int get of an int put of an int store of an int Remember to always time chunks of code in loop long enough to overcome the granularity and overhead of the clock Heat diffusion small application Write small program that simulates the diffusion of heat on surface of arbitrary shape Display the simulation in an window Background The dissipation of heat in an object is an example of diffusive process which is modeled by differential equation which if we assume the material is uniform takes the form where is the temperature of the object at position at time In this problem set we will look at one and two dimensional objects wires and plates but the generalization to is obvious Heat Dissipation in wire For an infinite wire with an initial temperature distribution of it can be shown analytically that the temperature distribution at time is In order to discretize the problem we first restict ourselves to finite length of wire say from to and divide the wire into sections of length dx The temperature function becomes where we will let segment be centered at and segment be centered at so segment is centered at We will also have finite time steps of length dt As convenient notation we will write to mean the temperature of the segment after time steps We may approximate the derivatives by and then replace the differential equation by the finite difference equation which allows us to immediately generate one time step from the previous one Sequential test Use the above scheme on our test problem take and run until holding for all time Compare the results to the analytical solution Try it on workstation for each time varying dt by orders of magnitude For example with try dt Hand in plot of the analytical solution and your experimental one when and This approximation scheme is not stable the numerical solution will not converge to the true solution when Explain your experimental results using this fact Sequential program for heat diffusion The generalization of the heat transfer formula for problems is assuming Write program for your favorite workstation that simulates arbitrary shaped plates on fixed grid The easiest is if you use bitmap editor to draw shapes and read that into your program Then allow the user to enter and start simulating Your program should display the progress of the simulation using Display every and allow the user to determine Keep the display code simple you not doing this to win graphical design contest Make your grid cover an area of in and in Parallel heat diffusion Parallelize your heat diffusion code You should somehow divide the grid among the processors and have each processor simulate its subgrid independently You obviously need to worry about communicating the boudary regions Also be sure to choose the grid size and time step wisely so that your solution will converge Simulate the following shapes large disk with hot spot in the center long skinny rectangle placed in the upper part of your workspace with anywhere and barbell with hot spot in the center of one disk In each case measure the Mflops you achieve per processor Also measure the ratio between the busiest and the least busy processor Note that the part you should parallelize is the actual computation Do worry about the initialization or the display do that on one processor For the timings you probably need to turn the display output off display the first and last time step so you can see that everything worked fine For and produce snapshots of your simulation for the three shapes defined above with and ft is the final time For each shape make sure you use the same grid size time step and ft for both the sequential and parallel simulation Please provide us with the URL to web page with the snapshots with enough annotations so that we know which plot corresponds to which case Color printouts are strictly forbidden	other	cornell
994	 Server Date Monday GMT Monday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
995	 Server Date Sunday GMT Friday GMT Sound Editor Sound Editor Steven Huang Jing Vince Li Janet Liu Introduction This project aims to implement sampling digital audio engineering tool that can be used to create moderately complex special effects The project should sport an and fairly portable interface across various platforms The program should work reasonably well on all kinds of audio samples from voice to CD quality music Ideally this program should be able to utilize hardware features such as audio playback and recording Deliverables Working software Technical documentation Milestones Algorithms research Hardware support and standards research User interface in and Time domain functions Frequency domain related mathematics research Frequency domain functions General Operations Playback The program should be able to playback the samples being edited for previewing purposes This function does not aim to interface with device capable of audio synthesis Pause The program should be able to stop in the middle of playback Rewind The program should be able to return to certain sample earlier in time and resume playback from there Fast Forward The program should be able to skip ahead to certain sample later in time and resume playback from there Seek The program should be able to start playback at any certain sample in the entire sound file indexed by either playing time seconds or sample number Record Optional If hardware support permits this program should be able to digitize samples from an external audio source In general however this program should assume that samples are digitized by another dedicated platform because of quality considerations Volume Control This program should have the ability to adjust the output volume of the playback function appropriately If possible decibel notation should be employed instead of arbitrary volume levels such as to Balance Optional This program should be able to adjust the ratio between playback output of the left and right channels on stereo hardware File Operations Optional Currently the Sun Audio Format is deemed most appropriate for reasons of portability and ease of programming If time permits support should be provided to output resulting samples in the Microsoft Windows Wave format Creative Labs Voice format and others Monitors The following functions do not alter the input samples in any way but display them in manner that might be visually useful and pretty to the audio engineer Raw Waveform The program should be able to display the modulation PCM format digitized samples as waveform in time domain Multiple files can be open at the same time to allow simple edit operations such as Cut Copy Paste and some others that users of commercial software would come to expect Spectrum The program should display frequency spectrum synchronized with the playback to show the distribution of frequencies Right now we are split between the conventional boombox style of discrete frequency ranges and quantized intensity levels dancing LED bars or more scientific spectrum display possible only on video monitors Suggestions are welcome Histogram The program should display time domain graph such that time progresses along the towards the right side frequency ranges are plotted along the in and out and amplitude plotted along the going up This display would be useful in visualizing amplitude distributions over time Time Domain Operations These functions modify the input waveform in the time domain and do not require Fast Fourier Transform FFT or its inverse to operate All time domain operations can be performed on the entire file or some selected subset These operations should be Echo This function digitally simulates an echo It will be implemented by mixing several copies of the sample in decreasing strength with corresponding shift in time Fade These two function incrementally increase or decrease volume over range in time Mix This function is the digital simulation of mixing two input sources together and will be implemented with some form of weighted averaging of the samples Backmasking This function reverses the waveform in time such that the last input will become the first input and vice versa This function is useful in including Satanic messages into rock songs advocating suicide Silence This function creates range of silence Amplitude Scaling This function is used to modify the amplitude of range of samples to effect an increase or decrease in volume Resampling This function allows an input waveform to be upsampled to higher sampling frequency or downsampled to lower Upsampling is probably accomplished by interpolation and downsampling by tossing away samples Frequency Domain Operations The following operations require processing in the frequency domain Pitch Scaling This function can be used to effect pitch shifting without affecting playback speed useful in making people talk like chipmunks Graphic Equalizer This function can be used to enhance or inhibit certain frequency ranges for example to reduce noise Two proposals are being reviewed here the first being the traditional boombox graphic equalizer with sliders or tool that will automatically certain selected points and modify the spectrum accordingly Suggestions welcome Addition and Subtraction This function allows the addition or subtraction of spectrum with another This is possibly useful in noise elimination Morphing This function can be used to transform one spectrum into another incrementally over time Last updated December Maintained by Steven Janet	other	cornell
996	 Harmful If Swallowed Harmful If Swallowed Click to see Harmful if Swallowed home page Studio Tape Musicians for Humanity III Willard Straight Hall Cornell University Dexter Kozen Daniel Scharstein Bruce Donald Jim Davis Zorp	other	cornell
997	 Server Date Sunday GMT Thursday GMT Pictures Dexter Kozen Family Pictures Alexander age Geoffrey age Timothy age Frances age	other	cornell
998	 Server Date Sunday GMT Friday GMT Roll Dice to Solve the Puzzle Compute Probabilities of Rolling Matching Dice Java applet below popular puzzle asks How many randomly selected people do you need to gather in order to have better than percent chance that two of them have the same birthday If you make the simplifying and not really true assumption that each person birthday is equally likely to be on any day of the year but never on February independently of any other person birthday then this puzzle is equivalent to asking how many dice you must roll in order to have at least chance of rolling pair two dice showing the same number The answer turns out to be surprisingly low lot lower than If you actually found people all with different birthdays then of course the chance that the next person would have the same birthday as one of them is greater than but in fact chances are that you found match long before you collected that many people The Java applet below provides way to find the answer to this puzzle as well as many other related puzzles Given the number of sides on each of your dice the number of dice you will roll and some limit on the number of dice that may show any one number after you roll you can press the recalculate button next to the probability to see the probability that you will be able to roll all dice without generating any matching set of more than dice Alternatively you can press the recalculate button next to the number of dice to find out how many dice you need to roll in order to have sufficiently low probability of not rolling too many matching numbers For example to solve the traditional birthday puzzle select sides at most match and percent probability and recalculate the number of dice The applet will then tell you that if you roll of these dice you have only probability of having no more than die showing any given number that is you have chance to have at least one pair To find out how many people you need to have or better chance to have three people with the same birthday change the largest set of matches to set the probability to and recalculate the number of dice The text window below the buttons shows some more the results of the calculations with slightly greater precision If you like you can press Display Probability Distribution to make the applet dump its entire internal database counting all the ways you can roll the dice without having too many dice the same Remember all probabilities are given on scale of to percent Beware if you set problem that is much too hard for example set number of sides to maximum matches to and probability to you asking to collect enough people to be sure that of them will share birthday you may find the calculation takes too long or runs out of memory Meanwhile while it runs the applet may freeze up your browser Also beware that due to the fact that the number in the probability field is rounded off each time it is displayed sometimes downward and the rounded value is used to figure how many dice you should roll repeated recalculation of the number of dice may result in rolling more and more dice to get lower and lower probabilities If the displayed probability is not exactly the number you want enter your desired value rounding up If your browser has the Java capability you should see the control panel here instead of this message Last updated April The probability calculations now use slightly faster algorithm David Karr karr	other	cornell
999	 Date Sun Dec GMT Server CUinfo Weather Page The Weather Page For December sunrise am sunset pm The current conditions in the Ithaca area Sunday December Hour Temperature degrees Fahrenheit Wind chill degrees Fahrenheit Wind is from the south Wind speed miles per hour Atmospheric pressure inches Relative humidity Condition overcast skies with light rain The current National Weather Service forecast for the Ithaca area from the Cornell Meteorology Unit Northeast Regional Climate Center is The Ithaca forecast issued at PM EST SUN This afternoon Breezy with rain High around South wind increasing to to mph Tonight Rain tapering off to showers early Low in the mid Wind shifting to the west at to mph Chance of rain percent Monday Partly sunny and brisk High in the upper Extended forecast for Western New York issued at AM EST Tuesday Mostly cloudy with scattered rain or snow showers Low about High near Wednesday Mostly cloudy with snow showers likely Low near High in the upper Thursday Partly sunny and chilly Low about High around Other sites which might be of interest University Operating StatusThe Ithaca Climate PageWeather conditions in local citiesNortheast Regional Climate Center at Cornell Time and Temperature Service in the Ithaca from CNN Weather World from WebWeather Weather from NBC News National Weather Service home page WXP weather interface program from Purdue Astronomical Data online Naval Observatory Warning this link contains very large images If you have any comments or suggestions please send them to	other	cornell
1000	 Server Date Monday GMT Tuesday GMT Overview of the Horus Project Overview of the Horus project Five years ago Kenneth Birman and Robbert van Renesse started the activity that ultimately lead to the design of Horus At the outset the project was perceived as redesign of the Isis group communication system Isis although successful was monolithic and hence inflexible and used protocols that have subsequently been improved upon Over the last five years Horus evolved beyond these initial goals becoming sophisticated group communication system with an emphasis and properties considerably different from those of its parent system Perhaps the best general overviews of Horus can be found in the April issue of Communications of the ACM and in the May issue of Scientific American Many additional papers are available in our online technical reports area Readers already familiar with group communication will best understand Horus as communication architecture that also does very good job of supporting the sorts of applications for which Isis became popular Broadly Horus is flexible and extensible communication system in which the interfaces seen by the application can be varied to conceal the system behind more conventional interfaces and in which the actual properties of the groups used membership communication events that affect the group can be matched to the specific needs of the application If an application contains multiple subsystems with differing needs it can create multiple superimposed groups with different properties in each The resulting architecture is unique in being completely adaptable the groupware developer or systems programmer pays only for properties that are specifically desired and can often use Horus to introduce reliability or replication in completely transparent manner Users who wish to treat Horus as prebuilt system can take advantage of its virtual synchrony model to introduce replication coordination and into their applications Horus is suitable for building high performance groupware applications and we are now working on applications notably in the area of telecommunications switch management Several interfaces are available for direct use of Horus including toolkit named HOTS oriented towards programmers For users who wish to develop new groupware protocols Horus can be viewed as group communication environment rather than as collection of prebuilt groupware solutions It is and permits the use of several programming languages ML and Python in single system Horus protocols are structured like stacks of hence new protocols can be developed by adding new layers or by recombining existing ones Through dynamic layering Horus permits an application to adapt the protocols it runs to the environment in which it finds itself Much of our research has been on the issues associated with developing layered groupware protocols Over time Horus layers have become much simpler than expected and consequently lend themselves to automatic verification This is especially true for the Horus layers coded in ML which are well suited to analysis using the NuPrl system also Cornell research project By combining simple layers complex semantics can be supported Existing Horus protocol layers include an implementation of virtually synchronous process groups technique permitting consistent and data replication as well as protocols for parallel and applications Considerable recent work has been done on protocols for secure group computing and for applications Moreover Horus is now at point where the communication protocols can be upgraded underneath running application without the need to stop and restart the application Although layered protocol architectures often carry performance penalty Horus includes protocol accelerator that permits it to demonstrate excellent performance Horus supports CORBA request broker toolkit WWW server and cooperative text editor On the theoretical side the project has contributed significant body of fundamental results in the overall areas of distributed consistency security and private communication in systems Current work includes study of how properties can be proved for composed stacks consisting of multiple layers basic theoretical work on virtual synchrony and study of systems that combine and logical consistency properties Looking to the future we believe that Horus will be well matched to the replication needs of emerging Web applications such as caching Web proxies Cornell students have implemented prototypes of such systems successfully Horus can be used as Java communication protocol and is appropriate for system management in complex internet settings Other likely application areas include transparent options for limited classes of applications security and system monitoring and database replication The Horus software is available for use by research laboratories Commercial use of the technology should be possible by late in or early through an arrangement with Stratus Computers Project funding ARPA has played significant role in the progress made by the Horus project by providing funding through the Office of Naval Research under contract The Horus research effort is grateful to IBM Research GTE Siemens Corporation and Stratus Computer for support of our effort Comments to Werner Vogels	other	cornell
1001	 Server Date Monday GMT Sunday GMT Course Format CS Course Format Thorsten von Eicken Fall The entire course will have little research flair to it which means that few things more than two years old will be discussed The is that no textbook is available to complement the course am still searching for good introductory parallel programming book and would appreciate any recommendations The material presented in class will however be complemented with conference and journal papers Weekly problem sets will provide an opportunity to let the material presented in class sink in Accounts on the NCSA for this purpose should be available shortly am also purchasing small cluster of connected by an ATM network which hope to make available by the end of september This platform will be significantly more shaky than the but it will offer the opportunity to dig much deeper into the system Towards the second half of the term right after Columbus day we will form small groups to start projects The basic mindset you should have is that you are writing for an upcoming conference You should with report of pages You will have to innovate beyond existing work as represented by few recent papers and provide in the form of data collected from justify the innovation The relative weighting of synthesis and analysis depends on your preferences but neither should have zero weight Design studies are great so is gathering relevant facts In my view this is an advanced topics course intended to provide food for thought In your project you can extend any of the topics presented in class dig into issues encountered in the homeworks integrate disparate approaches or on systems issues not covered in the course hope that the ATM cluster in particular will offer ample ground for coming up with new ideas and testing them out At the end of the course you will have the opportunity to present your project to the entire class and others in the department in poster session each group prepares poster with text and diagrams explaining the project During the poster session you will have minutes to present your project and you will get to know what others did Take look at the posters in front of my office to get an idea expect this terms posters to be even better Prerequisites Basic familiarity with parallel computing message passing data parallel shared memory programming models OR basic familiarity with computer systems processor pipeline assembly language memory hierarchy virtual memory system thread packages system calls This course will require significant breadth knowledge Not everyone is expected to know everything Problem sets and projects will be done in groups You are expected to on the topics you feel less comfortable with and will adapt the lectures to the average knowledge The bottom line is that if you are determined to learn and have the time you are welcome to the course Grading The problem sets and the term project will be done in groups of two and you must choose different partner for each of the three first problem sets The problem sets are graded expect you to take serious crack at each of the problems and to solution for one problem per set The final grade will roughly be composed of problem sets project report project presentation class participation Return to CS Home Page	other	cornell
1002	 Server Date Monday GMT Friday GMT Spring Course Information Spring Introduction to Natural Language Understanding Course Information Time and Place Olin Personnel for Instructor Asst Professor Claire Cardie cardie Office Hours Wed Fri or by appointment Office Address Upson Phone Teaching Assistant Francis Chu fcc Office Hours Tu Th or by appointment Office Address Upson Phone Newsgroup Return to home page	other	cornell
1003	 Server Date Sunday GMT Thursday GMT Formal Methods at Cornell Formal Methods at Cornell Cornell University Ithaca NY Faculty Bard Bloom bard semantics of programming languages distributed algorithms Robert Constable rc theory of computation programming logics automated reasoning David Gries gries programming methodology programming languages compiler construction Thomas Henzinger tah formal support for the development and analysis of concurrent and embedded systems Dexter Kozen kozen theory of computation computational complexity programming logics semantics Miriam Leeser mel application of formal methods to hardware verification and synthesis Anil Nerode anil game methods for extracting correct concurrent programs relaxed variational methods for extracting correct digital control programs for continuous plants Fred Schneider fbs concurrent programming particularly for and distributed systems Projects HyTech tah symbolic model checker for linear hybrid systems NuPrl rc an interactive proof development system Last updated on September tah	other	cornell
1004	 Server Date Sunday GMT Wednesday GMT Cornell CS Public Software guide to publicly maintained software at CUCS Cornell Computer Science Last update Halloween This page provides information about using the public software in on the Cornell Computer Science machines The directory is the place for files that are useful to the entire department but without official support by Current Announcements Synopsis How to access What is in What should not be in Directory organization How to obtain further help Other pages available in Current List of czars Upson familiar quotes After Cornell survey Space used by each user in Query database for all files in Current Announcements The is currently updating these pages and conducting periodic cleanup of the directory If you have somthing in and you have used it in while please consider removing it Synopsis is directory which is mounted on all of the departmental Suns It contains all software which is considered useful to the entire community and is not officially supported by All software in is provided without any guarantees by other users To determine who is responsible for program look at the owner of the executable There is also that informally manages the directory Periodically this czar will walk through the directory looking for space and if you have installed something you may receive message from the czar asking if the program is still useful We are always short of space so this may happen fairly often The is also available to provide assistance if you need help finding or installing something or if you feel something needs to be changed The is currently Jason Hickey but mail can be directly sent to the alias which will always be kept How to access To access the binaries in include into your path defined in You should have this at the end of your path for security reasons Games are stored in directory which may be accessed with Many useful manual entries are also in and may be accessed by adding to the environment variable MANPATH For example the following is reasonable way to define MANPATH setenv MANPATH What is in contains user supported software Here is list of some reasonable things to put in compilers for unusual languages experimental editors games odd utilities and data files Sources for executables should be stored in For security reasons sources should be available whenever possible Include manual pages in Look in that directory for some examples Remember the manual entry is often the only clue about what program does There are help files in the normal area Feel free to add tips files in Remember that these files need to be in troff man format Look at an existing man page to figure it out If you would like to add WWW info contact the who will add it to this file There is also an emacs texinfo page so documentation can be added that way too All public games are stored in These are managed by the games czar who is ultimately responsible for what stays and what goes Sources for most games are in Please do not make private copies of the games because they waste lot of disk space In particular do not copy the fortune database file What should not be in It is easy to crowd public disk with useless junk Core dumps and object files should be removed as quickly as possible Executables should be stripped see strip Large sources for stable programs should be deleted Do not throw something onto unless these is good reason to believe that other people might use it Never put software into which is of questionable origin viruses are daily concern If something seems strange do not hesitate to bring it up often fills up This leads to lots of finger pointing and nasty messages so try to be polite If you really value something but everyone else does not seem to care move it to your home directory Directory organization holds binaries for several architectures To make access somehat executables are available in which will always be link to the appropriate directory files are always kept in This includes shell scripts images pages WWW pages and other assorted files This is true even though right now we mostly use throughout the department Remember solaris is on the way like it or not If it makes you feel more comfortable add link from executables you install in to corresponding directory entries in solaris If you install in the wrong place the will always come around to correct you Here is summary for the look here for stats if you want various info this will get incorporated into this page HP dependent files include files This should be link to do really know why we have this it may go away soon This is just to give you hard time Source directories for the installed programs Any program whether it is one file or not should be installed in directory here libraries and executables Games for libraries and executables libraries info files etc How to get further help If you need further guidance of any sort send mail to	other	cornell
1005	 Server Date Monday GMT Thursday GMT Algorithms for Detecting and Classifying Scene Breaks Algorithms for Detecting and Classifying Scene Breaks Ramin Zabih Justin Miller Kevin Mai Abstract We describe new approach to the detection and classification of scene breaks in video sequences Our methods can detect and classify variety of scene breaks including cuts fades dissolves and wipes even in sequences involving significant motion We use approach and detect the appearance of intensity edges far from previous edges global motion computation is used to handle camera or object motion The algorithms we propose withstand compression artifacts such as those introduced by JPEG and MPEG even at very high compression rates Experimental evidence demonstrates that our method can detect and classify scene breaks that are difficult to detect with conventional approaches An initial implementation runs at about frames per second on Sun workstation If you wish to view the paper you can choose from two options HTML The paper that will appear in the ACM Multimedia Conference Also available in postscript form Postscript The rather large MB postscript paper submitted to IEEE PAMI Note some printers have trouble printing this out If you send us email we will send you hardcopy In addition Rob Szewczyk has built an MPEG browser which uses our algorithm to detect scene breaks It allows user to search for variety of scene breaks in combination with motion For instance it is possible to skip forward to the next time left pan is followed by dissolve Source code for the browser and the algorithm are available on an as is basis In addition there is binary version of the browser compiled under SunOS rdz Mon Jul EDT	other	cornell
1006	 Server Date Wednesday GMT Wednesday GMT Researchers Staff and Students in the Cornell CS Department Researchers Staff and Students We have directory listing of all the people in the department giving the email address office number and phone number for each person Many people in the department also have their own information page Click on the individual category below to get the list of pages Researchers Research Colleagues Graduate Students Departmental Staff	other	cornell
1007	 Server Date Sunday GMT Tuesday GMT Swing Pictures Swing Pictures Jean and dancing at the American Swing Dance Championships ASDC in New York City The Metronome San Francisco Dec Debbie Elkins teaching in Ithaca NY John Festa teaching in Ithaca NY The Core of the San Francisco Group Sonny Watson teaching in Monterey CA Jan Bobbie Henrie and the Goners from Rochester NY the hottest rockabilly Jean with Micheal Kiehm San Diego CA Jan with Jonathan Sylvia in Santa Barbara CA Jan Jean Jackie McGee NYC April Me doing my first ASDC Jack Jill ASDC Jack Jill	other	cornell
1008	 Server Date Sunday GMT Thursday GMT CS Sample Questions CS Sample Questions and Answers Relational Algebra and SQL Consider the following schema used by the Campus Book Store TOY toyno toyname toytype color price BOOK bookno bookname booktype price MANUF mname address phone STOCK itemno mname quantity In the above primary keys are in boldface You can assume that each value refers either to toy or book but not to both Each manufacturer can make toys or books or both Express the following queries in the relational algebra and in SQL Print the phone numbers of manufacturers who make toy of type bicycle and book of type animal story Print the toy types where every known manufacturer makes at least one toy of that type Print the names of manufacturers who make both toy of type truck and book of type bedtime story Print the names of purple toys made by Acme Toy Company where the store has at least of them in stock Print the phone numbers of the manufacturers who make the most expensive book known to the store Answer last updated Thu Oct EDT Files Consider relation with attributes some of variable size Suggest record structure for tuples of Suggest page structure for pages of Instead of storing an entire tuple as record horizontal partitioning of relation another alternative is store each column value for all tuples contiguously vertical partitioning Why is vertical partitioning usually bad idea The records on page usually belong to the same relation Why is it bad idea to store records of multiple relations on the same page Find one counter example to each of the last two questions one query for which vertical partitioning is good and one for which it is good to store multiple relations records on the same page Answer Indexes Consider index Write pseudo code for the insertion algorithm for leaf page involving splitting in case of overflow Change the to consider redistribution with neighbor In what cases does each approach make sense consider many vs few concurrent users desire to minimize disk usage etc Answer Memory Management Consider the LRU replacement policy for buffer pool Describe database query processing scenario for which LRU is ideally suited Describe scenario for which LRU is terrible What is the principle behind LRU and why does the principle fail for the second scenario Is there some way to improve LRU to correctly apply the principle or to work in more cases Answer Memory Management Suppose there is enough main memory say GB in the system to hold relation MB and relation MB Now you want to join and using nested loops join Is there difference now between nested loops join and nested loops join How about blocked nested loops join Of all the algorithms we learnt what would you recommend as the best one to use Find where your answer to the previous question is invalid Answer Join Algorithms Consider the problem of joining tuple relation with tuple relation In both relations tuples fit on page The page size is bytes and the join predicate specifies an equality join between attributes and Explain how the GRACE hash join algorithm works What will the total cost be to perform GRACE hash join of and assuming that there is just enough memory available Discuss the memory needs of GRACE hash join What is the scenario and when might this occur Can the GRACE hash join be used to compute join Explain why or why not Answer Query Processing You are asked to write projection operation for new relational DBMS Your boss is an expert on join algorithms and you want to impress by adapting join techniques to this problem How can sorting be used for projection How would you make efficient use of for this task How can hashing be used and how would you make efficient use of for this task Now can you get yourself promotion by showing your boss that the same code can be used for processing aggregates GROUPBY as well Answer Query Optimization The optimizer Selinger paper describes one particular query optimization algorithm for SQL queries Where is the assumption about uniform distribution of column values used How would you change it if histograms were maintained about the column frequency distributions What is the notion of interesting orders If supported GRACE hash join is there an analogous notion How would you change the cost formulas for access paths to take into account the difference between sequential and random What equivalence transformations of the relational algebra make join optimization large search problem Show an example where the optimizer would not even consider the optimal query plan Answer Query Optimization There are several heuristics which are also used in query optimization Demonstrate selection pushdown and case where it doesnt work Demonstrate projection pushdwon and case where it doesnt work Consider query with expensive selections and projections in addition to joins Can you suggest an extension to the optimizer join enumeration strategy that will also consider the appropriate placement of expensive selections and projections Answer	other	cornell
1009	 Server Date Tuesday GMT Friday GMT sash groovy artwork sash groovy artwork the first section of artwork is from set of tarot cards not yet completed also have another piece of horde of faces you got to look closely at this one and from every you find new face every time you look at this one guaranteed lastly got photograph of his he used some sort of manipulation to combine two different negatives into one great image expect more in the days to come plus links to full links to full images are here the tarot cards Three of Swords Four of Circles The Emperor The Empress The Hanged Man The Wheel other artwork Faces photography The Sun send mail to sash go back november	other	cornell
1010	 Date Sun Nov GMT Server Research Page RESEARCH HOME PAGE My current research is involved with the modeling and simulation of multiphase flows More specifically am working on developing spectral models for interaction when the particles are larger than the smallest flow scales and much denser than the fluid These conditions allow separation of and which makes it feasible to perform meaningful simulations of flow around single particles in the presence of initially isotropic turbulence These simulations then provide data for the model coefficients In order to efficiently perform these simulations it was necessary to devise an immersed boundary technique which did not impose constraints on the code My PhD Research Immersed Boundary Technique Interaction Model Direct Numerical Simulations Other Research Related Links Cornell Theory Center Where the simulations are performed List of Papers Abstracts and Postscript files Masters Thesis Research Heat transfer in flows Home Resume Group Research Cornell CFD Misc	other	cornell
1011	 Server Date Monday GMT Thursday GMT AntiAliasing videos and images using stochastic sampling Next Introduction AntiAliasing videos and images using stochastic sampling Arun Verma Introduction Problem description Literature review Design of the module Problem Setting Choice of Methods Images and Animations used Description of the Algorithm Math involved Platform Requirements Results Installation Conclusions References About this document	other	cornell
1012	 Server Date Sunday GMT Friday GMT Parallel MPEG Encoding Parallel MPEG Encoding by MULVA Jeffrey Moore jmm cs William Lee wwlee cs Scott Dawson spdawson cs And just what is this madness In the beginning in lab deep in the heart of Upson Hall there were video tapes of classroom lectures These tapes were on the shelf collecting dust bunnies What were we to do about this Well Brian Smith decided that he wanted his lectures put online for his students to view and thus began using RIVL to compress his videos He soon realized that compressing every lecture would take an inordinate amount of time He calculated that if we could use every machine in the computer science department it would not take nearly as long to perform this task We decided it would be fun to help Brian out with his problem so we came up with an abstract to solve his problem We all agreed that it was good place to start After some time and lot of labor we came up with some code and paper based on our work which more closely resembles collection of notes than coherent piece of work So we kept working We have now arrived at another version of our code This version works much better than before it is better stronger and faster And to this end we have written yet another technical paper to describe exactly what we did and why we did it and what do we learn from this Lots We now know the intimate details of how TCL DP and RIVL work and why performance suffers when certain things are done Mastering the black art of TCL programming actually took the smallest amount of time in comparison to the rest of code Squeezing the most performance out of environment given distributed architecture turned out to be the most time consuming and difficult part of the project RPC facilities built into DP allowed us to easily perform necessary communication between machines to distribute work requests The combination of the above scripting environments helped us to acheive our goals of delivering reliable portable high performance MPEG encoding and how does it tie in with Multimedia Systems Very well The ability to rapidly compress video using all available machines makes many new types of video processing possible It allows animators and movie editors to view their videos more often thus shortening development time Because our version of parallel MPEG encoding is an integral part of RIVL it is extremely easy to use and how do we measure success If we are able to compress large video without becoming old and gray we will have succeeded and finally how are we progressing We are finished with the coding state of the project Currently we are working writing technical report for the project Hopefully we can pull the main ideas together better than we did earlier Some of things that could be done to make this project better are Make the worker process into daemon process Add in support for IP MULVA Name of Jerry Seinfeld girlfriend which rhymes with part of the female anatomy Courtesy of the Junior Mint episode of Seinfeld	other	cornell
1013	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
1014	 Server Date Monday GMT Tuesday GMT Course Header Course Information Lecture Upson Section Monday and Wednesday Section Monday and Wednesday Lab Upson Section Tuesday and Thursday Section Tuesday and Thursday Instructor Jonathan Barber Office Upson Phone Email barber WWW http Hours Mon in Upson Wed in Upson the MacLab or by appt Teaching Assistants Dave Koster Office Upson Phone Email dkoster WWW http Hours Thurs Olga Veksler Office Upson Phone Email olga WWW http Hours PRESEP Consultant Max Feingold RPCC Computerer Lab on North Campus Hours Mon Wed Course Consultants Hour Sunday Monday Tuesday Wednesday SoochonCarpenter Lab JaneenCarpenter Lab KarenCarpenter Lab JaneenCarpenter Lab SoochonCarpenter Lab KarenCarpenter Lab KarenCarpenter Lab KarenCarpenter Lab FelixCarpenter Lab GrainneCarpenter Lab FelixCarpenter Lab GrainneCarpenter Lab FelixCarpenter Lab GrainneCarpenter Lab FelixCarpenter Lab GrainneCarpenter Lab NONE KatieUpson Lab JaneenUpson Lab Lab NONE KatieUpson Lab JaneenUpson Lab Lab NONE KatieUpson Lab SoochonUpson Lab Lab NONE KatieUpson Lab SoochonUpson Lab Lab For more information contact Dave Koster Back to Index	other	cornell
1015	 Server Date Sunday GMT Tuesday GMT Gaudi Software Home Page Welcome to Gaudi Software About Gaudi Software Vehicle Simulation	other	cornell
1016	 Server Date Sunday GMT Saturday GMT Aastha Bhardwaj Aastha Bhardwaj bhardwaj Resume in Postscript Format Address Education Coursework Projects Computer Skills Academic Achievements Extra Curricular Achievements Address Department Address Upson Hall Floor Department of Computer Science Cornell University Ithaca Residence Address Hasbrouck Apartments Ithaca NY Tel Home Education Cornell University College of Engineering Ithaca NY Master of Engineering in Computer Science May Maharashtra Institute of Technology Pune India Bachelor of Engineering in Computer Engineering with distinction July Home Coursework Programming Engineering Engineering Computer Networks Advanced Database Management Systems Multimedia Systems Advanced Computer Architecture Operating Systems Computer Organization Data Structures Compiler Construction Microprocessor Systems Unix Operating System Computer Graphics Theory of computer Science Analog Circuit Design Home Projects Current Hetergeneous Database System using OLEDB The recently released OLEDB system is being used to implement database that can access and manipulate data from hetergeneous sources Multimedia Video Texture Mapping video image will be mapped onto texture so that we can model humans and place them in virtual reality environment Networks Browser interface Ithaca wide electronic commerce network is being implemented in this course will be concentrating on providing COM wrappers to all interfaces using Java JavaScript and LiveConnect Software Engineering Game in Previous graphics DLL for performing complex Image Processing functions Conversion among different image formats and image manipulation Done at Fujitsu ICIM India in Windows SDK Computer Network serial communication using Two data link layer protocols were implemented to provide error free transfer of files over the network Spring Assembler for Spring Assembler for implemented in Video Game in The game was implemented providing good user interface Involved simulation of movement of ball and other facilities like scoring Spring Library Management in ORACLE forms using SQL Fall Library Management in COBOL Fall Airline Reservation in Spring Inventory Control in UNIX shell script Spring Presented seminar on Windows at Maharashtra Institute of Technology Pune India in Spring Home Computer Skills Languages COBOL Pascal Fortran Assembly Platforms Unix RDBMS Foxpro Oracle Other HTML MS Ofiice Lotus Home Academic Achievements Stood second in class in class of hundred over the last four years Received Distinction in three years Home Extra Curricular Achievements Was the topmost female TableTennis player of the Computer Department in spring Was part of the winning teams for Fashion Show and Choreography at festivals Was member of the school Table Tennis team in Spring Home Reading Singing and listening to music Swimming Home	other	cornell
1017	 Date Sun Nov GMT Server CUinfo This section of CUinfo can provide you with information on the Ithaca area including the time and the weather dining and entertainment and travel schedules Announcements concerning life in Ithaca and the surrounding communities are posted at the bottom of this page If you can not find what you looking for on the Ithaca page you might wish to ask the Cornell Information and Referral Center for some help If you have questions specifically about Ithaca and the surrounding area you could also try the Ithaca Convention and Visitors Bureau Life in the Ithaca Area information about the Ithaca community Date and Time in Ithaca IthacaNet the electronic community information system Ithaca Gateways information for students faculty and Ithaca residents Ithaca Marketplace from Spinners General Maps of the Ithaca Area Ithaca College Elected representatives of the Ithaca Area from IthacaNet Local Government from IthacaNet Tompkins County Government Tompkins County Chamber of Commerce Ithaca Farmers Market Ithaca Apartments Housing Solutions rental housing information and referral Search the Real Estate listings The Marketplace Cable Channel Articles concerning family issues Day Care and Child Development Council of Tompkins County Ithaca Area Recycling Information Religious Schedules Dining and Entertainment information on where to eat and what to do Restaurants in the local area Movie schedules Musical events Theater and opera performances Dance events What on radio and television Community School of Music and Arts New York ski conditions from AMI News Bowling in Ithaca Golf in Ithaca Happenings an online events calendar for Ithaca NY Ithaca Lakers schedules and information from IthacaNet Traveling In and Around Ithaca schedules of transportation and listings of accommodations Airline schedules to and from Ithaca Syracuse shuttle bus Ithaca Airline Limousine AMTRAK train schedules Bus schedules to from and around Ithaca Temporary bus stop added on East Avenue Directions to and from Cornell University Hotel motel and bed breakfast accommodations Searchable map server at Yahoo Ithaca Announcements Blood drives and clinics Ithaca Internet Classifieds tm real estate services guide items for sale jobs restaurants lodging publication of The WORDPRO Octopus Daily Update service of Public Communications Public Service Center Please write to us with your comments and suggestions	other	cornell
1018	 Server Date Monday GMT Thursday GMT CUCS Academic Information Academic Information Home Page General Information Other Servers Degree Programs PhD Program MEng Program Undergraduate Program Research Research Projects Research Colleagues Technical Reports Course Information Course Home Pages Course of Study Course Descriptions CS Department Home Page	other	cornell
1019	 Server Date Sunday GMT Tuesday GMT Scott Dawson Home Base Spring Courses COMS Practical Distributed Systems COMS Practicum in Distributed Systems COMS High Performance Architectures COMS Master of Engineering Research Fall Courses TGIF COMS Multimedia Systems COMS Artificial Intelligence COMS Software Engineering COMS Master of Engineering Project	other	cornell
1020	 Server Date Sunday GMT Thursday GMT Adam Florence Adam Florence Academics Graduate am student in computer science at Cornell University My professional interests include simulation and numerical analysis Undergraduate received my in electrical engineering from Virginia Tech in Blacksburg Virginia in May High School attended the Thomas Jefferson High School for Science and Technology in Alexandria Virginia This magnet school pulls students from three counties and allows them to pursue challenging curriculum focusing on science and technology Back to my home page Last updated Sept me with comments or corrections	other	cornell
1021	 Date Mon Dec GMT Server Fri Dec GMT CS Project Report Visualization of Diffusely Distributed Pollutants Using Landscape Models Table of Contents Introduction Data Transformation Visualization Procedures Results Conclusion Figures and Acknowledge References Introduction Geographic Information System GIS is powerful tool used in many fields especially in the environmental monitoring and analysis However most of GIS software packages are focus on the analysis so they often have limited presentation ability The combination of GIS and scientific visualization enables the researchers in the field of GIS to present the processes and results of their work to the audience in manner of more realistic sense This project visualized the processes and results of GIS analysis for simulating the distribution of nitric pollutants in watershed in accordance with the geographic topological and environmental conditions The analysis was done by team coordinated by Stephen DeGloria of the Center for the Environment at Cornell using various GIS software packages and independently developed programs The goal of this project is to generat flexible prototype of visualization modules for typical GIS work using IBM Data Explorer Data Transformation Like most visualization work the first task of this project is to acquire all necessary data The data used in the analysis include the digital elevation models DEM hydrology models runoff water content soil data landuse types etc The hydrology data were collected in two year series The results of the analysis consist of the distribution of three nitrogen compounds for the study time series Each nitric pollutant are simulated in four different layers at the same region of study area Since the data came from different sources and the simulation was done by the analysis team using different packages and programs the data formats are diverse In addition considering the huge data volume and the limitation of data storage in most machines the data are stored in Cornell Theory Center UniTree mass storage set and then retrived via AFS whenever needed After the data were fetched they were converted into consistent format using several UNIX shell scripts and programs One of the purposes of the data conversion is to speed up the data extraction from the master hydrology or nitrogen data otherwise it will be time consuming to deal with different formats of different data sets Visualization Procedures Some of the shell scripts and programs used in data conversion were extended to generate the DX input file for various data set for example for importing the DEM into the DX These scripts and programs are in flexible form so the DX can retrive various data at different time period without changing anything except the right parameters to call the programs and scripts properly After importing the data DX needs to conduct coordinate transformation because DX has coordinate system and most of GIS data are in coordinat systems some of them are even in their own particular coordinate systems In addition since the data came from different sources they may be collected at different time and in different cell resolutions If two or more data sets are involved in one application the data have to be interpolated manually adjusted to correct the coordinate displacements Assume the data are all in correctly correspondent positions the next step is to construct the prototype of and display Several color tables have been generated and in the format of DX compatible these LUT are for soil and landuse displays Hydrology and nitrogen data are colored by the colormap module of DX However because most of the distributions of the nitrigen and hydrology data are not linear special Log scale scheme was adopted to log transform the data interactively The log algorithm is described below By adopting this algorithm the values of data will be scaled to values between if NewMin is specified as to Unfortunately the results of this log algorithm varies with user sepecified NewMin and NewMax therefore different data sets need different parameters to accomplish reasonable redistribution of the data values The last part of the visualization procedures is to provide adjustible animation options for different scenarios In this project both and animations are provided In order to provide ultimate flexibility parameters are built in the control panels for users to specify the values interactively These parameters include file data selectors data layer selectors coordinate correction parameters log algorithm parameters display options viewing control etc Results In addition to the shell scripts and programs in code mentioned above several DX nets have been accomplished for this project They provide visualization and animation functions for different demands These DX nets are also equiped with user interfaces for inputing and interactively adjusting the data and displays as well as generating images and animations according to different scenarios The final results are actually dependent on the scenarios If desired the visualization outputs of DX can also be redirected into other packages and instruments for for example generating broadcast quality video tape have include several images and animations generated from the DX nets in the Conclusion Scientific visualization techniques strengthen the presentation power of GIS By providing the thorough viewing options in space it extends the GIS into another world Moreover the interactive adjusting and time display changes for examining the data also improve the accuracy of GIS analysis The DX nets generated in this project provide the analysis team an alternative to review their work in different perspectives and to present the processes and results in more effective and understandable way Since those DX nets were built to provide prototype for visualizing the GIS work they can be used to generate various displays and animations in accordance with different purposes They can also be easily modified for similar GIS analysis projects to adopt The tentative future work of this project might be to incorporate the visualization algorithms with the internet utilities for example build up the VRML applications in the Web pages Pictures and perspective view of colored DEM Last updated on The watershed area Last updated on The soil map Last updated on Landuse map for test Last updated on Isosurface generate from volumetric nitrogen data Last updated on slice of the volume Last updated on An animation of the runoff data to for test updated on An animation of the watercontent changes to for test updated on Isosurfaces of the mean values of sequence of updated on animation of volume from its mean to updated on and similar example for the volume Last updated on Acknowledge This project is conducted in the class of Topics in Computer Graphics instructed by Bruce Land Thanks Land instruction during the semester also want to thank Chris Pelkie at the Visualization Group of Cornell Theory Center for providing me helpful information about the IBM Data Explorer Also thank Stephen DeGloria for coordinating the GIS work and visualization work for the project and thank Wenling Kuo and Dennis Swaney for providing me the original data References Asporth Hakansson Revay GIS Application for Visualization of Streams in Computers environment and urban system Mar Graf Suter Nuesch Perspective terrain fusion of remote sensing GIS and computer graphics in Computers Graphics Wood and Fisher Assesing Interpolation Accuracy in Elavation Models in IEEE computer graphics and applications Mar Denzer Graphics for Environmental Decision Making in IEEE computer graphics and applications Mar Theresa Rhyne et Visualizing Environmental Data at the EPA in IEEE computer graphics and applications Mar IBM Data Explorer document Your comments are welcome Please me your opinions Tsai	other	cornell
1022	 Server Date Sunday GMT Sunday GMT Movies Movies If you movie lover like me you want to check out the Internet Movie Database More information than you can swallow Some excellent movies that you might not have seen but should The Fisher King House Of Games Things Change both David Mamet Anything by Joel Ethan Coen The Fabulous Baker Boys Annie Hall Real Genius Street Fearless Monty Python Life of Brian Want to see movie in Ithaca Here are the movie listings and schedules for the five local theatres Most theatres per capita than any other American city so they say Warning Listings often hopelessly out of date Here guide to film and video resources on the Internet	other	cornell
1023	 Server Date Sunday GMT Sunday GMT Monika Rauch Henzinger Publications List of Publications Monika Rauch Henzinger Data Structures Monika Rauch Fully Dynamic Biconnectivity in Graphs In Algorithmica preliminary version appeared in the Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS pp Abstract Ftp postscript John Hershberger Monika Rauch and Subhash Suri Fully Dynamic in Planar Graphs Theoretical Computer Science Special Issue on Dynamic and Algorithms Abstract Ftp postscript Pino Italiano Han La Poutre and Monika Rauch Fully Dynamic Planarity Testing in Embedded Graphs Proceedings of the First Annual European Symposium on Algorithms ESA pp Abstract Ftp postscript Monika Rauch Improved Data Structures for Fully Dynamic Biconnectivity Proceedings of the Annual ACM Symposium on Theory of Computing STOC pp Abstract Ftp postscript Monika Rauch Henzinger Fully Dynamic in Graphs Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS pp Abstract Ftp postscript For applications of in compilers see Richard Johnson David Pearson and Keshav Pingali Finding Regions Fast Single Entry Single Exit and Control Regions in Linear Time Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation pp Robert Tarjan and Jacobo Valdes Prime subprogram parsing of program Conference Record of the seventh Annual ACM Symposium on Principles of Programming Languages POPL pp David Alberts and Monika Rauch Henzinger Average Case Analysis of Dynamic Graph Algorithms Proceedings of the Sixth Annual Symposium on Discrete Algorithms SODA pp Abstract Ftp postscript Monika Rauch Henzinger Approximating Minimum Cuts under Insertions Proceedings of the International Colloquium on Automata Languages and Programming ICALP Lecture Notes in Computer Science pp Abstract Ftp postscript Monika Rauch Henzinger and Valerie King Randomized Dynamic Graph Algorithms with Polylogarithmic Time per Operation Proceedings of the Annual ACM Symposium on Theory of Computing STOC pp Invited to special issue of Journal of Computer and System Sciences on selected papers of STOC Abstract Ftp postscript Implementation by David Alberts Source Code David Alberts Giuseppe Cattaneo and Giuseppe Italiano An Empirical Study of Dynamic Graph Algorithms Proceedings of the Seventh Annual Symposium on Discrete Algorithms SODA Monika Rauch Henzinger and Han La Poutre Certificates and Fast Algorithms for Biconnectivity in Graphs Proceedings of the Third Annual European Symposium on Algorithms ESA pp Abstract Ftp postscript Monika Rauch Henzinger and Valerie King Fully Dynamic Biconnectivity and Transitive Closure Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS pp Abstract Ftp postscript Randomized Algorithms Monika Rauch Henzinger and Mikkel Thorup Improved Sampling with Applications to Dynamic Graph Algorithms Proceedings of the International Colloquium on Automata Languages and Programming ICALP Lecture Notes in Computer Science pp Abstract Ftp postscript Graph Algorithms Brandon Dixon Monika Rauch and Robert Tarjan Verification and Sensitivity Analysis of Minimum Spanning Trees in Linear Time SIAM Journal on Computing Abstract Ftp postscript Philip Klein Satish Rao Monika Rauch Sairam Subramanian Faster Algorithms for Planar Graphs Proceedings of the Annual ACM Symposium on Theory of Computing STOC pp Invited to special issue of Journal of Computer and System Sciences on selected papers of STOC Abstract Ftp postscript Monika Henzinger Thomas Henzinger and Peter Kopke Computing Simulations in Finite and Infinite Graphs Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS pp Abstract Ftp postscript Monika Rauch Henzinger Valerie King and Tandy Warnow Constructing Tree from Homeomorphic Subtrees Proceedings of the Annual Symposium on Discrete Algorithms SODA pp Abstract Ftp postscript Monika Rauch Henzinger and Jan Arne Telle Faster Algorithms for the Nonemptiness of Streett Automata and for Communication Protocol Pruning Proceedings of the Scandinavian Workshop on Algorithm Theory Ftp postscript Monika Henzinger Satish Rao and Hal Gabow Computing Vertex Connectivity New Bounds from Old Techniques Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS Ftp postscript Graph Theory Monika Rauch Henzinger and David Williamson On the Number of Small Cuts in Graph Information Processing Letters pp Ftp postscript Lower Bounds Kurt Mehlhorn Stefan Naher and Monika Rauch The Complexity of Game related to the Dictionary Problem SIAM Journal on Computing preliminary version appeared in the Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS pp Abstract Ftp gif Michael Fredman and Monika Rauch Henzinger Lower Bounds for Fully Dynamic Connectivity Problems in Graphs Abstract Algorithmica to appear Ftp postscript Last updated on September mhr	other	cornell
1024	 Server Date Sunday GMT Monday GMT Abstract for Paul Jackson PhD Thesis Thesis Abstract ENHANCING THE NUPRL PROOF DEVELOPMENT SYSTEM AND APPLYING IT TO COMPUTATIONAL ABSTRACT ALGEBRA Paul Bernard Jackson Cornell University This thesis describes substantial enhancements that were made to the software tools in the Nuprl system that are used to interactively guide the production of formal proofs Over lines of code were written for these tools Also corpus of formal mathematics was created that consists of roughly definitions and theorems Much of this material is of foundational nature and supports all current work in Nuprl This thesis concentrates on describing the half of this corpus that is concerned with abstract algebra and that covers topics central to the mathematics of the computations carried out by computer algebra systems The new proof tools include those that solve linear arithmetic problems those that apply the properties of order relations those that carry out inductive proof to support recursive definitions and those that do sophisticated rewriting The rewrite tools allow rewriting with relations of differing strengths and take care of selecting and applying appropriate congruence lemmas automatically The rewrite relations can be order relations as well as equivalence relations If they are order relations appropriate monotonicity lemmas are selected These proof tools were heavily used throughout the work on computational algebra Many examples are given that illustrate their operation and demonstrate their effectiveness The foundation for algebra introduced classes of monoids groups rings and modules and included theories of order relations and permutations Work on finite sets and multisets illustrates how quotienting operation hides details of datatypes when reasoning about functional programs Theories of summation operators were developed that drew indices from integer ranges lists and multisets and that summed over all the classes mentioned above Elementary factorization theory was developed that characterized when cancellation monoids are factorial An abstract data type for the operations of multivariate polynomial arithmetic was defined and the correctness of an implementation of these operations was verified The implementation is similar to those found in current computer algebra systems This work was all done in Nuprl constructive type theory The thesis discusses the appropriateness of this foundation and the extent to which the work relied on it Last Modified Jan Paul Jackson jackson	other	cornell
1025	 Server Date Monday GMT Saturday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
1026	 Server Date Monday GMT Thursday GMT Groups Groups Group Eric Brandwine George Hoffman Kyle Rose Group Donna Viggiano Nikola Valerjev Chris Zaccarelli Group Gregg Baeckler Aaron Stump Gerry Toll Group Nisheet Ranjan Jay Krell Gang Gong Moy Group Justin Voskuhl Wu Mishaal Almashan Group Ali Muhtaroglu Maxim Turkenich Group Laurent Kirsch Julian Group Min Huang Joseluis Fernandez Marcelo Blinder Group Xun Wilson Huang Avinash Gupta Kartik Kapadia Group Seena Cherangara Janeen Reich Sukhpal Sanghera Group Indira Vidyaprakash Prashant Inamti Shilpa Agarwal Group Walker White David Stephenson Javier Pena Group Francis Garcia Oumung Mehrotra Richard Vuduc Group Janwun Lee Lai Kao Group Hsin Liu Chen Lin Group Arshad Tayyeb Todd Wheeler William Pugh Group Amit Ahuja Mikio Sakurai Nobuhiko Mukai Group Bill Lewis Adam Mayer Chris Vaill Group Wong Ivan Tam Lee Group Gleb Morein Alex Zhukovsky Ilya German Group Jing Li Markus Moberg Vivek Kolla	other	cornell
1027	 Server Date Sunday GMT Thursday GMT Contact Improvisation Contact Improvisation What is Contact Improvisation never seen definition of Contact that really liked For some people it new folk dance For others it process for finding new choreographic ideas Some people perform it others do it as practise or discipline Some people look at it and see gymnastics or wrestling or swing dance What are the mere facts about it It usually done as duet but sometimes solo or in larger groups it usually in silence and it improvised Dancers are as likely to be on the floor as standing and sometimes flying on someone else shoulders Now have couple of photographs but could still use some more and someday video The single best place to find out more short of just doing it is in the pages of Contact Quarterly magazine that covers contact and the extended family of new dance What this page for My intention is to use it as referral service for jams workshops classes and events do see need for an online magazine or journal for Contact since we already well served by the Quarterly On the other hand like to have couple of photographs and maybe even video clip In couple of years when there more bandwidth available on the net we can try setting up live connections between jams This page is maintained by Jim Davis email to jdavis really appreciate getting mail already in HTML especially if your information is lengthy Disclaimer All information appearing on this page was supplied to me by correspondents too numerous to name which is to say have no way to be certain whether it true or up to date In some cases edited or reformatted the information for clarity have no official relation to any of the individuals or organizations listed here In particular have no relation to Contact Quarterly so if you want information about them you have to ask yourself Table of Contents events and workshops listed chronologically Contact Jams ongoing and classes Places or companies offering Contact or related classes or events People who can refer you to the local contact scene You might also want to check the places listings Notices announcements advertisements help wanted Photographs Some photos of contact Other links to other dance information Workshops and Events in chronological order Nov Dec NYC Crash Course workshop in extreme contact improvisation with Karl Frost An advanced skills and thrills laboratory working on the more dynamic aspects of contact stressing the use of release for speed and movement through space Friday November Sunday December to at Bill Young studio Grand St in Manhattan Cost is sliding scale with no one turned away for lack of funds Call Yoko for registration and more information Dec Contact Improvisation Taught By Julie Oak Workshops pm Held at Pacific Cultural Center Performance Hall Seabright at Broadway in Santa Cruz California Call Julie Oak for more information May California Contact Improvisation Jam At Harbin Hot Springs Contact Improvisation Jam At Harbin Hot Springs in Middletown California Open dancing mineral hot springs catered natural foods cuisine group accommodations or camping located in quiet wooded area Contact Julie Oak June June CI at Oberlin College Anniv of Contact Improvisation Celebration produced by Contact Collaborations coordinated by NSS at Oberlin College Oberlin Ohio first two weeks in June Will include Contact Training Intensive Contact weekend and Jubilee week of jamming classes performances CI video and literature library etc For more information contact Barbara Kauff Amherst Pelham MA tel Contact Jams Alphabetically by country then by name of city Australia Melbourne Victoria Every Tuesday evening Movement Studio School of Drama Victorian College of the Arts Free Info Dave Corbet Also Classes Every Saturday Danceworks Wesleyan Church Hall Cardigan Place Albert Park Austria Vienna jam every Friday night to It at place called Wuk call for info Innsbruck has weekly jam organized by Anja Bader Call Canada Montreal Sunday to Studio Street Montreal Info Joel Muzard Email jmuzard Toronto Candada every Sunday Adelaide Street West Email pitch Vancouver Canada Sundays pm Western Front Lodge East Eighth Avenue Vancouver Home of EDAM Cost Info Jacques the Netherlands Amsterdam first Sunday of the month at Kazerne van Ostadestraat Information Email boeft Natanja den Boeft United States of America Albuquerque NM Sundays Second Albuquerque NM Call ahead write Benjamin Yang at Berkeley CA Jam Every Saturday Street Studio St near Dwight Fluid Contact taught Saturdays to preceeding the jam from Oct through Nov by Terese Gjernes and Brenton Cheng Boston MA see Cambridge MA Burlington Vermont Wednesday nights Memorial Auditorium Loft Info Mikey Kinsman Cambridge MA Every Tuesday Old Cambridge Baptist Church Massachusetts Ave Harvard Square CambridgeMA Information Doug Pouliot Rick Roberts or Chandelle Hesselgrave rroberts Movement Improvisation Jams with live improvised music Facilitated by Olivier Besson First monday each month The Dance Complex Massachusetts Ave Central Square Cambridge MA Info Cleveland OH Every two weeks For info call Larry Muha at Recent location was Case Western Reserve University Mather Dance Center behind The Church of the Covenant address Bellflower Rd Cleveland OH but call to check Cleveland OH Class Colleen Clark and Johana Walker Wednesday evenings in June and July Call area code think Atlanta every two weeks in Atlanta at Several Dancer Core in Decatur Next series begins Ususally potluck dinner and slow blues jam follows Call Sid Hetzler at email SidHetzler or call Heitzso at Ithaca NY Sunday afternoons Tom Rockwell at Los Angeles CA Sunday afternoon Dance Home in Santa Monica The people to call would be Mary Herzog or Kirk Andrews Miami FL Saturday mornings Jams in Miami FL every Saturday morning from at Dance Center SW Avenue Miami FL Cost Info Adalgisa Barison Dal Phone morabari New York City Sunday afternoons Two locations Eden Expressway Broadway fl between Spring and Prince Oct Nov Dec Jan Feb Mar Apr May Hundred Grand Grand St fl at Mercer Oct Nov Dec Jan Feb March Apr May Cost is If people need information they can contact Greg at or by greg or Ione at or Bill Pittsburgh every first and third and fifth when it happens Sunday of the month at the Dance Alloy studio Carnegie Museum Forbes av Info call Massimo Paolucci Richmond VA Thursday evenings The Roundhouse in Byrd Park Call Mugsy Lunsford for more info or email mugsy Rochester NY Valerie Talbot San Francisco CA Tuesday nights pm at Community Space Divisadero at McAllister Friday nights at DanceGround Keriac Divisadero at Bush Jam sometimes includes informal performance Confirm before attending Santa Cruz CA Sunday nights to PM at the Santa Cruz Dance Gallery on Front Info Germaine Weaver Santa Fe New Mexico Wednesday evenings to when it over Railyard Performance Center Manhattan at Guadalupe Call Norman Johnson at for information Send email to nlj Seattle WA every Tuesday night Dance Centre Seattle East at Roy in the Capitol Hill neighborhood Bus or from downtown Cost to sliding ongoing Contact Improv classes before the jam every week at Info call Sheri Cohen at Washington DC Sundays At dance space in American University Butler Lecture Hall The place has been shifting due to unexpected graduate student activity in AU dance program We frequently have level classes starting at continuing to or and jam until Considering the space uncertainties it good idea to call me or one of the other regular DC jammers to confirm before showing up Ken Manheimer Email klm Work Home Ivystone Ct Reston VA Germany Berlin there weekly jam at Tanzfabrik Sunday or Saturday afternoon call for info Frieburg jam Thursday nights at place called which is within walking distance of the train station Folks tend to go out for beer afterwards at the cafe downstairs call Stefanie Decker for info New Zealand Auckland Wednesday nights organized by Cath Chappell at school called Unitec There are also irregular jams and classes organized by Olive Bieringa Places and companies Alphabetical by name DanceGround Keriac San Francisco CA DanceGround Keriac the studio for New Divisadero San Francisco Ca Earthdance Plainfield MA USA Offers weekend workshops and jams Recent instructors include Andrew Harwood Andy Gaines Bill McCully KJ Holmes Susan Schell Ruth Zaporah Earthdance Prospect St Plainfield MA Lower Left Dance San Diego California dance collective with Nina Martin Mary Reich Jane Blount and Karen Schaffman in San Diego Front Street San Diego CA We offer workshops and classes in Contact Improvisation Feldenkrais tm Authentic Movement Bartinieff Fundamentals etc This fall we will be making our home at Sushi Performance and Visual Arts Email Moving on Center Berkeley CA USA School for participatory arts and research in contact improvistion Centering tm voice Alexander technique etc Offering courses workshops and certification programs Virginia Street Berkeley CA Montreal Dance Exchange Chabot St Montreal Canada Smith Grade Construction Santa Cruz California Smith Grade Construction is Contact Improvisation Ensemble Directed by Nita Little Members are Lanny Cuthbertson Per Haaland Katja Irvin Nita Little and Rosy Simas Nita Little teaches Ongoing Contact Improvisation Classes at the Dance Gallery Wednesdays pm For more information about the ensemble classes or performances contact Email nlittlen or Rosy Simas Email rosy State of Flux Melbourne Australia State of Flux is dance education and performance company exploring the synergies between Contact Improvisation Centering Skinner Release Technique and Integrated approaches to improvisation as well as mixed ability Contact Members are Llewellyn Wishar Certified BMC Practitioner Martin Hughes Contact Improvisation Teacher Wendy Smith Skinner Release Teacher and Janice Florence Skinner Release and integrated approaches to improvisation We new company running classes workshops and performances here in Melbourne and have already hosted number of international CI teachers this year Xjamal Zanthia SFO Olive Beiringa Karl Frost SFO and folks Betwen the of us we have extensive contacts in the CI community in USA and Europe and are keen to open the field wider for exchanges flow of information letting people know that they can come and dance with us we have regular jam and classes STATE OF FLUX PO Box Melbourne VIC AUSTRALIA Tel Fax Pager Studio Oslo Norway Studio Teglverksgata Oslo Norway phone Contact Sidsel Pape Email Touch Monkey and Dreamswell studio in Portland Oregon Touch Monkey is dance collective devoted to the art of dancing consisting of Caroline Stuart Patrick Gracewood Elizabeth Kerle Gretchin Spiro and out of towners Ben Yang and Karl Frost Caroline teaches regular classes at Dreamswell studio and they can be contacted about jams in Portland Call Caroline People Alphabetic by last name within state USA or country Thanks to Greg Lara for editing See also Places Canada Joel Muzard Montreal Canada Email muzardj Jon Peirce Franklyn John CANADA Work Home Note Nfld time is hours ahead of Eastern time Email jpeirce Christopher Sumpton Blueridge Avenue North Vancouver Canada Email artaud Great Britain Joseph Gale Burns Benson Rd London Tel Email jgdburns Misri University of Plymouth Faculty of Arts and Education Douglas Avenue Exmouth England Tel Fax Email Jon Lever Uplands Rd London UK Email jml New Zealand Olive Bieringa New Zealand Email bierccc United States California Joe Betts San Francisco CA Email Joe Charles Campbell PO Box Lower Lake CA work Email fdac Brenton Cheng Dolores St SF CA Email brentonc Ray Chung Bonita Ave Berkeley CA fax Email rayc Terese Gjernes San Francisco CA Email tereseg Katja Irvin San Jose CA Email katja Martin Keogh Del Monte Avenue Richmond CA home fax Email martinkeo Keriac In USA Market San Francisco CA Tel Fax In Germany Karin Azza Lerchenstr Stuttgart Tel Fax Brion Oliver Treat San Francisco CA Email ysidro Karen Schaffman University of California Riverside Email schaffmk Florida Adalgisa Barison Dal Fountainebleau Blvd Miami FL Email morabari Georgia Sid Hetzler Atlanta GA Email SidHetzler Iowa Carol Horwitz Washington Park Road Iowa City Iowa Email chorwitz Maryland Magnolia Shollenberger Baltimore MD Email ljsholl Massachusetts Carol Anthony Bond Street Suite Somerville MA AnthonyCJM Patrick Crowley Brookline Street Cambridge MA Email patricrow Doug MacKenzie Clary Road Williamsburg MA Email dougmack Rick Roberts Washington Brookline MA Email rroberts Missouri Todd Jones Louis MO Email tjones See also THE DANCE IMPROVISATION GROUP of Washington University New Mexico Benjamin Yang Albuquerque NM Email New York Dan Gottesman PO Box Rosendale NY Email dangott Greg Lara Street Brooklyn NY Email greg Pennsylvania Jennifer Keller Pittsburgh PA Wisconson Neal Jahren West LakeLawn Place Madison WI Email nrjahren Jim Lobley Email jnlobley Virginia Ken Manheimer Ivystone Ct Reston VA Work Home Email klm Notices This section is for announcements and solicitations of general and permanent nature as opposed to announcements of events or workshops with fixed start and stop date do object in principle to running advertisements here but please remember that not getting paid for this so if do have time to add your ad do get mad prefer if you send me HTML Notices are listed in the order they arrived Contact Quarterly is biannual journal of contemporary dance and improvisation Each issue includes contact newsletter covering recent events and list of people who can refer you to classes jams and workshops in your area CQ are publishes number of excellent books about new dance and related movement bodywork and so on Subscriptions to CQ are US per year for individuals in the USA and Canada Single issues are Send orders to Contact Quarterly PO Box Northampton MA Contact Improvisation videotapes historical documentaries and performance documents dating back to are available for sale or rental For catalog and info write to VIDEODA Box East Charleston Vermont USA Touchdown Dance USA is dance program bringing contact improvisation to the blind The director Anne Kilcoyne asked me to put some information about it on the Web Feb Wanted online contact photos like few good contact photos in GIF or TIFF to use on this page If you have some please send email to jdavis July Photographs Karl Frost and Olive Bieringa in parking lot Karl Frost and Olive Bieringa dancing in parking lot in Wellington NZ Photographer unknown sent by Karl via Brenton Cheng Karl Frost and Olive Bieringa in parking lot Second in the series Charley Mosey and Nuria Bowart Charley Mosey and Nuria Bowart connect at the Fall East Coast Contact Jam at Claymont Court West Virginia Jim Benson Photo Other dance information Dance index Yahoo Yahoo is catalog of WWW resources See what they got listed under the topic of Dance You might also want to do search at Alta Vista or Lycos but who am to teach you how best to surf the Web Henry Neeman Dance Hotlist list compiled by Henry Neeman especially strong in Ballroom Dance Links collection largely taken by the list compiled for by Amy Reusch by Jim White jswhite Dance references maintained by Arts Wire and Dance USA Dancing On Line an online magazine about new dance in NYC Selena Cryderman Home Page has nice picture of Steve Paxton and some links do have Debra Kinsinger Charlene Penner have some good photos of contact Aug This link works again Shattering Feet maintained by Rosy Simas in Santa Cruz Aug barefoot dance page This page maintained by Jim Davis jdavis Updated Nov	other	cornell
1028	 Server Date Sunday GMT Tuesday GMT CS Homeworks From this page you can download the homework files to the computer system that you working on To do so just click on the appropriate link to retrieve the selected files Make sure to save your work Bring floppy disk and save all of your files onto it Never leave your files on the public lab computers All information will be deleted at the end of each day Program Program Program Macintosh Source Files and Project File Program Plain ASCII Versions Program Program Program Program Last Updated on Friday September PM Any Comments or Suggestions Email them to dwu	other	cornell
1029	 Server Date Sunday GMT Tuesday GMT Examples of Transition Effects for Rivl Transition effects for Rivl Authors Jose Luis Fernandez Valerie Ohm Amith Yamasani Contents of this Page We show here mpeg examples for the different categories of effects that we are designing INDEX Effects Effects Warping Morphing Effects Curtains Effects in this categorie make the transition dividing the original image geometric shapes Interlace Squares Smear Melting Blocks Disolve Effects Effects that make smooth transition between images Grain simulated effects This effects simulate effects using techniques and tricks but they are not real projections Peeling Effects Forward Mapping The pixels in the original Image are directly projected on the screen Cylinder Zoom Reverse Mapping We scan the proyection screen to find the projection of the pixels on the shape Flip Fly Warping Morphing This is the last phase of the project we will study transitions based on the distortion of images using Warping Techniques and Fading Morphing is one of these advanced techniques Wobble Amith has written simple warping program	other	cornell
1030	 Server Date Sunday GMT Wednesday GMT Academic Integrity Academic Integrity You are expected to maintain the utmost level of academic integrity in all your academic endeavors Please read and understand the following excerpts from longer version of the Cornell University Code of Academic Integrity did know it was allowed is not valid excuse if you are in doubt ask Violations of the Cornell University Code of Academic Integrity occurring in Computer Science courses are taken very seriously We find it necessary to impress upon you now the gravity of violations of this Code The following are excerpts from longer version of the Cornell University Code of Academic Integrity The exclusion of any part does not excuse ignorance of the code Principle Absolute integrity is expected of every Cornell student in all academic undertakings must in no way misrepresent work fraudulently or unfairly advance academic status or be party to another student failure to maintain academic integrity The maintenance of an atmosphere of academic honor and the fulfillment of the provisions of this Code are the responsibilities of the students and faculty of Cornell All students and faculty members must refrain from any action that would violate this principle Definition of Academic Integrity student assumes responsibility for the content and integrity of the academic work submits such as papers examinations or reports student is guilty of violating the Code and subject to proceedings under it if knowingly represents the work of others as own uses or obtains unauthorized assistance in any academic work gives fraudulent assistance to another student fabricates data in support of laboratory or field work forges signature to certify completion or approval of course assignment in any other manner violates the principle of absolute integrity Unless otherwise specified by the individual professor the work you do in Computer Science courses is expected to be the result of your individual effort The use of computer in no way modifies the normal standards of the Code You may discuss work with other students and give or receive consulting help from other students but such permissible cooperation should never involve one student having in his or her possession copy of all or part of another student assignment regardless of whether that copy is on paper on computer disk or in computer file This implies that there is no legitimate reason to send copy of program from one computer account to another or to be logged on to another student account Discussion of general strategy or algorithms is permissible but you may not collaborate in the detailed development or actual writing of an assignment This includes providing copy or accepting copy of work that is expected to be individual effort It is your responsibility to protect your work from unauthorized access It is inadvisable to discard copies of your programs in public places This applies to both handwritten and programming assignments Penalties The penalty for any violation of this Code in Computer Science courses will be determined by the instructor according to accepted procedures It may be failure in the course Computer accounts are provided for coursework only They are not private accounts they belong to the Department of Computer Science and the use of these accounts may be monitored in various ways Accounts that are abused will be withdrawn More Information Cornell University Academic Integrity Handbook Second Edition September Office of the University Faculty The Code of Academic Integrity and Acknowledging the Work of Others August Office of the Dean of Faculty Cornell University Return to home page	other	cornell
1031	 Server Date Sunday GMT Thursday GMT Homework Assignments Semantics of Programming Languages Homeworks Homework dvi file To solve this homework you need some ML definitions found in the misnamed The ML examples from class are also available in as well as PostScript version of the homework There is now solution online as well as some tests Homework dvi file The second homework This one features proofs as well as ML hacking There is also PostScript version of the assignment writeup There is now an ML solution online as well as solutions dvi to the proofs also available in PostScript NOTE The test cases used to grade your solutions are also online Homework dvi file The third homework Proofs and ML hacking again now with types There is also PostScript version There is now solution dvi to the proofs online also available in PostScript There is also an ML solution to the programming part online Finally there is parser and evaluator based on the solution online The and parser source is available for those interested Homework dvi file The fourth homework Now it only proofs all exercises from Gunter There is also PostScript version There is now solution dvi online also available in PostScript Homework dvi file The fifth homework Implementing the polymorphic lambda calculus and lemma showing the soundness of the predicative model with respect to reduction For those who do want to type in the example code there is version of the homework There is now an ML solution online as well as the test cases used to grade your submissions There is now proof solution dvi online also available in PostScript Homework dvi file The sixth homework Implementations and proofs of unification and type inference There is also PostScript version For those who do want to type in the example code there is version of the homework The ML solution is online as well as the test cases The solution dvi to the proofs is online also in PostScript Homework dvi file The seventh homework Proofs on posets cpos continuous functions etc There is also PostScript version Assignment PostScript The eight homework Programming exercises and axiomatic semantics exercises and proofs Back to the homepage	other	cornell
1032	 Server Date Sunday GMT Monday GMT Joseph Halpern Publications Joseph Halpern Publications Books Articles in Books Papers in Journals Papers in Conference Proceedings Other Publications Patents Joe Halpern Fri Jun PDT	other	cornell
1033	 Server Date Monday GMT Friday GMT CourseStaff Structure and Interpretation of Computer Programs Computer Science Department Cornell University Spring The People in Charge Dexter Kozen Professor Upson kozen Tibor Janosi TA Upson janosi Justin Voskuhl TA CSRVL Floor Upson voskuhl Robert Szewczyk TA szewczyk James Hamblin TA Office hours in RPU Computer Lab hamblin Jake Levirne Consultant Upson levirne Andras Ferencz Consultant Upson aferencz Aric Shafran Consultant home page Last Modified by DCK	other	cornell
1034	 Server Date Sunday GMT Tuesday GMT Avinash Gupta Home Page ResumeAvinash Gupta Download PostScript copy of my Resume INDEX Personal Data Education Undergraduate Projects Graduate Courses Relevant Experience Computer Skills Activities Interests Hobbies Personal Data Date and Place of Birth September Bombay INDIA Citizenship Indian Visa Available from June Education May Cornell University Ithaca NY Master of Engineering in Computer Science May May University of Bombay Bombay INDIA Bachelor of Engineering Computers four year course Undergraduate Projects Implemented for in Pascal Implemented various image processing algorithms for image enhancement like histogram equalization Contrast enhancement Edge detection and others Designed and implemented calculation database in INGRES Graduate Courses Courses to be taken during this academic year include the following topics Multimedia Operating Systems Computer Graphics Software Engineering Distributed Systems High Performance Systems Relevant Experience Certified Netware Engineer July Aug Programmer Technograf Consultants Bombay INDIA Participated in the design of new Computer Aided Textile designing package aimed at reducing manufacturing time for textile developers The entire coding was done in and required expertise in Graphics programming and May May Programmer Analyst Digital Equipment India Bombay INDIA Analysed designed and implemented an information system for contract management The program was written in COBOL running on VAX in networked environment It has been in use now for more than year Computer Skills MS DOS UNIX Windows Netware Pascal Assembler Visual Basic Oracle Powerbuilder MS Word MS Excel HTML Java Activities Interests Active member of Microcomputer Users Club MUC in India Numerous articles ranging from product news to programming techniques have appeared in the club magazine Hobbies Guitar playing Chess Computers Back to my Home Page	other	cornell
1035	 Server Date Wednesday GMT Tuesday GMT Cornell CS Course Home Pages Spring Course Home Pages These are links to the home pages for number of CS courses In many cases there are class notes problem sets and other course information available although they may only be available to registered members of the course Introduction to Computer Programming An introduction to elementary computer programming concepts Emphasis is on techniques of problem analysis and the development of algorithms and programs The subject of the course is programming not particular programming language The principal programming language is The course does not presume previous programming experience Programming assignments are tested and run on interactive microcomputers Computers and Programming Intermediate programming in language and introduction to computer science Topics include program development proofs of program correctness program structure recursion abstract data types oriented programming data structures and analysis of algorithms is the principal programming language Structure and Interpretation of Computer Programs challenging introduction to programming languages and computer science Topics include recursive and procedures performance analysis of algorithms proofs of program correctness probabilistic algorithms symbolic hierarchical data abstract data types polymorphic functions programming infinite data types simulation and the interpretation and compilation of programs Introduction to Scientific Computation An introduction to elementary numerical analysis and scientific computation Topics include interpolation quadrature linear and nonlinear equation solving fitting and ordinary differential equations The Matlab computing environment is used Vectorization efficiency reliability and stability are stressed Special lectures on parallel computation and Fortran Introduction to Digital Systems and Computer Organization Web course material includes course info lecture notes homeworks project info and hopefully even lecture videos Topics covered in the course include representation of information languages in particular PowerPC processor organization interrupts and memory hierarchies combinatorial and sequential circuits data path and control unit design RTL and microprogramming Data Structures Lists trees graphs arrays and other forms of data structure and their implementation Relationship between language and data structure emphasizing abstract data types Dynamic storage allocation and memory management Detailed study of searching and sorting methods Analysis to determine the more efficient algorithm in given situation Computer Graphics and Visualization An introduction to the principles of interactive computer graphics and scientific visualization Topics include surface modeling animation perspective transformations and algorithms lighting models image synthesis and application to scientific data analysis Practicum in Computer Graphics Programming assignments dealing with interactive computer graphics and visualization of scientific data Introduction to Database Systems This three credit course covers the fundamentals of database systems and information retrieval The database part of the course deals with traditional structured data The relational model is the main model used in this part The information retrieval part of this course concentrates on how to manipulate textual information which is largely unstructured Introduction to Analysis of Algorithms Techniques used in the creation and analysis of algorithms Combinatorial algorithms computational complexity and intractable problems Advanced Language Implementation This class will survey modern techniques for efficient implementation of advanced programming languages such as SML Java Haskell Scheme and Practical in Distributed Systems Practical issues in designing and implementing distributed software Topics include local and network protocols replicated data dynamic reconfiguration monitoring for and reacting to failures or recoveries distributed computation synchronization and techniques for expressing parallelism at the application level Practicum in Distributed Systems If you were using Java enabled browser you would have seen some animated text scrolling by here The practical aspects of distributed systems are studied through the design and implementation of significant system Projects are available in the area of distributed agents network and resource management fundamental network protocol research hot new network protocols communication distributed virtual reality Java distribution Java applications CSCW distributed simulations distributed data management and distributed multiplayer games Computer Systems If you were using Java enabled browser you would have seen some more animated text scrolling by here This course discusses the design of processors including techniques such as superscalar superpipeled RISC processors instruction set extensions cache coherency and more The Web page contains all lecture notes problems sets and readings available electronically As the term progresses all course projects will be described there too Software Design for Architectures Sophisticated software technology is required to exploit the enormous computing power of modern high performance architectures like pipelined VLIW superscalar and parallel architectures The objective of this course is to study these architectures and master the compiler and runtime systems technology required to deliver high performance to the applications programmer We emphasize technology relevant to computational science applications such as dense and sparse matrix techniques and iterative and direct solvers using these as examples throughout the course Machine Vision An introduction to computer vision Topics include edge detection stereopsis motion and optical flow and extracting shape from images Students will implement several of the algorithms covered in the course in addition to research project Natural Language Understanding This course is an introduction to natural language understanding subfield of artificial intelligence whose primary concern is the computational study of language use The course covers all aspects of natural language processing including semantic interpretation syntactic analysis discourse processing text summarization natural language generation language acquisition knowledge acquisition memory models and statistical methods of ambiguity resolution Seminar in Natural Language Understanding Covers current topics in natural language understanding computational linguistics and relevant areas of machine learning Meets once week for hours to present and discuss recent papers in the field as well as ongoing natural language understanding research in the department Information from previous semesters Information from previous semesters may be retained for while but do be surprised if certain links do work Fall Spring Summer Fall	other	cornell
1036	 Server Date Sunday GMT Wednesday GMT handouts Handouts Handouts are in postscript format You can print them on almost any laser printer If you want to view them you need an application like Ghostview Handout Introduction Handout Introduction to Java Handout Demo Suggestsions for Course Staff Guide to CodeWarrior Guide to Debugger	other	cornell
1037	 Server Date Sunday GMT Tuesday GMT ISDN homepage Welcome to the Ithaca Swing Dance Network home page On this page find pointers to Information about the network Ithaca area dance events Workshops Many other resources The Ithaca Swing Dance Network ISDN is voluntary organization of swing dance fans who participate in and coordinate dance events in the Ithaca NY area The ISDN currently has about members and is growing all the time The network activities include sponsoring dances with live or recorded music sponsoring classes workshops and performances supporting the growth of local dance troupes publishing newsletter providing scholarships to some of the many events available for swing dance instruction creating and maintaining lending library of dance videos networking with other regional and national swing dance organizations The ISDN sponsors one dance per month with live music It also holds record hops every Wednesday night and on the first Saturday of each month Ithaca has number of excellent dance teachers in all styles and in addition the Network has attracted visits from many nationally known teachers in the past years These have included Frankie Manning of Whitey fame who will be making return visit in November West Coast champions Debbie Ramsey John Festa and Maxwell Ho Texas Whip master Mario Robau Jr mambo queen Debra Elkins Lindy Hopper Teddy Kern and Lindy Hoppers Simon Selmon and Louise Thwaite from London and Steven Mitchell from California In the winter we hosted visit by US Open Champion Robert Cordoba More information brief history of the ISDN ISDN and ISDN phone list ISDN email address list ISDN electronic mailing list Guide for DJs at ISDN dances Some snapshots from Ithaca swing dances Ithaca area dance events Dance events this week Bands and places to dance in the Ithaca area Swing dance classes being offered in Ithaca Dance teachers in Ithaca Workshops Maxwell Ho March Enio Cordoba April Steven Mitchell May Frankie Manning November Robert Cordoba December Other stuff about dancing General Dancer Archive Dance newsgroup Frequently asked questions FAQ from WWW dance page Dance Hotlist Marv Dance Directory Aria Dance Page Special Events Spring Swing Fest Swing Aswin Swing Dance Page Rochester Swing Dance Network Boston Swing Dance Network New England Swing Dance Server New York Swing Dance Society Philadelphia Swing Dance Society Washington DC Swing Dance Server Charlottesville Swing Dance Society Toronto Swing Dance Society Lindy Hop in Seattle Sacramento Dancer Information Link Dancing in Los Angeles Tease Inc country and western European Dance Server Swing dancing in the UK Lindy Hop in Sweden Finnish dance server Flyers for national swing dance events National swing dance event listings List of swing dance clubs and societies in the US Boogie Dance Productions Living Traditions Who Who in Swing Dance Pictures of some emminent swing dancers Archives of Early Lindy Hop Lists of dance music Dance tips Performers The Rhythm Hot Shots performance troupe Zoots and Spangles performance troupe The ExtravaDancers performance troupe Other forms Carolina Shag Judy Salsa Page Tango server Tango in Ithaca Cornell Ballroom Dance Club All the ills of mankind all the tragic misfortunes that fill the history books all the political blunders all the failures of the great leaders have arisen merely from lack of skill at dancing Moliere Have fun Look cool Dance to the music the ISDN various people Last modified July Robbert van Renesse rvr and Mark Newman newmme	other	cornell
1038	 Date Tue Dec GMT Server Tue Jul GMT Software for Scientific Computing Software for Scientific Computing The development of new software and the evaluation of existing software for scientific computing are important to the future of science and high performance computing Many existing groups and projects at the CTC already involve aspects of such work among these are CSERG ACRI the DX repository the Software Support Group and the Parallel Tools team The purpose of this page is to provide repository for information on other such activities and materials of interest For the moment Chris Myers and Anne Trefethen have created and contributed to this page but other people and activities are certainly welcome So please contact either Chris or Anne if you working on something that should be included here Numerical libraries class libraries and frameworks Chris and Anne are interested in the use and development of reusable software in the form of numerical libraries class libraries and code frameworks templates or archetypes Listed below are some packages of interest either publicly installed on CTC machines under development or evaluation on CTC machines or out there LPARX class library for parallel computing on distributed grids from Diego primary CTC contact Myers info at http publicly available at CTC in CRM currently using LPARX as substrate for development of parallel adaptive mesh refinement AMR software Diffpack class library for solution of PDEs serial only from Sintef Oslo primary CTC contact Myers info at http staff available in PetSc Portable Extensible Toolkit for Scientific Computing from Argonne National Labs primary CTC contact Trefethen info at http staff available in class library implementing suite of iterative methods primary CTC contact Trefethen info at http includes link to hypertext book Templates for the Solution of Linear Systems Building Blocks for Iterative Methods staff available in implementation of some of the LAPACK linear algebra routines primary CTC contact Trefethen staff available in LASSPTools graphical and numerical utilities for scientific computing primary CTC contact Myers info at http staff available in Collaborative research on the development of software environments MacCHESS software development for crystallography of macromolecules primary CTC contact Schneider ECLIPSE development of environment for computational fracture mechanics primary CTC contact Myers info at http Other information on the web Netlib http Guide to Available Mathematical Software GAMS http National HPCC Software Exchange NHSE http The Virtual Library http	other	cornell
1039	 Server Date Sunday GMT Tuesday GMT Global Pointers in using Active Messages Global Pointers in using Active Messages By Posse Software John Belizaire Julian Pelenur Mauricio Aguilar Alvarez Abstract There is growing need for parallel programming software tools that make writing parallel programs easier The goal is to provide transparent communication in message passing multiprocessor environment We have implemented software package using that meets this need In this paper we describe the design and implementation of Global Pointers over and Active Messages In addition several issues concerning implementation and solutions are discussed performance summary and few examples of the use of our system are included Quick Overview The HTML Paper The Paper Get the code in tar compressed file beli julian mauri	other	cornell
1040	 Server Date Sunday GMT Wednesday GMT Kristen Summers Document Structure Classification Document Structure Classification In Proceedings of the International Conference on Document Analysis and Recognition ICDAR pp August Abstract Automatic derivation of logical document structure from generic layout would enable multiplicity of electronic document manipulation tools of type that is becoming crucial to users who wish to browse the internet This problem can be divided into segmentation dividing the text into hierarchy of pieces and classification categorizing these pieces as particular logical structures This paper proposes an approach to the classification of logical document structures according to their distance from prototypes that are primarily geometric The prototypes consider linguistic information minimally thus relying minimally on the accuracy of OCR and decreasing Different classes of logical structures and the differences in the requisite information for classifying them are presented prototype format is proposed existing prototypes and distance measurement are described and performance results are provided You can view the full postscript file or return to my home page	other	cornell
1041	 Server Date Sunday GMT Tuesday GMT CORBA The Essentials CORBA The Essentials An Annotated Bibliography COM Final Spring Alfred Hong April Table of Contents This bibliography intends to provide an essentials reference guide to understanding CORBA from various perspectives Bibliography entries are ranked in the order in the following categories The CORBA Standards Documentation Tutorials Shortfalls and Problems Different Perspectives Comparison to Options CORBA Applications The CORBA Standards Documentation Soley Richard and Stone Christopher eds The Object Management Architecture Guide Rev John Wiley Sons and Object Management Group Framingham MA This is the definitive overview guide to the terminology objectives and the specification of CORBA It introduces the Object Management Group OMG Core Object Model the OMG Reference Model the standardization procedures the proposal procedures and specification guidelines of OMG The OMG Reference Model consists of the four layers the Object Request Broker ORB CORBAservices CORBAfacilities and Application Objects of which the first three are described in detail in their own specification texts Object Management Group The Common Object Request Broker Architecture and Specification Rev Object Management Group Framingham MA The Object Request Broker ORB is the foundation of CORBA ORBs are essentially agents that transparently service data from CORBA objects and clients through object adaptors OA via an version of an RPC mechanism The interfacing between ORBs and CORBA objects via the Interface Definition Language IDL and the Dynamic Invocation Interface DII are also specified Revision also defines interoperability and portability guidelines for ORBs from different vendors Object Management Group CORBAservices Common Object Services Specifications Object Management Group Framingham MA CORBAservices better known as COSS for Common Object Services Specification in literature is the layer directly above ORBs that provide recognized set of essential services available to CORBA objects This is growing document in that not all envisioned services have been defined yet Some of the specified ones include naming events transactions and persistence Object Management Group CORBAfacilities Common Facilities Object Management Group Framingham MA CORBAfacilities is the layer above CORBAservices that defines level services and functions for the fourth layer applications of the OMG Reference Model It includes both horizontal and vertical CORBAfacilities which are mostly introduced but have yet to be specified as of this writing This is growing document as well Table of Contents Tutorials Minton Gabriel Programming with CORBA Unix Review April This is an and tutorial on CORBA It provides background history on OMG summarizes the information in the defining specifications on CORBA first four entries of this bibliography and presents an Interface Definition Language IDL and coding example using SunSoft NEO CORBA environment Vinoski Steve Distributed Object Computing with CORBA Report This technical overview of the CORBA foundations explains how CORBA makes sense from the perspective of distributed application development with It describes the CORBA components the Object Request Broker ORB Core the Interface Definition Language IDL the Dynamic Inovation Interface DII the Interface Repository IR and the Object Adapter OA individually as well as how they work together Betz Mark Building CORBA Object Server Software Development It is straightforward for proficient programmers to develop CORBA object server using and Orbix IONA Technologies CORBA implementation The process is demonstrated in detailed manner from IDL interface specification to compilation of the example Mowbray Thomas and Zahavi The Essential CORBA Systems Integration Using Distributed Objects John Wiley Sons and Object Management Group Framingham MA This book is geared towards systems integrators who are building systems based on CORBA The book examines overall integration issues and techniques includes good tutorial on the CORBA architecture discusses security issues and implementations and introduces example ORBs available on the market so that successful CORBA systems can be implemented Table of Contents Shortfalls and Problems Maffeis Silvano Adding Group Communication and to CORBA In Proceedings of the USENIX Conference on Technologies Monterey CA June USENIX Berkeley CA pp Although CORBA is meant for distributed systems one shortfall is its lack of dealing with which could be implemented in software as groups of replicated objects that utilize reliable multicast communication Recognizing this limitation the author presents and discusses Electra the best of both worlds generic object request broker ORB that adds the reliable group multicast capabilities of systems such as Horus and Isis to CORBA implementation Schmidt Harrison and Components for Network Programming In Proceedings of the USENIX Conference on Technologies Monterey CA June USENIX Berkeley CA pp This paper presents another problem with CORBA It evaluates performance problems of communication middleware on networks mechanisms like Orbix and ORBeline which are considerably slower are compared against sockets The authors also devised middleground Adaptive Communications Environment ACE programming toolkit that improves the performance problems they have encountered Orfali Harkey and Edwards Components CORBA Meets OpenDoc Object Magazine May CORBAfacilities specifies services and functions for the Application Objects layer of the OMG Reference Model however most of these have been introduced but have yet to be specified OpenDoc which essentially provides what CORBAfacilities requires is mature and is anticipated to be merged into or adopted by the CORBAfacilities specification this has occurred as of the writing of this bibliography and has been named Distributed Document Component Facility OpenDoc enables the creation of multiple live data or live object compound documents Tisaranni John IONA Orbix Object Request Broker Object Magazine IONA Technologies Orbix is one of the most popular commercially available full implementations of CORBA The author reviews versions of Orbix that adheres to the CORBA spec but focuses on Orbix extensions that are not defined in CORBA such as object binding smart proxies binding and more some of these have become part of the CORBA spec Work with other companies to further address shortfalls of CORBA are also briefly mentioned For instance provides functionality Table of Contents Different Perspectives Comparison to Options Bernstein Philip Middleware Model for Distributed System Services Communications of the ACM February CORBA is not the only that is intended to support distributed computing various competing models exist This paper provides an educational look at how the heterogeneity and distributed nature of industry needs and requirements gave birth to middleware classifies middleware and discusses services that middleware should provide Middleware integration issues and its future are examined as well Schmidt Douglas and Vinoski Steve Modeling Distributed Object Applications Report This is second in series of columns on distributed object computing DOC It outlines an approach to DOC implementation by discussing the application environment and requirements hardware network etc and examining key functionalities to look for in competing DOC frameworks CORBA Network OLE and OODCE For example CORBA does not have security measures or multithreading capability however some of these have become part of the latest specification Brando Thom Comparing CORBA DCE Object Magazine March This is an informative guide to CORBA through comparison with DCE Because of their numerous similarities the author dispels confusion by explaining CORBA through contrasting the differences between CORBA and DCE The paper includes clear diagram showing the OMG Reference Model and depicting specified and yet to be specified CORBA components Foody Michael OLE and COM vs CORBA Unix Review April Microsoft Component Object Model COM is the defining object model for the popular Object Linking and Embedding OLE for desktop applications COM object model is quite different from CORBA which makes interoperability between the two difficult OMG has completed the interoperability specification however distributed COM contained in Network OLE see next entry is still being defined and may pose greater challenge for interoperability specification between the two Halfhill Tom and Salamone Salvatore Components Everywhere BYTE Network Object Linking and Embedding Network OLE from Microsoft and CORBA from the Object Management Group are compared CORBA is already available with years of refinement especially the new specification has added additional portability and distributed computing enhancements Although Network OLE is not available yet Microsoft strategies and OLE availability make Network OLE formidable opponent Table of Contents CORBA Applications Pompeii John The Design and Construction of LISA DBMS Magazine This is case study of property management system that is completely It was built with IBM distributed systems object model DSOM framework and runs on heterogeneous network with over database servers The fruits of OMG and the Object Database Management Group ODMG are impressively displayed by the variety of DSOM services hence CORBAservices utilized naming service persistence event notification concurrency control and more Almasi et al Technology to Make Information Available on the Web In Proceedings of the Fourth Workshop on Enabling Technologies Infrastructure for Collaborative Enterprises WET ICE Apr Berkeley Springs West Virginia IEEE Computer Society Press Los Alamitos CA pp is an enhanced common gateway interface CGI script that includes Orbix dynamic invocation interface DII allowing it to act as an Orbix client to servers The authors briefly describe the use of the static interface definition language IDL versus DII in Although CORBA is not the major focus of the paper nevertheless is freely available working example of CORBA client The authors also mention May trial of for dynamic generation of medical patient records using an Orbix interface to Oracle databases Table of Contents	other	cornell
1042	 Server Date Sunday GMT Tuesday GMT Online Tech Reports Online Papers Richard Palmer Physical Elements Using chains and cell complexes to solve multiple domain PDE problems brief description of how has been used to encode approximation to the Euler Equations of fluid flow Chain Models and Finite Element Analysis Shows how is programming language for FEM by developing three page executable encoding of finite element approximation to plane stress using quadratic shape functions defined over triangles Chain Models of Physical Behavior for Engineering Analysis and Design Suggests that because computers have preeminent role in engineering analysis today computation needs to be explicitly addressed in mathematical models of engineering systems and proposes methodology for doing this based on algebraic topological concepts SimLab Automatically Creating Physical Systems Simulators Describes computer environment for creation lumped model simulators from high level specifications ASME Winter Annual Meeting SimLab Paper later version of that includes examples from electrical circuits rigid body dynamics etc Rick Palmer rick	other	cornell
1043	 Server Date Sunday GMT Friday GMT Cornell Rugby Fall Men Schedule Women Schedule Women Practice Schedule Johnson School Schedule Season Results and Standings Strength Training Program Get in Touch Contact Info Subscribe to our Mailing List Highlights from Fall Highlights and Scores Pictures Results from Men Collegiate Championships From the Cornellian Other Local Clubs Cornell Women Undergraduate Cornell Men Graduate Johnson School Ithaca Women the Iguanodons Ithaca College Men Undergraduate Ithaca College Women Undergraduate Finger Lakes Vikings Geneva Cornell Info University Admissions Cornell Sports Information Other Rugby Links NYS Rugby Union home page NYS Rugby Union club email addresses Dick Dastardly Rugby Clubs of the World Rugby Repository Rugby News Today Rugby home page maintained by Dexter Kozen Faculty Advisor Men Rugby at Cornell Computer Science Department Upson Hall Cornell University Ithaca New York USA kozen work home fax	other	cornell
1044	 Server Date Monday GMT Thursday GMT Nuprl Automated Reasoning System Browser Introduction to Nuprl Nuprl Project Computer Science Department at Cornell University Brief Description of Nuprl Browser Design Nuprl Project Staff System Requirements To use the Browser you should have World Wide Web client HTML browser that can display inlined GIF and XBM format images and supports HTML Forms NCSA Mosaic for is one such client Most items will still be readable without image and Form support One exception the Nuprl Browser will be will be unreadable without XBM image support Return to Main Index Nuprl Project nuprl	other	cornell
1045	 Server Date Monday GMT Friday GMT Spring Course Materials Spring Introduction to Natural Language Understanding Course Materials Handouts Lecture Slides Homeworks Project Information Handouts Tentative Course Syllabus Course Description and Policies Lecture Slides Introduction to Natural Language Understanding Jan Introduction to the Field of NLP Ch Jan Stages of Processing Syntactic Analysis Jan Grammars and Sentence Structure and Parsing Ch Jan Chart Parsing Ch Feb Feature Systems and Augmented Grammars Ch Feb Human Preferences in Parsing Partial Parsing Ch Semantic Analysis Feb Word Senses and Ambiguity Representing Verbs and States Ch Feb Thematic Roles Semantic Interpretation Ch Feb Selectional Restrictions Handling Intrasentential Word Sense Ambiguity Ch Conceptual Sentence Analysis Feb The CIRCUS Parser Preference Semantics Semantics Context and World Knowledge Feb The Problem of Inference Text Analysis Ch Feb Using Knowledge About Action and Causality Scripts Mar Understanding of Text Mar Discourse Context History Lists Centering Ch Scott Mardis Current Trends Evaluation Learning Statistics Mar Evaluating NLU Systems Mar HMM Ch Spring Break Mar Tagging Mar Probabilistic Grammars Parsing Ch Apr Parsing Statistical Word Sense Disambiguation Ch Apr Localist Connectionist Approach to Sentence Analysis Apr Learning and NLP Apr and Methods for Disambiguation Julia Komissarchik Apr Information Extraction as Basis for Text Categorization No slides for this lecture Apr Approach to Ambiguity Resolution Apr NO CLASS Apr Project Presentations Apr Project Presentations May Project Presentations Homework Assignments Homework due Wednesday Feb Homework due Friday Feb Homework due Friday Mar Example of Thematic Roles Homework optional due Wednesday Mar Project Information What to Turn in for the Proposal Project proposals are due on Monday March but be happy to look at them before then The project proposal should contain short description of the in which you interested the papers that you read if you doing reading project description of the general approach you plan to use to solve the problem if you doing programming project plan for evaluation of the for both types of project What to Turn in for the Project Official due date Friday We accept projects without penalty until Friday Programming projects Final Writeup for Programming Projects just few pages Problem description Description of general approach Description and results of evaluation Discussion what worked what did work options like to have tried analysis of the results etc also like to see any code that you wrote and few short traces of the system in action if that makes sense for your project Presentation minutes in length Should include an overview of the problem your solution evaluation method and results projects Final Writeup for Projects This will vary for each person but in general the final writeup for projects will probably contain description of the problem that you looked at summary of the papers that you read critique of the existing approaches your attempt at an evaluation of the the presented in the papers on real text Presentation For projects the presentation should be synopsis of what you include in the paper You have to leave lot out of course Programming Projects from Last Year Class Grammar Induction using Genetic Algorithms This project implements grammar generator using genetic algorithms AutoSlog and FALCON Automated Lexicon Construction This paper evaluates the performance of AutoSlog and FALCON as lexicon constructors Preposition Attacher This project uses matching algorithm for preposition attachment Statistical Word Sense Disambiguation This project implements number of related statistical methods for disambiguation and evaluates the method using examples from the Brown corpus Automated Translation This project implements limited translator by extending James Allen parser An Implementation of Method for Word Sense Disambiguation This project implements relaxation network approach like CIRCUS for disambiguation It is based on Large Neural Networks for the Resolution of Lexical Ambiguity by Veronis and Ide The Viterbi Algorithm and Smoothing This project is an implementation of tagger using Hidden Markov Model smoothed bigram language model and the Viterbi algorithm Reading Projects from Last Year Class Topics in Intelligent Interface This paper examines two existing systems that incorporate intelligent interfaces WIP and COMET Using FOIL for Disambiguation This paper examines ways to use FOIL for disambiguation FOIL is supervised learning algorithm for acquiring concepts in logic Natural Language Understanding of the Japanese Language This paper summarizes issues for understanding Japanese Approaches to Automated Question Answering This paper addresses issues in understanding and replying to questions given in English Word Boundary Detection in Continuous Speech Recognition Application of Phonological Constraints This paper looks at three models that use broad class phonemic sequence and allophonic constraints to facilitate word boundary detection Computer Understanding of Conventional Metaphoric Language This paper looks at MIDAS Metaphor Interpretation Denotation and Acquisition System for understanding conventional metaphor An Analysis of Part of Speech Tagging This paper critiques the an article on part of speech tagging Neural Networks and NLU This paper looks at neural network applications for natural language understanding Pronominal Anaphora Resolution This paper describes four approaches to the computational task of resolving the pronoun referents Harmonic Grammars and Unaccusativity This paper looks at Harmonic Grammars developed by Smolensky Legendre and Miyata Return to home page	other	cornell
1046	 Server Date Sunday GMT Wednesday GMT Cornell Services Cornell University Servies Telnet Links to Services Travelers Mail Just the Facts Directory Info WhoIAm IRC CUGopher CUInfo Mann Library	other	cornell
1047	 Server Date Sunday GMT Sunday GMT CS Handouts Notes and Mail Archive Notes LaTeX sources and PostScript versions of these notes are also available in directory Lecture Lecture Lecture Lecture Lecture Lecture Lecture Lecture Lecture Lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture Handouts Guide to Praparing Lecture Notes An Evaluation of Buffer Management Strategies for Relational Database Systems Chou et al Join Processing in Database Systems with Large Memories Shapiro ACM TODS vol no Sep Access Path Selection in Relational Database Management System Selinger et al Granularity of Locks and Degrees of Consistency in Shared Database Gray et al Principles of Database Recovery Theo Haerder et al Mail Archive Sep Sep Sep Sep Sep Oct Oct	other	cornell
1048	 Date Mon Dec GMT Server Fri Dec GMT Sean Landis Fall Image Retrieval Project Page Sean Landis Project Fall Image Retrieval Systems for Interior Design Table of Contents Introduction Background Image Analysis Image Analysis Features and Queries Current Research Extraction Specification Metrics Intelligence Domain Knowledge Project Overview Definition Implemention Manager Manager Manager Manager and the User Interface Menu Menu by Color Algorithms by Pattern Algorithms Results Queries Queries Interface Conclusions Work References Introduction Computers are beginning to replace photographic archives as the preferred form of repository image repositories provide flexibility that can not be attained with collections of printed images Recently there has been an explosion in the number of images available to computer users As this number increases users require more sophisticated methods of retrieval image retrival CBIR promises to fill this requirement There are many diverse areas where CBIR can play key role in the use of images Art galleries and museum management Architectural and engineering design Interior design Remote sensing and natural resource management Geographic information systems Scientific database management Weather forecasting Retailing Fabric and fashion design Trademark and copyright database management Law enforcement and criminal investigation Picture archiving and communication systems Education Entertainment With so many applications CBIR has attracted the attention of researchers across several disciplines Background retrieval is based on an understanding of the semantics of the objects in collection Semantic analysis is performed when the object is inserted into the collection Given semantic representation of the objects in collection user can compose query that retrieves set of objects with similar semantics Query analysis is usually performed on an index structure that summarizes the data in the collection image retrieval is the semantic analysis and retrieval of images Semantic analysis may involve manual intervention or it may be entirely automated Manual analysis involves human interpretation to associate semantic properties with an image Automated semantic analysis extracts image features that are correlated with some semantic meaning of the image Both analysis methods have their advantages and their drawbacks Manual Image Analysis Traditional databases use text key words as labels to efficiently access large quantities text data Even complex text data can be automatically summarized and labeled using natural language processing and artificial intelligence When the data are images rather than text summarizing the data with labels becomes considerably more difficult For example consider repository of news photographs user may wish to pose query such as Give me all new photographs containing US President and communist leader To support queries like this images require labeling that indicates the people in the images their title their nationality and their political alignment It is not known how humans can process electromagnetic signals and convert them into highly detailed semantic interpretations Therefore human analysis is required to generate labels that support sophisticated queries like the one above But there are problems with human analysis Personal perspective One person interpretation of the important features of an image may not match another interpretation Personal perspective leads to variance in image analysis and labeling Domain mismatch person domain of interest may influence image feature selection and analysis Interface expressiveness interfaces provide limited bandwidth of expressive capability Image analysis os limited by the expressiveness of the interface Data entry errors Humans are especially when set to task which is tedious or redundant Because of these and other problems it is best to automate image analysis as much as possible Where intervention is required the user should be limited to set of unambiguous choices Automated Image Analysis Automated image analysis calculates approximately invariant statistics which can be correlated to the semantics of the image data Example statistics are color histograms invariants of shape moments and edges Statistical analysis is useful because it provides information about the image without fickle and costly human interaction Despite its appeal automated image analysis suffers drawbacks The primary problem with statistical analysis is that extracted features can only support very specific type of query The features apply to particular domain but they are not useful for posing general purpose queries against diverse data sets Consider an image database indexed by color histogram For each image feature vector is generated such that each element of the vector represents the percentage of color quantum found in the image three element vector could have quantums representing red green and blue in practice color feature vector requires more than three elements The feature vector for an image contains the quantized percentage of red green and blue The more quantums available the greater the accuracy of the feature vector and the greater the cost of indexing and comparison If the database contained fabric images color histogram would be powerful way to pose query user interested designing men casual shirt for spring wants bright colors The query is posed with the desired color mix and all fabrics containing similar mixes of the specified colors are retrieved On the other hand if the database contained news photographs as described earlier then color histograms would not be very useful The semantics of the images in the database do not correlate well with color histograms Image Features An image feature is piece of semantic information extracted from the image There are several properties for measuring the quality of feature Capacity The number of distinguishable images that can be represented Maximal Match Number The maximum number of images query could possibly retrieve Complexity The amount of computation required to determine if two images are similar for particular feature Compactness The amount of space required to store and compare feature Image features can be categorized as either primitive or logical primitive feature is or statistical attribute of an image such as an object boundry or color histogram Primitive features are automatically extracted directly from the image logical feature represents an abstract attribute such as the label grass assigned to region of an image Logical features rely on information beyond that contained in the image The delineation between primitive and logical features is not always clear Consider an image which is representation of scene containing several objects Features representing the objects might be either primitive or logical features If the extraction generates feature containing edge information then it is primitive feature On the other hand if the extraction identifies the object by name say by utilizing approach it is logical feature Primitive features are often used as the basis for generating logical features common CBIR system architecture layers logical feature extraction on top of primitive featue extraction Primitive features are extracted directly from the image to generate segemented image From this information more abstract logical features are generated Segementation is the process of dividing the image into regions that correspond to structural units of interest Indexing and Queries The goal of indexing is to create compact summary of the database contents to provide an efficient mechanism for retrieval of the data The summary data is based on feature vectors Since in content based visual databases all items images or objects are represented by visual features the key attribute for each image will be feature vector which corresponds to point in feature space and search will be based on similarities between the feature vectors Therefore to achieve fast and effective retrieval requires an efficient indexing scheme Multiple indexing schemes may be required to support queries involving combination of features To utilize multiple indexes hierarchical approach is often used where each component of query is applied against an appropriate index higher layer merges results for presentation to the user CBIR queries are posed in fuzzy fashion The user is typically interested in results according to similarity rather than equality This requirement influences the indexing scheme the methods of feature comparison and the means by which queries are solicited from the user Image similarity is usually determined by computing distance measure between the query and the appropriate feature vectors in the index structure Similar images are ranked according to distance Thresholding may be used to reduce the number of similar images presented to the user query is created by composing primitive and logical feature vectors To present simple and structured query environment CBIR systems define query classes Some typical query classes are Color partial histogram is created by specifying colors and percentages Texture Texture features include directionality periodicity randomness roughness regularity coarseness color distribution contrast and complexity Sketch The user creates sketch representing an outline to be matched against dominant image edges Shape An example shape is created using simple painting tools The shape is compared to objects within images for similarity Volume Volumetric relationships are specified using tools Feature vectors contain information Spatial constraints The feature vector contains topological relationships among the objects in an image Browsing The user is presented with structured method of viewing the entire database Objective features Objective features are attributes such as date of image acquisition light direction and view direction These features lend themselves to the methods used in traditional databases Subjective features Feature extraction is manual or and is subject to human interpretation Examples are region labels and manual object identification Motion Motion is applicable to series of images such as video segments Motion features measure movement of objects in the sequences or other movement such as camera viewpoint and camera focal point Text Either simple or complex text can be associated with images For the simple case traditional database methods can be used Complex systems use natural language processing and artificial intelligence to reason about text annotations Domain concepts Domain information lends itself to specific forms of feature vectors and queries Query classes provide meaningful way for user to create feature vectors that correspond to their notion of image semantics Queries can be composed of multiple query classes An alternative to queries are queries by example The user submits query in the form of prototype image and the system uses the feature vector of the appropriate query class es Often session will begin with queries which are then refined through query by example To run an interactive query on system called Query by Image Content QBIC click here Current Research There are large number of researchers exploring topics focused on recent work which has been more productive The following sections describe some of the important topics studied Feature Extraction Feature extraction is performed when an image is added to the database CBIR systems provide support for multiple query classes Pickard and Minka use different features to characterize images from the MIT Photobook image retrieval system The CORE system is retrieval engine that supports wide range of features including visual browsing color similarity measures and text Primitive features are combined to create higer level logical features they call concepts The QBIC system extracts features that support image query classes for color texture shape sketching location and text The system also supports set of video oriented query classes For color histograms many different extraction methods are used The first issue is the dimension of the color feature vector the number of colors Typical numbers range from to dimensions being the number of unique colors representable with one byte The higher the dimension of the feature vector the greater its capacity The values in each bin of color histogram are usually either the total number of pixels or the percentage of pixels for the given color in the entire image Query Specification The papers read treated query specification as secondary issue Researchers recognized the need for simple ways to specify queries Unlike databases where the desired information is retrieved with single query suitable image may require many queries CBIR systems typically return several of the best images for selection by the user Many systems allow the user to select one of these images as an example for another query This is an example of query refinement Researchers are exploring ways of providing easy refinement of queries that yield high success The use of multiple query classes to compose query interests researchers Although many systems claim to support composite queries few of the papers explained how to combine query classes successfully Distance Metrics Most image query classes rely on similarity metrics rather than exact matching Distance metrics produce relative distance between two image feature vectors threshold is used to determine if two features are similar In many cases the user can control the threshold to relax or constrain query Every distance metric has advantages and drawbacks For example Stricker analyzes two common distance metrics the and euclidean norms The norm computes the distance between two element color histograms and as And the norm is computed as Stricker states that Using the results in false negatives not all the images with similar color composition are retrieved because the does not take color similarity into account Using metric similar to the results in false positives histograms with many bins are close to any other histogram and thus are retrieved always The QBIC system uses or dimension color histogram where each element is the percentage of color The distance between histogram and database image histogram is computed as Where is the transpose operator The locations in contain the distance between color and color IBM Ultimedia Manager uses vector of color percentages Each dimension represents range in color space At analysis time the color of each pixel is quantized into one of the ranges based on its location in RGB space Indexing The predominant CBIR research is in the area of image feature indexing There are many difficult problems to solve First image features are typically high dimensional requiring complex indexing Second traditional indexing assumes exact matching similarity matching complicates the indexing structure Finally it is difficult to combine indexing methods to efficiently support queries composed of mutliple query classes By using similarity metrics only for initial indexing Pickard and Minka avoid the problem of combining query classes with different metrics Similarity is encoded into clusters of image regions in tree structure and distance is measured by ancestral distance between clusters This has the effect of normalizing different query classes so they can be treated identically Extensibility Systems must be extensible to overcome the immaturity of indexing methods query specification and feature extraction Most of the important work in CBIR lies ahead The importance of extensibility was recognized by Wu et al when they developed CORE based on generic framework for multimedia DBMS To demonstrate the flexibility of the architecture they developed two different applications facial image inference and retrieval system CAFIIR and trademark archival and registration system STAR medical information system is currently in development In their conclusion they state Object orientation is very important for retrieval engine like CORE One advantage is an increase in the reusability of codes to increase its reusability and extensibility Artificial Intelligence Research focuses on three applications of Artificial Intelligence to CBIR reasoning about logical features similarity metrics and index construction and maintenance For example Pickard and Minka apply AI when annotating images to dynamically select from multiple feature models based on how the user labels image regions Their system is also capable of improving the indexing structure based on new positive and negative examples Wu et al apply fuzzy reasoning to queries where the logical features of the query are only partially defined by the user They also used learning based on experiences neural network model to generate nodes in index tree This allows their system to fuse composite feature measures to support complex and fuzzy queries Maximizing Domain Knowledge Query performance can be drastically improved in cases where assumptions can be made about the nature or domain of the images in the database Wu et observe that CORE has comprehensive functions However each application has its problems And In application development domain expertise must be added to customize the indexing and retrieval module Project Overview Exploration of CBIR problems in the domain of interior design am interested in the methods of CBIR which apply to problems faced by interior designers Interior designers work with paint wallpaper fabric and floor coverings They also follow general principles of form space color and style Designers and their customers regularly face the tedious chore of manually searching for and matching materials according to general design principles and taste There is an opportunity for high degree of computer assistence with these tasks Designers could compose queries using primitive and logical features and specify constraints according to design principles Results of series of queries for wallpaper paint and carpet must be according to rules of form space color and style These requirements led my interest toward the following query classes Color Fabric wallpaper are often selected based upon color content This is perfect application of color histograms Texture Floor coverings wallpaper and fabric all have important textural components ideal for queries based on textural features Shape Examples of shapes are stripes plaids floral and patterns Objective features Styles such as Victorian could be modeled as objective features Subjective features Taste mood or sensation related design concepts can be specified using subjective feature queries Examples are feminine Masculine cheery cool warm etc Text Product attributes such as part numbers supplier information and first production date are all text features Domain specific The design rules described above are domain specific features Query by example is powerful tool for interior designers For example given particular carpet sample the designer could find window covering that compliments the carpet Project Definition implemented software prototype that allowed me to explore the following areas Color Color is an important feature of the materials interior designers use Color also allows automatic image analysis explored few implementations of color histogram feature vectors and related similarity metrics Pattern Patterns are also very important to interior designers focused on automated feature vector generation using edge detection Software Design One of the difficulties of CBIR systems is that no small number of query classes provide enough flexibility to support interior design Further the technology of image feature vectors similarity metrics and indexing is immature system needs to be extensible and configurable Using object oriented techniques designed system that encapsulates the areas of highest change created framework to support the addition of new query classes and distance metrics The framework divides major system tasks among manager objects that interact through interfaces User Interface defined simple user interface for color histogram queries and provided the ability to query by example using color histograms and shapes Image Management Basic to QBIC system is the ability to efficiently manage the performance storage and memory requirements of images Because of their size and complexity images have special computation and resource requirements have identified some of these issues and suggest some solutions specifically avoided exploring indexing issues in this project Implementation implemented software prototype for the purpose of exploring the details of CBIR The software was written using Microsoft tm Visual Compiler version The platform was Intel system running the Windows NT operating system version The software architecture is shown in the following block diagram This architecture is loosely based on CORE Each of the managers is implemented as singleton object the class definition restricts instantiation to only one object Storage Manager The Storage Manager provides an interface to the image database It is responsible for maintaining an virtual mapping of images and for performing system specific operations The following class diagram depicts the key relationships The StorageManager class provides member functions to access the image database client uses store to associate the pixmap in file with the image object and store the image in the database This function is used by the AnalysisManager to process user request to add an image to the database It also attaches the pixmap to the image which allows the AnalysisManager to perform feature extractions on the image Clients can request single image using getImage or the entire image database list using getImageList The loadDB function is used to initialize the StorageManager object The current implementation of the StorageManager maintains an unordered list of Image objects representing the entire database In real system the StorageManager would maintain multiple indices used to retrieve images The Image objects would be at the leaves of the index in the case of index structure For efficiency this implementation only loads the pixmap data for an image when necessary The Image object determines when to load the data the task of loading is delegated to the StorageManager The Image class encapsulates the details of the pixmap implementation and feature vectors The system manipulates Image objects for convenience The Pixmap class provides an interface to color pixel representation of an image This class allows the implementation of the image to change without affecting the rest of the code The Features class encapsulates set of feature vectors This class allows new feature vectors to be added as new query classes are added Two changes would be required in production system to efficiently manage memory First the current implementation only loads pixmaps on demand and never invalidates them Invalidating pixmaps would conserve large amounts of physical memory typical pixmap requires bytes of memory just to store the image data assuming colors Also pixmap has color table and other overhead making for total of about bytes second memory saver would be the use of thumbnail versions of the pixmaps Thumbnails are smaller representations usually bytes which are used for display The current system only requires the entire image during feature extraction Support for thumbnails would either require time tradeoff to reduce large pixmap when it is loaded into memory or disk space tradeoff if the thumbnails were generated at load time and stored in the database Analysis Manager The Analysis Manager performs analysis on images as they are added to the system The result is set of feature vectors one for each type of query class The greatest change in CBIR system is likely to be the addition of new query classes The Analysis Manager provides extensibility via registration of feature extractors which generate feature vectors The class relationships are shown in the following class diagram When user adds new image to the system the user interface calls the analyze member function This function uses the StorageManager to create new Image which it then analyzes by calling extract on each installed feature extractor New feature extractor objects are added by calling addFeature when the system is initialized The FeatureExtractor abstract class provides an interface definition to be used by all feature extractors Concrete feature extractor classes inherit the interface and provide implementations appropriate for the needs of the feature vectors they generate feature extractor object is responsible for analyzing the image creating FeatureVector and installing the FeatureVector in the Feature object of the Image The FeatureExtractor classes play an important role they encapsulate all important information for particular query class When adding new query class most of the effort is in creating new subclass of FeatureExtractor Other classes can get query class specific information from feature extractors For example the QueryManager calls the similarityFunc when comparing two images The AnalysisManager feature extractors Features and the FeatureVector have an important relationship At initialization time all the feature extractors are installed into the singleton instance of the AnalysisManager The AnalysisManager tells each feature extractor its position in the set of feature vectors stored in the Features objects It also tells the Features class how many feature vectors every Features object must be capable of storing Every feature extractor implementation knows how large to make the data portion of its FeatureVector By encapsulating knowledge in this fashion new features can easily be added Query Manager The QueryManager class provides two important functions the ability to query the database and the ability to maintain query history The Query Manager accepts Features object and similarityFunc from the User Interface and formulates query The formulated query is used to retrieve similar images from the Storage Manager client requests an initialized Features object from the AnalysisManager which knows the position and size information for every feature and fills it in with the information to be matched in the query The client gets the similarityFunc from the feature extractor class defined for the query class Similarity functions are static member functions of the derived feature extractor class This is necessary when passing member function pointer as function argument They accept two Features objects and compute distance between them Similarity functions must return value representing the distance between the feature vectors The function can also optionally return value less than zero if the two feature vectors are dissimilar The QueryManager uses the return value to rank images by distance After the QueryManager completes the processing of query it passes the ranked list of images to the DisplayManager for presentation The current implementation contains similarity functions that only operate upon single query class Since the specifics of the similarity computation are external to the QueryManager it is possible to provide similarity functions which take into account multiple query classes One way to do this is to provide hierarchy of queries in which the results of one level of queries are passed to different similarity function Display Manager and the User Interface The display manager is responsible for displaying images on the screen and tracking mouse selection of images This class is closely related to the user interface provided by the operating system It maintains the list of currently displayed images and responds to paint messages generated by the window system client of the display manager can submit list of images by calling display This will replace the existing list of images held by the display manager with the list passed to this function Then the images will be displayed Note that the Image lists that many of the manager objects maintain are lists of pointers to Image objects To avoid memory leaks clients pass deletion policy to the display member function telling the DisplayManager how to manage the memory in the image list The user interface provides typical menu options according to the Windows tm style To see screen capture showing the application area filled with wallpaper images click here Each image has label which is the name of the database file containing the pixmap Image Menu The Image menu provides options for adding images and for querying the database Selecting query option presents dialog designed to solicit query for particular query class For example the following screen capture shows the dialogs used to compose query by color Composing color query is process involving two dialogs The Query By Color dialog allows the user to specify up to color percentages for the query To specify each color the user manipulates the controls in the Color dialog This is standard Windows dialog that allows selection of colors directly from the system color palette The user may also create up to sixteen custom colors Once the query is composed the user presses the OK button and the query is submitted to the QueryManager All similar images will be displayed by the DisplayManager View Menu The View menu provides selections that allow the user to view information about the database and its images The Database item causes the DisplayManager to display the entire image database In real application this would be impractical intelligent browsing tools would be necessary for traversing large set of images Selecting the Features item presents the user with the Image Features dialog containing list box of all the image names The user selects an image and presses the desired button in the Display group The following screen capture shows what happens after the ColorHistogram button is pressed The Color Histogram dialog presents two histograms of the selected image The Original Image Histogram is the color histogram of the image as stored in the database Each bar represents the relative number of pixels that are assigned the displayed color The Total Color Bins field is the number of bins in each histogram and the Total Empty Bins field is the number of bins which do not contain any pixels The Image Feature Histogram is the histogram of the feature vector It is quantized version of the original histogram high percentage of empty bins in the feature histogram is common Selecting the Pattern Histogram button from the Image Features dialog presents the Pattern Histogram dialog The dialog shows the directional bias of the image The numbers below each of the three bins represent the relative biases in each direction The integer values range between and representing WEAK NOT STRONG STRONG and VERY STRONG The dialog shows that the image is very strongly biased vertically and strongly biased horizontally The Color Values item on the View menu presents the user with dialog for viewing the predominant feature colors The Image Color Values dialog displays the five most prevalent colors their percentage of distribution and their RGB value The color and the RGB values shown are the value at the center of each quantization range This dialog is very useful for testing the quality of the similarity function Query by Color Algorithms When an image is added to the database the AnalysisManager calls the extract member function on the ColorHistogram object This function is responsible for creating query class specific feature vector and installing it in the Image ColorHistogram creates color histogram feature vector similar to the one used in IBM Ultimedia Manager Each element of the feature vector represents subspace of RGB space as shown in the following figure Each pixel is quantized into one of the bins After traversing the image the histogram contains the number of pixels contained in each color cube Each bin value is then converted to percentage representing the relative number of pixels contained in that color cube The similarity function of ColorHistogram computes the distance between two histograms using th norm This distance is compared to threshold value to determine similarity The QueryManager uses the return value to order images most similar first The norm only works well on sparse matrices This is fine when the user provides three colors via dialog because only entries with values are compared When querying by example the similarity function ignores small percentages if they are present in both histograms reducing the problem of false positives due to contribution of insignificant differences between histograms Query by example requires larger similarity threshold since it usually involves many more comparisons than queries via the dialog For the data used to worked for three color queries and to was good for query by example Query by Pattern Algorithms Query by pattern algorithms automatically recognize the directional biases of an image When an image is added to the database the AnalysisManager calls the extract member function on the Pattern class Pattern creates feature vector where each element contains percentage of bias in the horizontal diagonal and vertical directions The pattern extraction algorithm is multistep process First it creates greyscale copy of the original image RGB values are converted to brightness values using the same translation as for black and white television Television images are transmitted using the YIQ color scale Black and white television recievers only display the portion the luminance signal The greyscale image is then processed to detect edges using the Sobel operator This method applies two kernels to the nieghborhood of each pixel to estimate the brightness derivatives and For the derivative in the horizontal direction the following kernel is used And for vertical direction the following kernel is used Conceptually kernel is applied to an image by sliding the kernel over the image and summing the products of the values in the kernel with the brightness values under them The result is the derivative or brightness slope at the pixel under the center of the kernel After the application of both kernels to pixel nieghborhood the magnitude is computed This value is assigned to the pixel under the center of the kernel To emphasize the edges the algorithm thresholds the value to black or white The following image is result of this process Finally the edge image is traversed applying the two kernels again This time the derivatives are much stronger in the bias of the image The direction of the slope is determine by This is value between zero and PI The algorithm quantizes the direction into one of the three bins in the histogram After this process is applied to the entire image the sums in the bins are converted to percentages The result is feature vector containing percentages of bias in horizontal diagonal and vertical directions The distance metric ranks the three direction biases as very strong strong not strong and weak It then computes the norm distance between the two histograms This distance is compared to threshold value to determine similarity The returned distance is used by the QueryManager to order similar images Results The results of my project were positive Using scanner was able to produce pixmaps for wallpaper samples implemented software that supported both color and pattern based queries of wallpaper database The software provides an intuitive user interface and supports easy addition of new query classes Color Queries There are two ways to query the database by color dialog and example The Query By Color dialog was described above dialog query using three colors demonstrates the effectiveness of the query Three images are returned in order of similarity An query uses the color histogram of displayed wallpaper sample as the query key The user clicks the right mouse button on the desired example and is presented with popup menu Selecting Query by Color Example will initiate the retrieval was used as the example wallpaper image and the threshold was set at Pattern Queries The software currently supports pattern queries by example only The queries are initiated from popup menu query based on wallpaper sample results in set of wallpapers containing strong directional bias in vertical and horizontal directions This query was restricted to display images The current implementation does not provide enough capacity to distinguish between directional bias from lines and bias from noisy patterns This would require more sophisitcated feature extraction algorithm For example smoothing step could be used to supress the noise before performing the gradient computations User Interface The user interface is fairly intuitive The interface presents familiar environment to the Windows user by following Microsoft Windows interface guidelines sample user unfamiliar with image processing easily navigated through the system The user was confused about the meaning of the threshold parameters which must be set as numbers This confusion could be alleviated by presenting slider control representing scale of relative distance Design The software design used takes full advantage of principles The key features of the design are Change is encapsulated The area of greatest change is the addition of new query classes This functionality is encapsulated in the feature extractor concrete classes new query class is added by copying an existing feature extractor and modifying it to suit the needs of the new query class Implemenation details are encapsulated Two classes hide implementation details Pixmap and StorageManager To support multiple image types Pixmap could be converted into an abstract class providing only interface specific image types would inherit from this class The StorageManager class hides details of the database and operating system and is responsible for logical image management In application the StorageManager would delegate system details to another class and would only manage images Abstraction is enforced Abstraction is enforced using manager classes Interface inheritance eases expansion The FeatureExtractor abstract class defines the interface for all concrete feature extractors Client code can be written to an interface without knowledge of query details Ghese design principles produced an extensible and embeddable system The prototype could be made embeddable by converting it to server in arrangement First the user interface code must be externalized This code is sensitive to change and properly resides in the client application Second communication protocol must be used In the Microsoft Windows environment OLE would provide this capability Limitations The limitations of the prototype are performance and resource management Adding new image to the database takes long time because of image analysis Although the current algorithms are not optimized this step will always be too expensive to perform in real time production system would have so many feature vectors that batch processing mechanism would be necessary Image management is too crude for production system The entire image database is loaded into memory and no mechanism exists for maintaining only working subset of images There is no support for thumbnail versions of images The size of an image is about even though the software always scales down to for display The software is prototype intended for exploring ideas and therefore does not contain the polish required in production systems Conclusions The project goals were met prototype CBIR system was built demonstrating color and pattern queries an intuitive user interface provides ease of use an design supports extensibility and embeddability Usefulness With the vast number of images available quality CBIR systems are critical By using the right system people can quickly find the image they need In the field of interior design designers and their customers search through hundreds of carpet drapery paint and wallpaper samples Their selections must be combined to create pleasing result Producing an asthetic result often requires even more searching Through the use of CBIR designers could access vast amounts of material either on or in vendor database and rapidly create interior decorating solutions Sophisticated query environments could assist in applying practical design constraints to ensure attractive results Expensive sample inventories would be obsolete Significant savings would be passed on to customers Future Work CBIR system for interior design requires access to large databases of flooring paint fabric and wallpaper samples Efficient retrieval from multiple large image databases relies on new data representations and indexing methods These methods must support queries composed of multiple query classes More and better query classes are needed to support all aspects of interior design materials Classes for color texture pattern and style are needed to create asthetic designs Text and other attributes are necessary to represent manufacturer information wear characteristics cost etc Judicious use of artificial intelligence will improve system performance Fuzzy logic is useful in determining image similarity for certain query classes Expert systems can be built that assist designers in creating solutions that conform to traditional design idioms Finally sophisticated user interfaces will be needed to give designers the power and flexibility their work demands Users must be able to incrementally build design solutions The interface must provide access to designers portfolio so they can use and modify past work allowing quick response to customer demands There are many challenges ahead for future CBIR systems builders The field of interior design presents its own challenges The results of my work show promise but there is still much to do References Venkat Gudivada Vijay Raghavan Image Retrieval Systems IEEE Computer September Desai Narasimhalu Special section on retrieval Multimedia Systems Flickner Sawhney Niblack et al Query by Image and Video Content The QBIC System IEEE Computer September Rajiv Mehrotra James Gray Retrieval In Shape Data Management IEEE Computer September Pickard Minka Vision Texture For Annotation Multimedia Systems Wu Desai Narasimhalu Mehtre Lam Gao CORE Retrieval Engine for Multimedia Information Systems Multimedia Systems Markus Stricker Bounds for the discrimination power of color indexing techniques Proceedings SPIE Storage and Retrieval for Image and Video Databases II Nagarajan Ramesh Ishwar Sethi Feature Identification As An Aid to Image Retrieval Proceedings SPIE Storage and Retrieval for Image and Video Databases III Virginia Ogle Micheal Stonebraker Chabot Retrieval from Relational Database of Images IEEE Computer September John Russ The Image Processing Handbook Second Edition CRC Press Hong Jian Zhang and Di Zhong Scheme for Visual Feature based Image Indexing Proceedings SPIE Storage and Retrieval for Image and Video Databases III Jonathan Ashley Ron Barber Myron Flickner James Hafner Denis Lee Wayne Niblack Dragutin Petkovic Automatic and Methods for Image Annotation and Retrieval in QBIC Proceedings SPIE Storage and Retrieval for Image and Video Databases III Harold Treat Ed Ort Jean Ho Mimi Vo Jang Laura Hall Frank Tung Dragutin Petkovic Searching Images Using Ultimedia Manager Proceedings SPIE Storage and Retrieval for Image and Video Databases III James Rumbaugh Michael Blaha William Premerlani Frederick Eddy William Lorensen Modeling and Design Prentice Hall Course Description Send questions and comments to Sean Landis at scl Last modified by Sean Landis	other	cornell
1049	 Server Date Sunday GMT Tuesday GMT Design and Performance of Horus Lightweight Group Communications System Next Introduction Design and Performance of Horus Lightweight Group Communications System Robbert van Renesse Takako Hickey and Kenneth Birman Dept of Computer Science Cornell University Abstract The Horus project seeks to develop communication system addressing the requirements of wide variety of distributed applications Horus implements the group communications model providing among others unreliable or reliable FIFO causal or total group multicasts It is extensively layered and highly reconfigurable allowing applications to only pay for services they use This architecture enables groups with different communication needs to coexist in single system The approach permits experimentation with new communication properties and incremental extension of the system and enables us to support variety of interfaces Our initial experiments show good performance Introduction The Horus Group Model Design Layers and Protocols COM basic communication NAK FIFO communication MBRSHIP membership and atomicity STABLE message stability FC flow control CAUSAL causally ordered delivery TOTAL totally ordered delivery XFER state transfer CLTSVR membership LWG groups FAST message acceleration Other layers Implementation Performance Ongoing work Conclusion Acknowledgements References About this document Robbert VanRenesse Tue Nov EST	other	cornell
1050	 Server Date Monday GMT Wednesday GMT CS Lecture Notes CS Lecture Notes Here is the list of lecture notes available number of lectures were based upon material developed by Bard Bloom Introductory Lecture Writing Large Programs Modules Continued and Tools Memory Management Little Languages including TCL TCL User Interfaces TK Embedding TK in Programs Lecture Lecture Lecture Lecture Object Oriented Programming OOP Case Study Object Oriented Techniques Object Oriented Programming in Object Oriented Programming in Advanced Styles How to Write Efficient Programs Guest Lecturer Robbert Van Renesse on Writing Large Distributed Systems Skills for Dealing with People Guest Lecturer Jerry Feist on Group Management Management samuel Last modified Feb	other	cornell
1051	 Server Date Sunday GMT Friday GMT CS Material in Library Material in Engineering Library The Engineering Library is located at the NW corner of the engineering quadrangle It contains the following books on reference and the following journals in the stacks Also you can check the catalogs there or via the WWW Reference Books Korth Silberschatz Database System Concepts Second Edition Michael Stonebraker Readings in Database Systems Morgan Kaufmann Second Edition Elmasri Navathe Fundamentals of Database Systems Second Edition Gray Reuter Transaction Processing Concepts and Techniques Morgan Kaufmann Conference Proceedings ACM SIGMOD Conference on the Management of Data The International Conference on Very Large Databases VLDB The IEEE Conference on Data Engineering ACM Symposium on Principles of Database Systems Journals ACM Transactions on Database Systems VLDB Journal IEEE Transactions on Knowledge and Data Engineering SIGMOD Record	other	cornell
1052	 Server Date Sunday GMT Thursday GMT Funda Research Page Research am working on program testing My advisor is Ronitt Rubinfeld For more information on program testing Hal Wasserman has testing page in Berkeley that also contains links to some of the people who have done work in the field am also interested in Computational Learning Theory and Cryptography Publications On Testing Without the Generator Bottleneck With Kumar Sivakumar Submitted to SIAM Journal of Computing Approximate Checking of Polynomials and Functional Equations With Kumar Rubinfeld FOCS On Learning Branching Programs With Kumar Rubinfeld COLT Testing Multivariate Linear Functions Overcoming the Generator Bottleneck STOC	other	cornell
1053	 Server Date Monday GMT Saturday GMT Incrementalization General Systematic Approach to Efficiency Improvement Objectives We are engaged in an ambitious effort to derive incremental programs automatically or from programs written in standard programming languages This approach contrasts with earlier approaches that aimed to incrementally evaluate programs In essence every program computes by iteration expressed as recursive functions or loops This is why loop optimizations are so important loop body can be regarded as program parameterized by an induction variable that is incremented on each iteration by change operation Efficient iterative computation relies on effective use of state computing the result of each iteration using stored results of previous iterations This is why strength reduction and related techniques are crucial for performance Given program and an input change operation program that computes efficiently by using the result of the previous computation of is called an incremental version of under Sometimes information other than the result of needs to be maintained and used for efficient incremental computation of We call function that computes such information an extended version of Thus the goal of computing loops efficiently corresponds to constructing an extended version of program and deriving an incremental version of the extended version under an input change operation In general incremental computation aims to solve problem on sequence of inputs that differ only slightly from one another making use of the previously computed output in computing new output instead of computing the new output from scratch Incremental computation is fundamental issue relevant throughout computer software optimizing compilers transformational program development and interactive systems Results Thus far we have partitioned the problem of deriving incremental programs into three subproblems Exploiting the result of the return value of Caching exploiting and maintaining intermediate results of values computed in the middle of computing Discovering computing exploiting and maintaining auxiliary information of information not computed at all that can be inexpensively maintained We summarize here the essence of our methods In Systematic Derivation of Incremental Programs we gave general systematic transformational approach for deriving an incremental version of program under an input change The basic idea is to identify in the computation of those subcomputations that are also performed in the computation of and whose values can be retrieved from the cached result of The computation of is symbolically transformed to avoid these subcomputations by replacing them with corresponding retrievals This efficient way of computing is captured in the definition of In Caching Intermediate Results for Program Improvement we gave method called for statically transforming programs to cache all intermediate results useful for incremental computation The basic idea is to extend the program to program that returns all intermediate results II incrementalize the program under to obtain an incremental version of using our method for III analyze the dependencies in then prune the extended program to program that returns only the useful intermediate results and prune the program to obtain program that incrementally maintains only the useful intermediate results In Discovering Auxiliary Information for Incremental Computation we proposed approach for finding auxiliary information Auxiliary information is by definition useful information about that is not computed by Where then can one find it The key insight of this approach is Consider as candidate auxiliary information for all intermediate computations of an incremental version of that depend only on such an incremental version can be obtained using some techniques we developed for solving and We use techniques developed for solving and instead of just so that the candidate auxiliary information includes auxiliary information useful for efficiently maintaining the intermediate results How can one discover which pieces of candidate auxiliary information are useful and how they can be used We proposed Extend with all candidate auxiliary information then apply some techniques used in our methods for and to obtain an extended version and an incremental extended version that together compute exploit and maintain only useful intermediate results and useful auxiliary information Thus on the one hand one can regard the method for as an extension to method for on the other hand one can regard method for as aids for solving Similarly on the one hand one can regard the method for as an extension to methods for and on the other hand one can regard methods for and as aids for solving The modular components complement one another to form comprehensive principled approach for incremental computation and therefore also for efficient iterative computation generally Although the entire approach seems complex each module or step is simple In CACHET An Interactive Program Transformation System For Deriving Incremental Programs we describe our prototype implementation of these ideas Annie Liu yanhong Last updated	other	cornell
1054	 Server Date Sunday GMT Tuesday GMT What Beautiful Moment Please be patient until my JAVA applet is loaded Back to Yoosun Home	other	cornell
1055	 Server Date Sunday GMT Friday GMT Find Properties of Horus Stacks Find Properties of Horus Stacks See also Validating the Horus Protocols The tool below allows you to build Horus stacks and see interactively what kind of communications properties they will give you In mode click on network button lower side of the applet to define or redefine which network you be working over Click on the layers buttons at the right to drop new layers on top of the stack Click on layers in the stack to delete them Look on the left side to see what kind of properties the designer of user application over this stack might want to provide and the properties that the protocol stack will provide when the application provides the properties If you see checkboxes you can click on them to experiment with providing or not providing the requested properties In Document mode clicking on the name of layer or property will produce window describing the layer or property Try stacking the SIGN and NAK layers on top of UDP Notice that it makes big difference in which order the layers are stacked Notice that CHKSUM and NAK over UDP is not very good because the stack is subject to attacks by an intruder but if you replace UDP with physically secure network called Secure in this demo you do better Notice that you can remove the MaxSend application requirement by adding the FRAG layer on top of NAK This is the usual approach less usual approach is to put FRAG directly over the network and layer SIGN or CHKSUM depending on the security of your network and NAK on top of that Try it The interactive Horus stack should appear in this space You must not have the ability to run Java applets Too bad See also Validating the Horus Protocols Copyright Fri Apr EDT by Cornell University Maintained by David Karr Send corrections to karr	other	cornell
1056	 Server Date Monday GMT Friday GMT Project Presentation Schedule Project Presentation Schedule April Kendra Willson Thematic roles and NLU This paper muses on issues surrounding the adaptation of various linguistic approaches to argument structure for NLP purposes with the ultimate but oblique goal of shedding light on the question Are linguists useless Catherine Starkey Translator for Simple Sentences This project will take as input series of sentences in English or German and then parse them according to corresponding set of grammar rules Then using different set of rules for the other language it pieces together the new sentence with words entered in lexicon Lin Hsian Wang Prepositional Phrase Attachement by Approach To solve the prepositional phrase attachment ambiguation using set of rules generated by Learning algorithm Mao Yonghong Part of Speech Tagging Algorithms will compare some part of speech tagging algorithms and try to give some suggestions Eric Scharff Neural Networks for Part of Speech Disambiguation April Alfred Hong Translation of Regular Query Sentences into SQL Queries The idea of this stems from the numerous Web forms today that provide search capability Often times one would like to have query interface to database relational but the search definition parameters are usually restrictive and inhuman Adding natural language query capability to the search function while providing conversion to an equivalent SQL query to database would makes things more human and natural and hopefully more powerful Ed Wayt Jonathan Decristofaro Making the Chart Parser Avoid Useless Work The chart parser can be very inefficient when there are many ways to parse phrase This work eliminates the multiple parses generated when there is an ambiguous phrase like compound noun of five words David Walker Statistical Methods for Tagging Heng Probabilistic Part of Speech Tagging This project explores various statistical models smoothed bigram language model for tagging and implements the associated algorithms The models will be evaluated on their accuracy on either the PennTree Bank or Brown corpus Daniel Brown Text Compression Using NLP Most compression schemes take advantage of the fact that certain symbols in the input file are much more likely frequent than others This project will attempt to take advantage of the fact that certain sequences of words are much more likely than others In particular will assume that grammatical sentences are much more likely than ungrammatical sentences will encode sentences in such way that grammatical sentences take up less space May Heji Kim Information Extraction from Poetic Forms The purpose of this project will be to automatically gather useful information from poems via parsing this information will be the search keys to index corpus of poetry in database Vera Kettnaker Deriving the Meaning of Novel Words The idea of this project is to guess the meaning of novel words first names abbreviations of new terrorist organizations ect on the basis of expectations we gain from the surrounding context Grzegorz Czajkowski Pavel Naumov Presentation of Natural Language Sentence in Nuprl Term Editor Adopt Nuprl term editor for natural language representation Write several ML programs that will extract information from natural sentences presented in term editor say answer on simplest questions base on given group of sentences Joel Rosenzweig Weather Text Processing and Understanding System am writing grammar suitable for parsing weather text that can grab off of the Channel Web site This system will look for thematic roles associated with the text to provide summary of the forecast Time permitting will make program that will interpret this summary data and generate weather map that depicts the forecast Christine Paradis Translating an English Sentence to an SQL Statement will be translating an English sentence to an SQL query My initial approach to this problem is to use the thematic role information for given sentence and map this information to the corresponding SQL constructs For evaluation of the system will generate SQL statements for set of test sentences and compare the results with my SQL statements	other	cornell
1057	 Server Date Sunday GMT Friday GMT Ride To Heaven Ride To Heaven Final Project Spring Kartik Kapadia Amith Yamasani Storyline This is simulation of magnetic levitation train travelling over the sea ofcourse on tracks This setting is some time in the future when Ithaca gets submerged under the sea and everyone lives under water surfacing only to catch the Ithaca Transit Train The journey is very exciting with lot of scenic sights along the way So sit back relax and enjoy the ride you may never come back Now for some technical stuff We have used most of the concepts that we learned in CS as well as some tricks of our own This includes parametric surfaces hierarchical modelling texture mapping physics based animation fractals etc The DX program is structured in modular way with macros for almost all objects in the scene The program itself is hierarchical in nature Some of the interesting modelling that we have done is Dolphin We modelled realistic looking dolphin well almost after hours of web surfing for dolphins The main body as well as the fins and beak were made from parametric surfaces We started with kind of cylindrical surface flattened it bit and then modified the radii at different points using manually entered list of numbers random colormap gave it better appearance In order to warp the hierarchically modelled object it was necessary to write our own transforms which physically alter the vertices and then warp them Fractal Tree We built recursive tree using loop structures in DX The method used was simple and does not support much randomness in the structure of the tree But the effect is good enough for reasonably complex scene The basic idea is to make simple branch duplicate it around an axis and cache this structure for the next generation branch branch made up of smaller branches Train The train is parametrically modelled with tinted glass windows and sliding doors It is very good example of hierarchical modelling It has volume rendered flames for jets on the engine The motion of the train is controlled by the equation It decelerates to stop at the station and then accelerates off into space courtesy the booster jets Care was taken to align the train carriages on the tracks at all times Texture maps We used plenty of texture mapping to enhance the visual effects though it was expensive in terms of computing power Camera movement This was simplified by specifying key positions and then them to get the actual To and From positions TIME DATE	other	cornell
1058	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
1059	 Server Date Sunday GMT Saturday GMT English Japanese Koichi Kamijo Muriel St Ithaca NY kamijo or kkamijoh	other	cornell
1060	 Server Date Sunday GMT Saturday GMT CoNote registration list Registration List Administrator root aferencz SystemAdm Agrawal Ashutosh ashu AuthAnnot Alderman Ian ian cs ian AuthAnnot Bartholow David Starbuck starbuck AuthAnnot Bazrafkan Parvoneh AuthAnnot Bender John Steven AuthAnnot Bernstein Daniel Scott GroupAdm Bernstein Elliot Joel AuthAnnot Biko Stacy Ann Stacy AuthAnnot Bonkenburg Ted floyd AuthAnnot Briggs Reeves Hoppe AuthAnnot Cabassi Marco Alberto AuthAnnot Casalaina Marc Salvatore Marcc AuthAnnot Chen darkmage AuthAnnot Chen Po Jui Rocky AuthAnnot Cheng Victor vcheng AuthAnnot Chorma Timothy TChorma AuthAnnot Cichy Benjamin David Ben AuthAnnot Cohen Yaniv AuthAnnot Coleman Paul Coleman Warner pwc AuthAnnot Coleman Paul Warner AuthAnnot Conners Michael Fredrick AuthAnnot Copeland Sean William AuthAnnot Dangremond Erik Gregory ErikD AuthAnnot DeKorte Brian Gerard bdog AuthAnnot Deever Aaron Thomas adeever adeever GroupAdm Dumitriu Dan Mihai AuthAnnot Fallik Brian brianf AuthAnnot Feingold Max Attar We AuthAnnot Felzenszwalb Pedro Felipe pff pff AuthAnnot Ferencz Andras aferencz AuthAnnot Futrick Stanley Robert Stanley AuthAnnot Garza John David Martinez JohnDavidG AuthAnnot Gerlich Aaron Michael Fly Guy AuthAnnot Gillum Eliot Carleton AuthAnnot Luis Felipe crankwire AuthAnnot Gorecki Marek Lech mav AuthAnnot Gottlieb Meir Chaim AuthAnnot Gutierrez David guti AuthAnnot Harp Thomas Stephen ajax AuthAnnot Hayek Basil AuthAnnot He Nancy nancy AuthAnnot Ho Melissa Rita AuthAnnot Jackson Samuel dogbreath AuthAnnot Jajuli Adi Atmaputra adi AuthAnnot Jiang Hongrui ReadAnnot Kemp Ariel Jonathan akemp AuthAnnot Kim Jangyoon Johnny AuthAnnot Kittur Gaurav Subhash gkittur AuthAnnot Klose Laurence phatman AuthAnnot Korby Michael GroupAdm Kothari Parul Harish parul AuthAnnot Kshatriya Sidharth sidharth AuthAnnot Lam Guo Chao beanstalk AuthAnnot Lau Kevin Ho Wing AuthAnnot Lee Benjamin Scorpy AuthAnnot Lee Joe Dragon AuthAnnot Lemay Joseph Paul AuthAnnot Li Heyi chheyi ReplyAnnot Liao chaos AuthAnnot David dln AuthAnnot Lin Jack kaboom AuthAnnot Lin Jack naugahide AuthAnnot Litowitz Jason Marshall litowitz AuthAnnot Luo Hui Qin hluo AuthAnnot Ma Chris Kent AuthAnnot McClain Ned nmcclain AuthAnnot McClanahan Patrick William AuthAnnot McCoy Tiffanie Jeanne Ender AuthAnnot McEvoy Patrick Anthony mcevoy AuthAnnot McSherry Frank frank GroupAdm Millman Kenneth Jarrod AuthAnnot Monroe Andy William andy AuthAnnot Monte Matt Michael AuthAnnot Nalkur Sonal Gersappa Sonal AuthAnnot Nambiar Mahendra AuthAnnot Nguyen Hoai Andrew AuthAnnot Nguyen Hoai Andrew hnguyen AuthAnnot Nolte Tina Ann AuthAnnot Nolte Tina Ann tina AuthAnnot Oliver Thomas Andrew bodhi AuthAnnot Ong irene may lin AuthAnnot Ouyang Warren warreno AuthAnnot Panke Julia Elizabeth JPanke AuthAnnot Park Seonkyung psk AuthAnnot Paul Steven Remo steve AuthAnnot Payne Douglas Michael doug doug AuthAnnot Pikula Christopher Phillip AuthAnnot Pollak Joshua WindHawk AuthAnnot Puterbaugh Mike AuthAnnot Rasch Rasan rasan AuthAnnot Sambhu Manish AuthAnnot Shen Michael AuthAnnot Shvarts Alexander AuthAnnot Singh James AuthAnnot Smith David Nelson CWizard CyberWizrd AuthAnnot Stowe Jason Andrew AuthAnnot Sun Charlton Bongo AuthAnnot Surana Deepak deepak AuthAnnot Tagle Warren wtagle AuthAnnot Tan Siewhiang AuthAnnot Tanhehco Alvin Co Alvin AuthAnnot Thomas Luke Joseph Luke AuthAnnot Thorp Joshua Barnett Proht AuthAnnot Treeson Joshua Dylan mage AuthAnnot Vandrovec Bryan Michael Bryan AuthAnnot Wagner Matt AuthAnnot Wagner Mark mdw GroupAdm Wang Jia jiawang jiawang AuthAnnot Weinger Lindsey Beth AuthAnnot Weiss Edward BigEd AuthAnnot Witriol Daniel Benjamin AuthAnnot Wong Pui Yin Winfred winfred AuthAnnot Woodard Thomas Francis AuthAnnot Yamaguchi Mikael AuthAnnot Yan Di yan AuthAnnot Yau Herman RiverHorse AuthAnnot Yee Hector AuthAnnot Young David Charles dyoung AuthAnnot Zhao Yu rainy AuthAnnot deCandia Pantaleo Pantaleo AuthAnnot griffiths lee lee AuthAnnot nguyen van mai mai AuthAnnot tve tve tve cs AuthAnnot tve tve tve AuthAnnot voellinger julia greve juliev ReplyAnnot von Eicken Thorsten tve tve SystemAdm zhen zhen xiao xiao GroupAdm This page is maintained by Thorsten von Eicken	other	cornell
1061	 Server Date Monday GMT Monday GMT WWW Nuprl Browser Feedback Form Nuprl Browser Feedback Form Please note Choose the Back button at the bottom of the Mosaic browser at any time to return to the previous page Comments And Feedback Welcome Thank you for using the World Wide Web Nuprl Browser We welcome your comments and suggestions Please enter your name below Please enter your email address below optional Please enter any comments below To submit your comments press this button To clear the form press this button Further Information You may also wish to read the General Introduction to Nuprl or about the tricky and clever Browser Design For general help with Mosaic for you can read About NCSA Mosaic for the Window System or choose an entry from the Help menu found on the top corner of Mosaic Return to Main Index Nuprl Project nuprl	other	cornell
1062	 Server Date Monday GMT Thursday GMT Communication on the IBM RISC SP Next Introduction Communication on the IBM RISC SP Chang Grzegorz Czajkowski Chris Hawblitzel and Thorsten von Eicken Department of Computer Science Cornell University Ithaca NY chichao grzes hawblitz tve Abstract The IBM SP is one of the most powerful commercial MPPs yet in spite of its fast processors and high network bandwidth the communication latency is inferior to older machines such as the TMC or Meiko This paper investigates the use of Active Messages AM communication primitives as an alternative to the standard message passing in order to reduce communication overheads and to offer good building block for higher layers of software The first part of this paper describes an implementation of Active Messages SP AM which is layered directly on top of the network adapter With comparable bandwidth SP AM low overhead yields latency that is lower than IBM MPL The second part of the paper demonstrates the power of AM as communication substrate by layering as well as MPI over it benchmarks are used to compare the SP to other MPPs and show that low message overhead and high throughput compensate for SP high network latency The MPI implementation is based on the freely available MPICH version and achieves performance equivalent to IBM on the NAS benchmarks Introduction Active Messages background SP Overview Active Messages Implementation Basic Send and Receive Mechanisms Flow Control Latency Bandwidth Overheads Summary and Comparison with MPL Application Benchmarks MPI Implementation over Active Messages Basic Implementation Optimizations MPI Performance NAS benchmarks Conclusions Acknowledgements References About this document Chris Hawblitzel Thu Sep EDT	other	cornell
1063	 Date Mon Dec GMT Server Fri Feb GMT Lab CS Laboratory Camera and Perspective Transforms Introduction In this exercise you will rewrite the camera transforms which DX uses inside the Image module You will write the transform and apply it to few simple objects The resulting program will allow you to view the objects in world view and screen coordinates Procedure First you need to download several example files To do this click on each of the filenames shown below When the text window opens use the save as option to put the file in your own directory Name each file with the same name as shown below Part constructs simple object made of two cubes and few spheres see Images Fill in the formulas in the compute modules to simulate the Tview and Tpers matrices given in class and in Watt pages and Note that DX used display system so you will have to negate the view coordinate Notice that the program computes and vectors for you based on the values of the interactors Note that the images with the exeception of the world image are incorrect until you fill in the compute modules Part Add an interactor which independently of window height sets the width of the view window Note that this operation will distort the picture because it maps rectangular region to square Part Convert the viewing frustrum given in the program from view coordinates back to world coordinates using an inverse camera transform and collect it with the original objects so that the viewpoint and viewing frustrum are visible in the world coordinate Image window There are three Image modules and one Display module so that you can see the world view and screen coordinate systems plus the final view of the object The modules are hardcoded to view the computed perspective from the correct angle The following images are an example of what the program should produce World Coordinates View Coordinates Screen Coordinates Screen Projection Write out the formula from each compute module used for each transformation Be prepared to demo your synthetic camera exercising all interactors given in the template The program should include the viewing frustrum in world coordinates The program should also include the modification for variable window width As usual style counts Your network will be graded on readability and comments What happens if vertex of the object falls in the plane Remove the clipbox module and explain what you see if the object is behind the viewpoint Back to Main Page Go to Lab Last modified Land Copyright Statement	other	cornell
1064	 Server Date Sunday GMT Friday GMT Log File Latest Updates to Home Page Nov Added notes to assignment Nov Added solutions to prelim to exams page Nov Added lecture notes to Threads Nov Added complete GUI JRM code to codesamples page Nov Added further notes to assignment Nov Added assignment and notes to assignment page Nov Added lecture notes for AWT Nov Added notes to assignment Nov Added solutions to assignment to assignments page Nov Added sample GUI for assignment to codesamples page Sep Reorganised homepage Sep Added Sep Added notes to Sep Correction to Added correction to notes Sep Added information about consultants in Sep Added lectures to to lectures Sep Added assignment to homepage Sep Added code samples for lectures Sep Updated lecture notes for lectures Sep Updated course staff Sep Entered Office hours for TAs Sep Corrected Tugkan Batus office hours Sep Updated Lectures Sep Added solutions to assignments assignments page Sep Added code for solutions to assignments code samples page Sep Added Assignment to assignments page Sep Added Simulator skeleton and to codesamples Sep Added sample jrm code files to codesamples page Sep Corrected Simulator skeleton and code Sep Added new page for additional course material Sep Changed the skeleton simulator to compilable one Sep Added lectures to lectures page Sep Corrected in codesamples page Sep Added notes to assignment Sep Added Sample jrm files and Sep Added jrm simulator executable Sep Added information about droplets with the jrm simulator executable Oct Updated lectures Java Register machines Oct Added lecture Inheritance Oct Added information about droplets Oct Added information about Java Virtual Machine to Additional References page Oct Added solutions to assignment to assignments page Oct Added assignment to assignments page Oct Added shell for assignment to code samples page Oct Added sample jrm code for assignment Oct Added note about to sampleoutput for sample JRM files Oct Added solutions to prelim available now Oct Added simulator to page Oct Added assignment to assignments page Oct Added solutions to assignment to assignments page Oct Added recursive factorial jrm code to code samples page Oct Added notes to assignment Oct Updated notes to assignment Oct Added sample output for the change problem to notes Oct Added pseudo code for fibonacci numbers to notes	other	cornell
1065	 Server Date Sunday GMT Wednesday GMT Sculpture Sculpture Jason Hickey Many thanks to Gail Scott White	other	cornell
1066	 Server Date Sunday GMT Sunday GMT Contact information for kolla Send me email The best way to get hold of me is sending email to kolla If you have something of more sensitive nature you may use Pretty Good Privacy to insure only read your communications Page me If you have to get hold of me right away you can page me and hope that call you back Send me smail If you want the Postal Service to deliver something to me you may address it to Vivekananda Kolla Hasbrouck ApartmentsIthaca NY Call me If talking voice is more your style you can give me call at home at also have voice mailbox at Off that is always available my secretary You may wish to check my schedule before you call Last Update June kolla	other	cornell
1067	 Server Date Monday GMT Wednesday GMT SimLab Achievement The SimLab Component of MADEFAST next MADEFAST is an project administered with the assistance of NIST to demonstrate technology developed under the MADE program The goal is to show how the computational tools developed under MADE can be collaboratively used by MADE contractors at different sites to design and manufacture significant artifact The proposed artifact is seeker The term seeker generically refers to variety of typically missle that employs sensors to lock onto and track target guiding the missle Designing and building such missle seeker is beyond the scope of the MADEFAST project Instead we are building somewhat simpler device with mission to track light displayed on wall The SimLab component of MADEFAST is to use the simulation and analysis tools developed under MADE to aid in the design by providing analysis of the physical behavior of the proposed artifact next	other	cornell
1068	 Server Date Sunday GMT Monday GMT Academics at MSU Ankit Patel Bachelor of Engineering in Computer Science Department of Computer Science Maharaja Sayajirao University Final Year Project SYNOPSIS Title Analysis Design and Implementation for Platforms Nature of Project software project developed using Rumbaugh Object Modeling Technique OMT methodology for an application of simple purchase system Borland was used for implementation Area of Application The methodology can be used for any systems or application software development Project Partners Ankit Patel and Samir Manjure Sponsored by Indian Institute of Management Vastrapur India Supported by Project Impact under Swiss Govt and DOE India Project Guides Rama Rao Computer and Information Systems Group IIM ramarao Parekh Head Department of Computer Science University bsp Problem Definition Basic Aims To study software development methodologies To develop an application using Rumbaugh OMT approach to software development To study the approach in comparison to the earlier structural methodologies To provide design to the software to enhance its working efficiency To implement the software using an programming language Simulation Project SYNOPSIS Title BiStar Computer Network Simulation Nature of Project software project that graphically demonstrated based simulation of suggested new BiStar network topology for given set of input parameters Turbo was used for implementation Area of Application This project demonstrates the various simulation techniques applied to projects through software simulation Project Partners Ankit Patel Nihar Vaidya and Samir Manjure Project Guides Shah Department of Computer Science University acshah Problem Definition Basic Aims To study Simulation and Modelling techniques To develop software with based graphical demonstration of the computer network To study the effect of various input parameters like bandwidth transmission medium queuing nature noise in the signal average amount of data packet size link availability etc on Star as well as BiStar network topologies Also to implement the protocol of data transfer and priority decisions for normal and broadcast messages To provide the performance results in numerical as well as graphical format Computer Graphics Project SYNOPSIS Title SoftCAD Graphics Editor Nature of Project software project to develop Graphics Editor by implementing the various algorithms of Interactive Computer Graphics Borland was used for programming Area of Application toolkit for Designing and Diagrammatic Documentation in various applications Project Partners Ankit Patel and Jaydeep Solanki Project Guides Prakash Bhavsar Department of Computer Science University Problem Definition Basic Aims To study the various techniques of Interactive Computer Graphics To develop toolkit for graphics designing To provide interactive screen graphics to suit the development To provide the features of File Edit Draw Transform Color Zoom and Pan through keyboard control To implement way of storing and retrieving graphics structures in file format CourseWork Software Engineering Simulation and Modeling Computer Networks Computer Architecture Microprocessors Data Structures Computer Graphics Operating Systems Compiler Design Artificial Intelligence Parallel Processing Systems Analysis	other	cornell
1069	 Server Date Sunday GMT Sunday GMT My Husband Picture Hello My name is Sok Hwa Chang Back to Yoosun Home	other	cornell
1070	 Server Date Sunday GMT Monday GMT Ashish Jhaveri Ashish Jhaveri ashish Resume in Postscript Format Address Education Coursework Projects Experience Computer Skills Awards Address Department Address Upson Hall Floor Department of Computer Science Cornell University Ithaca Residence Address Maple Avenue Apt Ithaca NY Tel Home Education Cornell University College of Engineering Ithaca NY Master of Engineering in Computer Science May Maharashtra Institute of Technology Pune India Bachelor of Engineering in Computer Engineering with distinction July Coursework Programming Engineering Engineering Computer Networks Advanced Database Management Systems Multimedia Systems Advanced Computer Architecture Operating Systems Computer Organization Data Structures Artificial Intelligence Microprocessor Systems Unix Operating System Computer Graphics Home Projects Interface for PC Storage Device Modelling Tool Fall Created an interface for the PC to the mainframe Done at Fujitsu ICIM using Visual Basic Assembler for Spring Assembler for implemented in Payroll System Fall Implemented the Payroll System in COBOL Experience Assistant Software Engineer July July CMC Bombay India Development and Customization of Computerized Accounting of Loan Instruments with Backdated Reworking for Life Insurance Corporation of India Developed using Uniface and Ingres Home Computer Skills Languages COBOL Visual Basic Assembly Platforms RDBMS Foxpro Ingres Other Uniface Ingres SQL ESQLC HTML Awards Award for successful completion of project CALIBRE at CMC India Presented seminar on Digital Video Interactive Technology at Maharashtra Institute of Technology Pune India Trekking Cricket Music Home	other	cornell
1071	 Server Date Sunday GMT Friday GMT Fall Course Information Fall Automata and Computability Theory Course Information Table of Contents Personnel Time and Place Office Hours Sources Homework and Exams Personnel Instructors David Pearson pearson Upson Dexter Kozen kozen Upson Teaching Assistants Francis Chu fcc Upson Nikolay Mateev mateev Upson Time and Place MWF Olin MWF Snee Office Hours Kozen Upson TTh Pearson Upson MWF Chu Upson TuTh Mateev Upson MWF Sources Texts There is no required text The entire course is covered by the lecture notes which are accessible online from the course home page The notes are also available in hardcopy for from Linda Mardel Upson You may also find the following supplementary texts useful They are on reserve in the Engineering Library Carpenter Hall Hopcroft and Ullman Introduction to Automata Theory Languages and Computation Lewis and Papadimitriou Elements of the Theory of Computation Harrison Introduction to Formal Language Theory Cutland Computability Cambridge Univ Press Handouts All handouts homework sets etc will be available online They are accessible from the course home page Most of the notes are in postscript format so you will need access to postscript previewer such as ghostview or postscript printer All the printers in the undergraduate labs handle postscript Please contact us if you experience difficulties Homework sets and handouts will be posted periodically It is your responsibility to check for new postings New postings will be announced in the newsgroup Public Newsgroup public newsgroup has been created for technical discussions questions and announcements concerning and Please feel free to use this group as you would any newsgroup or bulletin board technical discussions are especially encouraged We will try to respond to questions posted to this group within one working day Homework and Exams There will be weekly homework assignments consisting of problems due Wednesday at You can pass it in in class on Wednesday morning or get it to the appropriate TA before without penalty You must pass it in to the TA not to the instructor secretary or undergrad office Slip it under his door if he not there collect them shortly after No late homework will be accepted without good excuse Please clear it with the TA in advance if possible We will have the homework graded and back to you by Friday Homework must be submitted in hardcopy form no email please Homework assignments and solutions will be available online and accessible from the course home page There will be two prelim exams and one minute cumulative final exam Exams are open book and notes The prelims final and homework will each be worth approximately third of your grade and follow roughly the same syllabus but is and goes into more depth It is meant for more theoretically inclined students grad students and undergrads bound for grad school Corrective shifting is encouraged in the first few weeks If you are not sure which course is right for you please come talk to us home page	other	cornell
1072	 Server Date Monday GMT Wednesday GMT Program Program Due Tuesday April IMPORTANT If you retrieved the version of the Program folders before or just after spring break the source code files may have been saved as SimpleText files CodeWarrior should still be able to edit these files and your program should work normally Feel free however to retrieve new version of the Program folders These folders now have the source code as CodeWarrior IDE files Click these links to retrieve the Program folders Program Folder Program Matlab Folder Spring pierce	other	cornell
1073	 Server Date Sunday GMT Wednesday GMT Report of MEng Project	other	cornell
1074	 Server Date Sunday GMT Monday GMT Courses Taken Courses that have taken or are taking now Chemistry Chem Chemistry for the Applied Sciences Computer Science CS Introduction to Computer Programming Pascal CS Modes of Algorithmic Expression Scheme CS Taste of and CS Introduction to Scientific Computation CS Discrete Structures logic and graph theory CS Introduction to Digital Systems and Computer Organization CS Introduction to Theory of Computing CS Data Structures CS Introduction to Compilers and Translators CS Practicum in Compilers and Translators CS Systems Programming and Operating Systems CS Computer Graphics and Visualization CS Practicum in Computer Graphics CS Introduction to Databases and Information Retrieval CS Practicum in Database Systems CS Foundations of Artificial Intelligence CS Practicum in Artificial Intelligence CS Introductin to Analysis of Algorithms CS Software Engineering Technology and Techniques CS Computer Science and Programming Economics Econ Introductory Microeconomics Econ Introductory Macroeconomics Econ Intermediate Microeconomic Theory Econ Intermediate Macroeconomic Theory Freshman Writing Seminars Govt Political Identity Engl Freedom of Speech Johnson Graduate School of Management NCC Marketing Management NCC Management and Organizations NCC Managerial Finance NBA Database Management NBA MIS Policy NBA Thriving on the Information Revolution Math Math semester Engineering Mathematics Math semester Engineering Mathematics Operations Research and Industrial Engineering OR IE Engineering Application of Operations Research OR IE Introduction to Engineering Probability OR IE Optimization OR IE Financial and Managerial Accounting OR IE Introduction to Statistical Theory OR IE Industrial Systems Analysis now listed as OR IE OR IE Design and Analysis of Simulated Systems Physics PHYS Physics II Electricity and Magnetism PHYS Physics III Optics Waves and Particles Engineering Electives Engrg Engineering Seminar introduction to various fields in Engineering Engrd Computerized Instrumentation and Design Engrg Technology in Western Society Physical Education ED Sailing Introduction to small boats ED Basic Rockclimbing Skills Psychology Psych Introduction to Psychology The Frontiers of Psychological Inquiry School of Hotel Administration Adm Introduction to Wines University of Pennsylvania America in the taken at University of Pennsylvania	other	cornell
1075	 Server Date Sunday GMT Monday GMT Humor Humor Dilbert The real differences between men and women ways to kill an ensign Wasted resources and missed opportunities Scientific inquiry concerning Santa Claus The Gift The joys of travel Accident reports Humor archives on the web Steve Humor Archives The Wrecked Humor Page archive	other	cornell
1076	 Server Date Sunday GMT Thursday GMT Adam Florence Athletic Interests Athletic Interests Virginia Tech Tae Kwon Do Club As an undergrad was an instructor with the Tae Kwon Do Club of Virginia Tech Water Skiing Over the summer spent almost every weekend at my aunt cabin on Lake Anna in Virginia enjoyed tubing and water skiing Here is map showing the location of the cabin got it from Vicinity free service which can generate map to any address in the country Back to my home page Last updated Oct me with comments or corrections	other	cornell
1077	 Server Date Monday GMT Friday GMT SimLab MADEFAST Home Page SimLab MADEFAST Home Page MADEFAST is an project administered with the assistance of NIST to demonstrate technology developed under the MADE program The goal is to show how the computational tools developed under MADE can be collaboratively used by MADE contractors at different sites to design and manufacture significant artifact The proposed artifact is described here and images of the components are available here The SimLab component of MADEFAST is to use the simulation and analysis tools developed under MADE to aid in the design by providing analysis of the physical behavior of the proposed artifact SimLab MADEFAST Scenario This illustrates the use of simulation and analysis tools in the design and describes some of the technical issues Other Analyses This is an illustration of how SimLab is used to define and solve heat transfer problem Participants in MADEFAST include The Stanford Center for Design Research CDR Enterprise Integration Technologies The CMU Engineering Design Research Center The University of Utah Computer Science Project The Cornell Computer Science SimLab Project	other	cornell
1078	 Server Date Monday GMT Saturday GMT CUCS General Information General Information Home Page Academic Information Other Servers About the Department General Information Disclaimers Contacts People in the Department Faculty Researchers Students Staff Directory Listing Activities Assoc CS Undergraduates CUCS Hockey Annual Report CS Department Home Page	other	cornell
1079	 Server Date Sunday GMT Wednesday GMT Query By Humming Musical Information Retrieval in an Audio Database ACM Multimedia Electronic Proceedings November San Francisco California Query By Humming Musical Information Retrieval in an Audio Database Asif Ghias Department of Computer Science Upson Hall Cornell University Ithaca NY US ghias Jonathan Logan Department of Computer Science Upson Hall Cornell University Ithaca NY US logan David Chamberlin School of Electrical Engineering Phillips Hall Cornell University Ithaca NY US chamberlin Brian Smith Department of Computer Science Upson Hall Cornell University Ithaca NY US bsmith ACM Copyright Notice Abstract The emergence of audio and video data types in databases will require new information retrieval methods adapted to the specific characteristics and needs of these data types An effective and natural way of querying musical audio database is by humming the tune of song In this paper system for querying an audio database by humming is described along with scheme for representing the melodic information in song as relative pitch changes Relevant difficulties involved with tracking pitch are enumerated along with the approach we followed and the performance results of system indicating its effectiveness are presented Table of Contents Introduction System Architecture Tracking Pitch in Hummed Queries Tracking pitch Searching the database Evaluation Robustness Performance Future directions and Related Work References Introduction Next generation databases will include image audio and video data in addition to traditional text and numerical data These data types will require query methods that are more appropriate and natural to the type of respective data For instance natural way to query an image database is to retrieve images based on operations on images or sketches supplied as input Similarly natural way of querying an audio database of songs is to hum the tune of song Such system would be useful in any multimedia database containing musical data by providing an alternative and natural way of querying One can also imagine widespread use of such system in commercial music industry music radio and TV stations music stores and even for one personal use In this paper we address the issue of how to specify hummed query and report on an efficient query execution implementation using approximate pattern matching Our approach hinges upon the observation that melodic contour defined as the sequence of relative differences in pitch between successive notes can be used to discriminate between melodies Handel indicates that melodic contour is one of the most important methods that listeners use to determine similarities between melodies We currently use an alphabet of three possible relationships between pitches and representing the situations where note is above below or the same as the previous note which can be quite robustly With the current implementation of our system we are successfully able to retrieve most songs within notes Our database currently comprises collection of all parts melody and otherwise from songs suggesting that discrimination would be useful for finding particular song among private music collection but that higher resolutions will probably be necessary for larger databases This paper is organized as follows The first section describes the architecture of the current system The second section describes what pitch is why it is important in representing the melodic contents of songs several techniques for tracking pitch we tried and discarded and the method we settled on Next we discuss pattern matching as it is used in the current implementation of the database The last two sections describe our evaluation of the current system and specify some future extensions that we are considering incorporating in the existing system System Architecture There are three main components to the our system module melody database and query engine The architecture is illustrated in Figure Operation of the system is Queries are hummed into microphone digitized and fed into module The result contour representation of the hummed melody is fed into the query engine which produces ranked list of matching melodies Figure System Architecture The database of melodies was acquired by processing public domain MIDI songs and is stored as database Pitch tracking is performed in Matlab chosen for its audio processing capabilities and the ease of testing number of algorithms within it Hummed queries may be recorded in variety of formats depending upon the audio input capabilities of Matlab We have experimented with WAV format on Pentium system and AU format on Sun Sparcstation The query engine uses an approximate pattern matching algorithm described in below in order to tolerate humming errors Tracking Pitch in Hummed Queries This section describes how user input to the system humming is converted into sequence of relative pitch transitions note in the input is classified in one of three ways note is either the same as the previous note higher than previous note or lower than the previous note Thus the input is converted into string with three letter alphabet For example the introductory theme Beethoven Symphony would be converted into the sequence the first note is ignored as it has no previous pitch To accomplish this conversion sequence of pitches in the melody must be isolated and tracked This is not as as it sounds however as there is still considerable controversy over exactly what pitch is The general concept of pitch is clear given note the pitch is the frequency that most closely matches what we hear Performing this conversion in computer can become troublesome because some intricacies of human hearing are still not understood For instance if we play the and harmonics of some fundamental frequency we actually hear the fundamental frequency not the harmonics even though the fundamental frequency is not present This phenomenon was first discovered by Schouten in some pioneer investigations carried out from to Schouten studied the pitch of periodic sound waves produced by an optical siren in which the fundamental of was canceled completely The pitch of the complex tone however was the same as that prior to the elimination of the fundamental Since we were interested in tracking pitch in humming we examined methods for automatically tracking pitch in human voice Before we can estimate the pitch of an acoustic signal we must first understand how this signal is created which requires forming model of sound production at the source The vibrations of the vocal cords in voiced sounds are caused as consequence of forces that are exerted on the laryngeal walls when air flows through the glottis the gap between the vocal cords Hess describes model of the vocal cords as proposed by Hirano For the purposes of this paper though it is sufficient to know that the glottis repeatedly opens and closes thus providing bursts of air through the vocal tract The vocal tract can be modeled as linear passive transmission system with transfer function If we add an additional transfer function which takes into account the radiation the output impedance of the vocal tract can approximately be set to zero In the neutral position where the vocal tract can be regarded as uniform tube the resonances of the vocal tract occur at sound wavelengths of With average value of length and sound propagation speed of the frequencies of these resonances will be The frequencies are called formant frequencies The resulting sound that we hear is considered to be the convolution of the excitation pulse created by the glottis and the formant frequencies Therefore if we want to model speech signal we start with train of excitation pulses as shown in figure For the formant frequencies use equation with or This gives formant frequencies Hz and Hz Combining these frequencies and adding an exponential envelope produces the formant structure shown in figure By convolving the train of excitation pulses with the formant structure we get synthesized pitch as shown in figure Figure Excitation signal used to create the synthesized pitch The period in the train of excitations is making the pitch Hz Figure Formant structure created using and as the formant frequencies Figure Synthesized pitch of created by convolving the train of excitation pulses spaced by and the formant structure Now that we have model of the human voice how can it be converted to pitch The most prevalent view on pitch is that what we hear as pitch is actually the frequency at which the bursts of air occur So if we can track those bursts of air we can find the pitch of the segment Tracking pitch We tried three methods for tracking pitch Autocorrelation Maximum Likelihood Cepstrum Analysis Autocorrelation Autocorrelation is one of the oldest of the classical pitch trackers Autocorrelation isolates and tracks the peak energy levels of the signal which is measure of the pitch Referring back to figure we see that the signal peaks where the impulses occur Therefore tracking the frequency of this peaks should give us the pitch of the signal In order to get the frequency of these peaks we can employ autocorrelation as defined by Unfortunately autocorrelation is subject to aliasing picking an integer multiple of the actual pitch and is computationally complex We found our implementation of autocorrelation to require approximately seconds for seconds of audio on pentium workstation Maximum Likelihood Maximum Likelihood is modification of Autocorrelation that increases the accuracy of the pitch and decreases the chances of aliasing Unfortunately the computational complexity of this method makes autocorrelation look blindingly fast implementation in Matlab takes approximately one hour to evaluate seconds of audio on Pentium workstation With some optimizations we improved the performance to approximately minutes per seconds of audio but this is still far too slow for our purposes Therefore we discarded this method For detailed explanation of this method the reader may refer to Cepstrum Analysis Cepstrum analysis is the definitive classical method of pitch extraction For an explanation the reader is directed to Oppenheim and Schafer original work in or in more compact form in We found that this method did not give very accurate results for humming The output of these methods can be construed as sequence of frequency estimations for successive pitches in the input We convert these estimates into contour representation by comparing each estimated pitch with the previous one In our system adjacent pitches are considered the same if they are within of each other on an musical scale but this parameter is adjustable After analyzing the costs and benefits of these methods we decided to use modified form of autocorrelation for our implementation Searching the database Having described how the user input hummed tune is converted into string in letter alphabet we now discuss our method for searching an audio database Our method of searching the database is simple Songs in the database are preprocessed to convert the melody into stream of characters and the converted user input the key is compared with all the songs The uses fuzzy search to allow for errors within the matches These errors reflect the inaccuracies in the way people hum as well as errors in the representation of the songs themselves For performing the within the database we need an efficient approximate pattern matching algorithm By approximate we mean that the algorithm should be able to take into account various forms of errors Figure summarizes the various forms of errors anticipated in typical pattern matching scheme Figure Three forms of anticipated errors with one mismatch The algorithm that we adopted for this purpose is described by and Perleberg This algorithm addresses the problem of string matching with mismatches The problem consists of finding all instances of pattern string pm in text string tn such that there are at most mismatches characters that are not the same for each instance of in When no mismatches we have the simple string matching problem solvable in time When every substring of of length qualifies as match since every character of can be mismatched Each of the errors in the figure above corresponds to It is worth mentioning that several algorithms have been developed that address the problem of approximate string matching Running times have ranged from mn for the brute force algorithm to kn or log The algorithm that we adopted offers better performance for average cases than most other algorithms The worst case for this algorithm occurs when the key consists of occurrences of single distinct character and contour representation of song consists of instances of that character In this case the running time is mn However this is neither common nor useful situation for our purposes In the average case of an alphabet in which each character is equally likely to occur the running time is where is the size of the alphabet The database incorporates the scheme using pattern matching techniques explained above We envisioned the following design goals for the database For given query the database returns list of songs ranked by how well they matched the query not just one best match The number of matches that the database should retrieve depends upon the used during the This could be set in one of two possible ways either it can be parameter or the database can itself determine this parameter based on for example by heuristics that depends on the length of the key This design gives the user an opportunity to perform queries even if the user is not sure of some notes within the tune From the results of the query the user can identify the song of interest If the list is too large the user can perform new query on restricted search list consisting of songs just retrieved consequence of this scheme is that the user can identify sets of songs that contain similar melodies Evaluation This section describes the results of an experimental evaluation of the system Our evaluation tested the tolerance of the system with respect to input errors whether from mistakes in the humming or from problems with the Robustness The effectiveness of this method is directly related to the accuracy with which pitches that are hummed can be tracked and the accuracy of the melodic information within the database Under ideal circumstances we can achieve close to accuracy tracking humming where ideal circumstances mean the user places small amount of space between each note and hits each note strongly For this purpose humming short notes is encouraged Even more ideal is for the user to aspirate the notes as much as possible perhaps going so far as to voice vowel as in haaa haaa haaa We have currently only experimented with male voices The evaluation database currently contains total of songs Each song was converted from public domain General MIDI sources Melodies from different musical genres were included including both classical and popular music few simple heuristics were used to cut down on the amount of irrelevant information from the data MIDI channel was ignored as this is reserved for percussion in the General MIDI standard However the database still contains great deal of information unrelated to the main theme of the melody Even with this limitation we discovered that sequences of pitch transitions were sufficient to discriminate of the songs As consequence of using fast approximate string matching algorithm search keys can be matched with any portion of the melody rather than just the beginning As the size of the database grows larger however this may not prove to be an advantage Performance The version of the using modified form of autocorrelation takes between and seconds on Sparc workstation to process typical sequences of hummed notes search of the database unsurprisingly shows linear growth with the size of the database but remains below seconds for songs on Sparc Therefore the search time is currently effectively limited by the efficiency of the Contour representations for each song are currently stored in separate files so opening and closing files becomes significant overhead Performance could be improved by packing all the songs into one file or by using database manager We plan to modularize our code to make it independent of any particular database schema Future directions and Related Work We plan to improve the performance and speed and robustness of the algorithm by using wavelet The cubic spline wavelet peaks at discontinuities in the signal the air impulses One of the most significant features of the wavelet analysis is that it can be computed in time Currently the pitch tracker is the slowest link in our system so using wavelets for this purpose has obvious advantages The pattern matching algorithm in its present form does not discriminate the various forms of pattern matching errors discussed earlier but only accounts for them collectively Some forms of errors may be more common than others depending upon the way people casually hum different tunes For example errors reflected as dropped notes in tunes are more common than transposition or duplication errors Tuning the so that it is more tolerant to errors for example may yield better results The melodic contours of the source songs are currently generated automatically from MIDI data which is convenient but not optimal More accuracy and less redundant information could be obtained by entering the melodic themes for particular songs by hand From research standpoint an interesting question is how to extract melodies from complex audio signals Finally we would like to characterize the improvement gained by increasing the resolution of the relative pitch differences by considering query alphabets of three five and more possible relationships between adjacent pitches Early experiments using an alphabet of five relative pitch differences same higher much higher lower much lower verified that changes of this sort are promising One drawback of introducing more resolution is that the user must be somewhat more accurate in the intervals they actually hum We will explore the various tradeoffs involved An important issue is precisely where to draw the line between notes that are little higher from the previous note and those that are much higher Previous work on efficiently searching database of melodies by humming seems to be limited Mike Hawley briefly discusses method of querying collection of melodic themes by searching for exact matches of sequences of relative pitches input by MIDI keyboard We have incorporated approximate pattern matching implementing an actual audio database of MIDI songs and most significantly by allowing queries to be hummed Kageyama and Takashima published paper on retrieving melodies using hummed melody in Japanese journal but we were unable to locate translated version Footnotes The terms vocal folds and vocal chords are more or less used as synonyms in the literature The modifications include filtering and as described in Sondhi paper which help eliminate the formant structure that generally causes difficulty for autocorrelation based pitch detectors References Ricardo and Chris Perleberg Fast and practical approximate string matching Combinatorial Pattern Matching Third Annual Symposium pages Ricardo and Gonnet Fast string matching with mismatches Information and Computation Stephen Handel Listening An Introduction to the Perception of Auditory Events The MIT Press Michael Jerome Hawley Structure out of Sound PhD thesis MIT September Wolfgang Hess Pitch Determination of Speech Signals Berlin Heidelberg Hirano Structure and vibratory behavior of the vocal folds In Sawashima and Cooper editors Dynamic aspects of speech production pages University of Tokyo Press Rabiner Dubnowski and Schafer digital hardware pitch detector IEEE Transactions on Acoustics Speech and Signal Processing Feb Kageyama and Takashima melody retrieval method with hummed melody language Japanese Transactions of the Institute of Electronics Information and Communication Engineers August Landau and Vishkin Efficient string matching with mismatches Theoretical Computer Science Oppenheim speech system based on homomorphic filtering Acoustical Society of America February Alan Oppenheim and Ronald Schafer Signal Processing Prentice Hall Englewood Cliffs NJ Plomp Aspects of tone sensation Academic Press London Sondhi New methods of pitch extraction IEEE Trans Audio Electroacoust Special Issue on Speech Communication and II June James Wise James Caprio and Thomas Parks Maximum likelihood pitch estimation IEEE Trans Acoustics Speech Signal Processing October	other	cornell
1080	 Server Date Sunday GMT Tuesday GMT Deepak Balakrishna Maple Avenue Apartment Ithaca NY gbd Education Cornell University College of Engineering Ithaca Master of Engineering in Computer Science Aug May Karnataka Regional Engineering College Surathkal India Bachelor of Engineering in Computer Science Aug May Interests To develop networked multimedia applications web server programming and to development of large software projects Course Work Programming Software Engineerin Multimedia Systems Computer Networks Advanced Database Systems Projects Multimedia Presentation Authoring Tool This tool helped an user to develop corporate presentations integrating audio video and text It was developed in Visual ver as prototype for commercial product compiler for subset of PASCAL written in An assembler for developed on simulated machine This project was implemented in fully functional text editor written in Hospital Management system developed in Foxpro Computer Languages Pascal FOTRAN BASIC assembly Proficiency Windows MS Windows Programming through MS Visual Platforms Novell Netware RDBMS Foxpro Activities Held the position of chairman of Computer Society of India Students Chapter Was involved in the organisation of several technical and cultural meets Last Modified EDT August	other	cornell
1081	 Server Date Sunday GMT Thursday GMT CS Possible Survey Topics Survey Topics for Papers You are required to survey recent research papers on particular topic and present survey of current thinking on the topic This will take the form of survey paper which you will submit This will be Postscript document preferably from LaTeX which has the format of proper paper In other words it has an introduction various sections bibliography etc You will need to present the material clearly which requires first good understanding of the subject material It is not simply matter of saying Paper says blah Paper says blah You will need to tie the two together so that reading your survey gives reader an informed insight into the topic While this may appear tough when you are doing it you will find that it helps you lot down the road There are many topics listed below There are also some topics that stem from the project list You will need to choose topic and talk with me about it will try to give you an initial paper to get started and after that you need to track down references from the library and collect more papers expect each survey to look at about papers Also it is fine if more than one person works on the same survey topic and if the people on topic discuss between themselves However each person must write an individual survey paper Query Optimization Join enumeration techniques Selectivity and cost estimation techniques View maintenance and data warehousing Data Mining Deriving association rules Classification Clustering Indexing Techniques tree structures Transaction Processing Advanced transaction models Workflow Recovery algorithms Buffer Management Replacement Algorithms Storage Management Replicated Storage vs Partitioned Storage Tertiary Storage Databases Database Security Databases and the WWW OLAP Analytical Processing Parallel Query Processing Query Processing Algorithms System Design Issues Database Systems Swizzling techniques Garbage collection Database Benchmarking Heterogeneous Databases Semantic Consistency and Schema Integration Query Processing	other	cornell
1082	 Server Date Sunday GMT Wednesday GMT the more current the more important smaller writings dan tells you that he reads too much which you already noticed some of the magazines that he reads are science news which is weekly newsmagazine of science not enough math and computer science and way too much soft science but it kind of fun utne reader bimonthly news and culture magazine its web magazine utne lens is superb lingua franca which is fine highbrow magazine for intellectuals and academics details magazine which is not instead details is the magazine that has questionable relationship with its closet it had an affair with man few months back and told one of its female friends she was kind of surprised and told it not to make any major lifestyle changes but it went to gay bar it did feel comfortable but it really liked the music and got couple phone numbers it also worried that it does look nearly trendy enough technology review is my alumni magazine from mit it also quite well done in my view the onion has become by far my favorite source for humor on the web lately it fantastic the ithaca times which is not on the web the syracuse which is one of the best papers you can get here scary huh any number of occasional readings from music to art to pornography to science to literature to theater to culture we are the music makers and we are the dreamers of dreams aphex twin dan brown snowman last updated may	other	cornell
1083	 Server Date Monday GMT Thursday GMT CS Department Research Colleagues Research Colleagues of the CS Department We have directory listing of all the people in the department giving the email address office number and phone number for each person You can find out more about individual research colleagues of the department by accessing their home pages These are the Colleagues some of whom are former students who are working with Cornell CS Faculty and Researchers and have home pages Raman Eva Tardos ORIE Faculty Wei Yuan Click here for some information on how to set up your own home page To set up pointer from here to your home page you have to edit this file yourself	other	cornell
1084	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
1085	 Server Date Monday GMT Thursday GMT Mobile Object Layer for Dynamic and Irregular Computations Mobile Object Layer for Dynamic and Irregular Computations Nikos Chrisochoides and Chris Hawblitzel The motivation for this work is the implementation of runtime support for dynamic and irregular computations The work consisted of two parts Implementing runtime library Mobile Objects to handle migration of objects from one processor to another and to handle the communication between these objects Parallelizing an adaptive mesh refinement AMR program on top of Mobile Objects and PORTS The AMR algorithm starts with uniform mesh on which pde can be solved and recursively refines areas of the mesh that need finer mesh to achieve the desired level of accuracy in the pde solution We can not tell until runtime which areas will need refining so some sort of dynamic load balancing is necessary in parallel implementation of AMR Our approach was to break up the mesh into small pieces called Grid Components and then balance the load by transferring grid components from heavily loaded processors to lightly loaded processors In contrast to approaches involving centralized decision making our system is completely decentralized No collective communication is required and processors do not have to wait for centralized decisions to be made before proceeding on with their work The AMR algorithm on grid components as follows The mesh starts out as single root grid component If any areas of this grid component need refining the root grid component spawns many smaller child grid components which have finer meshes The children can then spawn their own children recursively forming tree of grid components In order to balance the load grid components can move from one processor to another When this happens pointers between grid components must remain valid With conventional global pointers consisting of pairs if the processor or the address of an object change all global pointers to that object become invalid To deal with this we use mobile pointers which remain valid even when objects move To keep track of mobile pointers each processor has directory which it uses to hold the location of mobile objects The entries in the directory may not be current so messages can be sent out to the best guess at where the object resides and the messages will be forwarded to the true location of the object The current interface to the Mobile Objects layer is contained in Mobile pointers are implemented as structure containing the number of the processor that created the object and an index number which is unique on that processor in addition an epoch number is used to guard against stale data The members of this structure form unique name for every mobile object in the system directory consists of set of tables where each table holds information about objects originating at one processor To send message to an object specified by mobile pointer processor checks the table corresponding to the originating processor of the mobile pointer It uses the index field of the mobile pointer to look up specific entry in this table Each entry holds the processor at which the object can be located if the object is local to processor the entry also holds the local memory address of the object This entry may not be the true current location of the object but is the best guess that the processor has as to where the object resides if there is no entry in the table then the originating processor field of the mobile pointer serves as the best guess location of the object Once an entry has been looked up in the directory message can be sent to the mobile object on remote processor If it turns out that the object moved and is no longer located at the processor specified in the directory entry the message is automatically forwarded possibly multiple times to the correct destination The directory entry can later be updated with more current information so that subsequent messages sent to the mobile object go directly to the correct destination The two functions and form the core of the Mobile Objects communication interface An application can call to send out request for object from one processor to another This request invokes user handler at the remote processor which selects an object and sends the object back to the requesting processor The handler uninstalls the object from the remote processor by calling This function takes the new location of the object as an argument so that the remote processor knows where to forward incoming messages When the object arrives at the requesting processor the application installs the object with To send message to an object the application calls This sends small message to the processor that holds the object specified by mobile pointer When the message arrives user handler is invoked to perform an action using the object such as sending large reply message back The current implementation of and uses the PORTS functions and Each processor has one queue for each other processor in the system to hold incoming messages Messages data is into one of the queues at the destination processor using the PORTS function The put is followed by which invokes handler at the destination to process the message As the destination processes the incoming messages it sends replies back to free up space in the queue The communication interface is compromise in that it only handles buffering and forwarding for the small fixed sized messages sent out by An interface that also handled buffering and forwarding for large messages would be easier to use but more difficult to implement think arbitrary sized message buffering and forwarding would be worth implementing but it is beyond the scope of this project The current implementation of Mobile Objects is there are still few features that are unimplemented in this As simple example of how Mobile Objects is used small test file is provided The parallelized AMR code is contained in the directory the files are good places to look The AMR program creates one mobile object per grid component to handle the grid component data and uses one thread for each grid component to handle control The code does only the mesh refinement and tree construction no equations are solved on the mesh as it is constructed One of the most attractive aspects of the objects approach is that it is easy to experiment with different load balancing strategies in an application without drastically altering the application code The current policy is fairly simple The processors are organized in grid actually ring When the number of threads on processor drops below certain value currently the processor sends out requests to all of its neighbors asking for more grid components If processor receives request for grid components it checks its list of available grid components to see if it has any work to send out If it does it sends out the grid component whose position is the furthest towards the position of the requesting processor for instance if the the request comes from the processor on the left the leftmost grid component is sent out Timing Results Timing measurements of the AMR code were made on processors on the The following plots show how much time was spent by each processor doing useful work and how much time went into communication and thread management These measurements are shown as functions of time so that it is apparent how the balance of computation and communication change as the mesh refinement progresses The communication times shown include all overhead associated with load balancing including handler execution and packing and unpacking of objects Note you may want to make your web browser wide enough to display two plots side by side The best performance is obtained early in the computation because small objects near the root of the grid component tree quickly spawn large amounts of work for the processors processor spends relatively little time fetching these components and lot of time doing useful work on the components and the components decendants However as the computation progresses the processors spend more and more time fetching components because the components are near the bottom of the grid component tree and therefore lead to relatively little work Processors and struggle to find enough grid components to keep them busy near the end of the refinement Although the processors do have at least some work to do during most of the computation they request more work before running completely running out of threads the resultant communication overhead leads to low performance during this period of time on these two processors This communication also has an impact on processors and which must service the requests for work As the above plots show AMR is difficult to load balance because of the explosive growth of the grid component tree in unpredictable places However the above tests are somewhat of situation because they only test one part of one time step of real AMR application In an application using AMR the grid component tree is similar in structure from one time step to the next in fact it may be held fixed for several time steps so refinements are no longer completely unpredictable and load balancing can occur more gradually over many time steps In contrast to centralized algorithms that must completely redistribute the load when the mesh changes significantly an AMR implementation based on threads and moving objects should be able to incrementally balance the load preserving data locality and holding down communication costs While we have not implemented this yet the tools built here should provide an easy platform on which to construct full AMR application	other	cornell
1086	 Server Date Sunday GMT Thursday GMT Hometowns of Koichi Kamijo My hometowns First of all came from Japan Sapporo Hokkaido This is where was born Sapporo is located at the north part of Japan It is as cold and as snowy as Ithaca Winter Olympic was held here in We can get fresh seafood such as clab delicious Ramen noodle and delicious corn We have snow festival in February Nagoya Aichi This is where spent my life as junior school student Nagoya is very hot and humid Nagoya castle is very famous Uiro Japanese cake Kishimen flat noodle and udon miso noodle are my favorite Nakano Tokyo This is where spent my life as junior high school high school and university freshman only student It is close to center of Tokyo One of the famous buildings here is Nakano Sun Plaza triangle building Tetsugakudo park is beautiful park Tokorozawa Saitama This is where spent my life as university student and where my parents live We have many cool spots such as Seibu stadium of course Seibu fan and Kikusui Tei and Blue Berry are very nice restaurants from which we can see beautiful and sometimes Mt Fuji It is north west of Tokyo to hr Machida Yamato Kanagawa This is where lived since joined IBM Japan My office is in Yamato It is south west of Tokyo and also close to Yokohama hr Boca Raton FL USA This is where stayed for months on business trip to IBM Boca Raton It is paradise It is summer all the year It is close to beaches Walt Disney World hrs Miami and Miami Beach hr Key West hrs Daytona Beach hrs Kennedy Space Center hrs and St Petersburg hrs Ithaca NY USA This is where live now It is nice rural place hrs north west from New York City It often reminds me of Hokkaido in Japan We can concentrate on studying because we have no temptation such as Karaoke Mahjong bar etc It is also close to Niagara Fall hrs and Toronto hrs Cayuga lake is also nice Here is picture taken at Cayuga lake Anyway love Ithaca	other	cornell
1087	 Server Date Monday GMT Monday GMT Nuprl Automated Reasoning Project Documentation Nuprl Automated Reasoning Project Documentation Documents Available Nuprl Reference Manual and User Guide Nuprl Tutorial Implementing Mathematics with the Nuprl Proof Development System Return to Main Index Nuprl Project nuprl	other	cornell
1088	 Server Date Sunday GMT Saturday GMT Induprakas Bookmarks Induprakas Bookmarks Research Conference Announcements Computer Science DAGH Infrastructure for Parallel Adaptive Techniques Distributed Shared Memory Home Pages Eduard Ayguade Home Page MCRC Technical Reports Naraig Manjikian Home Page OTIS SYNERGY collab projects Pointers to Thread Programming Info Random IRISA techreports Compilers Interpreters Archive The Collection of Computer Science Bibliographies The MOSIX Multicomputer System Threads Newspapers and Magazines All India Radio Electronic Telegraph Indian Express Home Page The New York Times on the Web Welcome to Times Newspapers Internet Space stuff Banned Books Bay Area Restaurant Guide Index of All ST TNG Episodes Snoopy Dog House The Gallery The Dilbert Zone The Solar System VRweb Worldwide WWW Information Yahoo Business and Economy Companies Music CDs Records and Tapes Conferences CFPs and CFPs ACM International Conference on Supercomputing ACM Symposium PLDI Call for papers CANPC Call for Papers ACM Int Conference on Supercomputing Supercomputing and Parallel Computing Conferences and Journals The Compiler Connection Odds and ends New Cars Trucks Online NEVER PAY RETAIL Crossword Hamilton Wholesale Catalog HTML Documentation Table of Contents Index of Pixelsite Pixelsight Home Slate Welcome To The Tcl Plugin Yahoo Business and Economy Companies Books Computer Books Job hunting oppertunities Welcome to JOBTRAK Social Cornell Outing Club Raise money for CRY via voice recognition research with Pure Speech Sports CricInfo EMPICS Sports Photo Agency Home Page International Test Cricket Kelly Broadcasting Systems Skydive WWW SportsLine USA NBA Basketball The Tennis Server Homepage Teaching and related stuff CS Berkeley Home Page Summer Home Page Gamelan Earthweb Java Directory Java Packages Operating Systems subject at University of Canberra The BookWire Index Publishers The Java Tutorial Michael Bove Jr Things that make life hard CTD Cubital Tunnel Syndrome FindADoc Page Taxing Times The Department of the Treasury Internal Revenue Service	other	cornell
1089	 Server Date Monday GMT Tuesday GMT Cornell CS Modeling and Simulation Project Staff Faculty Students and Staff This document contains pointers to documents providing general information on the members of the Cornell Computer Science Modeling and Simulation Group Bob Constable Professor PI Paul Chew Senior Research Associate Richard Zippel Senior Research Associate Paul Jackson Research Associate Todd Wilson Research Associate Dawson Dean Graduate Student Scott Mardis Graduate Student	other	cornell
1090	 Server Date Monday GMT Friday GMT CS Fall Lecture Lecture Union Find Part homepage Page Page Page Page Page	other	cornell
1091	 Server Date Monday GMT Wednesday GMT Computer Algebra Computer Algebra Richard Zippel Research Summary Currently my activities in computer algebra fall into three different areas We are continuing to develop very flexible computer algebra substrate called Weyl which extends Common Lisp to have symbolic computing facilities This substrate has functorial architecture that has been implemented using object oriented programming techniques The functorial organization allows one to define algebraic structures over arbitrary algebraic domains This approach permits algebraic structures like groups rings and fields to be first class objects that can be manipulated by the user We have been attempting to link together Weyl with Bob theorem proving system Nuprl This will allow us state and use theorem about algebraic structures when deciding which algorithms should be used Weyl In additon have been continuing my work on algorithms in computer algebra Among the problems have been studying include algebraic function decomposition with Dexter Kozen and Susan Landau and primality testing of polynomials Publications Effective Polynomial Computation Kluwer Academic Publishers New Modular Interpolation Algorithm for Factoring Multivariate Polynomials with Ronitt Rubinfeld Cornell Computer Science Technical Report Rational Function Decomposition Proceedings of the International Symposium on Symbolic and Algebraic Computation Bonn Germany July Tech Report Weyl Computer Algebra Substrate Design and Implementation of Symbolic Computation Systems Lecture Notes in Computer Science pp Tech Report Interpolating polynomials from their values Journal of Symbolic Computation vol Tech Report An Explicit Separation of Relativised Random Polynomial Time and Relativized Deterministic Polynomial Time Information Processing Letters vol pp Tech Report Polynomial Decomposition Algorithms with David Barton Journal of Symbolic Computation vol Simplification of expressions involving radicals Journal of Symbolic Computation vol An Extension of Liouville Theorem with Joel Moses Proceedings of EUROSAM Lecture Notes in Computer Science	other	cornell
1092	 Server Date Monday GMT Sunday GMT Nuprl Project Related Publications Nuprl Project Related Web Sites AltaVista tm Search Paul Jackson Nuprl Page Nuprl Project Online Papers There are several formats used to present the papers accessible here HTML hypertext version created using PostScript downloadable PostScript version created using dvips NCSTRL pointer into the Networked Computer Science Technical Reports Library Collaborative Mathematics Environments HTML PostScript Constable Experience Using Type Theory as Foundation for Computer Science circa HTML Constable Semantics of Evidence HTML NCSTRL Constable The Value of Automated Deductions HTML Forester Formalizing Constructive Real Analysis HTML NCSTRL PostScript Nuprl Project Related Publications Published Papers and Chapters of Books Aagaard Mark and Leeser Miriam Verifying Logic Synthesis Tool in Nuprl Proceedings of Workshop on Verification Editor Gregor Bochmann and David Probst Publisher pp To appear by Allen Stuart and Robert Constable and Douglas Howe and Willaim Aitken The Semantics of Reflected Proof Proc of Fifth Symp on Logic in Comp Sci IEEE pp Allen Stuart Definition of Types Proc of Second Symp on Logic in Comp Sci IEEE June pp Allen Stuart semantics for language Cornell University Basin David Extracting circuits from constructive proofs Dept of Artificial Intelligence Edinburgh Research Paper Also appeared in Proc of the Int Workshop on Form al Methods in VLSI Design Miami USA Basin David and Douglas Some Normalization Properties of Type Theory and Applications Theoretical Aspects of Computer Software Int Conf TACS Lecture Notes in Computer Science Vol pp Basin and Brown and Leeser Formally Verified Synthesis of Combinational Circuits Integration The International Journal of VLSI Design pp Basin and Constable Metalogical Frameworks Proc of the Second Annual Workshop on Logical Frameworks Edinburgh UK June Basin David Building Problem Solving Environments in Constructive Type Theory Cornell University Basin and Del Vecchio Hardware Specification Verification and Synthesis Hardware Specification Verification and Synthesis Mathematical Aspects Lecture Notes in Computer Science Vol pp Basin David Building Theories in Nuprl Proc of Logic at Botik Lecture Notes in Computer Science Vol pp USSR Cornell TR Basin David An environment for automated reasoning about partial functions International Conference on Automated Deduction Lecture Notes in Computer Science Vol pp NY Bates and Robert Constable Proofs as programs ACM Trans Program Lang and pp Bundy and van Harmelen and Horn and Smaill The system International Conference on Automated Design Lecture Notes in Artificial Intelligence Vol Stickel Editor pp Chen Theorem Proving and Forward Chaining Eleventh International Conference on Automated Deduction Lecture Notes in Vol Kapur Editor pp Chirimar and Douglas Implementing Constructive Real Analysis Preliminary Report Symposium on Constructivity in Computer Science Robert Constable Exporting and reflecting abstract constructive Lecture Notes in Artificial Intelligence Alan Bundy Editor International Conference on Automated Deduction Robert Constable Expressing computational complexity in constructive type theory Proceedings Lecture Notes in Computer Science pp Robert Constable Using Reflection to Explain and Enhance Type Theory Proof and Computation NATO ASI Series Constable Robert and Paul Jackson Towards Integrated Systems for Symbolic Algebra and Formal Constructive Mathematics To Constable Robert and Scott Smith Computational Foundations of Basic Recursive Function Theory Theoretical Computer Science Logic semantics and theory of programming pp Constable Robert Formal Theories and Software Systems Fundamental Connections between Computer Science and Logic Future Tendencies in Computer Science Control and Applied Mathematics Lecture Notes in Computer Science Vol December Bensoussan and Verjus Editors pp Constable Robert Metalevel Programming in Constructive Type Theory Programming and Mathematical Method NATO ASI Series Vol Broy Manfred Editor pp Constable Robert Lectures on Classical Proofs as Programs Constructive Methods of Computing Science NATO ASI Series Broy Editor Constable Robert and Chetan Murthy Finding Computational Content from Classical Proofs Logical Frameworks Cambridge University Press Gerard Huet and Gordon Plotkin Editors pp Constable Robert Type Theory as Foundation for Computer Science Theoretical Aspects of Computer Software Int Conf TACS Lecture Notes in Computer Science Vol pp Constable Robert and Stuart Allen and Douglas Howe Reflecting the Computation System of Constructive Type Theory Logic Algebra and Computation NATO ASI Series Vol Schwichtenberg Editor Robert Constable and Douglas Howe Implementing Metamathematics as an Approach to Automatic Theorem Proving Formal Techniques in Artificial Intelligence Source Book Elsevier Science Publishers Banerji Editor pp Constable Robert and Douglas Howe Nuprl as General Logic Logic in Computer Science Academic Press Odifreddi Editor pp Cornell TR Constable Robert Assigning Meaning to Proofs semantic basis for problem solving environments Constructive Methods of Computing Science NATO ASI Series Vol Broy Editor pp Constable Robert and Scott Smith Computational Foundations of Basic Recursive Function Theory Third Symp on Logic in Comp IEEE Edinburgh UK pp Cornell TR Constable Robert and Stuart Allen and Bromley and Cleaveland and Cremer and Harper and Douglas Howe and Knoblock and Mendler and Panangaden and James Sasaki and Scott Smith Implementing Mathematics with the Nuprl Development System NJ Constable Robert and Mendler Recursive Definitions in Type Theory Proc of Logics of Prog pp January Cornell TR Constable Robert Constructive Mathematics as programming logic some principles of theory Annals of Mathematics Vol Elsevier Science Publishers Reprinted from Topics in the Theory of Computation Selected Papers of the Intnl Conf on Foundations of Computation Theory FCT Constable Robert and Knoblock and Bates Writing programs that construct proofs Automated Reasoning pp Constable Robert and Michael Programming Logic Winthrop Mass Constable Robert Constructive mathematics and automatic program writers Proc IFIP Ljubljana pp Giunchiglia and Smaill Reflection in constrcutive and automated reasoning in Logic Programming MIT Press Abramson and Rogers Editors pp Horn The Nuprl proof development system Dept of Artificial Intelligence Edinburgh Working paper Howe Douglas Stoller Scott An operational approach to combining classical set theory and functional programming languages International Symposium TACS Lecture Notes in Computer Science Goos and Hartmanis Editors pp Howe Douglas Reasoning About Functional Programs in Nuprl Functional Programming Concurrency Simulation and Automated Reasoning Lecture Notes in Computer Science To appear Howe Douglas Simple Type Theory for Reasoning about Functional Programs Computer Science Department Cornell Univeristy Pre print Howe Douglas Equality in Lazy Computation Systems Proc of Fourth Symp on Logic in Comp IEEE Computer Society pp Howe Douglas Computational Metatheory in Nuprl International Conference on Automated Deduction Lecture Notes in Computer Science Vol Lusk and Overbeek Editors pp New York Howe Douglas Automating Reasoning in an Implementation of Constructive Type Theory Cornell University Howe Douglas Implementing Number Theory An Experiment with Nuprl International Conference on Automated Deduction Lecture Notes in Computer Science Vol pp Howe Douglas The Computational Behaviour of Girard Paradox Proc of Second Symp on Logic in Comp Sci IEEE pp Jackson Paul and Robert Constable Type Theory for Computer Algebra In preparation Paul Jackson Enhancing the Nuprl Proof Development System and Applying it to Computational Abstract Algebra Cornell University Ithaca NY Paul The Nuprl Proof Development System Version Reference Manual and User Guide Cornell University Ithaca NY Paul Jackson Exploring Abstract Algebra in Constructive Type Theory Conference on Automated Deduction Bundy Editor New York Jackson Paul Developing toolkit for hardware in the Nuprl proof development system Advanced Research Workshop on Correct Hardware Design Methodologies pp Organized by ESPRIT Turin Italy June Jackson Paul Nuprl and its Use in Circuit Design Proceedings of the IFIP International Conference on Theorem Provers in Circuit Design Theory Practice and Experience Stavridou Melham and Boute Editors pp The Netherlands Paul Jackson Knowledge Representation MIT Press Cambridge MA Knoblock Ted Mathematical Extensibility in Type Theory Cornell University Knoblock Ted and Robert Constable Formalized Metareasoning in Type Theory Proc of the First Symp on Logic in Comp pp IEEE Kreitz Charles Constructive Automata Theory Implemented with the Nuprl Proof Development System Cornell University Ithaca New York Kreitz Charles Deriving Programs that Develop Programs Technical University of Darmstadt November John Miriam Leester Jason Hickey and Mark Aagaard Integer Square Root Case Study in Design by Principled Optimization International Conference on Theorem Proving Circuit Design Leeser Miriam Using Nuprl for the verification and synthesis of hardware Phil Trans Soc pp Madden Automatic program optimization via the transformation of Nuprl synthesis proofs Proc of the Alvey Technical Clarke Editor Also available from Edinburgh as DAI Research Paper No Mendler Recursive Types and Type Constraints in Lambda Calculus Proc of Second Symp on Logic in Comp Sci IEEE pp Mendler Inductive Definition in Type Theory Cornell University Ithaca NY Mendler Robert and Panangaden Infinite Objects in Type Theory Proc of First Symp on Logic in Comp Sci IEEE pp Cornell TR Murthy Chetan computational analysis of Girard translation and LC Proc of Seventh Symp on Logic in Comp Murthy Chetan An Evaluation Semantics for Classical Proofs Proc of Sixth Symp on Logic in Comp pp IEEE Amsterdam The Netherlands Russell and Chetan Murthy Direct Constructive Proof of Higman Lemma pp Proc of Fifth Symp on Logic in Comp IEEE Murthy Chetan Extracting Constructive Content for Classical Proofs Cornell University Dept of Computer Science TR Sasaki James The Extraction and Optimization of Programs from Constructive Proofs Cornell University Smith Scott and Robert Constable Partial objects in constructive type theory Proc of Second Symp on Logic in Comp IEEE Washington pp Smith Scott Partial Objects in Type Theory Cornell University Ithaca NY Underwood Aspects of the Computational Content of Proofs Cornell University Ithaca NY Cornell Underwood Judith The Tableau Algorithm for Intuitionistic Propositional Calculus as Constructive Completeness Proof Proceedings of the Workshop on Theorem Proving with Analytic Tableaux Marseille France pp Available as Technical Report fur Informatik Saarbrucken Germany Underwood Judith Constructive Completeness Proof for the Intuitionistic Propositional Calculus Cornell University Cornell Research Papers Coming soon at your browser Research Notes Coming soon at your browser Return to Main Index Nuprl Project nuprl	other	cornell
1093	 Server Date Sunday GMT Monday GMT Karl Crary papers Papers Unified Framework for Modules and Objects and Its Application to Programming Language Design Extended Abstract Abstract DVI Postscript Foundations for the Implementation of Subtyping Extended Abstract Abstract DVI Postscript Semantic Reconciliation of Subtyping by Inclusion and Coercion Preliminary Draft Coming soon	other	cornell
1094	 Server Date Monday GMT Tuesday GMT Homework Homework Handed out Tue Feb Due Thu Mar This assignment must be done in groups of two with different partner than homework or in one solution per group printed not manuscript Heat diffusion this time using MPI Rewrite your heat diffusion simulation using MPI Alternatively you may develop any similar application using MPI Compare the ease of programming as well as the performance of the two implementations It might be nice to divide the running time up into communication time and computation time if possible and use these timings to compare the two implementations	other	cornell
1095	 Server Date Monday GMT Monday GMT Fall Course Materials Fall Foundations of Artificial Intelligence Course Materials Handouts Lecture Notes Homeworks and Solutions Handouts and Project Information Lisp Labs Presentation Schedule Handouts Tentative Course Syllabus last modified Lecture Notes Introduction to AI Sep Defining Artificial Intelligence Sep Knowledge Representation Semantic Networks and Frames as Search Sep State Space Search Iterative Deepening Sep Heuristic Search simulated annealing Sep Heuristic Search beam search search Sep Optimal Search Sep Adversarial Search Sep Pruning Reasoning Sep History of Components of Systems Sep NO CLASS Sep Algorithms for Forward and Backward Chaining Sep NO CLASS Sep Conflict Resolution Expert Systems Machine Learning Oct Introduction to Machine Learning Oct Learning Decision Tree Induction Oct Learning as Search Oct FALL BREAK Oct The Version Space Algorithm Oct Neural Nets backprop Oct Neural Nets II Intro to Genetic Algorithms Oct Genetic Algorithms Oct MIDTERM Knowledge Representation and Inference Oct Representing Knowledge in Logic Oct Inference in Logic Oct Resolution Theorem Proving Oct Logical Reasoning Systems Planning Nov Planning Introduction Nov Planning Nov Hierarchical Decomposition Uncertain Knowledge and Reasoning Nov Abduction and Bayes Rule Nov Belief Networks Nov Constructing Belief Networks Nov Inference in Belief Networks Natural Language Understanding Nov Ambiguity in Language Stages of Processing Nov Syntactic Analysis as Search Nov NO CLASS Nov THANKSGIVING BREAK Nov Chart Parser Nov Semantic Analysis Conceptual Analysis Dec Conceptual Analyzers Today CIRCUS The Problem of Inference Dec Inference and Scripts Putting It All Together Dec NLP and Learning and Planning and Selected Project Presentations Dec Selected Project Presentations Homeworks and Solutions This section intentionally left blank Handouts and Project Information Course Syllabus and Project Information Project Ideas and Proposal Format Project what where when etc Examples of code with good procedural and data abstraction as well as good consistent indentation Courtesy of Ed Wayt and Oumi Mehrotra Getting Started with the Project It will be easier if you write your code in stages As result you have to turn in your code for review regularly whether or not it running of your final grade is based on these intermediate code reviews Here is how suggest working on the code If for some reason you think that your particular project does fit well into the structure below let me know and we create personalized schedule that does First think about the major modules that your project requires and the knowledge structures rules state descriptions board representations that need including any related constructor functions and accessor functions as described by Winston in our main text Implement the modules as stubs lisp functions that have no substantive code but that specify all of the necessary parameters and that make calls to the appropriate module stubs Write the code to implement your generic knowledge structures completed for code review Oct Get the system running from beginning to end as soon as possible just on simple example This will invariably require making many simplifying assumptions completed for code review Nov Design and implement the inference engine or control strategies needed for your system specific search strategy rule interpreter move generator learning algorithm completed for code review Nov Incrementally remove the simplifying assumptions by adding the necessary code Evaluate the system appropriately by project end Common Lisp The Language Guy Steele Common Lisp Resouces from CMU AI Repository including the Lisp FAQ Lisp Labs Lab Sep Lists taking lists apart firing up Lisp due Sep Lab Sep More primitives loop procedures due Sep Lab solution Shows how to declare global variables example of reasonable indentation and documentation Lab Sep Conditionals recursion procedural abstraction due Sep Lab solution Example of reasonable indentation Lab Oct Data abstraction mapping iteration due Oct Lab Oct debugging structures CLOS due Oct Return to home page	other	cornell
1096	 Server Date Monday GMT Thursday GMT Multithreading Multithreading Objectives maximize utilization of multiprocessor resources CPU memory network etc simplify implementation of load balancing policies Idea Exploit concurrency in the uniprocessor level Implementation use multiple threads of control per processor Swap out blocked threads in order to maximize utilization of multiprocessor resources CPU memory network etc Assign at priorities to threads in order to simplify implementation of load balancing policies For more information contact Nikos Chrisochoides	other	cornell
1097	 Server Date Sunday GMT Friday GMT Classes and papers of Koichi Kamijo Classes and papers Fall Classes Operating Systems Automata and Computability Theory Multimedia Systems Project Image Processing Experiment using KLT Linear Systems Spring Classes Computer Graphics Practical Distributed Computing Machine Vision Project Neuron Edge Detection still being updated Project My advisor is Zabih Project still on going	other	cornell
1098	 Server Date Sunday GMT Friday GMT My Resume Mishaal Almashan Objective Education Coursework Research Experiance Current Address Fairview Square Apt Ithaca NY email mishaal URL http Objective To obtain an entry level position in company involved in the computer industry specializing in computer networks computer graphics or computer hardware in general am interested in numerous fields including multimedia applications and operating system development Education Cornell University Ithaca NY Master of Engineering Computer Science Expected date of graduation May Worcester Polytechnic Institute Worcester MA Double Major Major Bachelor of Science Electrical Engineering Concentration Computer and Electronics Engineering Major Bachelor of Science Computer Science Concentration Hardware Orientation Scientific Applications Graduation Date May with honors Cumulative GPA Concentration GPA Coursework Machine Organization Assembly VLSI II Software Engineering Techniques of Analysis of Algorithms Numerical Analysis Computer ArchitectureLogic CircuitsComputer Graphics Finite Automata Graduate level Computer NetworksMultimedia Artificial IntelligenceOperating Systems March Interactive Qualifying Project Virtual Reality in Education study of the possible application of virtual reality as an aid to students An examination of practical and theoretical applications was presented Built virtual reality unit as demonstration to students part of two member team Grade received May Major Qualifying Project Electrical Engineering Micromouse III The Theseus Project Design and implement sensor system for an autonomous robot designed to solve maze in competition The system was based on detectors and to determine the position of the robot The design had to be small yet efficient enough to be reliable Since the project was made up of six students this was very useful opportunity to learn how to cooperate in group and was an aid to understanding intercommunication in project part of six member team Grade received May Major Qualifying Project Computer Science Micromouse III The Theseus Project continuation of the above project Continue to integrate the different parts of the project by redesigning the software that was developed in Assembly and Extensive testing and debugging of the robot was required to achieve competitive Micromouse Grade received Fall Masters of Engineering Research Optimal Video Transmission This project will improve upon an existing prioritization algorithm for video transmission The object is to determine which frames of video sequence to drop so as to optimize perceptual continuity of the received sequence The algorithm will be modified to take the rate of motion into account when prioritizing frames for transmission so that frames with more motion are less likely to be dropped The results would probably be published to complement the paper already published discussing the optimal frame prioritization An extension to an existing contenious media playback system will also be implemented Still ongoing Experience Summer Aerated Concrete Industries Kuwait City Kuwait Junior Engineer Developed transactional budget program to organize daily financial transactions At the end of the summary report is automatically generated for the user Enhanced AutoCAD functions to include specialized tools for the design team to use These functions were developed using LISP and incorporated into AutoCAD Programming Languages Assembly HTML LISP Scheme Operating Systems UNIX Windows AmigaOS Member of Upsilon Pi Epsilon national computer science honor society Graduated with honors Worcester Polytechnic Institute Worcester MA Outstanding Achievement Award Ministry of Higher Education Kuwait Member Boston Computer Society Active member in BCS Virtual Reality Group Traveling Europe Middle East US Mexico Languages Arabic fluent English fluent French not fluent Water and snow skiing Last Modified EST January	other	cornell
1099	 Date Sun Nov GMT Server Tue Aug GMT Advnaced DX topics Workshop on Advanced Topics in High Performance Computing August Data Explorer for Scientific Visualization Vis Introduction Examples Recent VIS Projects Molecular graphics workshop Development Virtual Reality WorkSpace WorkSpace example VPLA Software Data Explorer Attempts to launch DX requires some hacks RenderMan Data Explorer Introduction training materials Applications rendering Generic VIS application VR module Shadow generation An DX stereo Image module Chemistry Suite DX program which uses some of the modules and its output Other Macros Utilities DX to VRML DX to MPEG DX to RenderMan RIB DX to Abekas recorder Teaching Computer Science Student animation Student projects	other	cornell
1100	 Server Date Sunday GMT Friday GMT Computer Science Technical Report Project NCSTRL Documentation The project is an ARPA sponsored project to make technical reports from the nations top computer science departments accessible over the Internet and for research on aspects of storage search retrieval and display of information in the Digital Library For further information see the home page at CNRI Up to Main Information Menu NCSTRL Documentation Any comments or questions Contact us at help	other	cornell
1101	 Server Date Sunday GMT Tuesday GMT The Chains Programming Language The programming language is computer language whose basic data structures and operations are based on mathematical objects such as vertices cells cell complexes chains cochains and operators such as boundary and coboundary Together these data types provide the ability to represent geometric shape or other topological structure with an algebraic formula Once topological or geometric structure is expressed algebraically it becomes possible to operate on geometry and topology with rigorously defined algebraic operations which in turn makes it possible to systematically compute topological and geometric quantities and properties Here is an example of complex chain and their algebraic and graphical representations About the logo Quotation Chains theme song second audio What New Applications of the Lanugage Multiple Domain Physical Simulation has been used to create combined solid simulator An animation of one run of the combined simulator showing the coupled nature of the interactions how the fluid pressure deflects the elastic solid which in turn provides modified fluid volume Finite elements Cornell CS postscript version describes the use of as language for FEM The article presents two page formal specification of an FEM formulation of plane stress using quadratic shape functions defined over triangles This program corresponds closely to textbook derivation and yet is efficiently executable Communication and standardization Parallel and distributed computation see Scientific computing and visualization The language formalizes the relationship between geometry form and physical behavior function which is fundamental to most engineering activities has applications in computer aided design CAD scientific computing and distributed and parallel computation An programming language is computer language that has objects such as vertices simplexes complexes and chains as it basic data types The power of lies in the ability to write an expression that has an evaluable topological or geometric semantics This provides the ability to program at much higher semantic level The relationship between the language and is similar to that between the MATLAB language and matrix algebra or between CSG and geometry Rick Palmer rick	other	cornell
1102	 Server Date Monday GMT Monday GMT QMG project QMG mesh generation and related software The QMG package does finite element mesh generation in two and three dimensions The package includes geometric modeling software the mesh generator itself and finite element solver The software is written primarily in and matlab The QMG package is written by Vavasis The mesh generator is based on an algorithm due to Mitchell and Vavasis Please select topic from the following list An overview and example of the QMG package Installation instructions Geometric objects and datatypes The mesh generator The finite element package Reference on each command Future expansion plans Several people provided very useful advice to the author in the development QMG please see the acknowledgements This documentation is written by Stephen Vavasis and is copyright by Cornell University Permission to reproduce this documentation is granted provided this notice remains attached There is no warranty of any kind on this software or its documentation See the accompanying file for full statement of the copyright Back to Vavasis home page vavasis Exp Stephen Vavasis Computer Science Department Cornell University Ithaca NY vavasis	other	cornell
1103	 Server Date Sunday GMT Thursday GMT Jose Luis Fernandez Home Page ResumeJose Luis Fernandez Download PostScript copy of this Resume INDEX Education Undergraduate Projects Graduate Courses Relevant Experience Computer Skills Scholarships Activities Interests Hobbies Education May Cornell University Ithaca NY Master of Engineering in Computer Science Universidad de Cantabria Santander SPAIN Bachelor in Physics Electronic Specialty five year courses Position in the ranking of Number Undergraduate Projects Programmed complex database software in TURBO PASCAL Designed and implemented new algorithms to calculate the Quick Cosine Transform in UNIX Designed and constructed hardware and drivers for the processor Designed VLSI Circuits using Graduate Projects Multimedia Transitions and Special Effects for RIVL Operating Systems Design and coding of complex basic operating system Software Engineering Pyramania Action Space Adventure Computer Game Relevant Experience Beta Tester Certified Systems Engineer Apr Consultant Engineer INFOSTRAT Madrid SPAIN Participated in the design new Network Architecture for the Company TV one of the most important TV companies in Spain based on Windows NT Apr Junior Consultant Engineer INFOSTRAT Madrid SPAIN Participated in the implementation of Network Architecture based in Windows NT for the Daily El SPAIN Jul Second Lieutenant Spanish Air Forces Air Force Head Quarters Las Palmas Canary Islands Military Service responsible for Computer Systems at the Laboratory of Calibration of Measurement Equipment Air Forces Head Quarters Canary Islands Second Lieutenant Spanish Air Forces Academy of the Air Forces Granada SPAIN Course taken to achieve the grade of Second Lieutenant Computer Skills MS DOS UNIX Windows Windows Windows NT Pascal Assembler Visual Basic MS Word MS Excel Scholarships Scholarship from la Caixa for Graduate Studies at Cornell University Scholarship from to study at University of Cantabria Activities Interests Took seven year courses in piano Took seven year courses in violin First Violin in various Student Chamber Orchestras Karate up to blue belt German one year course Hobbies Photography Click to view some of my pictures Music Computers Writing and directing crazy movies with my Video and some actors recruited from my friends Back to my Home Page	other	cornell
1104	 Server Date Monday GMT Sunday GMT Communication over ATM Networks using Active Messages Communication over ATM Networks using Active Messages Thorsten von Eicken Veena Avula Anindya Basu and Vineet Buch Department of Computer Science Cornell University Ithaca Abstract Recent developments in communication architectures for parallel machines have made significant progress and reduced the communication overheads and latencies by over an order of magnitude as compared to earlier proposals This paper examines whether these techniques can carry over to clusters of workstations connected by an ATM network even though clusters use standard operating system software are equipped with network interfaces optimized for stream communication do not allow direct protected access to the network and use networks without reliable transmission or flow control In first part this paper describes the differences in communication characteristics between clusters of workstations built from standard hardware and software components and multiprocessors The lack of flow control and of operating system coordination affects the communication layer design significantly and requires larger buffers at each end than on multiprocessors second part evaluates prototype implementation of the Active Messages communication model on Sun workstation cluster interconnected by an ATM network Measurements show latencies of about microseconds for small messages which is roughly comparable to the Active Messages implementation on the Thinking Machines multiprocessor Table of Contents Introduction Technical Issues SSAM SPARCstation Active Messages Prototype Comparison to other approaches Conclusions Bibliography Introduction The shift from slow local area networks to high bandwidth switched network architectures is making the use of clusters of workstations as platforms for parallel processing more and more attractive While number of software packages already support parallel processing on today workstations and networks the communication performance is over two orders of magnitude inferior to art multiprocessors As result only embarassingly parallel applications parallel applications that essentially never communicate can make use of such environments Networking technologies such as ATM offer the opportunity to close the gap for example ATM cells are roughly the same size as messages on multiprocessors it takes only few microseconds to send or receive cell ATM switches can be configured to From purely technical point of view the gap between clusters of workstations and multiprocessors is certainly closing and the distinction between the two types of systems is becoming blurred Differences remain in particular the design and construction of multiprocessors allows better integration of all the components because they can be designed to fit together In addition the sharing of physical components such as power supplies cooling and cabinets has the potential to reduce cost and to allow denser packaging While the debate over the significance of these technological differences is still open it is becoming clear that the two approaches will yield qualitatively similar hardware systems Indeed it is possible to take cluster of workstations and load system software making it look almost identical to multiprocessor This means that continuous spectrum of platforms spanning the entire range from workstations on an Ethernet to multiprocessors can become available and tha From pragmatic point of view however significant differences are likely to remain The most important attraction in using cluster of workstations instead of multiprocessor lies in the availability of all its major hardware and software components This means that all the components are readily available they are familiar and their cost is lower because of economies of scale leveraged across the entire workstation user community Thus even if from technical point of view there is continuous spectrum between clusters and multiprocessors the use of components in clusters will maintain differences In fact the use of standard components in clusters raises the question whether these can be reasonably used for parallel processing Recent advances in multiprocessor communication performance are principally due to tighter integration of programming models compilers operating system functions and hardware primitives It is not clear whether these advances can be carried over to clusters or whether the use of standard components is squarely at odds with achieving the level of integration required to enable modern parallel programming models Specifically new communication architectures such as distributed shared memory explicit remote memory access and Active Messages reduced the costs from hundreds to thousands of microseconds to just few dozen precisely through the integration of all system components These new communication architectures are designed such that network interfaces can implement common primitives directly in hardware they allow the operating system to be moved out of the critica This paper examines whether the techniques developed to improve communication performance in multiprocessors in particular Active Messages can be carried over to clusters of workstations with standard networks and mostly standard system software This paper assumes the current state of the art technology in which clusters using ATM networks differ from multiprocessors in three major aspects clusters use standard operating system software which implies less coordination among individual nodes in particular with respect to process scheduling and address translation ATM networks do not provide the reliable delivery and flow control that are taken for granted in multiprocessor networks and network interfaces for workstations optimize stream communication and are less well integrated into the overall architecture connect to the bus instead of the memory bus In comparing communication on clusters and multiprocessors this paper makes two major contributions first it analyzes in Section the implications that the differences between clusters and multiprocessors have on the design of communication layers similar to those used in multiprocessors and second it describes in Section the design of an Active Messages prototype implementation on collection of Sun workstations interconnected by an ATM network which yields latencies on the order of The use of Active Messages in workstation clusters is briefly contrasted to other approaches in Section and Section concludes the paper Technical Issues Collections of workstations have been used in many different forms to run large applications In order to establish basis for comparison to multiprocessors this paper limits itself to consider only collections of workstations called clusters which consist of homogeneous set of machines dedicated to run parallel applications located in close proximity such as in the same machine room and interconnected by an ATM network Such cluster can be employed in large variety of settings The cluster could simply provide compute service for user community to run large parallel applications more typical setting would be as computational resource in distributed application One such example the Stormcast weather monitoring system in Norway runs on very large collection of machines spread across large portion of the country but uses cluster of few dozen workstations in machine room without high speed network in this case to run weather prediction models and to emit storm warnings The availability of communication among these workstations would enable the use of parallel programming languages and of more powerful parallel algorithms both of which require closer coupling among processors than is possible today Concentrating on the compute cluster offers the largest potential for improvement because the latency over the links is dominated by and network congestion issues and because the wide area communication is comparatively better served by today distributed computing software Note that this paper does not argue that running concurrent applications in heterogeneous environment across large distances and on workstations that happen to be sitting idle is not an interesting design point it in fact has been used successfully but that the set of communication issues occurring in such context can not be compared to those in multiprocessor Given that the applications for clusters considered here exhibit characteristics similar to those on multiprocessors the programming models used would be comparable if not identical to those popular for parallel computing This includes various forms of message passing PVM of shared memory cache coherent shared memory remote reads and writes explicit global memory and of parallel object oriented languages numerous extensions On parallel machines several proposed communication architectures have achieved the low overheads low latencies and high bandwidths that are required for high performance implementations of the above programming models In particular cache coherent shared memory remote reads and writes and Active Messages offer communication within few hundred instruction times so that frequent communication on fine granularity such as on an object by object or cache line basis remains compatible with high performance In these settings the overhead of communication that is the time spent by the processor initiating communication is essentially the cost of pushing message data into the network interface at the sending end and pulling it out at the receiving end Virtually no cycles are spent in any protocol handling as all reliability and flow control are handled in hardware The operating system need not be involved in every communication operation because the network interface hardware can enforce protection boundaries across the network The above communication architectures can not be moved in straightforward manner from multiprocessors to clusters of workstations with ATM networks because of three major differences between the two ATM networks offer neither reliable delivery nor flow control ATM network interfaces provide no support for protected access to the network and the workstation operating systems do not coordinate process scheduling or address translation globally Coping with these differences poses major technical challenges and may eventually require the integration of some features into the clusters The following three subsections present the nature of these differences in more detail and discuss the resulting issues Reliability and flow control in the network In multiprocessor networks flow control is implemented in hardware on basis Whenever the input buffer of router fills up the output of the router is disabled to prevent buffer overflow The flow control thus has the effect of blocking messages in the network and eventually as the propagates the sending nodes are prevented from injecting further messages This mechanism guarantees that messages are never dropped due to buffer space limitations within the network or at the receiving end In addition the electrical characteristics of the network are designed to ensure very low error rates such that the use of simple error detection and correction mechanism implemented in hardware can offer the same reliability within the network as is typical of the processing nodes themselves In contrast an ATM network does not provide any form of flow control and does not offer reliable delivery Instead higher protocol layers must detect cell loss or corruption and cause their retransmission While this partitioning of responsibilities may be acceptable in the case of communication video audio it is questionable in parallel computing setting The flow control and the error detection and correction in multiprocessor networks serve to cover four causes of message loss buffer overflow in the receiving software buffer overflow in the receiving network interface buffer overflow within the network and message corruption due to hardware errors In an ATM network simple window based flow control schemes and CRC as used in can cover the first and last cases of cell loss In addition preventing buffer overflow in the receiving network interface can be achieved by ensuring that the rate at which cells can be moved from the interface into main memory is at least as large as the maximal cell arrival rate Preventing buffer overflow within the network however is not realistically possible using flow control This is particularly problem in parallel computing setting in which all nodes tend to communicate with all other nodes in both highly regular and irregular patterns at unpredictable intervals The degree of contention within the network therefore can not be measured or predicted with any accuracy by either the sender or the receiver and communication patterns which result in high contention will result in high cell loss rates causing extensive retransmissions Traditional flow control schemes used in communication avoid fruitless retransmission storms by dynamically reducing the transmission rate on connections which experience high cell loss rates This works in these settings because following the law of large numbers contention in wide area network does not tend to vary instantaneously and therefore the degree of contention observed in the recent past is good predictor for contention in the near future As an illustration of the difficulties in parallel computing setting consider the implementation of parallel sort The most efficient parallel sort algorithms are based on an alternation of local sorts on the nodes and permutation phases in which all nodes exchange data with all other nodes These permutation phases serve to move the elements to be sorted towards their correct position The communication patterns observed are highly dynamic and their characteristics depend to large degree on the input data If at any point the attempted data rate into given node exceeds the link rate then the output buffers at switches will start filling up Because the communication patterns change very rapidly essentially with every cell it is futile to attempt to predict contention and given the communication pattern the probability of internal contention among seemingly unrelated connections is high Beyond the problems caused by contention and the resulting retransmissions the lack of reliable delivery guarantee in ATM networks imposes certain overhead on the communication primitives Specifically the sender must keep copy of each cell sent until corresponding acknowledgment is received in case the cell must be retransmitted This means that messages can not be transferred directly between processor registers and the network interface as is possible on the rather memory copy must be made as well access to the network interface Recently multiprocessor communication architectures have achieved significant reduction of the communication overhead by eliminating the operating system from the critical path In order not to compromise security the network interface must offer some form of protection mechanism In shared memory models the memory management unit is extended to map remote memory into the local virtual user address space such that the operating system can enforce security by managing the address translation tables network interfaces contain node address translation table which maps the user virtual node numbers onto the physical node address space Again the operating system enforces security by controlling the address translation thereby preventing process from sending message to an arbitrary node The current generation of message based network interfaces only control the destination node address and therefore require that all processes of parallel program run at the same time The next generation adds the sending process id to each message allowing the receiving network interface to discriminate between messages destined for the currently running process that can retrieve these message directly and messages for dormant processes which must be queued typically by the operating system for later retrieval In contrast the network interfaces available for workstations do not yet incorporate any form of protection mechanism Instead the operating system must be involved in the sending and reception of every message The connection based nature of ATM networks would principally allow the design of protection mechanism to limit the virtual circuits user process has access to the operating system would still control virtual circuit But because the architecture of the networking layers in current operating systems does not seem to be to allow network interface access it appears unlikely that network interfaces with these features will become commonplace soon The challenge in any communication layer for clusters is thus to minimize the path through the kernel by judiciously coordinating the interactions Coordination of system software across all communicating nodes In almost all communication architectures the message reception logic is the critical performance bottleneck In order to be able to handle incoming messages at full network bandwidth the processing required for each arriving message must be minimized carefully The trick used in multiprocessor systems to ensure rapid message handling is to constrain the sender to only send messages which are easy to handle In shared memory systems this is done by coordinating the address translation tables among all processing nodes such that the originating node can translate the virtual memory address of remote access and directly place the corresponding physical memory address into the message The set of communication primitives is small and fixed read and write and by forcing the sender to perform the complicated part of remote memory access namely the protection checks and the address translation the handling of request is relatively simple to implement If the virtual address were sent the receiving node could discover that the requested virtual memory location had been paged out to disk with the result that the handling of the message would become rather involved In Active Messages on multiprocessors the scheduling of processes is assumed to be coordinated among all nodes such that communicating processes execute simultaneously on their respective nodes This guarantees that messages can be handled immediately on arrival by the destination process itself In order to accomplish this the sender of an Active Message specifies handler at the destination whose role it is to extract the message from the network and integrate it into the ongoing computation The handler can also implement simple remote service and send reply Active Message back However in order to prevent deadlock the communication patterns are limited to requests and replies handler of reply message is not allowed to send any further messages An implementation of Active Messages typically reserves the first word of each message for the handler address and the handler at the receiving end is dispatched immediately on message arrival to dispose of the message The fact that the message layer can call upon the handlers to deal with messages in FIFO order simplifies the buffering considerably over that required by more traditional message passing models such as PVM MPI or NX These models allow processes to consume messages in arbitrary order and at arbitrary times forcing the communication architecture to implement very general buffer and message matching mechanisms at high cost In clusters the fact that the operating systems of the individual nodes are not nearly as coordinated contradicts the assumption that messages can always be consumed quickly upon arrival In the case of Active Messages the destination process might have been suspended and can not run the handler and in shared memory model the memory location requested might not be mapped Although exact coordination is not possible without major changes to the operating system core an implementation of either communication model is likely to be able to perform some coordination among nodes on its own and to influence the local operating system accordingly This may allow the communication layer to assume that in the common case everything works out fine but it must be able to handle the difficult cases as well Summary Even though superficially cluster of workstations appears the be technically comparable to multiprocessor the reality is that key characteristics are different and cause significant implementation difficulties the very comparable raw hardware link bandwidths bisection bandwidths and routing latencies conceal the lack in clusters of flow control reliability network access and operating system coordination These shortcomings will inevitably result in lower communication performance their quantitative effect on performance is evaluated in the next section which presents prototype implementation of Active Messages on cluster of Sun workstations However the lack of in ATM networks poses fundamental problem can catastrophic performance degradation occur due to significant cell loss in particular communication patterns SSAM SPARCstation Active Messages Prototype The SSAM prototype implements the critical parts of an Active Messages communication architecture on cluster of SPARCstations connected by an ATM network The primary goal is to evaluate whether it is possible to provide parallel programming environment on the cluster that is comparable to those found on multiprocessors The prototype is primarily concerned with providing performance at par with parallel machines while addressing the handicaps of ATM networks that have been identified in the previous section In particular the prototype provides reliable communication to evaluate the cost of performing the necessary and error checking in software it minimizes the kernel intervention to determine the cost of providing protection in software and the buffering is designed to tolerate arbitrary context switching on the nodes At this time only limited experimental described below is available such that the prototype can not provide information neither on how cell losses due to contention within the network affect performance nor on how the scheduling of processes can be coordinated to improve the overall performance of parallel applications Active Messages Communication Architecture The Active Messages communication architecture offers simple general purpose communication primitives as thin veneer over the raw hardware It is intended to serve as substrate for building libraries that provide communication abstractions and for generating communication code directly from compiler Unlike most communication layers it is not intended for direct use by application programmers and really provides services from which communication libraries and systems can be built The basic communication primitive is message with an associated small amount of computation in the form of handler at the receiving end Typically the first word of an Active Message points to the handler for that message On message arrival the computation on the node is interrupted and the handler is executed The role of the handler is to get the message out of the network by integrating it into the ongoing computation by sending reply message back The buffering and scheduling provided by Active Messages are extremely primitive and thereby fast the only buffering is that involved in actual transport and the only scheduling is that required to activate the handler This is sufficient to support many abstractions and more general buffering and scheduling can be easily constructed in layers above Active Messages when needed This minimalist approach avoids paying performance penalty for unneeded functionality In order to prevent deadlock and livelock Active Message restricts communication patterns to requests and replies the handler of request message is only allowed to send reply message and reply handler is not allowed to send further replies SSAM functionality The current implementation is geared towards the sending of small messages which fit into the payload of single ATM cell Eight of the available bytes of payload in an ATM cell are used by SSAM to hold information bits the handler address bits and an compatible checksum bits The remaining bytes hold the Active Message data The header file for the interface to SSAM is shown in Figure To send request Active Message the user places the message data into buffer provided by SSAM and calls with connection identifier and the remote handler address adds the information and traps to the kernel to have the message injected into the network It also polls the receiver and processes incoming messages At the receiving end the network is polled by or the latter only polls the network and all messages accumulated in the receive FIFO are moved into buffer SSAM then calls the appropriate handler for each message passing as arguments the originating connection identifier the address of the buffer holding the message and the address of buffer for reply message The handler processes the message and may send reply message back by placing the data in the buffer provided and returning the address of the reply handler or NULL if no reply is to be sent Figure interface for SPARCstation Active Messages The current prototype does not use interrupts instead the network is polled every time message is sent This means that as long as process is sending messages it will also handle incoming ones An explicit polling function is provided for program parts which do not communicate Using interrupts is planned but not implemented yet Example implementing remote read with SSAM The sample implementation of remote read is shown in Figure The readDouble function increments counter of outstanding reads formats request Active Message with the address to be read as well as information for the reply and sends the message The handler fetches the remote location and sends reply back to the reply handler which stores the data into memory and decrements the counter The originating processor waits for the completion of the read by on the counter at the end of readDouble read could be constructed easily by exposing the counter to the caller who could proceed with computation after initiating the read and only wait on the counter when the data is required Figure Sample remote read implementation using SSAM Experimental The experimental used to evaluate the performance of the prototype SSAM implementation consists of and running SunOS The two machines are connected via Fore Systems ATM interfaces using TAXI fiber The interfaces are located on the Sbus bus running at or and provide deep output FIFO as well as input FIFO To send cell the processor stores bytes into the output FIFO and to receive cell it reads bytes from the input FIFO register in the interface indicates the number of cells available in the input FIFO Note that the network interface used is much simpler and closer to multiprocessor NIs than most ATM interfaces available today The only function performed in hardware beyond simply moving cells the fiber is checksum generation and checking for the ATM header and an compatible payload In particular no DMA or segmentation and reassembly of packets is provided SSAM implementation The implementation of the SPARCstation ATM Active Messages layer consists of two parts device driver which is dynamically loaded into the kernel and library to be linked with applications using SSAM The driver implements standard functionality to open and close the ATM device and it provides two paths to send and receive cells The fast path described here consists of three trap instructions which lead directly to code for sending and receiving individual ATM cells The traps are relatively generic and all functionality specific to Active Messages is in the library which also performs the and buffer management conventional system call interface is provided for comparison purposes and allows to send and receive cells using pure device driver approach The traps to send and receive cells consist of carefully crafted assembly language routines Each routine is small and instructions for the send and receive traps respectively and uses available registers carefully The register usage is simplified by the Sparc architecture use of circular register file which provides clean window for the trap By interfacing from the program to the traps via function call arguments can be passed and another registers become available to the trap The following paragraphs describe the critical parts of the SSAM implementation in more detail simple sliding window flow control scheme is used to prevent overrun of the receive buffers and to detect cell losses The window size is dimensioned to allow close to full bandwidth communication among pairs of processors In order to implement the flow control for window of size each process memory to hold cells per every other process with which it communicates The algorithm to send request message polls the receiver until free window slot is available and then injects the cell into the network saving it in one of the buffers as well in case it has to be retransmitted Upon receipt of request message the message layer moves the cell into buffer and as soon as the corresponding process is running calls the Active Message handler If the handler issues reply it is sent and copy is held in buffer If the handler does not generate reply an explicit acknowledgment is sent Upon receipt of the reply or acknowledgment the buffer holding the original request message can be reused Note how the distinction between requests and replies made in Active Messages allows acknowledgments to be onto replies The recovery scheme used in case of lost or duplicate cells is standard except that the reception of duplicate request messages may indicate lost replies which have to be retransmitted It is important to realize that this flow control mechanism does not really attempt to minimize message losses due to congestion within the network the lack of in ATM networks effectively precludes any simple congestion avoidance scheme Until larger become available and the ATM community agrees on how routers should handle buffer overflows it seems futile to invest in more sophisticated mechanisms Nevertheless the bursty nature of parallel computing communication patterns are likely to require some solution before the performance characteristics of an ATM network become as robust as those of as multiprocessor networks interface and buffer management The streamlining of the interface is the most important factor contributing to the performance of SSAM In the prototype the kernel preallocates all buffers for process when the device is opened The pages are then pinned to prevent and are mapped using mmap into the processes address space After every message send the library chooses buffer for the next message and places pointer in an exported variable The application program moves the message data into that buffer and passes the connection id and the handler address to SSAM which finishes formatting the cell adding the flow control and handler and traps to the kernel The trap passes the message offset within the buffer area and the connection id in registers to the kernel Protection is ensured with simple masks to limit the connection id and offset ranges lookup maps the current process and connection ids to virtual circuit The kernel finally moves the cell into the output FIFO At the receiving end the kernel trap delivers batch of incoming cells into shared memory buffer The number of cells received is returned in register For each cell the kernel performs four tasks it loads the first half of the cell into registers uses the VCI to index into table to obtain the address of the appropriate processes input buffer moves the full cell into that buffer and checks the integrity of the cell using three flag bits set by the NI in the last byte Upon return from the trap the SSAM library loops through all received cells checking the information calling the appropriate handlers for request and reply messages and sending explicit acknowledgments when needed SSAM performance The following paragraphs describe performance measurements of SSAM made with number of synthetic benchmarks The following terminology is used overhead consists of the processor cycles spent preparing to send or receive message latency is the time from which message send routine is called to the time the message is handled at the remote end and bandwidth is the rate at which user data is transferred The performance goal for SSAM is the fiber rate of which transmits cell every bytes for an ATM payload bandwidth of ATM traps detailed cost breakdown for the operations occurring in each of the traps to send and receive cells is shown in Table The two timing columns refer to measurements taken on the SPARCstation and on the SPARCstation respectively The times have been obtained by measuring repeated executions of each trap with gettimeofday which uses clock and takes on the The time for each trap was measured by commenting appropriate instructions out and is somewhat approximate due to the pipeline overlap occurring between successive instructions Table Cost breakdown for traps to send and receive cells Operation write trap check pid and con nection id addt kernel ovhd load cell to push push cell to NI total read trap check cell count addt kernel ovhd per cell pull from NI per cell demux per cell store away total for cell per cell total for cells trap total cells read total cell read null system call The write trap cost is broken down into parts the cost of the trap and return the protection checks overhead for fetching addresses loading the cell into registers and pushing the cell into the network interface The numbers show clearly that the fiber can be saturated by sending cell at time from user level It also indicates that the majority of the cost lies in the access to the network interface across the Sbus The cost of the trap itself is surprisingly low even though it is the second largest item In fact it could be reduced slightly as the current implementation adds level of indirection in the trap dispatch to simplify the dynamic loading of the device driver The read trap is itemized similarly the cost to trap and return fetching the device register with the count of available cells additional overhead for addresses loading the cell from the network interface demultiplexing among processes and storing the cell away The total cost shows trap which receives single cell as well as the cost for trap which receives cells Here again the access to the device dominates due to the fact that each load incurs the full latency of an Sbus access The total time of on the falls short of the fiber cell time and will limit the achievable bandwidth to at most of the fiber The trap first sends cell and then receives chunk of cells This amortizes the cost of the trap across both functions and overlaps checking the cell count slightly with sending The last item in the table shows the cost of null system call for comparison purposes write to file descriptor was used It is clear that system call approach would yield performance far inferior to the traps and would achieve only fraction of the fiber bandwidth ATM system calls In addition to the direct traps the device driver allows cells to be sent and received using traditional read and write system calls on the device file descriptor At this time this conventional path is provided for comparison purposes only and the read and write entry points into the device driver are limited to sending and receiving single cells reads and writes could be supported easily The read and write entry points perform the following operations check for the appropriateness of the file descriptor transfer data between user space and an internal buffer using uiomove and transfer data between the internal buffer and the FIFOs of the network interface The internal buffer is used because the data can not be transferred directly between user space and the device using uiomove due to the fact that the device FIFOs are only word addressable The use of an internal buffer also allows accesses to the device FIFOs which improves the access times considerably Table shows the costs for the various parts of the read and write system calls The syscall overhead entries reflect the time taken for read respectively write system call with an empty read write device driver routine This measures the kernel overhead associated with these system calls The check fd do uiomove entry reflects the time spent in checking the validity of the file descriptor and performing the uiomove In the case of read it also includes the time to check the device register holding the number of cells available in the input FIFO The cell entries reflect the time spent to transfer the contents of one cell between the internal buffer and the device FIFOs The write and read cell totals reflect the cost of the full system call while the read cells entry is the time taken for an unsuccessful poll which includes the system call overhead the file descriptor checks and the reading of the register Table Cost of sending and receiving cells using read and write system calls Operation write system call syscall overhead check fd do uiomove push cell into NI write total read system call syscall overhead pull cell from NI check fd and recv ready do uiomove read total for cell read total for cells The timings show clearly that the overhead of the system call interface is prohibitive for small messages For larger messages however it may well be viable choice and it is more portable than the traps SSAM Measurements of the Active Messages layer built on the cell send and receive traps are shown in Table In all cases one word of the Active Message payload carries data and the handlers simply return The send request uses and adds little over of overhead on the for cell formatting and The handling times are all roughly the cost of reading cells per trap plus again little over for the flow control and handler dispatch If reply is sent that adds the time of Table Cost breakdown for SPARCstation Active Messages Operation send request handle request no reply sent handle request and send reply handle ack handle reply The measurements show that supporting only Active Messages is not optimal Longer messages are required to achieve peak bulk transfer rates the prototype can yield up to simpler interface for shorter messages with only bytes of payload might well be useful as well to accelerate the small requests and acknowledgments that are often found in protocols Unfortunately given that the trap cost is dominated by the network interface access time and that the requires all bytes of cell to be transferred by the processor it is unlikely that significant benefit can be realized While full implementation of is still in progress timings of the remote memory access primitives show that the time for remote read of aligned bytes takes on the and remote store takes for the same payload Remote accesses with smaller payloads are not noticeably cheaper bulk write implemented with the current SSAM layer transfers but experiments show that using long messages this could be improved to by using the full ATM payload and simplifying the handling slightly Unresolved issues The current SSAM prototype has no influence on the kernel process scheduling Given the current buffering scheme the SSAM layer operation is not influenced by which process is running The performance of applications however is likely to be highly influenced by the scheduling How to best influence the scheduler in fashion requires further investigation The most promising approach appears to be to use thread scheduling priorities such as are available in Solaris The amount of memory allocated by the SSAM prototype is somewhat excessive and in fact for simplicity the current prototype uses twice as many buffers as strictly necessary For example assuming that window of cells is used the kernel allocates and pins of memory per process per connection On cluster with parallel applications running this represents of memory per processor The number of preallocated buffers could be reduced without affecting peak bulk transfer rates by adjusting the flow control window size dynamically The idea is that the first cell of long message contain flag which requests larger window size from the receiver few extra buffers would be allocated for this purpose The receiver grants the larger window to one sender at time using the first acknowledgment cell of the bulk transfer The larger window size remains in effect until the end of the long message This scheme has two benefits the request for larger window is overlapped with the first few cells of the long message and the receiver can prevent too many senders from transferring large data blocks simultaneously which would be for the cache However fundamentally it appears that memory or alternatively low performance is the price to pay for having neither in the network nor coordinated process scheduling more subtle problem having to do with the ATM payload alignment used by the interface will surface in the future the bytes of an ATM cell are padded by the to bytes and the payload starts with the byte it is only aligned The effect is that bulk transfer payload formats designed with the in mind and supporting moves of data between memory and the will clash with other network interfaces which align the ATM payload Summary The prototype Active Messages implementation on SPARCstation ATM cluster provides preliminary demonstration that this communication architecture developed for multiprocessors can be adapted to the peculiarities of the workstation cluster The performance achieved is roughly comparable to that of multiprocessor such as the where the latency is roughly but it is clear that without network interface closer to the processor the performance gap can not be closed The time taken by the and protection in software is surprisingly low at least in comparison with the network interface access times The cost in effect has been shifted to large and pinned buffers While the prototype memory usage is somewhat excessive other schemes with comparable performance will also require large buffers Overall SSAM speed comes from careful integration of all layers from the language level to the kernel traps The key issues are avoiding copies by having the application place the data directly where the kernel picks it up to move it into the device and by passing only easy to check information to the kernel in particular not pass an arbitrary virtual address Comparison to other approaches The ATM network communication layer most directly comparable to SSAM is the remote memory access model proposed by Thekkath et al The implementation is very similar to SSAM in that it uses traps for reserved opcodes in the MIPS instruction set to implement remote read and write instructions The major difference between the two models is that the remote memory operations separate data and control transfer while Active Messages unifies them With remote memory accesses data can be transferred to user memory by the kernel without the corresponding process having to run But the model used does not allow remote reads and writes to the full address space of process Rather each communicating process must allocate special communication memory segments which are pinned by the operating system just as the buffers used by SSAM are The communication segments are more flexible than SSAM buffers in that they can directly hold data structures limited by the fact that the segments are pinned The advantage of SSAM over the remote memory accesses is the coupling of data and control each message causes small amount of user code to be executed which allows data to be scattered into complex data structures and the scheduling of computation to be directly influenced by the arrival of data In the remote memory access model limited control transfer is offered through notification flags in order to to cause file descriptor to become ready Finally SSAM provides reliable transport mechanism while the remote memory access primitives are unreliable and do not provide Table compares the performance of the two approaches Thekkath implementation uses two DECstation interconnected by Turbochannel version of the same ATM interface used for SSAM and performs little worse than SSAM for data transfer and significantly worse for control transfer The remote reads and writes are directly comparable in that they transfer the same payload per cell Table Comparison of SSAM to Remote Memory Accesses between DECstation ATM Operation SSAM Remote mem access read latency write latency addt control none transfer ovhd block write The performance of more traditional communication layers over an ATM network has been evaluated by Lin et al and shows over two orders of magnitude higher communication latencies than SSAM offers Table summarizes the best latencies and bandwidths attained on Sun and SPARCstation connected by Fore interfaces without switch The millisecond scale reflects the costs of the traditional networking architecture used by these layers although it is not clear why Fore API is slower than the system call interface described in Note that implementation with should yield latencies Table Performance of traditional communication layers on and over ATM Communication layer Peak latency bandwidth Fore API BSD Sockets PVM over Sun RPC Conclusions The emergence of networks is making the use of clusters of workstations attractive for parallel computing style applications From technical point of view continuous spectrum of systems can be conceived ranging from collections of workstations to tightly integrated custom multiprocessors However this paper argues that clusters will be characterized by the use of components which will handicap them with respect to multiprocessors in which hardware and software are customized to allow tighter integration of the network into the overall architecture The use of standard components and in particular of ATM networking technology results in three major disadvantages of clusters with respect to multiprocessors ATM networks do not offer reliable delivery or flow control ii the current network interfaces are not well integrated into the workstation architecture and iii the operating systems on the nodes of cluster do not coordinate process scheduling or address translations The prototype implementation of the Active Messages communication model described in this paper achieves two orders of magnitude better performance than traditional networking layers Table shows that the resulting communication latencies and bandwidths are in the same as on multiprocessors Key to the success are the use of large memory buffers and the careful design of lean interface The major obstacle towards closing the remaining performance gap is the slow access to the network interface across the bus and reducing the buffer memory usage requires coordination of process scheduling across nodes While taking care of flow control in software does not dominate performance in this study the behavior of ATM networks under parallel computing communication loads remains an open question Table Comparison of SSAM performance with that of recent parallel machines Machine Peak bandwidth latency Paragon NX Active Mesg cluster SSAM Bibliography CCITT Recommendation ATM functional characteristics Revised version Geneva ITU Culler Dusseau Goldstein Krishnamurthy Lumetta von Eicken and Yelick Introduction to In Proc of Supercomputing Culler Dusseau Martin Schauser Fast Parallel Sorting from LogP to In Proc of WPPP July von Eicken Culler Goldstein and Schauser Active Messages Mechanism for Integrated Communication and Computation In Proc of the ISCA pages May Geist Beguelin Dongarra Jiang Manchek and Sunderam PVM User Guide and Reference Manual Oak Ridge National Laboratory Technical Report February Li and Hudak Memory Coherence in Shared Virtual Memory Systems ACM Transactions on Computer Systems November Lin Hsieh Du Thomas and MacDonald Distributed Network Computing over Local ATM Networks IEEE Journal on Selected Areas in Communications Special Issue on ATM LANs to appear Pierce and Regnier The Paragon Implementation of the NX Message Passing Interface In Proc of SHPCC May Stunkel Shea Grice Hochschild and Tsao The Switch In Proc of SHPCC May Thekkath Levy and Lazowska Efficient Support for Multicomputing on ATM Networks University of Washington Technical Report April Thekkath Levy and Lazowska Separating Data and Control Transfer in Distributed Operating Systems In Proc of the Int Conf on ASPLOS To appear October Thinking Machines Corporation Cambridge Massachusetts Connection Machine Technical Summary November Footnotes The term cluster is used here to refer to collections of machines interconnected by network This paper focuses exclusively on scalable multiprocessor architectures and specifically excludes multiprocessors Current ATM switches have latencies about an order of magnitude higher than comparable multiprocessor networks however this difference does not seem to be inherent in ATM networks at least not for local area switches discussion of differences in fault isolation characteristics is beyond the scope of this paper Although some transmission media may cause burst errors which are beyond the correction capabilities of most CRC codes Cache coherent shared memory stretch this characterization given that the cache in the receiving node essentially performs another address translation which may miss and require additional communication with other nodes to complete the request All bandwidths are measured in megabytes per second The kernel the trap vectors after The SSAM prototype uses permanently loaded trap which performs an indirect jump via kernel variable to allow simple dynamic driver loading Note that in more realistic setting Fore switch will add roughly of latency to the write time and to the read time One could easily describe the traps employed by SSAM as additional emulated communication instructions	other	cornell
1105	 Information and Search Information and Search Cornell Stuff Bruce Donald Cornell CS home page Engineering Library page Cornell Legal Information Institute Cornell Directories Cornell Gopher Cornell Gopher SEARCH Movies Project public server page CMU server DIMUND Document Image Understanding and Character Recognition WWW Server Music Guitar music Search Tools Archie Request Form nice interface to Archie The JumpStation Web Search Tool CUI World Wide Web Searchable Catalog Veronica GOPHER Search Tool The Archie Gateway search Anonymous FTP sites Global Network Acadamy The CMU CS Department has put together an excellent collection of search tools Network Information Scout Report at Internic Planet Earth and the Whole Internet Catalog which is part of the Global Network Navigator CERN WWW Reference Page useful internet places listing by subject Mother of all BBS HUGE list of internet services and smaller list of internet services The WWW Tourist Map which is cute and fluffy and direct link to the North America page Reference Library English Dictionary and Roget Thesaurus other esp obscurer dictionaries here CIA World Fact Book US govt travel advisories and the Census Bureau Library of Congress Catalog and some Government Hypertext files Various Stuff Ithaca Weather Forecast and the weather elsewhere Netfind at Alabama or Colorado and the Organisation list What new with Mosaic List of Good Stuff Issues in Group Annotation Systems http NCSA Mosaic Demo Document http Foner home page http Web An Illustrated Seminar http Vatican Exhibit Rome Reborn http The HTTP Protocol As Implemented In http HyperText Language http The Tech http SIPB Home Page http SLIP for Macintosh gopher Gopher server at gopher cslip index http Welcome to Jay House http MIT AI lab fun stuff http EXPO Ticket Office http Soviet Archives Exhibit http Untitled URL http bos http bos Comment on this server http White House gopher Subject Guide to Gopher gopher Images gopher Honolulu Community College WWW Service http Digital Tradition Folk Song Full Text Search http NASA Information Services via World Wide Web http Jet Propulsion Laboratory Home Page http GNN Home Page http Information Sources the Internet and Communication ftp Remote file ftp Untitled gopher The holidaze http Untitled URL http http http Map Viewer world http Roget Thesaurus gopher Reference Shelf http Area Code Lookup gopher Mac Software http USA Today http Virtual Reference Desk gopher International Interactive Genetic Art II http Instructions for International Interactive Genetic Art http User Hotlists http Information Sources http Mac FTP List http Live and exclusive form COMMA vision http The Reinforcement Learning Group at Carnegie Mellon http Dictionaries http The Best of WWW Contest http MIT Lecture Series Committee http Dilbert http Untitled URL http http The Terrorist Handbook Title http Online Book Initiative gopher Remote file file Remote file file Ellen Spertus Personal WWW Page http Untitled URL http http Public Key Server Commands http UNABOM Press Release http The InterNIC http The Principia Discordia http The Translator http Welcome To the Amateur Radio Web Server http Plexus Info File Browser http CUI Catalog http Writing Good HTML http CUI Catalog Recent Changes http Stanford Netnews Filtering Service http GENBBB http The BBS http Say Number http Word Processor Filters http Framemaker Welcome to the Big Dummy Guide to the Internet http Primer on Molecular Genetics http GNA http list of Virtual Libraries on the Web http World Wide Web FAQs and Guides http Mike Patton Home Page http Various pointers http Web Starting Points http WiReD Information Server http Remote file ftp Electronic Books at Wiretap gopher Electronic texts http PLANET EARTH HOME PAGE http General Overview of Worldwide Internet Resources http Welcome to CUI http Herman Lau Home Page http Free For All http Index of http TechInfo main menu http Untitled URL http http About the Webmasters http Home Page http Cardiff Movie Database Browser http Movie Info http bIKOQ MIT Laboratory for Computer Science http MIT Media Lab Home Page http Some stuff about COMICS http LPR Video Gallery http Untitled URL http http Gallery of Interactive Geometry http The Geometry Center Welcome Page http Preprints from around the world http Information Sources the Internet and Communication http Winter Olympics Information http Results from The Winter Olympics at Lillehammer http Oslonett Inc Information on Oslonett Marketplace http wusage http Rob McCool http NCSA Mosaic FAQ Interface Stuff http NCSA Mosaic Frequently Asked Questions http Fishnet http Fishnet Volume Issue http Global Table of Contents for Fishnet http TNS Technology Demonstrations http Telemedia Networks and Systems Group http Return to Cornell CS	other	cornell
1106	 Server Date Sunday GMT Wednesday GMT The Packet Filter The Packet Filter An Extension to Net over Fast Ethernet Masters of Engineering Project August Jonathan Barber barber Professor Thorsten von Eicken Department of Computer Science Cornell University Abstract is network communication protocol that can deliver horsepower to network of PCs In this case the PCs are connected via fast ethernet switch In its original implementation computers connected through communicated through simple communication scheme The Packet Filter acts as an extension to the original implementation giving the capability to communicate using open standards Overview The job of the Packet Filter UPF is to demultiplex packets to their corresponding endpoint destinations It is designed to demultiplex both and packets depending on the combinations In the case of packets channel specifies an connection connection from one process to another If process connects to process then can only communicate with and can only communicate with on that channel If wants to communicate with then it must open separate channel In the case of packets program can open broadcast or multicast channel Any other process listening on that channel can receive packets sent from Design Goals The Packet Filter was designed with two goals in mind Above all it has to be fast The ability to communicate over open standards is useless to if it can do so only at normal network rates The Packet Filter topology has to be simplistic and easily expandable New filters can not been written in and interpreted New filters must programmed into the existing system however the packet filter simplistic structure allows for certain degree of creativity on the part of the programmer thereby easing the task of the programming itself The subsequent sections in this document discuss in detail the different components and structure of the Packet Filter with an eye towards demonstrating that the design goals have been met Implementation The current implementation as of the date of this document allows for distinct filter types They are Raw the simple communication scheme utilized by the original version of Raw Ethernet purely at the layer and Elementary Components The Packet Filter is Directed Graph DAG It is made up of two basic components The Cell this is that contains twelve word entries This is the Packet most basic structure The cell is used for storing channel information such as channel field values such as port numbers and addresses and it is used as pointer to other cells and hash table Cells can be chained together to form lists For complete details and usage information on cells in UPF click here The Hash Table provided with hashing function these tables are used to spread out channels over range of Each table contains pointers to cells These cells as already mentioned can be chained together in The combination of cells and creates hashing with chaining which is the way in which hash tables are utilized in the current implementation of UPF Figure Elemantary UPF Components Together cells and hash tables are connected together to form directed cyclic graph DAG When packet comes in off of the ethernet wire each protocol in the composite packet header is broken down into fields These fields are then compared to information stored in the cells As matches are found we follow the appropriate path through the DAG The next section breaks down the current architecture of the Packet Filter and discusses the protocols it currently supports Protocol Hierarchy in the Packet Filter DAG The current implementation supports protocols two of which are open standards The following protocols are broken down has follows Raw The modified version of is backwards compatible with the original implementation of That is packets can be demultiplexed to Raw channels based on the following fields Code Port number Figure Raw Ethernet Header These types of channels are not part of the UPF system In the event that Raw channel is detected the UPF system is and the packet is demultiplexed based strictly on the port number If the ethernet card is running in promiscuous or multicast mode then only the Type and identify an These channels are not guaranteed to be unique Raw Ethernet This protocol is similar to the Raw protocol in that it is strictly layer protocol Packets are demultiplexed to their corresponding based on the following fields Ethernet Source Addr Raw Ethernet Type Figure Raw Ethernet Header The combination of these two fields uniquely specify an endpoint unless the Source Addr is an ethernet multicast or broadcast address The ethernet type can be any value provided that it is not reserved field the IP ethernet type is and is reserved type In the case where the only open channel consist of Raw not in the DAG or Raw Ethernet channels the DAG is merely of TYPE cells see the Cell Specification Page Figure Raw Ethernet in the UPF DAG When Raw Ethernet Packet is received fields the ethernet source and raw ethernet type are compared with the corresponding cell values for each element in the until match is found For the case in which large number of Raw Ethernet channels are open performance may be improved by replacing this linked list with hash table Transmission Control Protocol This is composite protocol The outer protocol is IP and the inner is TCP refer to this as single filter as only both protocols together identify an endpoint In reality they are separate protocols The combination of the following fields uniquely identifies endpoint Ethernet Type Ethernet Protocol IP Version IP Protocol Transmission Protocol IP Protocol specifies TCP Protocol Destination Port TCP Protocol Destination Address IP Protocol Source Address IP Protocol Source Port TCP Figure Composite Header Notice that fields from three different protocols uniquely identify channel This corresponds to traversal of the packet filter DAG UPF is designed to be fast This means that in the interests of speed we want to drop packet from contention as soon as it is realized that the packet will not demultiplex to any endpoint Of the preceding fields we know that the packet is not IP if the ethernet type field does not match IP As an optimization the IP ethernet cell is always located at the head of the Since IP demultiplexing is expensive this results in just single check At this point we now know the packet is of type IP At the next level in the DAG we check the protocol and the IP version number If the protocol is defined is not TCP or UDP in this case TCP or if the IP version number does not match the filter IP version number the packet is dropped Again this results in traversing of protocol cells or as its referred to in the source code cells until match is or is found Figure At the IP Protocol Level in the UPF DAG If match is found then we descend another level into the DAG At this point we drop the packet if the destination port TCP Protocol does not exist in the filter Since there can be as many as possible ports we perform lookup into hash table The hash table itself is connected to the cell corresponding to the TCP protocol The hash function is defined within the source code by the function Since it is possible for multiple channels to exist on the same combination it might be necessary traverse of cells These cells contain the destionation port number and pointer to Channel hash table Figure At the Channel Hash Level in the UPF DAG The remaining fields IP Source addr IP Destination addr and TCP source port uniquely identify TCP channel hash function is then used defined by the function in the source code to hash into table connected to the node Again there can be more than one node connected to single index in the hash table The hash function is meant to spread out the different channel combinations so that chain of nodes will not have to be walked Figure At the Channel Level in the UPF DAG If match is found in the linked list we demultiplex the packet to the corresponding endpoint In summary demultiplexing packets requires traversing the DAG through protocols Note that the current implementation does not support IP fragmentation This would be natural extension to as well as User Datagram Protocol Traversal of the DAG for is nearly identical to that of The difference between the two protocols is that can be while is always This means that its possible to establish not only unicast channels but multicast and broadcast channels as well Traversal of the DAG for requires the same seven fields that were used in The difference is that at channel setup time unicast multicast or broadcast channel type can be selected If the user creates unicast channel then traversal of the DAG occurs exactly as it did for except that the transmission protocol is now UDP Choosing to open multicast channel results in creating new level of the DAG Graph traversal proceeds as it did for all the way to the node In UDP the node contains an field which is set to either UNICAST MCAST or BCAST If the field is MCAST then we descend level to linked list of cells Figure At the Mulitcast Level in the UPF DAG Each node in this linked list corresponding to an with the same address information but with pointers to different channels In the event that multicast is matched then we walk the entire linked list and demultiplex at each cell If the node is of type BCAST then we must demultiplex to every active channel on this port This results in traversal of every for every index in the hash table connected to the node The packet is then demultiplexed to every unicast and multicast channel open on the port If another broadcast channel is encountered it is ignored since broadcast is already taking place Multicast channels result in demultiplexing to many channels This involves copying the entire packet into multiple regions of user memory for as many multicast channels that are open Broadcast channels result in even poorer performance since the packet must be demultiplexed to every open channel on the port In general multicast and broadcast channels may be useful but they incur severe performance overhead Channels in IP Both and composite protocols support channels In order to demultiplex to an endpoint the minimal requirements specify that the IP ethernet type the IP Version number the transport protocol and destination port must be specified The remaining fields IP destination address IP source address and the source port can remain they are declared as WILD during channel creation The combination of fields results in seven distinct wild card priority levels which are illustrated below Figure IP Channel Hash Table Priority Levels The combination of only WILD IP source address forms the highest priority while the combination of all WILDS creates the lowest priority Wildcard channels will only pick up packets if there is no matching channel from the priority level This functionality is built into Each hash table is partitioned into indexed hash buckets During graph traversal on packet reception if packet can not be demultiplexed via the indexed hash chain then we traverse each priority level on the corresponding destination port If matching channel is found UPF demultiplexes on that channel and graph traversal ends If not then UPF continues searching each next lowest priority level until they are all exhausted at which time the packet can be dropped Note that UDP Multicast and Broadcast channels are implemented as channels Since the channels are by definition the IP source address and source port fields are WILD The of this setup is that matching multicast or broadcast channel requires exactly hash misses for the missed index and for the preceding priority levels If parallel program were to rely heavily on IP multicast or broadcast this scheme may require alteration to boost performance Using UPF with Benchmarks and Demonstration Programs You can obtain copy of the UPF source tree by saving this link The UPF code is designed to run on Linux system over Fast Ethernet However it should be extremely portable to any system running over Fast Ethernet This version has been tested and on Linux using the kernel patch see the supporting documentation The source tree contains the following items The source code for the Packet Filter Extension The modified device driver for the SMC tulip Fast Ethernet Card interface library to and some UPF interface routines for creating channels Program that demonstrates the functionality of UPF Several Programs to minimum latency The completions stand for unet eth and ip for Raw Unet Raw Ethernet and IP TCP respectively These programs can also be found under the directory The supporting documentation this document can found in the directory Performance Benchmarks The Packet Filter was evaluated using Pentium and Pentium connected to Fast Ethernet Switch The programs and were used to test the roundtrip times for sending messages using Raw Unet Raw Ethernet and respectively packets were sent per test The following results were taken from several runs Roundtrip time for Roundtrip time for Roundtrip time for performed slower than performed slower than and slower than performance was about as expected Traversal of the DAG is not free and requires some cycles performance is little disappointing especially since the channel test was and was the only channel open during testing However the significant performance drain could be partially attributed to the hash lookups implemented with the IP filter In order to demultiplex to channel packet must traverse through two lookups In its current implementation both hashing functions use modulo operator The modulo of the hash function is taken against the number of available hash buckets The use of the modulo operator incurs large expense and might explain significant portion of performance drain One way the hash functions can be improved would be to replace the modulo operations with an alternative similar operation in order to hash packet into one of the available hash buckets Rather than use modulo we could logically and the result of the hash function with mask corresponding to the log base of the size of the hash table This would perform function similar to the modulo operation while enormously reducing the computational expense of the operation There are undoubtably numerous optimizations one can make to the packet filter to enhance performance This is left as future work How to Go About Adding New Filter to UPF Each filter is some combination of cells and hash tables connected together In meeting the second design goal the integration of new filter to UPF is meant to be modular Each module requires at least routines routine to dynamically add channel of this prototype to the DAG If the filter has not been installed for this channel type then the filter is also installed If the routine fails then the channel creation up to the point of the error must be this routine should be very fast Its responsible for demultiplexing packets to their endpoints this routine dynamically removes channel from the DAG and any memory associated with the channel If the channel is the last channel of its protocol then the entire protocol is deactivated This routine is important for processes where channels are created and destroyed based on conditions Its important that all memory be recycled and accounted for This routine is not as important for programs such as benchmarks since the routine will the entire DAG The current implementation supports different filters Raw Ethernet IP TCP and UDP For each segmented protocol there are exactly essential routines see the source code That is the aforementioned routines exists for every module Actually there is only one in the UPF system However this routine is broken up into case statements essentially breaking down the task of demultiplexing composite headers by protocols The designer of new filter should feel free to define there own cell types as is necessitated by the new filter The designer should feel free to modify the actual cell structure if will improve the overall packet filter design and can also define new hash functions as is needed Memory Management All memory allocatation in the UPF system is chained together off of pointer on the structure As new cells and are allocated new wastebucket structure is added to garbage collecting list of wastebuckets Each wastebucket points towards the allocated structure Each structure in turn points back to the corresponding waste bucket call to results in traversal to each wastebucket At each bucket the data structure it points to is Since each structure points to its corresponding wastebucket call to results in proper maintenance of the watebucket Other Possible Extensions to UPF Througout this document some possible extensions to UPF have been mentioned In this section we will discuss few more The current implementation of UPF handles multicast and broadcast channels However in order to properly join multicast group process needs access to an IP multicast to Ethernet address resolver The de facto way of doing this now is via IGMP Therefore the addition of an IGMP filter to UPF might be good idea If group of processes were to need to dynamically need to create new IP channels then they would also require way to resolve straight ethernet to IP address translations The addition of the Address Resolution Protocol ARP filter to UPF would also make logical extension In general as many extensions can be made to UPF as is required by the needs of the user Conclusions The attempt to create packet filter that can be used with was successful In doing so believe that our original design goals were met This is however beginning There is still lot work that must be done in developing both and the Packet Filter Particulary in the case of UPF performance can be improved Improvements to the current hashing implementation and tweaks to the source code in general will probably boost overall perforance of the filters Acknowledgments would like to thank the following individuals for their advice guidance and suggestions in designing and developing UPF Gerry Toll Werner Vogels Anindya Basu Theodore Wong Professor Thorsten von Eicken References Mary Bailey Burra Gopal Michael Pagels Larry Peterson Prasenjit Sarkar PathFinder Pattern Packet Classifier Proceedings of the First Symposium on Operating Systems Design and Implementation Usenix Association November Thorsten von Eicken Anindya Basu Vineet Buch and Wernel Vogels Network Interface for Parallel and Distributed Computing Draft for Cornell University August Dawson Engler Frans Kaashoek DPF Fast Flexible Message Demultiplexing using Dynamic Code Generation Association for Computing Machinery Kamran Husain Tim Parker Linux Unleashed Sams Publishing Indianapolis Chris Maeda Brian Bershad Protocol Service Decomposition for Networking Carnegie Mellon University Steven McCane and Van Jacobson The BSD Packet Filter new Architecture for Packet Capture Lawrence Berkeley Laboratory December Matt Welsh Implementing Loadable Kernel Modules for Linux Loading and unloading kernel modules on running system Jobb Journal Matt Welsh Thorsten von Eicken Protected Networking Interface Cornell University March Gary Wright Richard Stevens Illustrated Volume Publishing Company New York Masonobu Yuhura Chris Maeda Brian Bershad Eliot Moss Deultiplexing for Multiple Endpoints and Large Messages Carnegie Mellon University	other	cornell
1107	 Server Date Sunday GMT Monday GMT Homepage of Nicholas Howe Nicholas Howe Click on photo for color image Graduate Student Department of Computer Science Cornell University Ithaca NY email nihowe office Upson Hall phone Resume references Personal Info	other	cornell
1108	 Date Tuesday GMT Server Wednesday GMT Research related links Numerical Analysis on the Web Automatic Differentiation ADMIT Project Compilation of Automatic Differentiation Tools Argonne Computational Differentiation Project Programming Languages Annotations Frequently asked questions about the GNU compiler Table of Contents Finite Element Methods Finite Element Books Finite Element Resources FEMLAB FreeFEM Diffpack FElt People in the field Tom Coleman James Demmel Toby Driscoll Nick Trefethen Stephen Vavasis Arun Verma	other	cornell
1109	 Server Date Sunday GMT Sunday GMT Papers Trefethen papers Most of my papers are not available online references can be found in my cv or in my pseudospectra bibliography Here are few that are available Trefethen The definition of numerical analysis SIAM News reprinted in Bulletin of the Institute of Mathematics and its Applications Higham and Trefethen Stiffness of ODEs BIT Greenbaum and Trefethen and as matrix approximation problems SIAM Sci Comput Baggett Driscoll and Trefethen mostly linear model of transition to turbulence Physics of Fluids Reddy and Trefethen Pseudospectra of the operator SIAM of Applied Math Greenbaum and Trefethen Do the pseudospectra of matrix determine its behavior Lin Alg and to appear Wegert and Trefethen From the Buffon needle problem to the Kreiss matrix theorem American Mathematical Monthly Toh and Trefethen Calculation of pseudospectra by the Arnoldi iteration to appear in SIAM Journal of Statistical Computing Trefethen Trefethen and Schmid Spectra and pseudospectra for pipe Poiseuille flow IPS Res Interdisc Project Center for Supercomputing Trefethen Pseudospectra of operators to appear in the ICIAM proceedings and submitted to SIAM Review Return to Trefethen homepage	other	cornell
1110	 Server Date Sunday GMT Wednesday GMT GIF Collections Have fun Kiki Totoro Hobbie Who is it The following pictures are the contributions from Shiouje Lin TotoroBus And KOR from Matatabi site and others This Page is still under major constructions Comments Please mail to linhsian	other	cornell
1111	 Server Date Sunday GMT Sunday GMT CS Department Students Students in the CS Department We have directory listing of all the people in the department giving the email address office number and phone number for each person You can find out more about individual students in the department by linking to their home pages PhD Students These are the PhD students who have home pages Marcos Kawazoe Aguilera Anindya Basu Ralph Benzinger Karl dan brown Wei Chen Chang Francis Chu Karl Crary Grzegorz Czajkowski Ashvin Dsouza Funda Ergun Erlingsson Adam Florence Asif Uddin Ghias Katherine Guo Ben Hao Mark Hayden Jason Hickey Takako Hickey Nicholas Howe Deyu Hu Jing Huang Huang Tibor Janosi Sumedh Kanetkar David Karr Vera Kettnaker Induprakas Kodukula Julia Komissarchik Vladimir Kotlyar Ioi Lam Li Li Xiaoming Liu Nikolay Mateev Vijay Menon Lynette Millett Yaron Minsky Roderick Moten Sugata Mukhopadhyay Pavel Naumov Ooi Eugene Ortenberg David Pearson David Pierce Nikos Pitsianis Ravi Kumar Laura Sabel Rosen Sharma Amit Singhal Frederick Smith Paul Stodghill Scott Stoller Kristen Summers Jonathan Swartz Aswin van den Berg Alexey Vaysburd Arun Verma Divakar Viswanath Jia Wang Lidong Zhou Former PhD Students Students who have graduated or left the program James Allan Lorenzo Alvisi David Bau Mary Ann Branch Amy Briggs Russell Brown Vineet Buch Tushar Chandra Alan Giambattista Bradford Glade Sudeep Gupta Ho Michael Hopcroft Bruce Hoppe Rebecca Isaacs Neel Jain Michael Kalantar Brent Knight Yanhong Annie Liu Damen Peterson William Rucklidge Daniel Scharstein Kjartan Stefansson David Sturgill Samuel Weber MEng Students These are the MEng students who have home pages Shilpa Agarwal Vineet Ahuja Jonathan Barber Deepak Balakrishna Phillips Benton Aastha Bhardwaj Yoo Sun Chung Eric Shim Mishaal Almashan Mauricio Aguilar Alvarez Alerk Amin Tsai Kuan Chao Hung Chen Jeffrey David Cohen Alex Chan Philip Chan Seena Cherangara Stefano Lynn Dabbous Tom Daley Scott Dawson Jose Luis Fernandez Dan Glaser Venkatesh Gopalakrishnan Michael Grafton Alex Grinzayd Avinash Gupta Vincent Hammer Tsuneshi Hashimoto Dan Herman Alfred Hong Jerry Hsu Richard Hsu Fred Hsu Min Stanley Huang Steven Huang Thomas Hui Dan Hung Hani Jamjoom Ashish Jhaveri Koichi Kamijo Kartik Kapadia Harshvardhan Kaul Heji Kim Vivekananda Chowdhary Kolla Mike Korby Ho Cheung Lai Lai Sean Landis Indira Vidyaprakash JanWun Lee Jessica Lee William Lee Kenneth Li Jon Logan Felix Lung Kevin Mai Indira Malik Justin Miller Jeffrey Moore Bill Nell Kevin Newman Matt Nilsen Vivien Ng Kazushi Ota Ankit Patel Julian Pelenur Aaron Peromsik Todd Peskin Janeen Reich Boon Biu Saelim Sukhpal Sanghera Daisuke Sasaki Jody Shapiro Ashish Soni Masafumi Suzuki Kao Theodore Wong Linda Wu Warren Wu Yu Lucy Wu Richard Wu Amith Yamasani Diyu Daisy Yan Lin Hsian Wang Li Jing Vince Hu Nobuhiko Mukai Lin Peter Chen Libby Lin Xichun Jennifer Guo Wang Eric Vitrano Sunil Srtivastava Liau Yuichi Tsuchimoto Undergraduate Students These are the Undergraduate students who have home pages Ulla Bartsich Reza Behforooz Alexander Castro Tristan De Buysscher David Dunham Pedro Felipe Felzenszwalb Juliean Galak David Greenberger Brad Johanson David Koster Philip flip Kromer Michael Leventon Ryan Lilien Greg Pass Mike Perham Zulfikar Ramzan Eric Scharff Fernando Viton Justin Voskuhl ed wayt Sherrie Wu Darren Yee Leong Kian Fai Other people in the department The department home page Click here for some information on how to set up your own home page	other	cornell
1112	 Server Date Monday GMT Tuesday GMT The Horus Papers Publications Through this page you can retrieve most of the papers reports and thesis produced by members and visitors of the Horus project The papers on Horus and related issues start in for earlier papers you should consult the Isis papers Available retrieval methods Each entry in the bibliographical list has one or more icons associated with it An abstract for this paper can be found on the Horus abstracts page postscript version can be retrieved from the Cornell CS ftp server The document can be retrieved in various forms from the Cornell CS Technical Report server The paper is as an HTML document Selecting an icon will retrieve the document in case of Postscript or bring you to the appropriate page where you can view the document in the selected form Horus architecture protocols and performance Kenneth Birman and Robbert van Renesse Software for Reliable Networks in Scientific American May Robbert van Renesse Kenneth Birman and Silvano Maffeis Horus flexible Group Communication System Communications of the ACM April Robbert van Renesse Masking the Overhead of Protocol Layering To appear in the Proceeding of the ACM SIGCOMM Conference Stanford September Roy Friedman and Ken Birman Using Group Communication Technology to Implement Reliable and Scalable Distributed IN Coprocessor To appear in the Proceedings of Heidelberg September Werner Vogels World Wide Failures in the proceedings of the ACM SIGOPS European Workshop Connamoran Ireland September Robbert van Renesse Kenneth Birman Roy Friedman Mark Hayden and David Karr Framework for Protocol Composition in Horus In the proceedings of Principles of Distributed Computing August Roy Friedman and Robbert van Renesse Strong and Weak Virtual Synchrony in Horus Cornell University Technical Report August Roy Friedman and Robbert van Renesse Packing Messages as Tool for Boosting the Performance of Total Ordering Protocols Cornell University Technical Report August Robbert Van Renesse and Kenneth Birman Protocol Composition in Horus Cornell University Technical Report March Robbert Van Renesse Kenneth Birman Bradford Glade Katie Guo Mark Hayden Takako Hickey Dalia Malki Alex Vaysburd and Werner Vogels Horus Flexible Group Communications System Cornell University Technical Report March Takako Hickey and Robbert Van Renesse Incorporating System Resource Information into Flow Control Cornell University Technical Report February Robbert van Renesse Takako Hickey and Kenneth Birman Design and Performance of Horus Lightweight Group Communications System Cornell University Technical Report August Werner Vogels and Robbert van Renesse Support for Complex Applications using the Horus system December Horus and Security David Cooper and Kenneth Birman Preserving Privacy in Network of Mobile Computers Cornell University Technical Report March Michael Reiter Kenneth Birman and Robbert Van Renesse Security Architecture for Systems Cornell University Technical Report June Virtual Synchrony Partitions and new protocols Roy Friedman and Ken Birman Trading Consistency for Availability in Distributed Systems Cornell University Technical Report April Roy Friedman Idit Keidar Dalia Malki Ken Birman and Danny Dolev Deciding in Partitionable Networks Cornell University Technical Report November Roy Friedman Using Virtual Synchrony to Develop Efficient Fault Tolerant Distributed Shared Memories Cornell University Technical Report March Mark Hayden and Kenneth Birman Achieving Critical Reliability With Unreliable Components and Unreliable Glue Cornell University Technical Report March Dalia Malki Kenneth Birman Aleta Ricciardi and Andre Schiper Uniform Actions in Asynchronous Distributed Systems Cornell University Technical Report September Aleta Ricciardi Andre Schiper and Kenneth Birman Understanding Partitions and the No Partition Assumption Cornell University Technical Report June Andre Schiper and Aleta Ricciardi Communication Based on Weak Failure Suspector Cornell University Technical Report April Aleta Ricciardi and Kenneth Birman Process Membership in Asynchronous Environments Cornell University Technical Report March Comments to Werner Vogels	other	cornell
1113	 Server Date Monday GMT Sunday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
1114	 Server Date Sunday GMT Wednesday GMT Lecture CONCEPTS last lecture Compound statements and scoping rules blocks and declarations fun with else iteration with while and break fencepost errors CONCEPTS this lecture Additional statements for switch type coercion and its perils HANDOUT Prelim answers Prelim notes Review session is Sunday at Prelim is Monday PM Coverage is everything but there will be no detailed questions on the stack model Closed book closed notes mostly for your benefit Bring writing implement We do stress memorization We will forgive minor syntactic errors Room assignments Upson Phillips Do miss the prelim Make up exams are oral and guaranteed to be no easier than the real one Compound statements Another kind of statement we actually seen this already but had given it name This is what the curly braces do at least so far Sort of like begin and end in PASCAL Syntax an open curly brace then or more statements then closed curly brace square compound expression can include declaration statements but they must all appear at the beginning before any statement which is not declaration statement Example with declaration int square Scoping rules Nasty example do write code like this void main int int printf The rule is simple to figure out which is intended look outwards from the line you are on until you find You can add this to the stack model but little ugly and we wo do it We wo use this feature in anything very complicated in Where have we seen compound statements Conditional statements often involve compound statementsif test thenstatement else elsestatement test is an expression but thenstatement and elsestatement can be any statement It is good practice to use compound statements with conditional statements it makes your code much easier to read Where else have we seen compound statements Hint in this case they usually involve declarations Fun with else You do actually need to use else with ifif printf This can lead to totally unreadable code especially if you nest your if statements Do do this if if else There is reasonable way of doing multiway conditional statementsif if if else defaultstatement do personally find this incredibly readable but sometimes it necessary Iteration Today we mostly cover the syntax of iteration in We do some examples of its use in section Iteration involves executing some part of your program repeatedly as does recursion The easiest way to do iteration is with whilewhile expression statement Typically statement is compound statement semantics of while evaluate expression If it is false zero then we done with the while statement If it is true then evaluate statement then evaluate the while statement again Example void countdown int count while count printf count count count printf Blastoff void main start countdown start printf start This example also shows off subtle but important property of the stack model Note that if the test expression is never your while statement will run forever How do we get out of while statement early while count printf count if return count count Break statements Suppose that instead of getting out of the entire countdown function we merely want to get out of the while statement NASA did goof the astronauts got impatient and decided to blast off before the countdown finished There is good way and bad way We only going to teach you the good way The break statement terminates while statementvoid countdown int count while count printf count count count if count break printf Blastoff What about nested while statements Again this allows unreadable code to be created The world has enough of this without you folks contributing Small example while while if abs break if test break The rule is that break statement terminates the smallest while statement that encloses it Iteration and the stack model As far as the stack model is concerned iteration primitives are much different than conditional statements They simply manipulate the program counter These primitives are sometimes called Control Flow primitives Fencepost errors With iteration and also with recursion it becomes very easy to make fencepost errors Suppose you want to build fence and you need to install posts which are apart How many fenceposts do you need void nastybug int count count while count count count something This kind of bug is hard to find in general	other	cornell
1115	 Server Date Sunday GMT Monday GMT WIPS Seminar Spring Work in Progress Seminar WIPS This weeks seminar No seminar this week Maintained by Sugata Mukhopadhyay	other	cornell
1116	 On the Click Clique Some people have complained that click here is annoying and redundant To me it kind of friendly Those who complain are usually from northern countries or states Southern dialects of languages typically are more welcoming and wordy Could it be that speak html with southern accent click here to go back ok	other	cornell
1117	 Server Date Monday GMT Friday GMT Lecture Notes CS Lecture Notes Thorsten von Eicken Fall Introduction Introduction to parallel computing systems uses of parallel machines technology trends MPP Primer Multiprocessors Introduction to the characteristics of multiprocessors used in massively parallel machines MPP Primer II Networks Introduction to the characteristics of networks used in massively parallel machines LogP model of parallel computation Introduction to models of parallel computation PRAM BSP LogP Reading LogP towards realistic model of parallel computation LogP example Fast Fourier Transfom Sample algorithm analysis using LogP Blocked Matrix Multiply Blocked matrix multiply algorithm and intro to An Irregular Application Introduction to through the succesive optimization of an irregular parallel application Reading Introduction to Architecture network node architecture network interface reliability Active Messages primitives timing Reading Active Messages man pages More Implementation and Intro to Sorting Reading Sorting on the Parallel Sorting Sorting and Scaling Reading Scaling Message Passing Beyond Reading Introduction to Reading definition Reading description Reading theory More Implementation ATM Networks More ATM Networks Columbus Day The Case for Networks of Workstations Term Project Discussion Active Messages over ATM Networks Reading Generic Active Message specification Reading Optimistic Active Messages in Orca Cache Coherent Shared Memory More Cache Coherent Shared Memory Cache Coherent Shared Memory The Standford DASH Multiprocessor Scheduler Activations Locking without Contention More Locks and Barriers Process Scheduling on Shared Memory Multiprocessor The KSR Multiprocessor KSR vs DASH comparison More KSR vs DASH comparison Multithreading The Tera Multiprocessor An implicitly parallel programming language More Return to CS Home Page	other	cornell
1118	 Server Date Monday GMT Monday GMT CS Homework Number Homework Number Date Assigned February Date Due February To submit your answer Drop by the consulting office Upson during consulting hours to get your homework graded and recorded In the problems below you are asked to write several assembly language routines While it is not required we strongly suggest that you use BasePak to solve this problem set In grading this problem set we will forgive minor syntactic errors but many occurrences of the same error will be penalized All programs should be well commented listing any assumptions you made about the problem and how the registers are used Unless otherwise specified assume conventions are being used All problems count equally in the final grade Problem Bit counting Write code fragment that counts the number of bits that are set equal one in the number stored in register The result should be placed in register For example if on entry to the code fragment then should contain on exit The contents of may be destroyed by the fragment Problem Machine Code Give the machine code representation in hexadecimal of the following instructions in assembler What assembly language instruction is encoded in the following machine code Problem Control Structures For each of the following Pascal control structures give the assembler equivalent Assume the variable is stored in register and is stored in register the for to do begin end the while loop while do begin end the loop repeat until the structure if then begin end else begin end the case statement case of end	other	cornell
1119	 Server Date Sunday GMT Friday GMT Assignments Assignments All assignments are due at the beginning of the lecture on the day specified before the lecture starts No late assignments will be accepted You must work on all assignments alone unless specifically stated otherwise in the assignment Assignments contribute large fraction of your grade so do them Graded work will be available in the consulting office Upson and will be handed back in class If you disagree with the way an assignment has been graded you may submit it for regrade To do so fill out regrade form available on the rack outside Upson and staple it to your assignment Leave the assignment in the mailbox in Upson You have one week after an assignment is returned to submit regrade IMPORTANT Always check the the notes besides the assignments for corrections and hints Assignment Due on Sep Notes Solution Assignment Due on Sep Solution Assignment Due on October Notes Solution Assignment Due on October Solutions Assignment Due on October Notes Solution Assignment Due on November Notes Assignment Due on November Notes Assignment Due on December Notes	other	cornell
1120	 Server Date Monday GMT Thursday GMT How to submit Phase How to submit your support level The deadline for phase of the project is Friday December at midnight Once you are satisfied with your project or too tired to continue please set the directories where your files are located to be world readable and send to lorenzo message where you specify the name of those directories You will also have to submit printout of the files that constitute your nucleus to me Lorenzo by pm on the next Monday December When you do so you may want to spend few minutes with me so we can go over your code together If you want you can send me mail over the weekend to set up appointments	other	cornell
1121	 Server Date Monday GMT Thursday GMT Mathematics For Computer Generated Spoken Documents Title in audio ASTER Demonstration is dedicated to my AsTeR Audio System For Technical Readings is computing system for rendering technical documents in audio AsTeR was developed by for his PhD pages An audio formatted version of the thesis approximately hours produced by AsTeR is being made available by RFB Recordings For the Blind as the first computer generated talking book Here is the abstract in print and here is an audio formatted version This hypertext document demonstrates the audio renderings generated by AsTeR Each example is made up of three components The original LaTeX input The audio formatted output produced by AsTeR The speech is produced by Dectalk and has been digitized at mulaw AsTeR uses stereo to render tables an effect that is not conveyed by the mono encoding The visually formatted version produced by LaTeX and DVIPS Section simple fractions and expressions This set of examples demonstrates the use of voice inflection and pauses to convey grouping of succinctly The state of the audio formatter is point in audio space Here audio state was varied along dimension in audio space before rendering This is equivalent to parenthesizing in the visual context Section superscripts and subscripts To convey subscripts superscripts and other visual attributes AsTeR varies audio state along dimension that is orthogonal to independent of the dimension used to convey This allows the nesting of these mutually independent concepts The following examples demonstrate how superscripts and subscripts are rendered unambiguously Section Knuth examples of fractions and exponents These examples are taken verbatim from the TeX Book by Donald Knuth They are used in the TeX Book to demonstrate the power of the TeX layout operators Notice that all of these examples comprise of the same symbols but are very different AsTeR renders these as unambiguously as TeX Section continued fraction Moving along dimension in audio space defines perceptibly monotonic change This notion of perceptible monotonicity is vital in conveying nesting Audio LaTeX Postscript Section Simple School algebra Here are examples from school algebra Section square roots Notice the choice of unambiguous renderings for the following expressions Section Trigonometric identities Written mathematical notation can be ambiguous and hard to recognize Notice the complete absence of parenthesis in some of the examples below AsTeR uses several heuristics to construct the correct tree structure for these expressions Section Logarithms Notice the rendering of these expressions when speaking the base of the logarithm The renderings are chosen to reduce cognitive load log base of as opposed to log of to the base Section Series rendering rules allow AsTeR to interpret the superscripts in these examples as exponents Such interpretation is not into the renderings it is fully customizable by the user Section Integrals The first of these integrals probably the most innocuous is also the most difficult to recognize it is impossible to determine the variable of integration Section Summations Here are summations Notice that the same expression can be written in more than one way Section Limits Here are limits Section Cross referenced equations The following example is meant to illustrate AsTeR rendering of and is most effective when AsTeR is used interactively AsTeR enables the listener to give meaningful names to objects and uses these names when referring to such objects in later Section Distance formula Notice that AsTeR produces good intonational structure when speaking text that is intermixed with mathematics Audio LaTeX Postscript Section Quantified expression The quantifiers present an interesting challenge to AsTeR recognizer Audio LaTeX Postscript Section Exponentiation Once again perceptible monotonicity allows AsTeR to convey the following examples deeply nested expressions succinctly These examples were produced with the Emacs Calculator symbolic algebra system AsTeR interfaces directly with this calculator and renders the output just as well as any document Section generic matrix AsTeR uses stereo effects to convey the structure of the matrix Rendering commences on the left and moves progressively right as each element of any row is spoken Audio LaTeX Postscript Section Faa de Bruno formula This section presents Faa De Bruno formula taken from Knuth Art Of Computer Programming Vol first heard it spoken by RFB reader on talking book it took seconds to speak Since the renderings produced by AsTeR utilize features of the audio space not available to human reader still have not met reader who can change the size and shape of her head as she talks the rendering takes under seconds As you will hear soon even this is too long you forget the beginning by the time you hear the end Later we present rendering using variable substitution powerful technique for conveying structure of complex expressions Notice the proper intonational structure produced for text intermixed with mathematics Audio LaTeX Postscript Audio LaTeX Postscript Here is Faa De Bruno formula in all its glory Audio seconds LaTeX Postscript AsTeR can process complex expressions like the above and upon request replace complex with meaningful identifiers Such renderings convey structure the listener can then listen to the separately Since this substitution process is performed by AsTeR there is no LaTeX or Postscript equivalent for the audio output in this case The formula audio seconds Lower constraint audio seconds Numerator audio seconds Denominator audio seconds Raman raman Last modified Wed Aug	other	cornell
1122	 Server Date Sunday GMT Tuesday GMT Course Information Course Information What When Projects and Grades The Bottom Line What You Must Do What When Lectures Mon Wed Fri pm Olin Prerequisites CS and CS or equivalent courses Students are expected to understand fundamental issues in operating systems file systems and networks and to be comfortable programming in the programming language Lecture Notes Texts and References Multimedia is new and rapidly developing field comprehensive text that is appropriate to this course is not available The required readings for this class will consist of selected journal and conference articles as well as notes we will produce All required readings will be made available in class You are expected to read the material before coming to class you will get significantly more out of the lectures if you do so Required We will hand out course notes and copies of the relevant papers Whenever possible we will place these but many of the papers are not available on line and can only be copied Since the copying costs go well beyond the amount allocated for the course you will be ask to pay towards the copying costs Please give check no cash to the Cindy Robinson Upson payable to Cornell University In the memo section of the check write the course number Optional Partridge Gigabit Networking Addison Wesley Publishing Company Jain Fundamentals of Digital Image Processing Prentice Hall You are not required to buy the optional books Partridge is an excellent text on next generation networks Jain is great text on Digital Image Processing resources There will be newsgroup for this course and WWW home page http The slides used in lecture will be available electronically as will any handouts that we write and several of the papers for the course Projects and Grades Laboratory Facilities All enrolled students will be given accounts in the Upson CS Undergraduate Lab room You are welcome to use other machines for doing assignments Requirements Grading and Regrades is graduate course and will be graded like one We expect to give out mostly but this depends on your doing the assigned work There is no final exam or in this course Your grade is determined by three measures First you will be graded on your answers to three homework assignments that will require programming written responses Second you will complete small scale research project The homework assignments will constitute of your grade the project will count for of your grade Third you will required to read of the papers passed out For each paper you read you must post critique of the paper on the Web see below You must get passing grade on of the critiques to pass this course The critiques otherwise have no effect on your grade You should work in groups of two or three on all assignments When working in group hand in single response for the group that includes the names of all students in the group The same grade will be given to each student We expect all students in group to be equally able to answer questions about the program or project Written problem sets should be turned in electronically before the beginning of the lecture on the due date Instructions for handing in assignments will be given with the assignment Late assignments will be rejected Assignments will be returned electronically Grades will be posted indexed by secret ID number you provide on the web If you believe that we have made grading error please bring the matter to our attention but no later than one week after your assignment has been returned To submit problem set for regrading send short note explaining clearly why you think it should be regraded to one of the TAs Academic Integrity We expect students in to uphold Cornell standards of academic integrity If we find out otherwise you will fail the course The work you submit in CS is expected to be the result of your individual effort You are free to discuss course material approaches to problems and details of the system with your colleagues and instructors but you should never misrepresent someone work as your own Permissible cooperation should never involve student possessing copy of all or part of another program or other work regardless of whether that copy is on paper or in computer file on hard disk or floppy disk The only exception to the above rules is when students work together to submit joint project It is also the student responsibility to protect work from unauthorized access For example do not discard copies of your programs in public places If someone turns in your work you may be held partly responsible The Bottom Line What You Must Do You must do three things to complete this course assignments critiques and the project Each assignment will tell you what you have to hand in Critiques and projects are described below Critiques For of the papers you receive you must publish critique of the paper on the web The critique should be available from your CS web page which you will create in homework assignment one The purpose of this critique is to get you to think critically about what you read welcome to graduate school Virginia For each paper your critique should answer the following questions in one to two paragraphs What is the MAIN POINT of this paper What is SIGNIFICANT about this paper Could and experience practitioner REPRODUCE the results in this paper What is WEAK about the paper How could it have been improved either the research or the writing Rate the paper on scale of worst to best We will examine these critiques to determine if you have read and understood the Project Guidelines The final project is small scale research project It must have two qualities it must attack research problem and it must pertain to multimedia So what is research Research proposes and evaluates new solution to an interesting problem This simple statement has two parts Research proposes and evaluates new solution Simply stating an idea or writing program is not research because there is no evaluation You must evaluate the idea for it to become research Evaluation can take many forms For example suppose you develop new method for detecting scene breaks in video sequence You can evaluate this idea by implementing it and compare the results of your algorithm on realistic video sequences with that of an existing algorithm Such comparison might compare the runtime performance or the quality of result how accurately did it detect the scene breaks Or you might compare the results of your algorithm to the best results one that human produces Another example of evaluation is designing large system implementing it and then discussing the tradeoffs in the system design Such experience papers are very valuable to other system builders Sometimes but rarely an idea can be novel enough that simply stating it causes such new way of looking at things that it is research This is very hard thing to sell however so it better be earth shaking to and interesting problem So how can you tell what is interesting This is clearly subjective but good metric is to ask how many people want to know the answer to your problem As Medawar wrote in Advice to Young Scientist The only person interested in why of sea anemones have black spots is the person studying why of sea anemones do not have black spots badly paraphrased by Brian Remember it is just as hard to do uninteresting research as it is to do interesting research You will work in groups of two to four students on the final project If you want to work individually or in larger group you must ask Brian before Sept We will provide list of possible projects few weeks into the course or you may explore an idea of your own subject to our approval You will be required to write project report approximately ten pages in length and to make minute oral presentation Your grade will be based equally on the quality of your research the quality of your writing and the quality of your presentation Sign up sheets for the presentation will be available later The best projects will be selected to present in class during the last week of classes Three milestones at the and week marks will help to measure your progress The first milestone Sept will be brief written presentation one to two paragraphs of your two proposed projects primary and backup Such papers are called white papers in normal research projects The second milestone Sept will be short approximately page written project proposal The third milestone Oct Oct will be minute presentation on the status of your project The final presentation will take place on Nov and home page	other	cornell
1123	 Server Date Monday GMT Friday GMT CS Fall Lecture Lecture Binomial Heaps homepage Page Page Page Page Page	other	cornell
1124	 Server Date Friday GMT Thursday GMT Internet Guide Places to visit on information super highway Cornell University Cornell University CU Info Department of Computer Science book Industry MCI Novell Movies http News on Web Your news stand Pictures My Art Gallery Digital Picture Archive on the floor Image Finder View of Moscow Picture gallery by Felix Lee collection Russia Moscow guide References American English dictionary Edmund car guide Dictionary of technical and natural language Map collection Webster dictionary Weather Ithaca MIT server UI server	other	cornell
1125	 Server Date Tuesday GMT Monday GMT PODC home page Fourteenth ACM Symposium on Principles of Distributed Computing PODC PODC is conference that focuses on research in the theory design specification or implementation of distributed systems PODC will be held in Ottawa Ontario Canada from August Important dates Feb Paper submission deadline Apr notifications May versions of accepted papers due July Late registration fee charged after this date Aug Conference dates see you in Ottawa Major changes from previous PODCs This year PODC is inaugurating best student paper award paper is eligible if at least one of its authors is student at the time of submission This year recipient is titled Collecting Cyclic Distributed Garbage Using Heuristics to Control Migration by Umesh Maheshwari and Barbara Liskov from MIT Further information The call for papers How to register and get to the conference The conference program includes links to some papers available online Information from the local arrangements Temporary notices about PODC room share information The PODC and PODC home pages Other related conferences and calls for papers About research in distributed algorithms and systems Ordering proceedings from earlier PODCs Maintained by tushar	other	cornell
1126	 Date Sun Dec GMT Server Wed Oct GMT Temple of the Cat This is personal web page for Catherine Starkey am currently senior in computer science at Cornell University To find out more about me and what do try the links to the left or write to me	other	cornell
1127	 Date Tuesday GMT Server Saturday GMT Islensk heimasida Freys English homepage Fyrst um mig er doktorsnemi Cornell og grein University of Illinois Helsta mitt er greining tengdar og stofnanir af Daglegar aacute ensku gegnum RealAudio Tilraunir beinar skemmtilegir The Internet Movie Database kvikmyndagagnabanki Allt um Kasparovs og Deep Blue Nokkrar Fiske safn Cornell Hvernig Vinir og vandamenn Einar Starri Veraldarvefurinn HTML fyrir byrjendur Yahoo AltaVista Veraldarvefurinn Netfangalistinn jonsson	other	cornell
1128	 Server Date Sun Dec GMT bytes Sun Nov GMT To simplify our URL the website for NBA has moved slightly to Please update your bookmark Return to Johnson School Courses	other	cornell
1129	 Server Date Sunday GMT Thursday GMT Teitelbaum CV Tim Teitelbaum Associate Professor Department of Computer Science Cornell University Ithaca New York USA Date of Birth April Social Security Citizenship United States Telephone Fax Email tt CONTENTS Education Positions Awards Grants Students Publications Lectures Professional Activities Cornell Activities Cornell Courses Taught Cornell Lectures EDUCATION University Computer Science Massachusetts Institute of Technology Mathematics POSITIONS Associate Professor Department of Computer Science Cornell University Visiting Researcher Institut National de Recherche en Informatique et en Automatique INRIA Rocquencourt France Senior Lecturer Department of Computer Science Cornell University Assistant Professor Department of Computer Science Cornell University Graduate Student Department of Computer Science University Senior Research Programmer Physics Department Columbia University Programmer Western Electric Corporation AWARDS Dean Prize for Innovation in Undergraduate Teaching May GRANTS Software Engineering with Transformational System NSF with Gries Incremental Computation ONR Incremental Computation ONR The Synthesizer Generator NSF Incremental Computation ONR Generating Efficient Programming Environments NSF Research Experience for Undergraduates NSF Generating Efficient Programming Environments Supplement for Undergraduate Research Coordinated experimental research on systems for constructing and manipulating complex objects NSF with Gries Constable and Hopcroft Language Editors and Their Generators IBM Affiliation Program for Education in Language Editors and their Implementations IBM Programming Environments NSF Programming Environemnts NSF STUDENTS Yanhong Liu John Reppy John Field Allan Zaring Stephen Peckham William Pugh PYI Packard Fellow Roger Hoover Susan Horwitz PYI Thomas Reps winner of the ACM Doctoral Dissertation Award PYI Packard Fellow PUBLICATIONS Software The Synthesizer Generator Release December Release July Release April Release April Release September GrammaTech Release December GrammaTech with Reps et al Release August GrammaTech Release January GrammaTech The Synthesizer Generator is tool for creating environments from formal specifications To date it has been licensed in source code form for research purposes to approximately sites worldwide Roughly half of the sites are in the and half are overseas roughly half the sites are academic and half are government or industrial research laboratories The implementation of Release consists of about lines of source code demonstration environments distributed with the system are implemented in about lines of Synthesizer Specification Language SSL code The Cornell Program Synthesizer Version June Version September Version September with Reps The Cornell Program Synthesizer was programming environment for small dialect of During its lifetime it was licensed to sites worldwide and was used by over introductory programming students Books The Synthesizer Generator System for Constructing Editors pages NY with Reps The Synthesizer Generator Reference Manual First Edition Cornell University Ithaca NY August pages Second Edition Cornell University Ithaca NY June pages Third Edition pages NY NY with Reps Fourth Edition pages GrammaTech Ithaca NY with GrammaTech staff Chapters in books Alex an Alexical Programming Language Visual Languages and Applications ed Ichikawa Jungert and Korfhage Plenum Press NY The Cornell Program Synthesizer programming environment Interactive Programming Environments ed Barsow Sanderwall and Shrobe NY pages with Reps Also appeared in CACM September pages The why and wherefore of the Cornell Program Synthesizer Tutorial Software Development Environments ed Wasserman IEEE Computer Society Press November pages with Reps and Horwitz Also appeared in Proceedings of Symposium on Text Manipulation Portland OR June SIGPLAN NOTICES June pages Journals Systematic Derivation of Incremental Programs Science of Computer Programming pages with Yanhong Liu Language Processing in Program Editors IEEE Computer pages November with Reps An Efficient General Iterative Algorithm for Dataflow Analysis Acta Informatica pages with Horwitz and Demers Generating editing environments based on relations and attributes TOPLAS pages October with Horwitz Incremental analysis for editors TOPLAS pages July with Reps and Demers The Cornell Program Synthesizer programming environment CACM September with Reps Reprinted in Interactive Programming Environments Barsow Sanderwall and Shrobe McGraw Hill Refereed Conference Proceedings Discovering Auxiliary Information for Incremental Computation Proceedings of ACM Symposium on Principles of Programming Languages Petersburg Beach FL pages January with Yanhong Liu and Scott Stoller Caching Intermediate Results for Program Improvement Proceedings of ACM SIGPLAN Symposium on PEPM La Jolla CA pages June with Yanhong Liu Incremental Reduction in the Lambda Calculus Presented at Lisp and Functional Programming Conference Nice France pages June with Field Attribute Grammars and Editing Environments Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation White Plains NY pages June with Chapman Incremental Computation by Function Caching Proceedings of ACM Symposium on Principles of Programming Languages Austin TX January pages with Pugh Alex an Alexical Programming Language Workshop on Visual Language Linkoping Sweden August with Kozen et Efficient Incremental Evaluation of Aggregate Values in Attribute Grammars Proceedings of ACM SIGPLAN Symposium on Compiler Construction Palo Alto CA June pages with Hoover Remote attribute updating for editors Proceedings of ACM Symposium on Principles of Programming Languages Petersburg FL January pages with Reps and Marceau Relations and attributes symbiotic basis for editing environments Proceedings of ACM SIGPLAN Symposium on Language Issues in Programming Environments SIGPLAN NOTICES June pages with Horwitz The Synthesizer Generator Proceedings of ACM Software Engineering Symposium on Practical Software Development Environments Pittsburgh PA April pages with Reps The why and wherefore of the Cornell Program Synthesizer Proceedings of Symposium on Text Manipulation Portland OR June SIGPLAN NOTICES June pages with Reps and Horwitz Reprinted in Tutorial Software Development Environments Wasserman IEEE Computer Society Press November pages Incremental evaluation for attribute grammars with application to editors Proceedings of ACM Symposium Principles of Programming Languages Williamsburg VA January pages with Demers and Reps Encapsulated data types and generic procedures Proceedings of DOD Workshop on Common Programming Language for Embedded Systems Ithaca NY pages with Demers et error correction by evaluation of algebraic power series Proceedings of ACM Symposium Theory of Computing Austin TX April May pages study of sigma leptonic decay using an HPD in pattern recognition mode Proceedings International Conference Advanced Data Processing for Bubble Chambers and Spark Chambers New York NY October pages with Newman et Current status of automatic scanning at Columbia University International Conference on Programming for Flying Spot Devices Munich January with Burd Tutorials Semantic Analysis SIGPLAN Conference on Programming Language Design and Implementation Albuquerque NM June Generating Environment SIGPLAN Conference on Programming Language Design and Implementation San Francisco CA June Semantic Analysis SIGPLAN Conference on Programming Language Design and Implementation Atlanta GA June Semantic Analysis SIGPLAN Symposium on Complier Construction Palo Alto CA June Other Publications On the value of editors CACM May pages with Reps The Cornell Program Synthesizer tutorial introduction Department of Computer Science Cornell University First Edition July Fifth Edition May pages Approximately copies printed The Cornell Program Synthesizer announcement SIGPLAN NOTICES October page Technical Reports Incremental Computation for Transformational Software Development Tech Department of Computer Science Cornell Unversity Ithaca NY March with Yanhong Liu Caching Intermediate Results for Program Improvement Tech Department of Computer Science Cornell University Ithaca NY March with Yanhong Liu Systematic Derivation of Incremental Programs Tech Department of Computer Science Cornell University Ithaca NY August with Yanhong Liu Deriving Incremental Programs Tech Department of Computer Science Cornell University Ithaca NY September revised October with Yanhong Liu Alex an Alexical Programming Language Tech Department of Computer Science Cornell University Ithaca NY May with Kozen et The Cornell Program Synthesizer microcomputer implementation of Tech Department of Computer Science Cornell University Ithaca NY March formal syntax for Tech Department of Computer Science Cornell University Ithaca NY January compiler project Department of Computer Science Cornell University Ithaca NY January Minimal Distance Analysis of Syntax Errors in Computer Programs Ph Thesis Department of Computer Science University Pittsburgh PA September LECTURES Assuring software quality using an Ada programming environment Corporation Syracuse NY April Loral Aerospace Corporation Owego NY June IBM Federal Systems Division Owego NY April Software Productivity Laboratory Herndon VA March SAIC Orlando FL March Orlando FL March ECC Orlando FL March GE Aerospace Syracuse NY July IBM Federal Systems Division Owego NY July Attribute Grammars and Editing Environments Rice University Houston TX April ACM SIGPLAN Conference on Programming Language and Design and Implementation White Plains NY June Static semantic analysis ACM SIGPLAN Albuquerque NM June Automatically enforcing quality in ADA software Implications for interactive tools Annual Washington ADA Symposium McLean VA June The Synthesizer Generator system for constructing editors Bell Laboratories Murray Hill NJ May HP Laboratories Palo Alto CA March Lockheed Missiles and Space Palo Alto CA March HP Collins CO March Software Productivity Consortium Herndon VA March Digital Equipment Corporation Nashua NH February Ratheon Corporation Portsmouth RI November GE Aerospace Syracuse NY July RADC Rome NY July Montreal Canada July GTE Research Triangle Park NC May Verdix Corporation Herndon VA April Loral Space and Range Systems San Jose CA March Sun Microsystems Laboratories Mountain View CA March SunPro Mountain View CA March Lockheed Missiles and Space Palo Alto CA March Workshop on Programming Environments Dagstuhl Germany March Arlington VA March Software Productivity Consortium Herndon VA February Seer Technologies New York NY October Tandem Computers Cupertino CA September Software Productivity Laboratory Loral Aerospace San Jose CA September IDE San Fransisco CA September Telesoft San Diego CA Septmber Naval Oceans Systems Center NOSC San Diego CA September NASA Langley Air Force Base May Ford Aerospace San Jose January Annual Meeting Syracuse University CASE Center Blue Mountain Lake NY July Incremental Computation Office of Naval Research April Generation of Programming Environments Boston SIGPLAN Intermetrics Cambridge MA November General Motors Warren MI March Department of Computer Science Bucknell University Lewisburg PA Department of Mathematics and Computer Science Dartmouth College Hanover NH October General Electric Schnectady NY July Institute for the Retraining in Computer Science Clarkson University Potsdam NY July Office of Naval Research Washington DC February Wang Institute January Department of Computer Science University of Maryland October programming environments Department of Computer Science ETH Lausanne Switzerland July lectures Department of Computer Science University of Oslo Oslo Norway February Department of Computer Science University of Linkoping Linkoping Sweden February Incremental evaluation for attribute grammars with application to editors Symposium of Computer Software Engineering Changsha Peoples Republic of China April Central Research Laboratory Nippon Electric Company Japan April Department of Computer Science New York University New York NY March Department of Computer Science Purdue University Lafayette IN February Eighth Annual ACM Symposium on Principles of Programming Languages POPL Williamsburg VA January Department of Computer Science University Pittsburgh PA November Design and implementation of the Cornell Program Synthesizer programming environment usually with demonstrations on Terak microcomputer Department of Computer Science Tsinghua University Peking Peoples Republic of China April Symposium of Computer Software Engineering Changsha Peoples Republic of China April Central Research Laboratory Nippon Electric Company Japan April Language Issues for Computing Department of Energy Gleneden Beach OR March Department of Computer Science Pennsylvania State University State College PA December Department of Mathematical Sciences Rensselaer Polytechnic Institute Troy NY December Department of Computer Science Brown University Providence RI September Department of Computer Science SUNY Stony Brook Stony Brook NY March National Bureau of Standards Gaithersburg MD March Department of Computer Science City University of New York New York NY March Department of Computer Science University of Indiana Bloomington IN February Department of Computer Science Purdue University Lafayette IN February Department of Computer Science University of Rochester Rochester NY January Research Ridgefield CT January IBM Watson Research Center Yorktown Heights NY January Department of Mathematics Dartmouth Hanover NH December Department of Computer Science University of Waterloo Ontario Canada December Bell Telephone Laboratories Murray Hill NJ November IBM Endicott Development Laboratory Endicott NY November Department of Electrical and Computer Engineering and the Department of Computer and Information Sciences COINS University of Massachusetts Amherst MA November Department of Computer Science New York University New York NY October Department of Computer Science University of Texas Austin TX October Department of Mathematical Sciences Rice University Houston TX October General Motors Research Laboratories Warren MI May Department of Computer and Information Sciences University of Michigan Ann Arbor MI May Bell Telephone Laboratories Naperville IL May Department of Mathematics Ithaca College Ithaca NY April Department of Electrical Engineering and Computer Science University of Connecticut Storrs CT April Department of Mathematics Wesleyan University Middletown CT April Bell Telephone Laboratories Holmdel NJ March Department of Computer Science Queens University Kingston Canada February Digital Equipment Corporation Maynard MA July Department of Computer Science University of Guelph Guelph Canada June Department of Mathematics Hamilton College Clinton NY April IEEE Delaware Bay Chapter Newark DE April Department of Electrical Engineering University of Delaware Newark DE April Department of Computer Science University Pittsburgh PA March Department of Computer Science North Carolina State University Raleigh NC March Department of Computer Science Duke University Durham NC March IBM Scientific Center Cambridge MA March Zilog Cupertino CA February Department of Electrical Engineering and Computer Science University of Santa Clara Santa Clara CA February Intel Corporation Santa Clara CA February IBM Research Laboratory San Jose CA February Department of Electrical Engineering and Computer Science Columbia University New York NY January Department of Electrical Engineering and Computer Science Princeton University Princeton NJ January IBM Watson Research Center Yorktown Heights NY January Computer science and software engineering education at Cornell Changsha Institute of Technology Changsha Peoples Republic of China April On encapsulated data types and generic procedures Department of Computer Science SUNY Stony Brook Stony Brook NY December On structured assembly languages Army Electronics Command Fort Monmouth NJ December On the diagnosis and correction of syntax errors in programs by evaluation of algebraic power series in variables Fifth Annual ACM Symposium on Theory of Computing SIGACT Austin TX May Department of Computer Science Cornell University Ithaca NY March Department of Electrical Engineering Massachusetts Institute of Technology Cambridge MA March Department of Computer Science Duke University Durham NC March School of Electrical Engineering University of Pennsylvania Philadelphia PA February Department of Electrical Engineering Princeton University Princeton NJ February Department of Computer Science SUNY Stony Brook Stony Brook NY December On automatic scanning of bubble chamber photographs Brookhaven Laboratory Upton NY October PROFESSIONAL ACTIVITIES Chairman Doctoral Dissertation Award Committee ACM Member Doctoral Dissertation Award Committee ACM July Academic Advisory Committee ADAPSO October Dallas TX Program Committee ACM SIGPLAN Compiler Construction Conference June Atlanta Panel Software Engineering Program NSF April Washington DC NSF Software Engineering Workshop February Atlanta GA Program Committee Fifteenth Annual ACM Symposium on Principles of Programming Languages January Program Committee ACM SIGPLAN Symposium on Compiler Construction Montreal Canada June Program Committee International Course on Editors Aussois France April Program Committee Tenth Annual ACM SIGPLAN Symposium on Principles of Programming Languages January Program Committee ACM SIGPLAN Symposium on Compiler Construction Boston MA June Delegate Symposium on Computer Software Engineering Changsha Peoples Republic of China April Program Committee ACM Software Engineering Symposium on Debugging Panel Productivity in Education IEEE COMPCON Washington DC September Association for Computing Machinery Consultant IBM Summer Computer Science Institute Planning Committee Terak Army Electronics Command Digital Equipment Reviewer ACM Computing Surveys ACM TOPLAS IEEE Computer IEEE Software IEEE Transactions on Software Engineering MIT Press Referee NSF NSERC CORNELL ACTIVITIES Member Computing Policy Committee Chairman Departmental Computer Facilities Committee Member Committee Member Committee on Instructional Computer Technologies Member Search Committee for Associate Dean for Undergraduate Affairs Member CER Management Committee Chairman Chairman Department Chairman Search Committee Member Senior Faculty Recruiting Committee Chairman Member Engineering College Resource Allocation Advisory Committee Member Engineering College Computing Board Chairman Member Computer Science Undergraduate Academic Affairs Committee Member University Appeals Panel Director Undergraduate Programs in Computer Science Member Engineering College Computer Advisory Committee Member Committee to Study Computers in Engineering Mathematics Computer Science Summer School Program Member University Computing Board subcommittee Member Faculty Appeals Board Director Computer Science Summer School Program Member Engineering College Core Curriculum Committee Undergraduate program advisor CORNELL COURSES TAUGHT to Computer Programming Fall students Fall students Fall and Spring students Fall students Fall students Fall students Fall students Fall and Spring students Fall and Spring students Fall and Spring students Fall students Fall students Fall students to Computer Programming Honors Fall students Spring students and Programming Fall students of Algorithmic Expression Fall students to Computer Systems and Organization Fall students Fall students to Programming Languages Spring students Writing Spring students Spring students Spring students Spring students Programming Languages and Translator Writing Spring students Spring students Spring students Spring students Spring students Spring students Spring students in Programming Languages and Systems Spring students Fall students Spring students CORNELL LECTURES Computer programming as engineering design Cornell College of Engineering Alumni Council May Engineering Career Orientation Forum February The Cornell Program Synthesizer Conversations at Cornell May Computing in Agriculture Faculty Series January The computer idiot savant or wunderkind Freshman Orientation Program August From slide rule to microcomputer how freshmen learn to compute Cornell Trustee Weekend October Design and implementation of the Cornell Program Synthesizer programming environment with demonstration OCS Seminar March Department of Computer Science December Computer programming as engineering communication Parents Weekend October	other	cornell
1130	 Server Date Monday GMT Saturday GMT CS Handouts CS Handouts Here is the list of the handouts available electronically General Handouts Course Description Account Form Group Grading Policy Group Assignment Procedure Assignment URL Library Assignment Postscript file URL Specification Assignment Comments Assignment Grade Listing Assignment Code Walk Through Assignment Postscript file Group Walkthrough Guide Assignment Revising Program Assignment Postscript file Grading Comments Assignment Directory Browser Assignment Postscript file Feedback of the assignment Assignment Minimum Spanning Tree Assignment Postscript file Assignment The Sag Game Assignment Postscript file Assignment Diagram Standard Template Library Documentation Large PS File Handout Example MinMax Handout Postscript file MinMax Example GIF Image Term Project Term Project postscript file demo game that uses and TCL together postscript file Final Take Home Exam postscript file samuel Last modified Nov	other	cornell
1131	 Server Date Monday GMT Monday GMT Course Material Course Material Database Systems and Information Retrieval Department of Computer Science Cornell University Spring Class Notes Databases Introduction Entity Relationship Model Relational Model Relational Algebra Relational Calculi SQL Integrity Constraints and Relational Database Design File Structures Indexing and Hashing Query Optimization Crash Recovery Concurrency Control Transaction Processing Information Retrieval Introduction Vector Space Model Term Weighting Indexing Evaluation Relevance Feedback Document Clustering Advances in Information Retrieval Homeworks Homework Solution Grading Guide Homework Solution Grading Guide Homework Solution Problem Solution Problem Solution Problem Solution Problem Solution Problem Grading Guide Homework Solution Grading Guide Homework Solution Grading Guide Midterm Solution Grading Guide Midterm Solution Grading Guide	other	cornell
1132	 Server Date Sunday GMT Wednesday GMT Barber Bullies Barber Bullies TFFL Bullies head coach GM and owner Poncherolo Mission Press Highlights Bullies History The Bullies Mission To avoid bonehead decisions and trades To be the best that Emmitt allows us To secure our greatness in the TFFL To win Highlights of the last Bullies Press Conference What are you doing to ready your squad for the Torpor Bowl Playoffs Times have been tough lately The Bullies as you know have been the of the Division for quite some time We are trying to return to our form of old as we prepare for our pt weekend Ponch Team of Greatness yes Victim of the was reticent in believing that this supposed really existed until we suffered loss to the Boney Turkey in what was our Who would thought that Kent Graham Cardinal could score points in game offer that as proof of the phenomena As everyone knows no Cardinal QB is humanly capable of that type of performance Ponch How do you explain starting Carter on his bye week may not be smart man but last weekend was really an idiot Ponch Miller how do you explain your poor performance of the last few weeks like to suck balls Miller Smith how do you account for your resurgence into the RB spotlight am Emmit Smith Ponch how do you feel about Harvey Williams at this point in the season Thank Emmitt for Anthony Johnson Let me just say that hope Harvey pulls his neck out of ass pretty soon History of the Bullies Phenomena The Bullies made their entrance into the leauge in Back then however they were know as the Sheepdogs known mostly for their sheepish performances on weekly basis Ironic that back then we had Emmitt Smith and Chris Warren and were still worse than the Jets Ponch The Bullies next seasons were better than one could hope for making the playoffs both years and losing to the Scrotum last year in the Torpor Bowl Championship do to that loser Jerry Rice One might wonder what has made the Bullies so great The answer is LUCK After securing the overall draft pick in the Bullies picked RB superstar Smith Emmitt is more than just franchise player Great players come and go Brett Favre sucked rocks for awhile before rising to greatness Barry Foster Sterling Sharpe and other similar players were great in their own rights but none are as consistenly and reliable as Emmitt Even playing hurt he still better than everyone else Emmitt just kicks ass Despite hard times this season and despite the days of the Sheepdogs the Bullies most trying time occurred when owner Poncherlo pulled big boner and traded Emmitt away to the then Floundering Gridiron for Marshall Faulk What Reblow Passing gall stones is less painful then the ramifications of that decision Fortunately owner and GM of the Gridiron pulled an even bigger boner and actually traded Emmit back to the Bullies for Faulk To highlight Flounder stupidity he also traded Carter for Alvin Harper Harper was promptly traded to the Bucs When asked by reporters how he felt about returning to the Bullies Emmitt responded Oh God please yes thank you Thank YOU Flounder	other	cornell
1133	 Server Date Monday GMT Monday GMT The frougal gourmet Penne ai broccoli PENNE AI BROCCOLI pasta sauce pecorino cheese Add the sauce to the pasta Grate fresh pecorino cheese not the stuff on top of it Buon appetito PASTA water salt penne broccoli Bring water to boil add salt broccoli florets and penne Stir well Drain when al dente about minutes if you bought good brand of pasta SAUCE olive oil garlic chili peppers In extra vergin olive oil brown or cloves of garlic and couple of chili peppers Remove cloves and peppers before serving	other	cornell
1134	 Server Date Sunday GMT Wednesday GMT Kaz is from Japan Intro of Japan Japan area is about the size of California but her population is about times that of California million California is the second most populated state in the so that pretty crowded but maybe most of that owes to Tokyo where the commuter trains have the popluation density of about one squrare inch per person Tokyo is among the largest cities in the world yet it is very safe Accordingly the bedtowns and suburbs are safer live in city called Kamakura which is about miles away from the center of Tokyo and crime there is like crime in Ithaca Kamakura was the capitol of Japan some years ago when samurai ruled Japan called the Kamakura Era All in all Japan is nice place to live but not without its drawbackes Prices My impression is that the cost of living is about times more expensive in Japan including electronic appliances For instance the least expensive decent quality Walkman costs yen Priorities of Life Japan is place where people are reluctant to take vacation because their would be upset Especially where the older generation is the majority in your group This is as bad for engineers though Space When the you have less space and more people you get more people in less space Here bit of Japanese for you language buffs out there Guess what it about If you have Japanese readable viewer such as MacWeb with the font preferences Mac turned on and you have converting network interface you can view the above thing as hypertext um not done yet Sorry still under construction Up to Kaz homepage Jump to Kaz Mitsubishi page Jump to Kaz music page	other	cornell
1135	 Server Date Monday GMT Friday GMT CoNotes Getting Started Getting Started with CoNotes First breathe deeply Sit down Whisper your favorite magic incantation Only then proceed reading You enter the Course Materials by following regular looking link except that the URL will look little funny Example link to course materials You will be asked for your id and your annotation password You will have gotten or soon get these The documents you will see have annotation points which are marked by link You may add an Annotation Clicking on that link will bring up form into which you can type text The subject line will show up in the original document so choose it well Existing annotations are placed just above the You may add an Annotation small icon tells you whether each annotation was made by student or by course staff You can respond to existing annotations this is similar to responding to posting in newsgroup Now whisper the magic incantation again take another deep breath and try it out TvE	other	cornell
1136	 Server Date Monday GMT Friday GMT Final Exam Final Exam Date Monday May pm Spring pierce	other	cornell
1137	 Server Date Sunday GMT Wednesday GMT Some CAML Applets for your enjoyment Some CAML Applets for your enjoyment Caml is functional language The implementation by the Cristal people at Inria France is really well done think The MMM browser allows you to import Caml bytecode and execute it dynamically Caml supports the TK toolkit for the graphical stuff The applets below will only work if you using the MMM browser The browser will popup dialog boxes asking you to accept or reject unsigned bytecode This is part of the security mechanism You just have to trust me whiteboard with support for dynamic protocol switching just what you always wanted Sources If you want to see the sources click here Cute Animations Click here	other	cornell
1138	 Server Date Sunday GMT Friday GMT Justin Miller Project Info Justin Miller Project Info My Current Project Algorithms for Detecting and Classifying Scene Breaks and the slides from talk recently gave on it Hausdorff Model Based Searching Others	other	cornell
1139	 Server Date Mcp No match GMT Wednesday GMT Networked Computer Science Technical Reports Library Networked Computer Science Technical Reports Library NCSTRL is an international collection of computer science technical reports from CS departments and industrial and government research laboratories The DRI technical reports are included in this collection Search the NCSTRL collection Enter one or several words into the box below to search author title and abstract If you need more flexible or powerful search you can use the complex search form Browse reports at the participating institutions Browse the collection of DRI authors Additional Sources of Information An article about NCSTRL from Magazine An overview of the NCSTRL architecture The Dienst protocol upon which this service is based See also the user interface methods	other	cornell
1140	 Server Date Sunday GMT Thursday GMT Departmental Research Scientists Departmental Research Scientists These are the Research Scientists in the Department To find out more about specific researcher please follow the link to departmental home page Paul Chew Senior Research Associate Dean Krafft Senior Research Associate Director of Computing Facilities Bruce Land Project Leader of Visualization Cornell Theory Center Senior Research Associate Computer Science Yuying Li Research Associate Richard Palmer Research Associate Daniela Rus Research Associate Robbert van Renesse Research Associate Richard Zippel Senior Research Associate Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	other	cornell
1141	 Server Date Sunday GMT Tuesday GMT background Sukhpal Sanghera PhD Physics Carleton University Presently Student Computer Science Cornell University Ithaca NY sukhpal have an interdisciplinary background comprising Computer Science High Energy Physics HEP and Nonlinear Optics have worked in two experimental collaborations of physicists CLEO Cornell and OPAL CERN and have authored and over research papers But the following lists of publications and invited talks are good representation of my contribution to physics research List of Publications Conference Presentations In Nonlinear Optics studied the propagation of very high intensity electromagnetic waves in nonlinear media such as optical fibers in form of optical solitons constructed and solved the equations governing this highly nonlinear dynamics My research work in HEP has been in testing the quantum theory of nuclear force known as Quantum Chromodynamics QCD conducted my doctoral research while working on the OPAL experiment at CERN My work contributed to what is now known as the first clear experimental evidence in support of salient feature of QCD that the strength of nuclear force between the nuclear particles decreases as the particles get closer the so called Principle of Asymptotic Freedom At CERN also managed the data monitoring of the ZED chamber part of the OPAL detector designed to measure of the particle tracks initiated and carried out the tests of QCD during my postdoctoral research work on the CLEO experiment at Wilson Laboratory of Nuclear Studies Cornell University There also headed the offline data reconstruction efforts for the CLEO collaboration The complexities in handling these large data sets have given rise to an NSF funded collaborative project NILE of computer scientists and physicists in distributed computing This is prime example of how the requirements of HEP experiments push on the limits of computer technology This is also reason why you should not ask me what the heck are you doing here in Computer Science after earning PhD in Physics If you still see contradiction between Computics and Physics translate your questions to Why World Wide Web which is so popular these days among business and computer communities was developed at CERN the physics Lab Why the computer was invented in the first place for computations for physicists So for me Computer Science and Physics are the branches of the same tree	other	cornell
1142	 Date Sun Nov GMT Server Wed Jul GMT Shadow Tip Making Shadows Shadows are powerful perceptual cues for the relationship of objects in scene The DX renderer does not produce shadows but is possible to generate acceptable shadows by modifying the colors of individual vertices of objects in scene The macro described here performs the following steps The obects to be shadowed are transformed to the coordinate system of light places in an arbitrary direction at infinity depth buffer is calculated from the viewpoint of the light The depth buffer is turned into volume data set by stacking it with itself in such way that it overlaps all the vertices in the original objects The volume depth buffer is mapped onto the original vertices as new data The depth buffer value at each vertex is compared to the depth at of the vertex If the vertex is farther from the light than the value given by the depth buffer it is dimmed The objects with modified colors are transformed back to world coordinates This approach sort of method has some limitations The accuracy of the shadows depends on the density of vertices on an object Objects with just few vertices will have jaggie shadows thrown onto them The resolution of the depth buffer must be high to get acceptable shadows The Compute module can not resolve transform objects Any objects built using Rotate Translate Scale or Transform modules will not shadow correctly unless you use the Calculate macro to apply the transforms The module uses lot of memory It runs well on machine with Gbyte of memory The macro dialog box is shown below Explaination of inputs The object input carries the objects to be shadowed against each other The input is the resolution of the desired The is the amount to dim shadowed vertex The is the direction to the light at infinity The input is the threshold for Set to zero it will cause surfaces to dim themselves The input overrides the automatic conversion of the object size to camera coordinate space The offset input allows the objects to move along the of the light To download the test program click here You also need it configuration file from here The test program layout is shown here An example output from the program is shown below To download the macro click here Another example is shown below protein ribbon representation is casting shadows on itself and on two planes See also Cornell Theory Center Examples of visualization work from CTC final projects spring Cornell Theory Center Last updated November by Bruce Land	other	cornell
1143	 Server Date Sunday GMT Tuesday GMT CORNELLopoly Home Page CORNELLopoly by MULVA Jeffrey Moore jmm cs William Lee wwlee cs Scott Dawson spdawson cs Our work is no longer beta here the alpha release Here our final presentations slides along with of the game And just what is this madness We have implemented an online version of the popular Parker Brother board game Monopoly adapted to reflect the trends and geography of the Cornell community Our implementation has obvious variations from the traditional version in order to illustrate many of the concepts inherent in the distributed systems paradigm For more information refer to the Project Design Specification document The game is played over the Internet requiring Java interpreter running either on Solaris or WindowsNT It is not be as graphically advanced as the commercial CDROM version by any stretch of the imagination However enhancements such as updates of fluctuating interest rates and inflation heightens the excitement of game play An exposition of the modified rules outlines these enhancements It is our intent to illustrate distributed programming concepts by way of this entertaining media and what do we learn from this new language Object Oriented Design and Distributed Systems are the three areas of computer science that we exploited for this project We utilized object oriented design skills for the data structures of the program We also see how theory meets practice in practical distributed system and how does it tie in with Distributed Systems This game is All player correspondence is done via message passing We learned concepts of various broadcast algorithms support of fault tolerance and methods of mimicking behavior in distributed system and how do we measure success Unlike Dean Witter we do measure success one invester at time If two or more players play completing the game according to the rules then we are in business of contributing Cornellopoly to the expanding population of Java applications on the Internet and finally how are we progressing Week of Progress Report Week of Progress Report Week of Progress Report Week of Progress Report Week of Beta Release MULVA Name of Jerry Seinfeld girlfriend which rhymes with part of the female anatomy Courtesy of the Junior Mint episode of Seinfeld Visitors since March	other	cornell
1144	 Server Date Sunday GMT Saturday GMT An of Parallel in RivL An of Parallel in RivL http Sicco Tans stans Jonathan Barber barber Final Project Professor Ramin Zabih Department of Computer Science Cornell University Table of Contents Abstract Introduction RivL and the Generic Parallel Paradigm The RivL Graph Generic Parallel RivL RivL Object Tracker The Object Tracker Script The Algorithm behind Parallelizing Problems with and Generic Parallel RivL Parallelizing in RivL Parallelization Scheme Implementation An Inefficient Parallel Implementation Persisent Parallel Object Tracker Passing Sequence Information The Contents of Shared Memory Setting up Shared Memory Updating Shared Memory New Semaphore Implementation Issues Performance Results Extensions Improvements Conclusions References Go Back Abstract The fields of multimedia image processing and Computer Vision are converging At the same time lot of work is being spent on making processing algorithms more efficient accessible and usable to programmers strong example of this merging of technologies exists in RivL Object Tracker which has been the focus of our work In this paper we detail the inception and development of an efficient parallel Object Tracker that is available with RivL Go Back Introduction There are many similarities between the fields of multimedia image processing and Computer Vision In many instances it is hard distinguish one from the other Both fields involve operating on single or continuous stream of images These operations typically incur very large computational expense Object Tracking is an example of such application In recent years lot of effort has been spent in attempting to make and algorithms easier to program by adding many layers of abstraction between the image data the image operations themselves and the interface to the At the same time these higher levels of abstraction should not add to the computational complexity of the operation This left researchers and developers with the extraordinarily difficult problem of making operations fast efficient and The effort manifested itself with the construction of RivL Resolution Independent Video Language RivL is multimedia software processing package that given set of images or set of sequence of images can efficiently process these multimedia streams and generate an outgoing image or sequence of images RivL is implemented as tcl extension that is capable of performing common image operations such as overlay smoothing clipping cropping etc It also includes more complex image processing operations such as object tracking which has been the focus of our work The tcl interface simplifies the process of coding an processing script In recent months several developers have improved RivL performance measures via parallelization scheme using shared memory machine and an distributed computing environment The parallelization is independent of most of the image operations resident in the RivL library Unfortunately this scheme does not lend itself to more complicated computer vision applications In particular the scheme does not work for Object Tracking Bearing this in mind we established the project goal to develop compatible parallel implementation of Object Tracking tailored for RivL In Section we introduce RivL and describe the generic parallelization scheme In Section we describe the algorithm implemented in RivL In Section we introduce the scheme for parallelizing RivL Object Tracking operation In Section we describe our implementation of parallel RivL operation In Section we present our performance results In Section we present some extensions for future work and improvements in the current implementation In Section we draw some conclusions Go Back RivL and the Generic Parallel Paradigm Go Back The RivL Graph We begin our discussion of RivL by introducing the RivL Evaluation Graph In order for RivL to execute it requires set of multimedia input data and control RivL script The RivL script is sequence of commands that specify what image processing operations should occur on the input data Once RivL is invoked the RivL script is translated into the RivL graph as pictured above Each node corresponds to some image operator etc and each edge or signal corresponds to the actual image data Those nodes lying inside of the illustrated rectangle above correspond to true image operators Those nodes lying outside of the rectangle are the RivL nodes The nodes outside and to the left of the rectangle correspond to read nodes one per image or stream and the node to right of the rectangle corresponds to the write node We want to emphasize that construction of the RivL graph does not compute on any multimedia data The RivL graph is merely the structure through which each inputted sequence of data must propagate to generate the outputted processed image There are two phases in processing data using the RivL graph once it has been constructed The first phase manifests itself in graph traversal from This is what makes RivL an efficient image processing mechanism The first node that is evaluated is the Write node the node By traversing the graph in RivL decides at each node exactly how much data the output signal requires from the input signal The evaluation is from the write node through the graph and back to every read node Once the completes every node in the graph knows exactly how much data from each input signal is required to compute the node corresponding output signal The multimedia data is then processed on the second traversal which conforms to traversal of the RivL graph propagating the input data forwards through the graph only operating on data that is relevant to the final output image Go Back Generic Parallel RivL We can summarize the preceding section into the statement that the amount of data that is fetched from each Read node is exactly function of the output of the Write node Combining this notion with the fact that most of the image processing operations in RivL do not create dependencies from one pixel to another in given input image we can derive simple for mechanism for dividing up the work and parallelizing RivL Instead of running RivL on single processor RivL spawns multiple processes on different processors and has each process work towards computing different segment of the output data We define the notion of single master RivL process and multiple slave RivL processes Each slave process should run on different processor Once started the slave process sits idle listening for instructions from the master During the initial setup period the master sends each slave process logical ID In addition each slave is aware of the total number of processes available for work Following the period the master sends each slave copy of the RivL script Once each slave and the master receives the RivL script they each generate copy of the RivL graph and perform the traversal independently The difference between the traversal now is that the logical ID for the current processor and the total number of processes becomes factor in determining how much computation gets done for each process According the figure above the amount of data fetched from each read node is no longer function of the output of the write node but is now function of the process Logical ID the total number of processes and is function of the write node output That is each RivL process is responsible for computing different independent portion of the final output data which is based on the above parameters The approach is in that each RivL process performs the same set of computations on different data Actual data computation the graph traversal occurs when the master says go Each slave and the master process computes their appropriated portion of the output image Go Back RivL Go Back The Script The RivL Object Tracker is implemented as tcl script which executes set of RivL image operations Given an image sequence and model to look for the job of the RivL Object Tracker is to determine where an object model resides in given image for each frame in sequence of images The image sequence can be represented by any RivL datatype MPEG continuous JPEG The model is string of points which is specifying the location of the object in given image The Tracker operates as follows it looks at adjacent images in sequence which will define here as Prev for previous and Next We want to determine where the object model went from Prev to Next For every adjacent set of images the Tracker performs the following sequence of operations it first smooths using the RivL operation and then using the operator which is Canny Next Prev was smoothed and in the previous iteration The command is then invoked which actually performs the object tracking The command extracts the actual object to be tracked from Prev specified by model then searches for an instance of the object in Next When completes it returns new model which corresponds to the location of the tracked object in Next By modifying the RivL script we can generate an output sequence of images that illustrates the object being tracked The sequence of images above illustrates the output of RivL Object Tracker The tracked object appears highlighted while rest of the image is dimmed Go Back The Algorithm behind The search itself is based on the Hausdorff distance which is measure of the similarity between two different sets of points The command compares the object with different locations inside Next If we find Hausdorff distance and it is within some threshold value then match is found If more than one is found within then we pick the match with the smallest Di corresponding to the best possible match The search utilizes approach The image Next is evenly divided into separate regions Each region is then to determine if there is anything interesting in that region By interesting we mean that there is substantial clustering of edges again within some other threshold For each region that was determined interesting it is then recursively and By recursively dividing up the image and locating only interesting regions the overall search space is decreased The Hausdorff distance comparisons between the model and the region of interests can then proceed only on the reduced search space Go Back Parallelizing The approach lends itself to parallelization At each level of the resolution separate independent regions must be These can be processed in parallel in fashion When the recursively moves down to lower level each region is again and These searches can also be done in parallel And so forth Go Back Problems with and Generic Parallel RivL As we mentioned in the introduction the generic parallel scheme described earlier works for the majority of the image operations in RivL Unfortunately this is not the case for In generic parallel RivL the output write region is based on the process logical ID and the total number of processes willing to work In this paradigm each process is responsible for its own portion of the output region Computation of each output region does not rely upon the output of any other regions In generic RivL there is no communication between different processes for given traversal of the RivL graph Each process is independent of one another Unlike the more general operations the output region of can not simply be into different regions and computed independently of one another This is true for the reason that an object being tracked may overlap several write regions Since there is no communication between processes for given traversal of the RivL graph will not work using Generic RivL Go Back Parallelizing in RivL Go Back Parallelization Scheme In Section we introduced method for parallelizing based on the approach for object tracking This is exactly the scheme that has been implemented in RivL Unfortunately this scheme is currently incompatible with generic parallel RivL for the reasons described above Rather parallel was implemented over the original sequential version of RivL The alternative parallelization scheme works as follows RivL is initially invoked on only one process the master Process The master constructs the RivL graph and performs the traversal all by itself like any other image operation is constructed as RivL node When the image sequence to be tracked is loaded and ready each image makes its traversal through the RivL graph When the data encounters the node the following sequence of events happens RivL spawns slave processes as an extension of The master process organizes the It maintains high priority queue and low priority queue The queue contains list of on the image Each slave process pulls these jobs from the queue and performs the on each job If an interesting region is found the Slave process will further that region into smaller regions and place each region as job onto the low priority queue The master can only write to the queue and read from the queue The slave can only read from the queue and write to the queue Essentially each slave process performs the in fashion to narrow down the scope of the overall search region The master process is responsible for maintaining the queues It initially places work onto the queue for the slaves to fetch It then clears new jobs specified by each slave process from the queue and places them back onto the queue for the next level of recursion Once the have concluded the slaves have fulfilled their tasks for the current iteration The master then computes the Hausdorff distances between the object and the interesting regions and looks for the best possible match if any If one is found it outputs the new of the object based on the current image Next Go Back Implementation An Inefficient Parallel We discovered an implementation of the parallelized RivL node Unfortunately we are unable to give credit to the developer of the implementation because it is completely The implementation utilizes the parallelization scheme described in the previous section The design is meant to run over shared memory machine When the traversal of the RivL graph hits the node RivL attaches the high and low priority job queue data structure to shared memory and generates IPC semaphores to govern access to this shared object to prevent race conditions and to synchronize the parallelization Once the and semaphores are set up RivL then forks slave processes We want to emphasize that this implementation is SPMD The only shared data is the job queue which is simply data structure that contains pointers to different portions of Next The and image data are completely replicated in each RivL process and reside at exactly the same address in each process address space The parallel computation proceeds as described above When the slave processes are done all interesting regions have been found the master kills each slave and the segment The master then proceeds to finish the object tracking computation On the next traversal of the RivL graph the above sequence of events are repeated The master again sets up and the semaphores and then the slaves We believe that this is very wasteful implementation of At every iteration expensive UNIX kernel system calls are generated to setup and the semaphores In doing so expensive resources are wasted in the same memory segment fork slave processes This involves replicating not only the node but the entire RivL address space This includes replicating the RivL graph and all RivL data including the model and image data We believe that the developers of this implementation forked new slaves every iteration to eliminate lot of work and complications involved in establishing an efficient means of communication between the processes This wastefulness led us to develop smarter implementation of that resources and improves performance of the object tracker Go Back Implementation Persistent Parallel An improved way of implementing the object tracking algorithm seeks to reduce the overhead of shared memory segment and forking off series of child processes for each frame in an object tracking sequence With little information about the position of the current frame in larger tracking problem the object tracker can keep the shared memory and the child processes alive while the same sequence of images continue to be tracked This way the master process can simply put the new image and model into shared memory and wake the children up to start work on the current tracking Only when sequence has been completely tracked will the shared memory be cleaned up and the children killed in anticipation of new sequence to be tracked Go Back Passing Sequence Information The first issue to be dealt with was the passing of sequence information into the object tracker This required information from RivL tcl interface into the procedures The basic idea was to figure out how many images were in the sequence being tracked and the index of the current frame being processed If the frame was the first frame in its sequence the object tracker ran the procedure to set up shared memory segment large enough for the current image sequence and forked off the child processes If the current frame was the last frame in sequence the object tracker would run and remove the shared memory segment and clean up the child processes after completing the tracking algorithm Any other frame position meant that the frame was somewhere in the middle of the sequence and required no special action Go Back The Contents of Shared Memory The master process is responsible for keeping the shared memory segment up to date with the current tracking task Because the child processes no longer contain the most recent image and model information these structures have to be explicitly maintained in shared memory Basically shared memory is extended from the rudimentary object tracker to contain large body of additional data in addition to the basic jobs structure outlined above the points of the current model the points of the current image some distance transforms of the current image at various levels of scaling and their associated image structures Go Back Setting up Shared Memory Shared memory is basically set up to contain these various data structures in one big contiguous block Certain parts of the data do not have constant length throughout image sequences The points of the model and the image in particular have varied length requiring some assumptions about the maximum number of points that might be expected to be present The remaining structures in particular the image distance transforms have consistent size that is dependent on the size of the images in the sequence In other words knowing the size of the first image in sequence enables single allocation that will be sufficient for the entire sequence Of course the dependence on the size of the images in the sequence is the reason that particular shared memory segment can only be kept around for one sequence of images Making assumptions about the maximum size of sequence would enable shared memory segments and child processes to stay around for multiple sequences to be tracked but we did not make this extension The diagram above illustratest the contents of the shared memory segment The segment contains the main job queue data structure the high and low priority queues It also contains vital model and image data along with their corresponding distance transforms Go Back Updating Shared Memory convenient of the constant size of the image distance transforms is the fact that only the data portion of these structures have to be changed In this way updating the data of these structures in shared memory was as simple as call to memset with the properly aligned position of the source and destination pointers Go Back New Semaphore The rudimentary parallel implementation had series of semaphores to synchronize the access of the children and the master process to the shared memory segment new semaphore was required however to synchronize the reentry of the children into their main work procedure with each new tracking task Go Back Implementation Issues The first concern in developing this implementation was climbing series of learning curves These included familiarization with RivL shared memory and UNIX semaphores The biggest learning curve however was understanding the existing code for and determining the changes that would be required to change the parallelization paradigm while as much of the existing code as possible Shared memory added some significant hurdles due to the difficulty of tracing pointers into and out of it Some data structures remained unchanged from initialization in the child processes and were explicitly left out of shared memory for that reason Some of these structures however were pointed to by some structures in shared memory The invariant that had to be maintained was that the pointers in shared memory to the constant structures could not be changed The easiest way to keep track of the structures in shared memory turned out to be putting them in the same order every time and maintaining some global information as to the location of the structures in shared memory relative to the start of the shared memory segment Go Back Performance Results We tested our implementation of the parallel RivL on frame sequence In the sequence we track motorcycle as it hurtles through the air courtesy of Terminator Judgment Day An illustration of the sequence appears earlier in this paper We tested our implementation on processor running Solaris version We tested the performance of our implementation using master process and to slave processes For comparison we also tested the first implementation of the RivL parallel on the same sequence from to processors As control we also tested the sequential RivL on the same sequence on the same machine graph of our results appears in the following diagram Unfortunately our current performance results indicates not only that our implementation is slower than the first implementation but that it is also slower than the sequential version However we believe that these results are not truly indicative of the advantage of our implementation over the older one Due to the fact that we ran out time we were unable to fully iron out the bugs and inefficiencies of our implementation and it so that it would reach its full potential We believe that this is not reflective of the soundness of our ideas However it is notable that our implementation scales better from to processors than the previous implementation This implies that our implementation of the parallel tracker does significantly improve overall performance as we increase the number of slave processes Go Back Extensions Improvements There are number of extensions and improvements that can be made to improve the overall performance and extensibility of tracking objects in parallel in RivL our current implementation this improvement goes without saying Due to the time constraints of this project we were unable to get the kind of overall performance results we would have liked We need to determine the bottleneck that are killing performance Once this is done we would expect to see performance results greater than the original parallel implementation Integrate our Parallel with Generic Parallel RivL RivL was developed with goals to make multimedia data processing easy to program and to efficiently process multimedia data Bearing these goals in mind the parallelization of RivL should remain transparent to the tcl programmer In this sense the programmer should not be restricted to generic set of image operations excluding but should be able to use every RivL operator and the processing of every node should proceed in parallel This work involves designing Special Operator Detector The generic RivL operators are run in parallel using the generic parallel approach while complex operators such as is run in parallel using our scheme The Detector would find all such special nodes in the RivL graph and handle them accordingly Port our Parallel over to ATM and using Distributed Extension Our current parallel implementation is restricted to machine However there are is Distributed software extension that generates paradigm over distributed architecture It should not be to difficult to port our current implementation over to distributed environment using the DSM software extension Incorporate our Parallel to CM RivL CM RivL is version of RivL that was developed at Cornell University which allows RivL to process sequences of images feeding in from continuous media stream As can be very useful application this makes for an interesting extension Go Back Conclusions We were looking for significant speedup in the new implementation of RivL parallel object tracker as we moved from to processors While the performance scaling from to processors is encouraging we are disappointed thus far with our overall performance results We were hoping that by this time we would have parallel RivL object tracker that was faster than the first attempt We are confident that little more work will yield the results we are looking for Intuitively it makes sense that our implementation should run faster than the previous implementation for the simple reason that we have significantly reduced the overhead involved in setting up and running RivL in environment Go Back References Jonathan Swartz Brian Smith Resolution Independent Video Language Proc of the Third ACM International Conference on Multimedia San Francisco CA November Jonathan Barber Sugata Mukhopadhyay Parallel CM RivL Step Towards Multimedia Processing Cornell University NY May Canny Computational Approach to Edge Detection IEEE Trans Pattern Analysis and Machine Intelligence November Dan Huttenlocher Klanderman Rucklidge Comparing Images Using the Hausdorff Distance IEEE Trans on Pattern Analysis and Machine Intelligence Dan Huttenlocher Rucklidge Technique for Comparing Images Using the Hausdorff Distance Proceedings of the IEEE Computer Vision and Pattern Recognition Conference with Rucklidge Eugene Ortenberg Vijay Menon Distributed Shared Memory Over ATM Cornell University NY May Sugata Mukhopadhyay Arun Verma CMRivL Programmable Video Gateway Cornell University December	other	cornell
1145	 Server Date Sunday GMT Thursday GMT Histogram Refinement for Image Retrieval Histogram Refinement for Image Retrieval Greg Pass Ramin Zabih Abstract Color histograms are widely used for image retrieval Their advantages are efficiency and insensitivity to small changes in camera viewpoint However histogram is coarse characterization of an image and so images with very different appearances can have similar histograms We describe technique for comparing images called histogram refinement which imposes additional constraints on histogram based matching Histogram refinement splits the pixels in given bucket into several classes based upon some local property Within given bucket only pixels in the same class are compared We describe split histogram called color coherence vector CCV which partitions each histogram bucket based on spatial coherence CCV can be computed at over images per second on standard workstation database with images can be queried using in under seconds We demonstrate that histogram refinement can be used to distinguish images whose color histograms are indistinguishable paper entitled Histogram Refinement for Image Retrieval will appear in the Workshop on the Applications of Computer Vision This paper is available in PDF format here Free PDF readers can be obtained for many platforms from Adobe slightly older paper entitled Comparing Images Using Color Coherence Vectors will appear in the ACM Conference on Multimedia and is available in PDF format here rdz gregpass Monday July	other	cornell
1146	 Server Date Sunday GMT Thursday GMT Jose Luis Fernandez Photo Album Photo Album Here are some of my favorite pictures Click to see larger version of the pictures Back to my Home Page	other	cornell
1147	 Server Date Monday GMT Tuesday GMT Software and documentation from the Horus Project The Core Software Getting Horus Documentation Horus both binaries and sources are available by ftp However there is snag they are securely encrypted and you need to get the decryption key Read the instructions on how to obtain access to the distribution We are currently working hard on getting Horus documentation of the ground From the Documentation page you can follow links to documentation that describes how to configure and compile Horus and what the Horus interfaces look like The documentation is indexed to give quick acces to what you want to know Related Software Packages Horus Object Tools Elektra Alexey Vaysburd has developed the Horus Object Tools HOT which implement Abstract Data Types for MUTS objects Horus group members and with intergated state transfer Silvano Maffeis is the designer of Electra CORBA Object Request Broker for reliable distributed systems which exploits the capabilities of Horus Comments to Werner Vogels	other	cornell
1148	 Server Date Sun Dec GMT bytes Tue Sep GMT Entertainment Industry Entertainment Industry Entertainment Industry Entertainment Categories Breaking News Cool Links Search the Internet Entertainment Industry Entertainment Categories Breaking News Cool Links Search the Web Index Send your feedback to Jeffrey Moore Anthony Riley or Anita Imrit Copyright Entertainment Now	other	cornell
1149	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
1150	 Server Date Monday GMT Tuesday GMT Microstorage Architecture Research Summary microstorage architecture consists of microstorage kernel and one or more storage servers The storage servers rely on the microstorage kernel to perform the actual data storage and retrieval Each storage server implements storage model that defines client view of the data in the system how it is stored retrieved and manipulated File systems object oriented databases and virtual memory subsystems are examples of different storage servers that can be constructed on top of microstorage kernel Data in the system may be concurrently visible via different storage servers Microstorage architectures provide flexible interface to storage and smooth transition from traditional file systems to more powerful object oriented storage models Existing applications can continue to work correctly without any changes by using storage server that implements traditional file model on top of data objects that are accessible via more powerful storage models We are in the process of implementing microstorage architecture called Vista Participants Dawson Dean Richard Zippel Publications Dean and Zippel Vista Microstorage Architecture that Implements File Systems and Object Databases International Workshop in Object Oriented Operating Systems Dean and Zippel Implementing File Systems and Object Databases in Microstorage Architecture Cornell Computer Science TR	other	cornell
1151	 Server Date Sunday GMT Tuesday GMT Welcome to the CS Home Page for the Fall of Javascript functions function gettheDate Todays new Date TheDate TheDate Navigation Stop Netscapes Clock Start this code was taken from Netscapes JavaScript documentation at on var timerID null var timerRunning false function stopclock if timerRunning clearTimeout timerID timerRunning false function startclock Make sure the clock is stopped stopclock gettheDate showtime function showtime var now new Date var hours var minutes var seconds var timeValue hours hours hours timeValue minutes minutes timeValue seconds seconds timeValue hours timeValue you could replace the above with this and have clock on the status bar timeValue timerID setTimeout showtime timerRunning true Netscapes Clock Stop END OF JAVASCRIPT FUNCTIONS	other	cornell
1152	 Server Date Sunday GMT Monday GMT Publications Publications My work falls into three general categories Complex Data Types in Databases My thesis dealt with the issue of how to extend database systems to provide support for data that is logically sequential This work is currently being extended to handle all kinds of complex data types through new paradigm called Query Processing and Optimization This work studied issues in relational query processing and optimization though some of it can be applied to databases as well Much of this research was done at or in collaboration with and with the support of the IBM Almaden Research Center The CORAL Project CORAL is deductive database system developed at the University of Wisconsin It combines powerful declarative query language with relational database For more information on the CORAL project click here Complex Databases Refereed Publications The Case for Enhanced Abstract Data Types Praveen Seshadri Miron Livny and Raghu Ramakrishnan Submitted to SIGMOD The Design and Implementation of Sequence Database System Praveen Seshadri Miron Livny and Raghu Ramakrishnan Proceedings of the Twenty Second International Conference on Very Large Databases VLDB September longer submitted version SEQ Model for Sequence Databases Praveen Seshadri Miron Livny and Raghu Ramakrishnan Proceedings of the IEEE Conference on Data Engineering March Sequence Query Processing Praveen Seshadri Miron Livny and Raghu Ramakrishnan Proceedings of the ACM SIGMOD Conference on Data Management May Query Processing and Optimization Refereed Publications Optimization for Magic Algebra and Implementation Praveen Seshadri Joseph Hellerstein Raghu Ramakrishnan Hamid Pirahesh Cliff Leung Divesh Srivastava Peter Stuckey Sudarshan SIGMOD click here for longer version Decorrelating Complex Queries Praveen Seshadri Hamid Pirahesh and Cliff Leung Proceedings of the IEEE Conference on Data Engineering February click here for longer version Generalized Partial Indexes Praveen Seshadri and Arun Swami Proceedings of the IEEE Conference on Data Engineering March Other Publications System for Optimizing Correlated SQL Queries in Relational Database using Magic Decorrelation Praveen Seshadri Hamid Pirahesh and Leung Patent Application IBM Ref also available as IBM Almaden Research Report Optimization for Magic Sets Praveen Seshadri Joseph Hellerstein Raghu Ramakrishnan University of Wisconsin Technical Report The CORAL project Refereed Publications The CORAL Deductive System Raghu Ramakrishnan Divesh Srivastava and Praveen Seshadri The VLDB Journal Special Issue on Prototypes of Deductive Database Systems Adding to Logic Database Language Divesh Srivastava Raghu Ramakrishnan Praveen Seshadri and Proceedings of the Nineteenth International Conference on Very Large Databases VLDB September Implementation of the CORAL Deductive Database System Raghu Ramakrishnan Divesh Srivastava and Praveen Seshadri Proceedings of the ACM SIGMOD Conference on Data Management May Explaining Program Evaluation in Deductive Systems Tarun Arora William Roth Raghu Ramakrishnan Praveen Seshadri and Divesh Srivastava Proceedings of the International Conference on Deductive and Databases DOOD Other Publications The CORAL User Manual Tutorial Introduction to CORAL Raghu Ramakrishnan Praveen Seshadri Divesh Srivastava and	other	cornell
1153	 Server Date Sunday GMT Friday GMT Cornell University Digital Library Research Group Cornell University Digital Library Research Group To be constructed	other	cornell
1154	 Server Date Tuesday GMT Monday GMT Old links cute little page which appeals to the kid in you The Amsterdam masterpiece of the century very cool Freestuff place Popular Mechanics Yippie Batman Mania good online museum The Computer Vision Home Page	other	cornell
1155	 Server Date Monday GMT Friday GMT Projects CS Projects Thorsten von Eicken Fall Projects Benchmarking the ATM Network Bruce Walter and Asif Uddin Ghias An ATM Network Process Daemon Deyu Hu Mark Hayden and Ranjana Murthy Optimizing Horus over ATM Networks Yaron Minsky Grzegorz Czajkowski and Bill Nell Global Objects using Nexus over Chang Mandar Mitra and Alexey Vaysburd Network RAM Alerk Amin Ho Cheung Lai and Dan Karipides Distributed HTTP Server Hsu and Hsu Porting to the ATM cluster Vineet Buch and Ravikumar with Threads Veena Avula cache coherency in Dan Rabinovitch Randy Mac and Mike Mikolajczak Global Pointers in John Belizaire Julian Pelenur and Mauricio Aguilar Alvarez Project proposals Return to CS Home Page	other	cornell
1156	 Server Date Monday GMT Friday GMT Topics for the final exam Topics for the final exam Everything on prelims and plus PowerPlant Any question about PowerPlant will be based on the assignment II Linked lists Data structures for linked lists Inserting into sorted list Doubly linked lists Lists with header nodes Circular lists III Analysis of algorithms Definition of What it means for an algorithm to be log etc Comparison of different implementations examples linked lists arrays trees binary search linear search IV Binary Trees Definition of binary tree root children parents leaf etc Linear representation of trees Preorder inorder and postorder traversals Binary search tree Putting Linked Data Structures into Classes example VI Inline assert exception handling templates You should understand these at high level understand the lecture notes VII Java You should understand how Java differs from at high level The final is Although the most recent stuff will weigh bit heavier anything is fair game	other	cornell
1157	 Server Date Sunday GMT Friday GMT Lecture Notes Lecture Notes Lectures are currently in postscript format You can print them on almost any laser printer If you want to view them you need an application like Ghostview lecture Introduction lecture Sip of Java lectures to Abstract Data Types lectures to Java Register Machine lecture Inheritance lecture Recursion lecture GUI and layout lecture Threads	other	cornell
1158	 Server Date Monday GMT Wednesday GMT Homework Homework Collaboration Collaboration by up to three students is permitted on this assignment When there is such collaboration single solution should be submitted for grading and the solution should list the names of the collaborators Other collaborations will be considered violations of Academic Integrity Submission Procedure Solutions must be submitted by email to The solution may by formatted as ASCII plain text or postscript Due Date We must receive your email by am on April Late Assignments will not be accepted Problem Description Read RFC The Simple Mail Transfer Protocol and RFC Standard for the Format of Text Messages RFCs can be retrieved from using anonymous ftp selection of the RFCs is available at the departemental machines in the directory Find out what domain literal is from RFC Try sending mail message to yourself using one Include copy of the message you received in your homework solution Click here for additional hints concerning this part of the assignment Excluding the connection establisment and termination what is the minimum number of network round trips to send small mail message TCP is protocol yet SMTP uses TCP in fashion The client sends command then stops and waits for the reply Why does the client send multiple commands at once for example single write that contains the HELO MAIL RCPT DATA and QUIT commands assuming the body is too large Consider an organization that is serviced by collection of mail transfer agents How can the DNS MX records and preference values be used to implement load balancing scheme for incoming electronic mail This assignment requires using ftp to connect to machines outside the CS Department firewall There are two options for this Use ncftp new interface to the ftp client It automatically starts connection in anonymous user mode so that you do not have to type user names and mail addresses It also requests that the peer machine use passive mode when transfering data thereby allowing data to flow back over the already established TCP connection and avoiding problems with the firewall If the remote ftp server does not support passive mode something indicated if you do not get any response to dir or get request you will have to resort to the second option Use ftp to connect to the firewall machine When the program asks for user name respond with anonymous but replacing with the name of the machine you want to reach The firewall proxy server will then setup control connection and manage any future incoming data connections for your When password is asked do not type in your own password but instead type your address More information can be found in the manual page	other	cornell
1159	 Server Date Sunday GMT Friday GMT Upson Familiar Quotations Third Edition Al Gaulle Editor September Cornell Computer Science Department This report is compilation of several hundred examples of language and very irregular expressions Contributions were submitted over the past several years by numerous computer science graduate students who collected these now immortal words in classes and seminars We wish to express our gratitude to the faculty guest lecturers and students who provided the bulk of this work This work entirely nonsupported by National Science Foundation grant Computer Science Greg Andrews Sep On the banker algorithm There are parallel paths of confusion through it Oct In six months people figure out how to use their machines until they overused That called enhancement Oct On the project We tried to make it as painless as possible but it will be painful Oct On the midterm All know is it point exam and McGraw got and beat me by points Oct This is string of stack snack shops uhmm snap shots Nov If the last page of the priority list is three we take the threeth page Nov Let just throw up few distinct partitions of memory Nov On queuing models not going to go through all that crud do understand it anyway Dec Everything has to be written down and not in my head because do know my head from hole in the wall Sep There are two ways to share data The first is that you do You either share it or you do if you know what mean No you do Nov There nothing profound here and that may be true of the whole lecture Nov This is important but the stuff understand is completely irrelevant Sep then there are idiots like myself who try to hang on Sep The Dining Philosophers is an interesting problem posed by Dijkstra Many interesting problems with no practical application were posed by Dijkstra Sep show you some syntax and you go yuck and that the state of the art Sep It would sure be nice to not need another mechanism for every problem Sep This room is monitor One person is active and everybody else is asleep Oct had nice clean solution in my paper until the referee told me it was legal Oct Gries you sweet rat Nov Student Excuse me been little confused lately Andrews Like about years Dec There no way can hope to get done today so suspect dribble over to Monday Dec It amazing how much you can do lecturing when you realize how little there is Dec There mistake in the notes from the last lecture all but the following line is incorrect Becky Bennett Sep The computer is getting constipated Corky Cartwright Sep This is ambiguous but try to resolve the ambiguity with more prose May sort of have the minimal knowledge of hardware you can have and come out of Stanford Sep should even mention keypunches in connection with LISP That heresy Sep Can you put my obfuscation into words Sep claim that every other possibility is impossible Oct Is that question keep hearing these grunts Oct Let get on quickly to the handwaving we can do Sep Computer scientists are so accustomed to reality that when they are given the opportunity to create an illusion they wo Sep After we solve the reliable software problem we must solve the reliable lecture problem Sep Programming languages should not be subject to whimsical variations in semantics that depend on the mood of the person who wrote the compiler Sep Gries Why do you just show us the whole slide Corky Ca quarrel with God Oct We should come up with programming languages that do require telephone book to describe their little pathologies Nov Outside this expression language APL sucks Nov program is comment means for getting from precondition to what you want Oct On SNOBOL just someone that looks on from the outside and grimaces Oct It hard to say what an elegant SNOBOL program is Oct This is real whiz bang program Oct would consider that obscene programming even in SNOBOL Nov Sound like NA Let get away from it and go on to another topic Bob Constable Oct If you read the proof in Hopcroft and Ullman and you need to read it after this Jan The only way false can be true is if Mar Let me change the theorem to one can actually prove Feb Now we only have ten minutes left for hard science But that probably enough Feb really kinky semantics that would support the slickest proof rules Mar Student Number does make sense to me Constable Well let write it out bigger Mar What going to be amazing is that next time be able to prove that itself will be amazing Apr Let me back up to where believed it Apr This syntactic sugar is looking terrible syntactic pepper May Stanford gobbled up the really good women Feb We are experimenting with constructive set theory and so may go wrong Feb One reason that concept is peculiar is that in mathematics one always deals with extensional objects and thus never discusses them while in computer science one rarely deals with extensional objects and thus never discusses them Jan This wealth of knowledge will get us confused Jan We want to lift ourselves out of the primitive recursive muck Feb On the Axiom of Choice in constructive mathematics It has the same status as in classical math You can worry about it Feb Truth and computation are identical Feb do think ever written RAM program Feb Sometimes the empty set causes me pause Feb To be or not to be is not an algorithm Apr Nothing makes sense in the last five minutes Apr Let do pictorial proof again Oct We are able to remove logic completely Nov Student never seen computer that implements the integers Constable Unfortunately they not building them the way they ought to May Well it looks like today lecture is going to be more confused than normal Dick Conway Feb might have this form Dijkstra be damned Sep This is unreasonable but been doing it that way for long time Sep On relational data bases do know anything about the mathematical basis of it but read it so many times think can reproduce it verbatim Oct On JCL always been able to find some grad student who has been able to understand all this and never had to learn any of it Oct This is all done for you by mirrors think it kind of cute Oct RPG is shame Oct For anybody else that be silly but not for Dijkstra Oct To Gries You cheating but we still have figured out how Sep This is instantaneous which is pretty fast May am not chronic dumper on IBM but here they need it three colors May ca quit without telling you about the lunatic fringe of Information Retrieval May would want to be quoted but can cover all the interesting facts of in Sep Do be seduced by lovely query language Oct Undo is an abomination Oct Try that on your old IMS system Nov Ullman describes fourteen of the basic seven Nov On COBOL Its procedures are absolutely lousy Nov On IMS Protects against small children and honest men Nov On reading chapter of Ullman If you really masochistic go ahead Alan Demers Sep The key to this is that is that oh my Feb It not as good as Mar Student Constants do matter in the real world Demers Well especially since infinity here is Mar Jesus Bald Christ Apr do want to sound like avoiding answering your question just want to avoid answering your question Apr Jesus How do you give talk like this with Reynolds in the audience Apr One reason you might want to say Why not or rather one reason you might want to say Why or actually reason you say not Sep Let me suppose and this is big assumption it gets an asterisk Sep Student Is that an inspired construction Demers Oh it is When thought of it was insufferably proud of myself for hours Sep Let me say what not going to do at the moment Sep After looking at that for some time the and the are not the same are they Sep Not only is it not obvious claim in general it false Oct That in Knuth volume tree Oct By the way if all you people understand this proof it will all but double the number of people in the world that do Oct When do it it comes out that way When Tarjan does it it comes out that way So proof by intimidation Oct Let take this whole section of the board and write big dubito over it Oct The precise definition is motivated by that bow tie Oct The reason ca say that is because it not true Nov sure wish had snappy comeback Nov It commutative ring so can do whole lot of cavalier things Nov It not in general obvious how to do it but was hoping that would slip by Nov This may be impossible At least it hard do know how to do it Nov When divide by what do get Well get over obviously Nov Turing machine is this Nov Demers Here is the promised Fast Fourier Transform example It worked for the two examples tried so fairly sure it correct Student Proof by exhaustive testing Demers Well it sure exhausted me Nov No did not prove it correct sat at terminal at midnight and fiddled with it until it worked Nov It depends on something that really do want to get into it depends on honesty Nov It just would do you any good to apply the pumping lemma to the it does stay up that long Dec It spaces me out every time look at it Dec can write the expression down in polynomial space and time in fact going to write it down in about three seconds on the board here Feb You put handcuffs on yourself and try to swim the English Channel or something Mar Demers Why did we switch from to when we switched from procedures to functions Donahue do know Demers guess that as good an answer as any Aug do want to remove temptation from malicious people want them to be malicious and then have the pleasure of killing them Jan You do solve problems in your compiler Jan think right linear Feb is disaster right Feb The phenomemon is little bizarre Apr After Bowen annual spring haircut That is really far out do know if should deliver eulogy Apr After using both adr and addr to abbreviate address are idempotent Apr People who generate code are in state of mortal sin Aug In the back of my mind is an Nov You ca lose tenure You ca get it either Nov Bliss is frightening Sep not married but have medical excuse Oct Gee bottoms are getting bigger and bigger Jan explaining this as though it were technique but in fact just invented it Feb It would be tremendous help if could talk and write at the same time Feb There exists an alpha such that God Feb We are just about at the end so can bullshit now Feb not Bob Constable up here perfectly willing to consider functions as ordered pairs Feb Can erase this board Obviously just done it Mar Demers do say gack in lecture all the time Student Yes you do and sigh Demers Oh do Sigh Mar This language also has garbage commands that is guarded commands Oh no did say that John Dennis Mar Chebyshev sure would do something false Apr On teaching induction to freshmen One year one of the bachelor professors got girl to understand it and he married her Apr On the Remes algorithm not sure if it gon na be math lecture or religious experience Apr gon na say this hope it true Apr sequences that go off to hell in wheelbarrow Apr If that were clear then be very offended May guess kind of numerical analytic Eichmann If the guy says fit it with line fit it with line Sep just gon na as my old Texas analysis teacher used to say jump on it and ride it till it falls Dec Suppose that God or someone high up in government told me Jim Donahue Feb The proof took five blackboards so the method is worthless Feb can fill up blackboards in great hurry If you can fill up blackboards very quickly then it must be interesting Feb Eventually we do more than just push bottoms around Mar This is sort of denotational bootcamp Mar After while if your mind gets warped enough you tend to think in these terms Sep Take type now real dumb in doing this Jan Why are we doing this Because there are some neat theorems to be proved at the end of this course Jan You really would want to work out the successor of Feb do have copy of this never even read it but it gets referenced lot Feb Why am using complete lattices Well it what was brought up on Feb It turns out that restricting yourself to continuous functions is no great act of heroism Feb call this phi and psi again just to be confusing Feb You can easily show that any space you can imagine is buried within somewhere Mar There are infinitely many bottoms around Mar This is probably the most influential paper in semantics that never been published Mar On Admissibility of Fixed Point Inductions in First Order Logic of Typed Theories by Igarashi This report is about as impenetrable as its title Mar By the time you read the details you should either be completely lost or completely understand what is going on Mar We have said anything and we said everything Mar Well not going to talk about string quartets today Mar He probably wanted to get to the point where he could define on one side of card Apr would like to say we proven such theorem for Russell but Alan been awfully slow about it Apr It got plus and times and all that other neat stuff May If you spend lot of time building up the mathematics of the model by the time you done you tired Oct terminal node is not one that is about to die Oct Its predecessor is somewhere off in the great beyond Mar Gads this is ugly Diane Duke Mar The water being shut off in an hour so you better go now or forever hold your uh piece Dec We trying very hard to make sure that this Christmas tree is May Referring to the fact that Becky and Geri had just finished their exams in and All the little testies are now overies May Every time Michelle gets drunk have to wash her pants May Michelle get your hands off me Aug Michelle are your pants off yet Nov After reading the review of Yeoman hope she the reviewer never tries to take any CS courses John Gilbert May Becky Can you guarantee get minus Gilbert What kind of an arrangement did you have in mind David Gries Sep To Salton Gerry when was the last time you wrote program Sep Hopefully David Gries from Cornell Oct Conway Half proof might be very long but not very helpful Gries Yes and whole proof might be wrong Mar Yes No Not really Probably there is but have to think about it Nov Gries Could you explain where the term modal comes from Constable No Gries Thank you Mar To students The only reason we here and there is that we older than you Oct Student In the recursive Towers of Hanoi program how do you prove that you never put disk on smaller disk Gries You prove it by recursion Student You prove it by recursion Gries Sure you just say By recursion Mar Student Could you lower the blinds please Gries Are you sure it not my brilliance that blinding you Apr Gries dereferencing and Student How about referencing Gries That too simple Sep writing on the board If ca read it tell me Feb Schneider Which DeWitt are we talking about Gries thought was DeWitt around here Jun Research Summary Well did get much done this year tried but was too successful Something always kept me from making the significant creative advances wanted to make Maybe next year will be better but this year was washout do mean to offer these as excuses but here are some of the things that interrupted my thinking and kept all those neat ideas from springing out of me know they in me somewhere was in charge of the United Way fund for our department Three cases of sexual harassment going both ways were handled by me in my position as graduate field One student hurt his head and was in the hospital for week at Christmas time Somebody had to look after him so visited him and read comics to him every day Because do really have any opinions of my own and can therefore be called neutral was called on to mediate in the usual political fights between faculty members which we all know are ruining our department The heat did work and the bathroom stunk and the traffic bureau wanted to revoke our VP sticker and student dog bit another student and an student failed the colloquium course and one student ate five doughnuts before one colloquium and we went student over our quota and student lunch was stolen from the refrigerator Each of these called for careful letter These are only few of the incidents that took care of did write and prove correct program in January but made the mistake of testing it on our VAX and it had an error which two weeks of searching did uncover so there went one publication out the window guess could have slipped it into IPL anyway since an editor for it but since have tenure already did feel right in doing that did work on the problem The work at Illinois had convinced me that you did have to prove your programs correct to publish in math journals the messier the program the more likelihood of acceptance But after week had to draw maps with four colors and the secretaries were out of the colored transparency pens and lost interest Every once in while would try to get something done at home but that too was bomb My Terak would act up so could write and my pen was broken was assistant to the assistant coach in both baseball and soccer for my son team that the only way we could get him to play regularly so had to spend lot of time at Cass Park Then there was boy scouts and those awful camping trips in the rain which would lay me up in bed for weeks at time with fever and runny nose Something always arose to stop me from working at home To top it off one evening two weeks ago was working hard at home trying to be creative so would have something to say in this damn report when neighbor dog ate the last of our guinea pigs and that began crisis that lasted for days and ruined the few thoughts had Well so much for the research summary Maybe next year will be better References Ithacating Ithaca Journal Limerick Contest April Finalist Han Sep Worst cases very rarely happen Nov The numerical methods can always produce number but if the problem has no solution the number will be meaningless Feb Safety is better than the wrong answer May He just found this matrix like it fell from the sky Juris Hartmanis Apr Student What are you trying to prove Hartmanis do know never know when start Sep Clearly Turing machines obviously Sep have good news and have bad news The good news is that am not Hopcroft The bad news is that Hopcroft will be back May polynomial is goddamn big function May But that irrelevant just stalling for time May You can do brutal things in polynomial time Sep Finite means you can stuff it in box Sep As long as talk fast wave arms vigorously going to be in good shape Sep It easy with arrows But if you write iff never know if proved the if or the only if Sep even put on necktie today not to make any mistakes Sep This is known as of today as the Sticky Fingers Louie method Oct This may look to you like my chalk is faster than your eye Oct Oh goofed no did yes did Oct It just brutally stuffs it in the stack Nov choose so fat and big that one wo make any difference Nov Hopcroft would tell you that this is divide and conquer To me that seems like lots of fingers Nov On the date of the final exam Why do tell you it on Wednesday and on Wednesday tell you lied Nov Any comedian who tried to get away with the jokes telling would get booed off the stage People like me should not be flattered by my apparent wit Mar It very cheap trick which works Oct To seminar speaker who unlike himself spoke with an accent Will the rest of the talk be in English Feb Student Can you go over that again Hartmanis hope it still true Mar could have chosen another proof but do know any other proof Oct Gerry Salton is going to come back and he going to ask me what learned Nov Formalize all the hell out of Mathematics Nov can write quintuples at high speed Nov really ca do it but do it Nov Assume you talk for all care Nov Assume you behave like programmer should and do believe in Turing Machines Nov COBOL and APL one language which never learned the other which refused to learn for the fifth time Nov Give me just few seconds of ambiguity Nov About himself getting mixed up in proof Watch man squirm Nov Even my chalk refuses to write this Nov Now the amusing claim make several Nov Be brave take the complement of the language Feb Perverse means nice Feb could show you my scars psychological scars Feb On the nonconstructive gaps in the gap theorem Ergo Constable ca see them Feb That not the only thing he ca see Mar This department is run on the model of the Austrian empire benevolent despotism moderated by incompetence Oct Gary Levin is the guy David Gries tries to imitate Mar While you being interrupted let me just comment Mar The recursion theorem is just like tennis Unless you exposed to it at age five you never become world class Jun The books should be writing are written by John Hopcroft Jun This is skinny as you see so it is sparse set Jun If the polynomial hierarchy collapses there be panic at some institutions in Washington Jun Somebody once asked John Hopcroft about the problem of and NP He answered On Tuesdays try to prove that they are equal on the rest of the week that they are different believe that he has reduced the time to try to show that they are equal to Sunday afternoons Jun strongly suspect that this set is complete have not written yet proof because none occurred to me No the correct statement is have not written yet proof because none occurred to my students John Hopcroft Sep About the first pages of Aho Hopcroft and Ullman It kind of leisure reading Oct Everything in this class is power of two Oct have to think about it not in the mood to think Oct Not everything say is correct It correct modulo the little details you going to have to worry about Sep Somebody should warn me when we get to the end of class by walking out or tend to keep on talking Nov have an floating around which guess have mentioned today Nov Without loss of generality for reason that temporarily eludes me Sep One thing like to ignore is details Sep Two sets of half size being approximately Nov Student That means zero to the zero is zero Hopcroft Observations like that lead me to believe that you understand what doing Nov suppose none of these algorithms are really useful Jan Whenever it does make sense stop me because there good chance it wrong Mar After messing up proof by forgetting how to use induction should never do things carefully Mar hate to leave you for vacation without showing you how to prove that problem is Mar going to call that picture proof Apr This is obvious to an educated person Apr have you know spent hours preparing this lecture so nobody had better sleep Apr Let sub be your favorite problem Sep Does everyone see the intuitive idea before we get into the details Does anyone want to see the details Oct How about proof by example Oct Now we can prove problems right and left to be Oct Let me show you how easy it is to show things complete Oct If me ca move you win Nov You can cube it if you do like squaring it Oct Do you mind if my prime is power of two Oct We have to figure out how to let interesting things happen Apr On the Hopcroft Ullman book ca make sense of what in the book Debbie Joseph Feb Joseph If you go to MIT at some point you should try to lose the audience Hartmanis If you do they feel insulted Daniel Leivant Feb You can grasp infinity easily but how can you grasp sup Mar If you have cycle you can spread truth anywhere Frank Luk Sep Of course we do not wait until goes to infinity Oct The accuracy should not be doubted because numerical analysis sends people to the moon Oct wo give you sketch of the proof because the sketch would be sketchy Oct The proof of this is so simple that going to give it Oct It seems we have transformed difficult problem into an impossible one Oct So zero is strictly less than one Nov If we do not know its sup st derivative is even harder to come by Jan Usually of course you stop after finite number of steps Feb This is very vague argument but it valid in practice Nov You have seen more norms than you want to Gerry Salton Feb It obviously obvious to you Mar Incidently was Aiken last student if you can believe that Sep Now what we were taught to do at Harvard Mar From where sit and it total ignorance sure Sep Business people by definition are not so smart Sep After loud yawn from student feel the same way do this as duty to the undergraduates in the class Sep After minutes of minute class have told you yet anything of interest Oct Student Would you like to help grade the exams Salton No probably am not qualified Oct In principle you need to know nothing In practice you need to know something but not much Oct could say that this is but then you would wonder why anybody was teaching it Sep So shift by either or so of course shift by and have matched bananas Sep Here is an algorithm that is really useful for change Sep We have come full circle we are back in the which makes me very happy Fred Schneider Sep Programs do execute at least not in Sep If you never have to use machine but you need one to give pathological examples then the is my favorite machine Oct While discussing the Dining Philosophers This is known as the Law of Conservation of Forks Nov We can talk about reality later Nov think Modula about as close as you going to get to reality in this course Dec Let warm up with deadlock Sep Proof by Toyota you asked for it you got it Sep On aliasing We got enough problems without worrying about tricky naming Sep In reprimanding tone You thinking again Sep going to be hacker when grow up Oct Prove your programs by means of Heisenberg Uncertainty Principle Oct If you can build semaphores you can conquer the world Nov This is my dirty joke of the day Nov monitor bordello Nov God knows you forget half the things tell you anyway Forget that Nov Truth is impervious to hisses Nov On distributed processing It very sexy topic these days Dec Nice in the sense it pathological Feb At ten you can laugh at the jokes Feb On chess Look there lot of klugey rules Mar Forks and monitors are really just the same thing Mar You could always kill philosopher Mar Philosophers are degenerate forms of octopodes Apr On the next instruction after disk head seek to track You have to do CALL service repair person May There are those who do want to be impersonated by Dave Wright May Some systems ask you personal questions Not that kind May There are just some things in the world you ca do That what and are about Feb Euclid was different disaster Apr led sheltered life Tim Teitelbaum Apr Everything say is plus or minus one Jan The last ten percent of your grade will be determined by other considerations mainly sexual Mar Why am so goddamned lost Jun have story to tell you which besides from the fact that it has nothing to do with communication is completely irrelevant Dec Student Tim there was blatant case of cheating on the program What should we do Tim What did she look like Feb running out of time so going to use very short variable names Charlie Van Loan Sep It trick That what separates NA from ordinary mathematics Sep is calm number Oct sub ij is not sub ij Do quote me on that it sounds like madman Nov have never presented this without getting it backwards My solution this year is to leave it as homework exercise Oct In you have unit baseball Under you have unit football Sep This is the algorithm we are going to adulterate Sep delinquent set of matrices Sep Positive definite matrices are beautiful Sep Band solvers are dynamite Oct hate least squares Oct Householder did his work in the fifties he was one of the founders of Numerical Algebra He is now retired in Malibu This will happen one day to me too the Matrix has two columns at the top and three at the bottom For that they let me retire in Elmira Oct If you can find quadratic equation with three roots come find me at my office hours or even on my estate Oct It hard to differentiate FORTRAN subroutines Oct This is crude but um that sort of guy Oct Here the theorem we are going to prove it is fairly painless and the result is quite dramatic Oct If you FORTRAN dude like me Oct Write your matrix on roman dotdot bius strip Nov So now whenever one mentions how smooth spline is at cocktail you can prove it on the back of napkin Nov think too much about matrices Nov If you start thinking about reals you get nervous Nov Back row people are very hard to satisfy Nov am anxious to give you an example where Newton method really works little result proved couple of years ago in my thesis Nov How the hell did get in these things Nov Perhaps these are electron energies and you know if it miles away it and if it on the palm of your hand it Nov Let have Nov There exist three Newton brothers Isaac Quasi and Fig The latter had the most impact on my life John Williams Nov might be dumb but not that dumb Oct There apparently lot of ad going on here Sep That is clearly no opaquely call to machine language subroutine Sep Guarded commands are like flying buttresses Sep There something that should bother you in there There something that bothers me that nothing bothers you Nov Functional programming is not NewSpeak It is possible to utter ugly things Oct And last year when talked about it Gries was opening his mail Mathematics Kenneth Brown Oct The easiest way to assert that something is true is to state that it is clearly true Anil Nerode Oct always one off because can never remember where am Nov going mad Jan The first homework assignment will be just garbage but you supposed to know it anyway Feb The bottoms become the tops and the tops become the bottoms Richard Platek Feb We want to talk about meaning syntax just leads you astray Mar Syntax is the most dreary of subjects Alex Rosenberg Sep Just one more thing and we get all this garbage and go on to other garbage Nov Since it harder let call it theorem Dec want to go from the ridiculous to the sublime Richard Shore Apr Let see if by the end of the semester we can cover everything we assumed at the beginning of the semester Operations Research Bob Bland Nov Texts on graph theory do treat linear programming very well On the other hand linear programming texts do do very well on graph theory which displays nice symmetry Nov guess what was saying over here is partially nonsense Mark Eisner Feb The second term vanishes just as it has been doing all afternoon Mar What want to emphasize here is that it does what do want to emphasize here Mar Oh oh oh oh oh of course that means uh no Apr which is contradiction just in the nick of time Apr Was it parody of my lecture or is my lecture parody of itself Apr Let ride little roughshod over the technicalities Ray Fulkerson Sep Counterexamples are always better than proofs Nov We now use the Edmonds algorithm which you do know and have forgotten Dec That may sound like tautology but it sure as hell is John Muckstadt Mar mu sub lambda sub is equal to new piece of chalk George Nemhauser Sep have actually stated theorem but let just concentrate on what we trying to prove Oct There very explicit statement in the text here just trying to confuse you Lee Schruben Nov Is there anybody who confused who should be Apr do remember this stuff have it written down Murad Taqqu Feb What want to compute is my posterior well that funny way of saying it but anyway Feb You see it much better not to use indices after while because if you use indices you get confused while if you think little you know what you doing Feb The loss is infinite if you get knocked out bankrupted or die Apr just going to reason heuristically because heuristic reasoning always gives you the right thing in the first place Les Trotter Jan This sounds like hocus pocus It is Feb There are any or in it except for the and that there Albert Tucker Apr On Gauss He made his early reputation as computer Jacob Zahavi Dec Addressing an Oriental student whose name he had forgotten Yes uh uh yes Hong Kong Electrical Engineering Hwa Torng Oct do think this is misleading If any mathematician wants to find fault tough Mar They are two different things but they are two different things of the same thing Norman Vrana Jan That correct On the other hand it could be incorrect Messenger Lecture Marvin Minsky Apr can not talk and write at the same time Apr usually use notes to remember what not to say Apr It was necessary for me to finish because you knew that the end of it was going to be about the end of it Apr There lots of ways of getting this information if you actually alive Apr What the relation between how think and how think think Apr You heard these jokes about getting doctorate for studying the use of semicolons We in that business Apr Is is the verb for when you do want verb Apr You can only understand complicated thing by starting with dumbell theory Invited Seminar Speakers Ed Ashcroft Oct You might wonder am actually talking about anything John Backus Dec You write program and diddle it all in the same language Edsger Dijkstra Jan Dijkstra The algorithm on planarity was that ever executed Hopcroft Yes it was Dijkstra Was that necessary Hopcroft Yes to get the bugs out of the algorithm Jan It good to write program occassionally as long as you do run them Jan The major problem with many articles is not that they are wrong but that they are ugly Allan George Oct The state of Florida tends to be very for some reason Susan Gerhart Jan We can prove these are valid hope we can prove them all valid hope they all valid Chris Goad Apr It little odd for me to use the word proof here because it really serve to convince you of anything John Guttag Nov Algebraic specifications are good If were Edsger Dijkstra perhaps would say they are great Nov Teitelbaum What are the prospects for an optimizer Guttag not at all optimistic Michael Harrison Sep You do need this there just put it in for the special case where it happens to work Harlan Mills Apr am finite man Sue Owicki Nov We are abstracting from all that is interesting John Reynolds Apr That is as far as can go in general waffling William Waite Mar mungy grungy and unstructured Wilkinson Apr always felt it was pity that computers made rounding errors Andrew Yao Oct show you in minute why this is very stupid result John Zahorjan Mar It hard to draw conclusions from only two examples so did third Mar Another enormous example limited by the number of balloons you can fit on slide Computer Science Graduate Students Stuart Allen Oct As long as we splitting hairs there are better hairs to split Bowen Alpern Aug Constructive logic is Trotskyist mathematics Sep Where do get the PRL handouts Talk to Joe Bates It his PRL Alpern Does that make the rest of us swine Oct All philosophers die while thinking Feb Contractions are guaranteed to be cycle preserving under explosion whatever that means Jim Archer Feb Aesthetics is one of my better suits Barry Bakalor Sep There seem to be no computer science grad students taking CS for some reason Sep would guess infinity falls somewhere between and Joe Bates Oct If you do know what it supposed to do you ca tell whether or not it does it Oct You say Go and it goes Boom and writes you program Hans Boehm Mar There must be one on my desk somewhere There one of everything else on my desk Sandy Coe Oct For those of us who were little lost sheep we just stuck with Constable our little lost shepherd Richard Cole Jul Professor You mean that graph does exist Cole That right and now going to draw it Pavel Curtis Apr On the London Bridge It just does look the same when you can see it Bill Fischofer Sep is generally happy number It does care what you do with it Apr Max as unary function is very interesting Merrick Furst Oct Student Where Hopcroft Furst Are Hopcroft Alan Gaulle Feb No one seems to have noticed that NP follows immediately from Cook theorem Sandor Halaasz Jan My feeling is that Salton is beginning to drip into the fire Mike Hammond Mar Secretary Mike did you do something on the paper Mike Not recently Bob Harper May have work to do this summer ca spend my time conquering the world Jim Hook Nov November times December is bottom Mar get years and weeks confused these days Neil Immerman Oct Time and space are not just engineering problems Dean Jacobs Nov Commenting on Bowen usefulness Certainly not the ties Ralph Johnson Mar If the program works you probably do care Mar This is language for hackers mean it really neat language for hackers Mar good hacker language is one in which you can do things the writer of the language never intended Mar For many other people their lack of knowledge is much more obvious Scott Johnson Apr You know bet arrays of procedures are lot less efficient than case statement Jun Maybe it only as bad as it is and not worse than it is Jan If none of the faculty show up this talk is going to be about Stellar Conquest Jan do really care about the asymptotic running time of the algorithm what care about is how many blips it takes Jim Kadin Mar Kadin made monster Hartmanis You made monster before Mark Krentel Jan is tree for large values of and Sue Manning Nov ca afford to have good educational experience this summer Hal Perkins Mar It just small group of people instead of the Chinese army and it works wonders Mar This is where the little lines started to drive me crazy last night Ken Perry Nov Liberal is Conservative without money Nov Do shoot Conservative Rich Reitman Mar What give you chance to retract that statement Jeff Savit May They use lotsa stuff from which have gotten to yet but saw lotsa bottoms in there Morrie Siegel Apr think this is no worse than writing LISP interpreter in LISP Sep And even LISP is nothing like SNOBOL Sep Actually it very difficult to explain this in ten words or less Ryan Stansifer Jan On the That the only thing that consoles me They ca possibly ask everything do know Ellen Voorhees Jan But false is provable constructively No it not Dave Wright Mar never worry about implementation Mar Even IBM has built one so it must be true Rick Schlichting Feb My goal in life is to not get into Upson Familiar Quotations	other	cornell
1160	 Server Date Monday GMT Wednesday GMT Homework	other	cornell
1161	 Server Date Sunday GMT Thursday GMT Jonathan Barber Resume Jonathan Barber http Campus Address Highland Ithaca NY Office Address Upson Hall Ithaca NY Objective To begin career in one or more of the following areas Systems Development Software Engineering Computer Hardware Design and Network Development and Integration Education Cornell University Ithaca NY GPA Aug May Masters of Engineering in Computer Science Cornell University Ithaca NY GPA Jan May Bachelor of Arts in Computer Science Relevant Coursework Software Engineering Operating Systems Microprocessor Design Microcontroller Design Networks Multimedia Systems Associative Processing Machine Vision Software Design for Parallel Computers Relevant Projects Fast and Efficient Video Developed and implemented method to encrypt and decrypt MPEG video data to ensure fast reliable inexpensive and sevure video communication over network Boolean Logic Minimization Project March May Developed Functional Memory Simulator and Boolean Logic Minimizer based on the algorithm for boolean logic minimization The project goal was to maximize performance using an associative processing solution Microprocessor Design Project Oct Dec Designed built and tested simple computer architecture using hardware provided by Intel and the Altera Hardware Design Language Operating System Development Project Sep Dec Developed set of UNIX system calls comprising preemptive Threads Package using Work Experience Intel Corporation August Hillsboro Oregon will begin work at Intel as Graduate Rotation Engineer As GRE hope to gain experience in many different and exciting areas in computer science Teaching Assistant for An Introduction to Digital Systems and Computer Organization Aug Present Department of Computer Science Cornell Engineering Course teaches fundamentals of computer structures and programming concepts using the PowerPC architecture as model Teaching responsibilities include leading weekly recitations holding office hours grading use of WWW for posting course notes Computer Jun Present Porous Materials Advanced Pressure Products Ithaca NY Tasks include programming Software for operating machinery in Visual Basic designed and managed PC LAN technical manual for an Automated Pressure Gauge Calibration System UNIX Consultant Jan May Cornell Information Technologies Provided assistance to students over wide range of topics including user environments programming languages and Internet access Work requires familiarity with UNIX XWindows and Sun workstation computers Telecommunications and Systems Consultant May Aug LEAD Technologies Westmont NJDec Jan Internship involved integrating different computer platforms over multiple network assisting network installations and resolving technical problems worked at Sealand Services NJ Camden County Health Center NJ Sun Oil Penn Computer Experience Programming Visual Basic Pascal Assembly HTML Platforms and Systems UNIX XWindows Mac DOS Windows NT Networks Novell Netware Netware Lite Windows for Workgroups Lantastic Internet Netscape Mosaic XRN TIN Eudora Pine CAD Software Logicworks Altera Hardware Design Language Activities Tau Epsilon Phi Fraternity Offices Held Back Steward Athletic Chair Gateway Theater Cornell Chorale Freshman Football Tae Kwon Do	other	cornell
1162	 Server Date Monday GMT Monday GMT Research Projects in the Cornell CS Department Research Projects These are links to the home pages for variety of departmental research projects and groups Some projects marked with have interactive demonstrations available try them out Masters of Engineering Projects Proposal for new projects and for completed ones SimLab Modeling and Simulation Project Brings together the technologies of geometric modeling symbolic mathematics numerical analysis generation and formal methods to forge new software tools for creating scientific software Robotics and Vision Lab Focuses on the topics of machine vision navigation and tracking robotic manipulation distributed and cooperative robotics microelectromechanical systems planning and control uncertainty and error and geometric algorithms NuPrl system that implements constructive theory of types NuPrl provides both formal system of mathematics and programming language It allows the user to express wide variety of proof and methods as metalevel programs of the system and use these to construct mathematical theorems and evaluate their computational content HyTech HyTech is an automatic tool for the analysis of embedded systems HyTech computes the condition under which linear hybrid system satisfies requirement Horus The Horus project has developed modular and extensible communication system addressing the requirements of wide variety of robust distributed applications Project The Computer Science Technical Report project is an consortium of the top five computer science departments Berkeley CMU Cornell MIT and Stanford and the Corporation for National Research Initiatives CNRI The project goals are to further research in the electronic publication of technical reports over the Internet and to make available the existing library of technical reports at the member universities Project Zeno Focuses on multimedia systems technologies including video file servers network transport protocols multimedia user interface toolkits and video special effects Information Capture and Access The information capture and access research group works on ways that computers can locate information in the ever increasing volume of online data determine its structure and extract the information for human users Cluster Computing network interface architecture offers communication performance on par with parallel machines on an ATM cluster of Sun workstations It supports parallel programming environments such as Active Messages and as well as traditional networking protocols like TCP Active Messages communication Information about developments using the Active Messages communication architecture simple parallel extension to Information about developments of CUCS Computer Science info Information about our baby What installed where to find it and how to use it Design Research Institute The Design Research Institute is an organization of collaborating industry and academic scientists and engineers devoted to research bringing computer science and computation technology to bear on problems of engineering design ACRI Advanced Computing Research Institute The ACRI under the direction of Thomas Coleman is concerned with scientific computation research and its application to engineering and scientific problems Of particular importance is the use of advanced computer architectures and environments The ACRI resides in both the Cornell Theory Center and the Computer Science Department Audio System for Technical Readings AsTeR AsTeR Audio System For Technical Readings is computing system for rendering technical documents in audio QMG Finite Element Mesh Generation QMG is toolkit of and Matlab routines for geometric modeling unstructured mesh generation for complicated geometries in two and three dimensions and finite element solution of boundary value problems This software is available by anonymous FTP The mesh generation algorithm is based on research by Mitchell and Vavasis ARPA funded projects MediaNet Platform for Network Media Processing MediaNet combines three technologies developed at Cornell to develop flexible high performance testbed for storing transporting processing and using multimedia data Horus Distributed Computing Environment Formal Support for High Assurance Systems Foundations and Support for Survivable Systems Air Force funded projects NYNET ATM Tools for Parallel and Distributed Computing	other	cornell
1163	 Server Date Monday GMT Saturday GMT Faculty Research Interests Ramin Zabih Assistant Professor Stanford University Research Interests My research interests are in computer vision am interested in developing vision systems and in using these systems for tasks such as robot control and the automatic annotation of image sequences am concerned with the design of efficient algorithms for extracting useful information from image sequences whose content is not known in advance My focus has been on motion and stereo but am also interested in other properties of images such as texture color and edges My current work focuses on determining the number of moving objects in scene and using this information for the automatic annotation of video sequences Before that worked on tracking of unmodeled objects Selected Publications motion vision for robot control John Woodfill Ramin Zabih and Oussama Khatib ASCE Specialty Conference on Robotics for Challenging Environments February System for Annotating Unstructured Image Sequences Ramin Zabih John Woodfill and Meg Withgott IEEE Systems Man and Cybernetics Conference Le Touquet France October	other	cornell
1164	 Server Date Monday GMT Friday GMT CS Problem Set CS Problem Set Motion and Snakes postscript copy of the assignment New Test Images Here is another set of images with corresponding magnitude image Be sure to read below also recomputed the image there seemed to be problems with its sg image These images are also available in on the cs and sunlab machines would prefer that you just create symbolic links to the images if you can since they exceed ln Test Images Here is the first set of images available in tar file There are two sets of stereo images that you can use to test your motion calculations There is sequence called dots that is moving box on random background There is also the images along with the dx dy and squared gradient magnitude images for the coke can You can use the squared gradient magnitude image as simple external energy field for snakes that are attracted to edges For you Sun users on the cs filesystems feel free to use or markpoints to draw your initial snakes Also available on the sunlab in Problem Set Mask for census transform ShortImage GrayImage inim Performs the using the following mask approximation Input pgm image Output ShortInt image containing the census transform of the input representing each comparison using on bit There are few typos in the Chandran et al paper In algorithm II the line if temp Si should be if temp Si They also get the order of growth for the algorithm wrong There is no need to perturb the point as described in Algorithm III step The correct approach is to take set of point positions run algorithm II and using the output set of point positions from alg II feed it into alg II again Do this until the energy stops decreasing just been shown the error of my ways There is way to dynamically program normalized correlation The solution is very cute not going to give any hints This goes beyond just precomputing the means and averages using The squared gradient images have given you are images smoothed with gaussian mask sigma Note that the squared gradient is highest at edges your energy function needs to be lowest at edges for the snake to be attracted to edges Simply negating the image will work Using the ADT image libraries The following versions of the library are available SunOS available on the cs dept machines as with the appropriate header files in USE on your command line Sunlab located in with header files in Other locations library and header files Solaris available on the cs dept machines as with the appropriate header files in be sure to include on your command line Sunlab you wo need the Solaris version Other locations library and header files Linux Here is the ELF library and tarfile containing the header files AIX thanks to Christoper Kline here is copy of the email he sent me	other	cornell
1165	 Server Date Sunday GMT Tuesday GMT Creating an Efficient Market on the Web CREATING AN EFFICIENT MARKET ON THE WEB Ramin Zabih Cornell University Consumers often purchase items that are available from many different vendors These different vendors usually charge different prices If it were easy to compare prices consumers would benefit substantially and every consumer would be able to get the best price This would create what economists call an efficient market Until recently it was too expensive to make pricing information widely available With the Web the cost of publishing information has fallen dramatically Because of the Web it may now be possible to create an efficient market for many consumer items As an example consider the market in computer peripherals such as printers modems etc In December the cheapest nationally advertised price could find for the printer was while the most expensive price was But it took many hours of reading advertisements to obtain this information There are several hundred vendors who sell peripherals and it is easy to compare prices Several efficient markets exist including the stock exchange and the commodities market Items on these markets such as stock are available for single price at any given time and that price is widely known Consumers rarely benefit from these markets because they do not trade consumer goods The PriceWeb Experiment Together with some friends at Cornell have begun an experiment called PriceWeb http PriceWeb is an attempt to create an efficient market in computer peripherals For given peripheral PriceWeb web site provides list of nationally advertised prices listed in increasing order This makes it simple to find the vendor If PriceWeb becomes widely used it will have major impact on the way that computer peripherals are purchased vendors would have to charge single uniform low price unless they can offer customers some additional value Computer peripherals are sold with fairly standardized warranties and return policies vendors compete primarily on price and availability This makes product differentiation difficult In an efficient market most vendors would have to lower their prices Short term PriceWeb works to the advantage of consumers and to the disadvantage of most vendors But in the long term there are advantages for vendors as well Consumers will be able to buy items without worrying that they are this argument is similar to Saturn policy for new car buyers And of course prices should fall These effects should lead to more customers An service like PriceWeb could have additional advantages for vendors For instance sometimes vendors wish to clear out inventory by selling an item very cheaply See Onsale for an example pricing information can eliminate the delays involved in print media advertising thus allowing vendors to more rapidly adjust their prices Also the Internet users who monitor pricing information will presumably be quite so listing an item at low price should generate large response These advantages to vendors have to be balanced against negative effects on vendor margins If the negative effects are larger there will be consolidation among vendors How much would consumers save in an efficient market One might expect prices on peripherals to be nearly identical but they are The average price spread on items that PriceWeb covers is and some items have large price spreads For example the HP OfficeJet is advertised for as little as and as much as If the vendors wished to avoid an efficient market they would have several options For instance each vendor could sell slightly different items If every printer were significantly different from every other printer it would be impossible to compare their prices But this would increase manufacturing costs and confuse potential customers thus reducing HP market share This effect is illustrated by the American automobile industry which for years offered an enormous range of options partly to prevent consumers from comparing prices The Japanese offered very few option packages which gave them price advantage in manufacturing In the computer industry almost everything is due to extensive standardization see TNO for discussion of the economic impacts of standardization So this option is not viable because of opposition from the manufacturers An efficient market could also be thwarted by punishing the vendor For instance suppose that all the vendors refuse to carry printers unless the lowest priced vendor is forced to raise its prices HP could in turn raise the price that it charges that vendor or cut that vendor off completely But this probably would not be in HP interests More importantly such actions would violate number of laws against price fixing such as the Act an excellent overview is available from the Federal Trade Commission These laws make it illegal for manufacturer to fix the price that vendors charge An efficient market would also be easier for the Government to monitor in efficient markets is more obvious than in markets where there are multiple prices For example suppose vendor cut its prices below costs to drive rivals out of business and then raised its prices This pattern would be fairly easy to spot in an efficient market with pricing information available The recent SEC investigation of NASDAQ trading practices was motivated by an academic study of pricing trends in this market if this data were not available electronically behavior would be harder to detect Challenges There are number of challenges that will need to be overcome in order to create an efficient market One potential difficulty concerns updating price information PriceWeb information comes from printed national advertisements In market where prices change rapidly advertised prices may be out of date before they appear in print The obvious solution would be to use prices from vendor Web sites but there are some obstacles While few vendors such as Computability provide pricing information most do not in fact surprisingly few vendors have Web sites Also price that appears in printed ad comes with legal protections against false advertising These guarantees may not apply to advertising Even if most vendors put their pricing information it may be hard to compare prices For instance consider Andersen Consulting BargainFinder which helps consumers buy audio Compact Discs cheaply BargainFinder queries vendors that sell CD via Unfortunately of these vendors currently block BargainFinder from accessing their sites Because BargainFinder actively queries Web sites it exists at the pleasure of the vendors In the short term they may not wish to cooperate PriceWeb will need to become economically which is challenge pricing information is what economists call public good like for example lighthouse It is notoriously difficult to get the beneficiaries of public good to pay for it In addition the Internet culture makes it hard to charge users for information believe that consumers will not use PriceWeb if they have to pay for it There are companies that think consumers will pay for such service CyberSave Shopper for example If these companies are correct they will create market in pricing information Mark Casson chapter in Information Acumen Routledge discusses the effects on markets of information An efficient market requires perfect information as the costs associated with information fall the market can become more efficient There are costs associated with obtaining pricing information for computer peripherals PriceWeb does not reduce the costs of obtaining the information but instead collects the information centrally and makes it freely available PriceWeb might be viable simply because the cost of running the experiment is so low Placing information on Web page costs almost nothing and the costs associated with gathering and entering data are also small Even small amount of revenue from advertising for instance could make PriceWeb In addition there are number of services that PriceWeb could provide for vendors that would provide revenue For instance vendors could be automatically notified if competitor beats their advertised price Will the Web Eliminate Retailers efficient market could also affect the relationship between vendors and manufacturers Most manufacturers do not sell directly to customers but via retailers Retail stores carry products from multiple manufacturers so customer can compare products side by side Manufacturers attempted to protect their retailers by various means for example the Manufacturer Suggested Retail Price is usually quite high so that every retailer can charge less than MSRP Manufacturers protect retailers to ensure that retailers carry their goods But with the growth of the value provided by retailers could diminish It may become profitable for the manufacturers to enter the business themselves An efficient market could eliminate many middlemen An efficient market in consumer goods would have substantial impact on society For example it could eliminate many retail stores in favor of vendors who can locate in areas with low fixed costs This could have massive consequences for many communities which have downtowns built around retail shopping Of course consumers shop for other reasons than obtaining the lowest price For some items such as Tylenol the savings may be so small that it is worthwhile to find the best price However large supermarkets spend great deal of effort trumpeting small price advantages It is possible that many shoppers are and would prefer an efficient market If the Web creates such market its impact could be far greater than any effects we have witnessed thus far While many retailers might disappear some new businesses will also come into existence For instance it will become much cheaper to establish the kind of specialty businesses that traditionally only flourish in large cities business that only appeals to small percentage of the population can flourish on the Web because it can be easily reached by potential customers Conclusions There have been several experiments in consumer empowerment which are similar in spirit to PriceWeb One example is the BBN Auto Mechanics List profiled by Rich Lethin in TNO This site lists local auto mechanics in the Boston Area Besides providing names and addresses it also includes customers comments on their experiences with each shop The comments are summarized by the moderator to provide an overall grade for the repair shop potential customer can view the comments of other customers and can also add their own comments Another example is The List which performs similar service for Internet Service Providers Like Consumer Reports these sites focus on giving consumers useful subjective information The Web has made an efficient market in consumer goods possible because it has dramatically lowered the cost of publishing information Until recently only large corporations or few unusual individuals could reach large audience The Web has changed this and we are just beginning to understand its implications	other	cornell
1166	 Server Date Sunday GMT Friday GMT Justin Miller Rantings Justin Miller Ranting Favorites Rock Band Jane Addiction Beer Miller Reserve Velvet Stout Magazine Wired TV show Beyond Football Team San Francisco Football Player Tom Rathman FB formerly of then the Raiders now retired Hockey Team Boston Bruins Hockey Player Ray Borque Baseball Team try real sport see football Spagetti Sauce Five Brothers	other	cornell
1167	 Server Date Monday GMT Tuesday GMT New Directions in Systems Research New Directions in Systems Research Introduction Communications Storage Computation Summary For years we have spoken of golden era where high performance will be available in local department stores and we will be able to communicate with anyone and any organization we want via computer networks In the past we have whimsically said that in this era computing systems will be used in dramatically different fashion than they are today That era is here now with computers available in local computer shops coffee houses springing up in trendy neighborhoods and National Public Radio broadcasting on the Internet for almost year And yet the way we use computers has not changed dramatically Clearly improved speech understanding and generation systems vision systems and other sophisticated technologies will change our interaction with computers What will change the content of our interaction with computers What type of systems research will enable revolutionary changes in the use of computers In an attempt to provoke discussion about these topics talk was presented several times during the spring semester slightly different approach to systems research was presented as well as few new directions that are being undertaken at Cornell Hopefully the ideas and questions raised by this presentation will be of use to others This technical report is rather rough and disorganized consisting as it does of slides from those talks and textual commentary felt it more valuable to make the material available in timely manner than to wait until the details had been worked out and the prose polished It is an experiment and am interested in the reaction any readers have to this form of presentation am interested in any comments you might have both on the content of this report and how it is presented Please send them to rz This work was supported by the Advanced Research Projects Agency of the Department of Defense under ONR Contract by ONR Contract and by grant from the United Binational Science Foundation Richard Zippel	other	cornell
1168	 Server Date Sunday GMT Friday GMT Code Samples Code Samples You can download these code samples by using Save As command in the File menu of Netscape Demonstration Code for dBase application lectures Test program Solutions to assignment Calculator Bubble Sort Solution to assignment Complex Number ADT Code Skeletons for assignment Simulator skeleton This shell program reads in files containing ADD and STOP commands and prints out the commands after picking apart the commands Try it out on the sample file Complete Simulator for JRM Downloading this will create You might need to decode this by double clicking on the file The executable is The executable is droplet Run the simulator by dragging the code file containing the instructions and dropping it on the executable Note that there are bugs in implementation of Java runtime utilities that cause certain features to have unexpected behaviour Scanning strings for register number Sample JRM codes Output for sample files Sample shell for assignment Simulator Shell This shell the previous assignment using inheritance and abstract classes Try it out on the sample file Sample JRM codes for assignment absolute value of factorial fibonacci summation bubble sort Output for sample files New JRM simulator Downloading this will create You might need to decode this by double clicking on the file The executable is This is runnable zip file and not droplet You launch it by double clicking on the file You must first reboot the simulator not your mac and then load the file to be executed by using the LOAD button on the simulator Sample JRM code for assignment Recursive factorial code Shells for assignment Sample GUI shell The code for the simulator The symbol table class Download the three files and make runnable zip file out of them Study the code in and the code in the main method in the class Simulator Some new methods have been added to the JRM class to do the actions requested but the JRM code is mostly the same as the solution to assignment Example code to illustrate buttons textfields labels and lists Complete GUI and JRM code Here is the complete GUI and JRM code as stand alone application You can use this as the base for the applet assignment This code does not fix the bugs in Lists present in CodeWarrior as Netscape does not have these bugs Be sure to read the notes for assignment	other	cornell
1169	 Server Date Sunday GMT Saturday GMT Cornell CS GNU page The CS GNU project was started up to have systematic setup for easy access to free software packages to the department computing community Many of these packages are replacements for packages and have the advantage of more features and portability on variety of platforms The project is headed by GNU czar who is responsible for the installation maintenance and support of these packages There have been two gnu czars so far Cliff Krumiveda and myself June This page links to software packages released under the GNU general public license installed at the Computer Science department These packages are currently supported for the HPUX and Solaris operating systems Previous versions of many of these packages also exist for the SunOS operating system but those versions are not being upgraded any more Cygnus provides commerial versions for many of these packages as well as support and consultancy If you would like to request package that is not currently installed fill out the request form You can also send bug reports You may find these maintenance scripts helpful if you are starting up your own GNU setup You can also find package specific installation procedures Maintained by Induprakas Kodukula	other	cornell
1170	 Server Date Sunday GMT Monday GMT The Horus Object Tools The Horus Object Tools This document is part of the online Horus Documentation under Horus APIs This document contains description of the Horus Object Tools HOT which implement Abstract Data Types for MUTS objects Horus group members and with intergated state transfer Contents MUTS Wrapper Classes HorusMUTS HorusErrorHandler HorusMemory HorusBase HorusMessage HorusSemaphore HorusThread HorusLock HorusEventCounter HorusEntity HorusBarrier HorusString HorusNameServer OrderedSet Horus Group Members and HorusGroupMember Creating HorusGroupMember Objects Joining Group Messages Monitoring Group Membership Changes Overloading Default Behavior HorusClSv state transfer protocol Creating HorusClSv Objects Joining Group Messages Monitoring Group Membership Changes State Transfer HorusCSX state transfer HOT Directory Server State Transfer in HOT State Transfer Server Joins the Group State Transfer Two Group Partitions Merge State Transfer The Protocol send mail to alexey	other	cornell
1171	 Server Date Monday GMT Monday GMT PS Specification Table of Contents Back to the CS home page Processing System Processor Overview System Interface Instruction Set Instruction Word Format Operand Modes Instructions NAND SUB ADD ASL ASR LSL LSR Data Transfer Instructions COPY LOAD STORE LEA Program Control Instructions CMP Bcc RTI HALT NOOP Instruction Execution Traps and Interrupts Simulator Example Program Back to the CS home page	other	cornell
1172	 Server Date Sunday GMT Sunday GMT Master of Engineering Computer Science Cornell University Maple Ithaca NY shim For English version click this University of California Irvine Chopin Here are my favorite WWW pages Korea NEWS Wants to know about Korean Graduate Student Association at Cornell Does anybody like JAZZ Check JAZZ out Interested in JAVA My cyberspace friends in HANA will be working in MELCO When was the last time you went to Movie My friends in the world Ra He is my middle school friend back in Victor Ha This page has been accessed times since March This is still under construction My resume will be available in near future Also This web page will have the Korean version of it soon	other	cornell
1173	 Server Date Sunday GMT Wednesday GMT Masafumi Suzuki MASAFUMI SUZUKI South Plain Street Ithaca NY email suzuki Home page http EDUCATION Cornell University Ithaca NY Candidate for Master of Engineering in Computer Science August Candidate for Master of Engineering in Operations Research and Industrial Engineering May Emphasis Multimedia programming Database MIS Computer graphics Simulation including developments of simulators Optimization Probability and Statistics Stochastic modeling Tokyo Institute of Technology Tokyo Japan Master of Engineering in Nuclear Engineering March Emphasis Nuclear Fission Nuclear Fusion Plasma Wall Interaction Tokyo Institute of Technology Tokyo Japan Bachelor of Science in Applied Physics March WORK EXPERIENCE IBM Japan Tokyo Japan Systems engineer in Financial Marketing Department for Nomura Securities and Yasuda Fire Marine Insurance Duties included Developed applications with and COBOL which run on UNIX Motif and Participated in total insurance system project as sub project leader Proposed information systems for diverse divisions or for the whole company personnel system decision support system for management insurance systems financial support system and personal email system Advised the various operation Liaised with the US support group for customers Studied new technologies in Europe on behalf of customers COMPUTER SKILLS Programming Language Java MS Visual Basic COBOL FORTRAN ASSEMBLER Operating System UNIX DPPX WINDOWS DOS MVS VM Database Communication SNA CICS IMS Application etc DFD method Data Modeling HONORS AWARDS First prize from Silent Hoist and Crane Company Material HandlingPrizes IBM Japan education scholarship First Prize of Summer badminton competition of Tokyo IBM Financial Marketing Department Award For the successful development of application development environmentson UNIX for host computers ACTIVITIES TUD Badminton Club member including time as Atomic Energy Society of Japan member PUBLICATION Deuterium Plasma and PDP Phenomena Proceedings of the Annual Meeting of the Atomic Energy Society of Japan Deuterium Permeation Driven by Plasma Through Metals Fall Meeting of the Atomic Energy Society of Japan My resume in Postscript	other	cornell
1174	 Server Date Monday GMT Thursday GMT RFB Symposium on Math and Science Access RFB Symposium on Math and Science Access Recordings For the Blind RFB organized symposium May on providing persons with print impairments improved access to mathematical and scientific documents Here is the initial call for participation describing the goals of this symposium AsTeR Audio System for Technical Readings enables automatic production of audio documents This can result in tremendous savings in both time and effort in providing alternative access to technical documents and thereby increase the availability of such documents in an accessible form The interactive nature of AsTeR also enables the user to interact far more effectively with such documents The conference focused on how AsTeR could be moved from being research system to one that could Produce books on tape Provide an interactive reading machine system for students To achieve this AsTeR needs to be ported to other computing platforms Produce educational material in Braille Here are the official proceedings from the conference Here is short describing the outcome of the conference An executive summary of the conference as well as my comments are also available raman Last modified Wed Jun	other	cornell
1175	 Date Sun Nov GMT Server Thu Apr GMT Bruce Land Bio Bruce Land is the Project Leader of the Visualization group at the Cornell Theory Center The group deals with development of visualization techniques and their application to scientific data He also teaches in the Computer Science Department at Cornell where he is senior research associate Land received in neurobiology in from Cornell University and BS in physics from Harvey Mudd College in He was lecturer in the Neurobiology Department at Cornell for ten years and did research on coupling of activity at the vertebrate neuromuscular junction both experimentally and by computer modeling During this time he taught in the Electrical Engineering department at Cornell for two years He came to the Cornell Theory Center in as Computational Research Associate then started supporting graphics and animation in In he started teaching an introductory graphics course in the CS department at Cornell	other	cornell
1176	 Server Date Sunday GMT Tuesday GMT if you publish it it must be true right all those books there scattering of books everywhere throughout the clearing it clear that dan reads more than would make pat robertson happy then again who cares recently read books and topics queer theory just finished Vice Versa by Marjorie Garber which was very interesting book about bisexuality and how ignored yet actually ubiquitous wish we could get over our fixation with freud though almost done with The Celluloid Closet by Vito Russo basically his theme is that it impossible to find people who are incidentally gay or lesbian let alone bisexual in movies from the beginning of the medium to not that that has changed much in the time since then this book was made into movie well sort of russo died of aids in and the movie is quite different from the book it very interesting to consider just how absurd the gay characters in movies over the last years have been great example might be the sal mineo character in Rebel without Cause or the cowardly lion also hideous is just how duplicitous hollywood has been in changing themes of major literary works lying about the history of gay people beethoven was bisexual immortal beloved or not Jonathan Ned Katz The Invention of Heterosexuality is magnificent assault on the notion that heterosexuality is normal eternal or universal actually the term is only years old and actually the attitudes surrounding it which basically is the notion that sexuality and pleasure can be separated from reproduction is also roughly from that time period again though too much freud Gilbert Herdt Youth of Horizons is nice book about gay kids in chicago he starts with really nice representation of the classic social constructivist view of gay people which really appreciated he little overly anthropological found this frustrating but not too much since he less polemic than he otherwise might be he also wrote large number of books in the early about ritualized homosexuality in areas around new guinea such as the sambians who believe that the only way they can become masculine is to ingest semen no not making that up joining the tribe is nice book about gay kids all over the country there quite difference in the statistical academic presentation of an anthropologist like herdt in the last book than in the presentation of journalist like the woman who wrote this one she entirely interested in anecdotes while he is almost not at all gay is not good is beautifully offensive tract from the days interesting of course is the fact that this pap still gets written published despite threats from the militant homosexual wing which its author suggests runs all of publishing if that were the case why is mass media so fucking biased anyhow we get such marvels as an analysis of the advantages to homosexuality such as our extra free time increased leisure cash and lack of need to be members of the PTA and we do have to take care of our loved ones because we all unloving monsters good thing this book DID come out before aids gorgeous discussion of greek society along the lines of if the greeks were the best that homosexuals could do and they know about things like the germ theory of disease circulation of the blood or particle physics they were much now were they coupled with really nasty description of socrates as the most important gay man of all time who was still pederast etc and salacious reference to what we find in the lives of lesser homosexuals like tchaikowsky da vinci or wilde hey you know hear chairman mao was straight lenin too heterosexuals medical description which seems to be written by about why heterosexual sex is better than gay sex this guy needs better sex life so do but let not go there reread pat califia public sex the culture of radical sex recently she basically is writing about whole bunch of marginalized even by queers sexual behaviours sex with minors how many of you waited you were why feminists are silly comment from john katz on this is that the image of women as happy housewives in commercials probably does far more harm to women than does pornography and other topics her porn is also highly rated by yours truly also enjoying reading some essays by gore vidal about sex as the poster child for the there no such thing as homosexuals just homosexual sex movement have some disagreements with him but he writes so well computer science reading alon spencer the probabilistic method which basically tries to prove that combinatorial objects exist by creating probablistic space which includes all objects of certain type and showing that an object with the desired properties will be randomly selected with probability thus objects of the desired type exist cute but lacking much motivation that nice but why do care that graphs with this property exist after all and can find them ketan mulmuley computational geometry through randomized algorithms is lovely book about this kind of computer science really really enjoying it when get to reading it preparata and shamos computational geometry is the more classic book on the topic it drier more out of date and precedes the whole discussion of how randomization can make something like geometry which is ultimately largely about sorting and searching much faster also reading random books like conference proceedings volume about some soda proceedings and other books fiction lately been reading mostly fiction it not that avoiding heterosexual fiction but ca seem to accidentally get straight fiction off the shelf at olin library the grad library here at cornell not that really mind but did seek out some of the following however and some of anyhow manuel puig kiss of the spider woman was really neat read my friend nohemy who moving to stanford in month and saw the play at the kitchen theater in downtown ithaca which seems not to be on the web and read the book in translation after that one difference between the book and the play not seen the movie is that in the play valentin and molina only have sex once which to my way of thinking minimizes the significance of their emotional attachment in the book they do so over several day period it may sound small but significant anyhow very interesting read gore vidal the city and the pillar was really upsetting it the first book to ever deal with gay people at all nicely and even it is kind of upsetting do recommend it as really melodramatic intense quick read however slightly less appaling is andrew holleran dancer from the dance though it still ends with the faggot dying why is that it tragic yet beautiful chronicle of the life of gay man as he moves from to its most stereotypical member ack why do know these people still even though the book is daniel vilmure toby lie made me cry that alone is pretty impressive all toby wants to do is dance with his boyfriend at the prom and nothing seems willing to let him do it vilmure also wrote life in the land of the living which is about white trash kids in the south nice nice voice scott heim wrote mysterious skin from whole bunch of different voices which tell us about one boy obsession with ufo and how he realizes that he was abused as kid while telling really pretty intergenerational love story at the same time he also just emailed me to thank me for mentioning him on this page that kinda neat in its own right you know it was also odd now that think about it realizing just how much it seems different reading books about kids that were written in say the early century versus today is it because more like the current ones because seek ones who are more like me or because the writing is more honest who knows lars eighner pawn to queen four is pat robertson worst nightmare funny story about the drag queens who really run the planet enjoying book of lesbian vampire stories called daughters of darkness quite lot right now read cute book about love and murder in british department store recently called everything and more that worth read also portnoy complaint philip roth and some shitty norman mailer crap why do people read this shit other topics also been reading some biography anthropology computer science papers and the occasional truly bad trash novel read too much here what generally like to read about consciousness and what modern science can tell us about how the mind works good books on this topic are very hard to come by but the recent collection called android epistemology recently published by the mit press is good start be wary of anything that was written by someone who actually has no scientific background there was bitchy editorial in the new york times just today about how scientist managed to confuse some sociologists of science with complete crap about quantum mechanics and its impacts on literary theory but this stuff is all too common check out higher superstition the academic left and its quarrels with science jhu press for more details on this topic ick philosophy of theoretical computer science this extends to discussions of artificial intelligence which is also in the previous category but it also involves whether concepts like turing machine or the kleene heirarchy have any real philosophical importance almost all that read on this topic is bunk too witchcraft been practicing witchcraft for few years but most books on this topic are also crap couple exceptions are the books by starhawk margot drawing down the moon and the books by the farrars email me if you like more information about this topic gay and lesbian politics again topic which has too many bad writings do agree with most of what they say but you could check out the writings of bruce bawer or the writings of jeffrey weeks unfortunately however this topic seems to lack competent middle ground or perhaps keep believing that there should be one when there need be who knows gay and lesbian history there are good books on this brian boswell books unions in premodern europe and christianity social tolerance and homosexuality are fantastic books about the medieval history of gay people in more modern sense the books of paul monette especially becoming man are fantastic you could always read david halperin if you wanted obscure religions last semester read about scientology and this summer seem to be starting off on journey of discovery of mormonism ack what scary people contemporary fiction cornell library includes loan group of books which are often very interesting and current and the undergrad library has loan period on everything including new books very nice medieval history rantings by folks like kirkpatrick sale who really should stop publishing in phototype if they want to authentically make their message anthropology of modern primitive societies erotica really nice site is the one that run by circlet press which was partially founded by friend of mine you might also check out the site run by good vibrations computer science it is what study operations research it what currently study math it what really study we are the music makers and we are the dreamers of dreams aphex twin dan brown snowman last updated jul	other	cornell
1177	 Server Date Sunday GMT Saturday GMT PyraMania Home Page PyraMania Space Adventure Introduction PyraMania is Spaceship battle game developed as project for the course at Cornell University by Jose Luis Fernandez Samuel Kan Todd Peskin Amith Yamasani It is wireframe simulation with options to display solid objects Programming Languages Utilized PyraMania was developed using for the internal structure of the program and for the user interface Features Wireframe graphics solid graphics mode Radar for locating enemies and tanks Lasser Objective The user must get all the rotating combustible tanks in the scenary He has radar to locate the enemies and tanks and lasser to shoot the enemy spaceships He must complete the mission before the timer counter will expire	other	cornell
1178	 Server Date Sunday GMT Friday GMT CS Homework Homework September Consider the following problem town has residents Rr clubs Cq and political parties Pp Each resident is member of at least one club and belong to exactly one political party Each club must nominate one of its members to represent it on the town governing council so that the number of council members belonging to the political party Pk is at most uk for given up It is not ok for two or more clubs to nominate the same person The problem is to determine whether it is possible to find council that satisfies this balancing property Given Rr Cq Pp up show how to solve this problem by solving single max flow problem You are given graph and max flow on the graph Show how to find minimum cut in additional time Show how to transform maximum flow problem having several source nodes and several sink nodes to one with only one source node and one sink node Construct an easy to describe family of flow graphs the ith flow graph is graph on nodes with the number of cuts of minimum capacity growing exponentially with Due September in class	other	cornell
1179	 Server Date Sunday GMT Wednesday GMT Database Sector NBA Infrastructure Sector Press here if you are using Netscape Browser Press here if you DO NOT have Netscape Browser You are missing lot	other	cornell
1180	 Server Date Sunday GMT Monday GMT The Cornell Dutch Club home thuis nieuws bladen events links fotos music werk tourism travel cultuur taal geography misc The Cornell Dutch Club The Cornell Dutch Club CDC located in Ithaca NY USA press here for the dutch version press here for our newest member Come to our Sixth Dance Party The sixth Euro Dance Party is on Friday November at Calypso Bay Ithaca PM AM for printing Free shuttle bus leaves every minutes from Collegetown North Campus starts PM Year Report dutch Analysed requests Reports week month months See what pages are most popular Dutch Links About interesting Dutch links Cornell Dutch Club For Sale For only you can own your own and indeed very cool dark green navy blue or bordeaux red Dutch Club if you buy it at one of our events In white letters it says Let go Dutch on the back en our logo on the front To order via mail send includes shipping to Sander Kersten DeWitt Place Ithaca NY Make check out to Sander Kersten CDC Pictures View some beautiful girls and boys List of Upcoming Events in Ithaca Friday November The sixth Euro Dance Party for printing on Friday November PM AM in Calypso Bay Ithaca Admission Free shuttle bus leaves every minutes from Collegetown North Campus starts PM every Monday Dutch Koffie Hour CDC Every Monday evening at PM in Rulloff College Ave or with good warm weather only outside at Collegetown Bagels Look for the tulip and the dutch vlag Mailing Lists Our Dutch Mailing List at Cornell dutch status Dec Als zich wilt abonneren zend mail naar listproc met deze regel in de inhoud van de message subscribe naam hier De Surinaamse Mailing Lijst Nederlandze Rondzendlijsten Dutch For English is mailing list for those who speak English and are learning the Dutch language an discussion list for people who share an interest in Lowlands languages and cultures Passed Events Adding Information to this Server If you have any comments about the information provided would like to help maintain this server have information you would like to see displayed please send an to me at aswin or telephone USA You can also send typed stuff or pictures by mail to Aswin van den Berg Cornell Dutch Club Home Page Skyacre Drive Ithaca NY USA See you soon The Cornell Dutch Club you can add to this page home thuis nieuws bladen events links fotos music werk tourism travel cultuur taal geography misc	other	cornell
1181	 Server Date Sunday GMT Wednesday GMT Family Album Family Album My nieces Charlotte Sophie in the bath tub am reading stories Jean and dancing at the American Swing Dance Championships ASDC in New York City Charlotte Florian and Vince Florian Sophie Martijn and Charlotte Sophie All had when got into the US good time to have cup of koffie	other	cornell
1182	 Server Date Sunday GMT Tuesday GMT CS Course Syllabus CS Syllabus DateLecture TopicReferenceEvents Aug and Warrior Demo Sept and Sept and the Substitution Sept recursive problem solving Due Sept with putput tail recursion and Sept assignment control structures schemes Due Oct Oct Abstraction and Types Oct Searching Due Oct Oct Meeting Fall Break Oct Sorting Loop Invariants Oct Two Dimensional Arrays Oct Choice of Representation Oct Due Oct Nov Nov Nov Due Nov Nov Nov Nov Arithmetic Nov Meeting Thanksgiving Dec Dec and Due Notes Schedule subject to change Readings are from the Roberts textbook The Art and Science of and Teitelbaum notes Structure of Programs and Their Interpretation to be handed out in class Additional reading material will be distributed throughout the term Material on Matlab will be integrated in lectures and assignments throughout the semester Sunday afternoon review sessions will preced each prelim and final Final exam is Tuesday at Last Updated on Sunday September PM Any Comments or Suggestions Email them to flung	other	cornell
1183	 Server Date Sunday GMT Saturday GMT Some useful links related to Multimedia Systems Some useful links related to Multimedia Systems Usenet Frequently Asked Question FAQs Color Space FAQ Gamma FAQ Audio FAQ MPEG FAQ JPEG FAQ Compression FAQ Miscellaneous MPEG audio example Multimedia Backbone MPEG FAQ Rob Multimedia Lab Desktop Video Conferencing Product Survey Apple Computer Video Glossary Digital Video Digital Audio JPEG Compression Examples Desktop Video Glossary Technical Introduction to Digital Video CS Multimedia Systems and Applications JPEG Compression Example Real Time Video and Audio in the World Wide Web Digital Audio The Medusa Applications Environment The VuSystem Programming System for Visual Processing of Digital Video PLANET EARTH HOME PAGE MOVIES AND VIDEO INFORMATION home page	other	cornell
1184	 Server Date Sunday GMT Monday GMT SUKHPAL SANGHERA Hippi an Infrastructure for Protocol Performance Tests in the Horus Distributed System Text in Postscript Figure Figure Figure Figure	other	cornell
1185	 Date Mon Dec GMT Server Mon Feb GMT Lab CS Laboratory Image Techniques Introduction In this exercise you will treat images as data to perform various useful graphics operations including volume and Procedure First you need to download several example files To do this click on each of the filenames shown below When the text window opens use the save as option to put the file in your own directory Name each file with the same name as shown below Texture Mapping The program will show you how to read an image display it and find its size Note that an image in DX has physical size corresponding to its initial resolution in world units resolution image is by world units in size in the plane with one corner at the origin The reduce module lowers the resolution but does not change the size of the image as you can see from the output of the Statistics modules which are configured to determine the max and min of the coordinates of the image Vary the interactor to change the image resolution An image consists of field of representing the red green and blue values at each point Marking the component colors of an image allows manipulation of the image The program creats flag image then animates it as parametrically distorted plane Volume Texture Mapping volume texture map see page of Watt produces surface color on an object which is function of the coordinates of the surface The program gives an example of two volume textures stripes and noise see Images Bump Mapping attempts to give surface more interesting texture by varying the normals to the surface The procedure causes the lighting model to assign different colors to patches of surface making it appear rougher Two bump maps are shown below random perturbation of the normals and one that resembles tiles Assignment Construct scene which includes flag of your own design waving in the wind An image from the directory as backdrop hemispherical mirror which reflects an image of the flag This is image rendered from viewpoint behind the flag then parametrically deformed into hemisphere The following image is one possibility flag is reflected in mirror which is placed behind and below the flag The sky is an image which has been parametrically warped into cylinder The image on the right shows view of the scene zoomed out to show the sky Design functions to produce volume textures simulating wood grain of concentric growth rings marble fiberglass The new textures should be incorporated into the existing selector list on the control panel In addition modify the program to map the textures to sphere and add an interactor to select between the sphere and the planes The volume textures supplied in the program are shown below Starting with the program design bump maps which resemble Snow covered ground corn field Bricks with mortar Be prepared to demo Your waving flag reflected in hemispherical lens The three volume textures The three bump maps You must document your code Layout small groups of modules which fit on one screen and connect them to other groups with transmitters You should use macros and comments in the Notation field of each module so that you and the grader can understand the program Control panels if any should be well organized labeled and with the appropriate numeric ranges Back to Main Page Go to Lab Last modified Copyright Statement	other	cornell
1186	 Date Tue Jan GMT Server Wed Oct GMT CS Analysis of Algorithms Preliminary Information Sheet for CS Analysis of Algorithms Fall Instructor Steven Robbins Office SB Phone Address srobbins Course Homepage http Course Newsgroup Office Hours TTH and by appointment Class Times TTH in room HSS Text Required Data Structures and Algotithms by Aho Hopcraft and Ullman Recommended Introduction to Algorithms by Corman Leiserson and Rivest Prerequisites CS CS MAT Course Content We will be covering parts of Chapters and from Aho and small sections from Corman Grading Two exams Assignments programs and problem sets Final Exam Thursday December Course Policy Friday October is the last day to drop this course No exams will be given except for university sanctioned excused absences Homework assignments will not be accepted after the due date Hand in whatever you have finished on an assignment on the due date for partial credit If you must miss an exam for good reason it is your responsibility to contact me before the exam Leave message at the above number or send me email You are to do the assignments without collaboration You can ask me questions about any aspect of an assignment General discussion with others on the system or on an approach to problem is constructive and is okay However since your grade is based on your assignments they must be your own work Students who hand in programs or written assignments which are identical or nearly identical are cheating This type of scholastic dishonesty usually results in immediate failure in the course and can lead to additional disciplinary action	other	misc
1187	 Date Tue Jan GMT Server Mon May GMT Broadcast Disks Project Members Broadcast Disks Project Members Stan Zdonik Swarup Acharya Michael Franklin Demet Aksoy	other	misc
1188	 Date Wed Jan GMT Server Thu Sep GMT SETL Students Students of the Software Engineering Test Lab Graduate and Undergraduate Students Name Email Address Govind Deshpande govindd Gregory Hall ghall Jainqiang Michael Zhou michael Jerry Atkinson gatkins Robert Bradley DesAulniers Wesley Ireland ireland Sebastian Elbaum Student Publications Graduate Student Theses SETL Homepage Publications Faculty Research UI Computer Science Department University of Idaho For more information send mail to setl	other	misc
1189	 Date Tue Jan GMT Server Mon May GMT Links to Other Institutions Institutions to which have link Sometimes rather tenuous one Carnegie Mellon University Case Western Reserve University Kansas State University NASA Lewis Research Center Northwestern University Massachusetts Institute of Technology SRI Computer Science Lab Stanford University Computer Science Department University of Pennsylvania CIS Department Brian Howard bhoward	other	misc
1190	 Server Date Tuesday GMT Thursday GMT Multimedia Lab Computer Science Multimedia Laboratory NC State University The mission of the laboratory is to support research and education of Computer Science graduates and undergraduates in the fields of Multmiedia Technology Communications Educations Technology and Learning Environments Classes Administration Research Search Graduate Studies Department of Computer Science Multimedia Laboratory North Carolina State University December support Copyright Department of Computer Science	other	misc
1191	 Date Tue Jan GMT Server Tue Jan GMT Calendar Foundations of Computer Science II Calendar Winter This page summarizes the topics and objectives for each week of the semester Reading assignments are from Aho Alfred Ullman Jeffrey Foundations of Computer Science Edition Computer Science Press Week January Reading Chapter Sections Topics The Relational Data Model Keys Primary Storage Structures for Relations Secondary Indexes Navigation Among Relations Week January Reading Chapter Sections Topics Algebra of Relations Implementing Relational Algebra Algebraic Laws for Relations Week January Reading Chapter Sections Topics The Graph Data Model Definitions Implementation Connected Components Week January Reading Chapter Sections Topics Minimal Spanning Trees Depth First Search Shortest Path Week February Reading Chapter Sections Topics Patterns Automata State machines Deterministic and Nondeterministic Automata Week February Reading Chapter Sections Topics Regular Expressions Unix Extensions to Regular Expressions Algebraic Laws for Regular Expressions Automata for Regular Expressions Week February Reading Chapter Section and Chapter Sections Topics Regular Expressions for Automata Grammars Languages from Grammars Created Dec Updated Jan by Theodore Norman tad	other	misc
1192	 Date Tue Jan GMT Server Mon Jan GMT Visualiztion for Instruction Homepage Visualization for Instruction Project Descriptions The Simulator Movies from XTANGO Auralization of XTANGO JOTSA Project Demos The Simulator Movies from XTANGO Auralization of XTANGO JOTSA Publications	other	misc
1193	 Date Tue Jan GMT Server BU CAS CS Introduction to Computer Graphics Assignment BU CAS CS Introduction to Computer Graphics Spring Programming Assignment Shaded Display of Superquadric Toroids Due before class on Tuesday April The purpose of the assignment is to introduce you to polygonal surface generation basic shaded display in OpenGL and camera modeling The Program You Write Write program that allows the user to create and display superquadric toroid donut in with shading Allow the user to modify the toroid two exponents the three radii and the hole radius You may also want to allow the user to vary the number of polygons used to approximate the torus Allow the user to modify the camera viewpoint to front back top bottom left and right views In addition make it possible to rotate and position the object in To make things easier center you may want to put your toroid at the world coordinate system origin Create an animation by defining camera trajectory and fly by model created with your toroid During the the camera motion should be smooth and remain pointed at the center of the scene Parametric Surface and Normal Functions Given the following equations SGN cos fabs cos SGN sin fabs sin where SGN or depending on whether is less than equal or greater than Suggestion SGN can be implemented as macro Points on the surface of superquadric toroid can be computed with the following parametric equations where rx ry rz are the radii is the hole radius are the superquadric exponents are the surface parameters both in the range to PI Normals on the surface of superquadric toroid can be computed with the following equations nx ny nz Example Program Example source files for simple program that generates shaded display of regular torus are available in on the CGL cluster This example program was adapted from The OpenGL Programming Guide This program is only provided as an example and you are not required to use it as basis for your own program Demos and Grading Your project must run on the SGI therefore you will need to use one of the SGI workstations in the CGL cluster unless you have access to an OpenGL elsewhere Your program source files are to be electronically submitted by using the submit program on cgl The code you submit should conform with the program assignment guidelines Part of your grade for this programming assignment will be based on your giving short demo minutes in the CGL cluster You will be expected to talk about how your program works and we will see how well your program performs on some test examples Demos will be scheduled for the Friday afternoon following the assignment due date Start programming early Extra Credit Compute procedural texture map using fractal techniques and apply it to your toroid Allow the user to toggle whether texture map is used or not Test Cases You are responsible for testing your own code Page Created Feb Last Modified Feb Maintained by Stan Sclaroff	other	misc
1194	 Date Wednesday GMT Server Friday GMT Curve Finder Boundary Extraction by Lineal Feature Growing This web page is brought to you by Christopher Eveland Sotiris Ioannidis and Andrea Selinger group of first year graduate students in the University of Rochester In the form below you will be able to type in the URL of an image and the boundaries in the images will be found overlayed and sent back to you The boundary extraction application was developed by Randal Nelson Click here if you want to see detailed description of the application You can use this application if you want to find the curved and straight lineal features in an image The program works on grey scale images However if you send us color image we convert it to grey scale find the curves and overlay them on the color image You can send us your image in GIF JPEG or IFF format You will get it back in GIF format Please allow few minutes for the processing as it is being run on busy server If you are ready to run the program on your image file please use the submission form below Please type in the complete URL of GIF JPEG or IFF file This file must be accessible to the outside world Image URL	other	misc
1195	 Date Tue Jan GMT Server Wed Sep GMT CS Computer Security Concepts Lectures CS Lectures Lectures are hour on Mon Wed and Fri of each week am going to try to make available notes and comments from each lecture If there is any material that did not explain well or you would like written down let me know and add it to these pages The following lecture notes are postscript PS copies per page of the slides show in class also include pointers to Microsoft Powerpoint Files PPT for those without postscript printer or viewer Please see the viewing information file for more information about viewing documents found here Lecture Aug Introduction in Postscript or Powerpoint format Lecture Aug Introduction in Postscript or Powerpoint format by Jim	other	misc
1196	 Date Tue Jan GMT Server Thu Jan GMT Important Dates Date Major Happening January Project Part Due February Midterm Exam February Project Part Due February Project Part Due March Project Part Due March Final Exam	other	misc
1197	 Date Tue Jan GMT Server Wed Oct GMT CS Quick Index CS Quick Index Not all the links are working yet Download the its WORD document zipped Scores for How to get in touch Course Outline Course Objectives Team Project Description Team Peer Evaluation Reading Assignments Grades This semester we have CHAT ROOM check it out Submissions Assignments Programs Decision Structure for Expert Systems Reasoning Expert Systems Development Process Frames Semantic Nets Expert Systems Logic Predicate Sample Quiz Resolution Unification Prolog Unification Examples Paper Tutorial Chaining Software Engineering and Expert Systems Unification Inferences Basian Probability Fuzzy Logic Measures of Belief Quiz Buzz Words Sample Final Sample Final Appendix Expert Systems Shells Library Call Numbers Harmon King Theater Problem PDC Order Form Thesis Topics in Expert Systems Homepage	other	misc
1198	 Date Tue Jan GMT Server Fri Aug GMT Other Questions Other Questions Other Questions This will be the page where other frequently asked questions about the CS Dept will be listed Ask The System Manager holds Frequently Asked System Questions with answers	other	misc
1199	 Date Tue Jan GMT Server Wed Jan GMT Syllabus Syllabus Spring Lecture Sections and Campbell Hall CA Recitations Section Wed Hardenburgh Hall HH Section Fri Hardenburgh Hall HH Instructor Miles Murdocca CoRE murdocca http Office hours CoRE Text Principles of Computer Architecture course notes Busch Campus Ctr Repro also available in PostScript form complete and in HTML partial via the World Wide Web at http Grade structure Exam Exam Final Exam Quizzes and programming project Lectures Chapter Introduction Chapter Data Representation Appendix The IEEE Floating Point Standard HW Chapter and Appendix all problems Review Exam Chapter Essentials of Digital Logic Chapter Machine Language and Assembly Language Mar Chapter Working With Assembly Language Mar Mar Mar Spring Break Mar Spring Break Mar Chapter Memory Skip the section on Content Addressable Memory and problem Mar Mar Review Mar Exam Chapter Input Output and Communication Apr Apr Apr Chapter The Control Unit Skip Section and problem Apr Apr Apr Chapter Arithmetic Skip sections and Apr Apr Review Chapter Advanced Topics SYLLABUS Page ABOUT THE COURSE Computer Architecture is sophomore level introduction to computer architecture The course covers the structure and function of digital computers Prerequisites include first course in programming using Pascal and data structures using which are normally covered in sequence during the freshman year HOMEWORK is not collected but you should do all of the problems for all of the chapters and the Appendix problems as method of learning the material All solutions are available at the end of the lecture notes EXAMS There are meetings before the Final Exam Two meetings are for Exam and Exam and three meetings are for reviews The remaining meetings are for the lectures listed on the other side Exam in Exam Mar in Final Exam May place to be announced Note that this is the examination time for Computer Science Group and is not the default exam time for class Cancellations None planned Spring Break Sun Mar through Mar ELECTRONIC COMMUNICATION In this age of the global village we should use electronic communication as much possible All properly registered students can set up their own Unix computer accounts on the Department of Computer Science undergraduate computers remus romulus and terrapin You will need this account for the programming project and it will also be helpful for communicating with the instructor the teaching assistant and with other students Murdocca prefer electronic mail correspondence and ask that you correspond with me when possible read email at all times of the day and night and almost every day of the week even when travel on business It is fast nonintrusive way for us to correspond and you never have to feel that you are interrupting me outside of my scheduled office hours Do be afraid to send me message The class newsgroup is available on You should look there for announcements and grade postings You are also encouraged to submit messages of interest to the class with regard to problems and solutions assignments exams job opportunities or anything else of interest to the class If you are not familiar with how to read newsgroups and post messages to them then please type man nn without the double quotes on your Unix account for manual pages on the nn news reader You are also encouraged to explore the World Wide Web from your DCS Unix account If you have never surfed the Internet before then this is good opportunity to get started From your Unix account type netscape again without the double quotes and wait for the Rutgers Info page to download When the download is finished you can click on hyperlink to follow path of interest or click on the Open button in the menu to open document of interest located elsewhere You can use the Open button to open my home page listed on the other side of this page where you will find pointers to other places that you can visit both within and outside of Rutgers Note that you have full access to the World Wide Web from your DCS Unix accounts but that accounts on eden are restricted to browsers	other	misc
1200	 Date Wednesday GMT Server Monday GMT Agustin Poe Las Cruces Work Home Fax agonzale Internet February EDUCATION New Mexico State University Las Cruces Candidate in Computer Science Expected date of graduation Spring Area of research Datalog programs applied to databases that satisfy functional dependencies Datalog is declarative query language based on first order logic Datalog program is query whose input is relational database and whose output is another database Datalog programs are more expressive than relational queries since they can express recursive queries for instance the transitive closure problem is expressible in Datalog My research focused on how to efficiently process recursive Datalog programs and how constraints in the input to Datalog program affect constraints in the output Results obtained in datalog research can be applied to extend existing relational database managers Instituto Tecnologico de Estudios Superiores de Monterrey Monterrey Master of Science in Computer Science December Thesis Information systems representation using semantic data model Description of research Existing modeling techniques are weak in terms of representing behavior of systems In this work graphical technique based on semantic modeling is proposed The Semantic Model with Transactions SMT SMT allows for the graphical specification of objects related to particular domain From this specification code can be generated to support the basic behavioral aspects of the system such as inserts deletes and updates prototype of SMT was written using University of California Berkeley CA Bachelor of Arts in Physics March SPECIAL SKILLS College level teaching experience Computer languages Objectpal QBE SQL Xbase Designing and implementing relational databases Experience in development of complex computer systems lines code people project Good writing and communication skills Native Spanish speaker analysis and design Operating systems UNIX Sales experience PROFESSIONAL INTERESTS My professional interests are applying existing technology education and research and development of new areas in database technology In particular would like to apply my knowledge on databases and object oriented programming to information systems development Also would like to participate in the development of new database models or help make existing systems more usable and expressive Also would like to work as consultant to help end users fully exploit existing database technology PROFESSIONAL EXPERIENCE New Mexico State University Las Cruces Research assistant Research in deductive databases Developed general purpose class library for It contained general purpose classes such as string class class for Boolean types and several container classes such as lists and sets Also developed class library for manipulating logic programs It contained classes for logic objects such as programs rules atoms predicates etc These libraries were used in the implementation and testing of transformation algorithms for Datalog programs They were also used as teaching aids Instructor of and January to date Universidad Autonoma de Cd Juarez Ciudad Juarez Chih Mexico Consultant Participated in departmental project to build fully automated production line Headed the software part of the project The software was to be built using techniques for the front end developed using under and back end database Trained other participants in programming using August to January Universidad Autonoma de Cd Juarez Ciudad Juarez Chih Mexico Consultant Taught training course aimed at professional developers Summer Instituto de Estudios Superiores de Monterrey Monterrey Research assistant Researched and developed database management system with graphical interface The DBMS was written in for The final system had over lines of code and more than persons were participating at given time Headed the development of the graphical editor over lines of code the module that allows for visual integration and flow of control of the other objects in the system such as forms reports and scripts January to December Instituto de Estudios Superiores de Monterrey Monterrey Mathematics teacher Taught introductory calculus courses August to December de La Paz Owner Designed and developed information systems for personal computers Sold hardware and software Designed and implemented system for control of patients records and accounts in an orthodontic clinic The system is still in use and is being adapted to run under Windows Headed the deployment as consultant of accounting inventory and financial analysis systems in several companies January to August Microcontrol Digital de La Paz Manager Sold hardware and software for personal computers November to December Universidad de Baja California Sur La Paz Mathematics and computer science teacher Taught calculus physics and introduction to computers January to January TECHNICAL PUBLICATIONS Testing Implication of FDs in Linear Programs Department of computer science New Mexico State University Las Cruces Uniform Equivalence of Datalog Programs Under Functional Dependencies Department of computer science New Mexico State University Las Cruces Gonzalez El Proyecto Gema in transferencia revista del programa de graduados del ITESM January Gonzalez La del in Panorama revista de la Universidad de BCS August PROFESSIONAL ASSOCIATIONS Member of the ACM since AWARDS AT amp Bell Laboratories Denver CO Hispanic employees scholarship recipient for spring First place in the international contest Desarrollo binacional de empresas de avanzada in foro de intercambio San Antonio Texas January Go back to the CS Department Home Page	other	misc
1201	 Date Tue Jan GMT Server Fri Oct GMT PhD Graduates PhD Graduates Terence Critchlow Contact Information critchlo Dissertation Title Data Coercion Using Database Dissertation Advisor Gary Lindstrom Fields of Interest Databases programming Job Preferences Industry research Completion Date December Mohamed Dekhil Contact Information dekhil Dissertation Title Performancs Analysis of Sensor Systems Dissertation Advisor Tom Henderson Fields of Interest Robotics sensor systems and virtual environments Job Preferences Academic Completion Date August Greg Heflin Contact Information gregh Dissertation Title Discrete and Multiview Accessibility Analysis of Complex Free Form Models Dissertation Advisor Elaine Cohen Fields of Interest Computational geometry graphics animation Job Preferences Employed by Walt Disney Feature Animation Completion Date July Ho Contact Information ho Dissertation Title Process Planning and Automatic NC Part Programming Dissertation Advisor Richard Riesenfeld Fields of Interest solid modeling manufacturing computer graphics AI computer vision and image processing Job Preferences Employed by Engineering Geometry Systems Completion Date June Armin Liebchen Contact Information liebchen Dissertation Title Solid State Numerical Quantum Chemistry Dissertation Advisor Johnson Fields of Interest VLSI materials science surface physics Job Preferences Academic Completion Date March Kay Litchfield Contact Information klitch Dissertation Title Exploring Spaces Dissertation Advisor Kris Sikorski Fields of Interest Mathematically rigorous computation computational complexity computational number theory Job Preferences Employed by GTE Government Systems Corporation Completion Date June Shen Contact Information hwshen Dissertation Title Exploratory Scientific Visualization Dissertation Advisor Chris Johnson Fields of Interest Scientific visualization computer graphics Job Preferences Hired by NASA Ames Research Center Completion Date December Margaret Sturgill Contact Information sturgill Dissertation Title Conceptual Approach to Early Stages of Part Design Dissertation Advisor Richard Riesenfeld Fields of Interest CAD user interface design operating systems Job Preferences Employed by Company Completion Date Spring Here is our list of PhD graduates gary Last modified September	other	misc
1202	 Date Tue Jan GMT Server Fri Oct GMT TreadMarks People TreadMarks People Christiana Amza Alan Cox Claude Girault Jin Zhenghua Li Honghui Lu Tim Miller Karthick Rajamani Ramakrishnan Rajamony Weimin Yu Willy Zwaenepoel	other	misc
1203	 Date Tue Jan GMT Server BU CAS CS Operating Systems Page BU CAS CS Operating Systems Heddaya Homework Fri As of Run the command csmail on the csa computer This will add you to the class mailing list which and hopefully you too will use to distribute late breaking homework information and tidbits Read and review any paper on Operating Systems from the following list of publications Your review should be one page long with one third of it being devoted to critique of the original paper See the reviewing guidelines ACM Transactions on Computer Systems Proceedings of the ACM Symposium on Operating Systems Principles available as special issues of Operating Systems Review ACM Transactions on Programming Languages and Systems ACM Computing Surveys IEEE Transactions on Software Engineering IEEE Transactions on Computers Proceedings of the IEEE International Conference on Distributed Computing Systems Tan problem Tan problem Tan problem Created Maintained by Abdelsalam Heddaya	other	misc
1204	 Date Tue Jan GMT Server Fri Aug GMT TEI Guidelines for Electronic Text Encoding and Interchange TEI Guidelines for Electronic Text Encoding and Interchange Made available from the Electronic Text Center at the University of Virginia Search the TEI Guidelines Word or phrase omit all quotes Sample Other types of searches You may also combine words or phrases within specified proximity or locate segments such as sections where two words or phrases both occur Browse the TEI Guidelines Bibliographic header of the TEI Guidelines Preface Acknowledgments TEI Working Committees Advisory Board Steering Committee Membership Changes from TEI to TEI Part Introduction Part Core Tags and General Rules Part Base Tag Sets Part Additional Tag Sets Part Auxiliary Document Types Part Technical Topics Part Alphabetical Reference List of Tags and Attributes Part Reference Material Resources of Related Interest The Text Encoding Initiative Home Page Other Electronic Versions of the TEI Guidelines TEI now available on The Electronic Text Center Introduction to TEI and Guide to Document Preparation TEI DTD Browser courtesy of CETH The Electronic Text Center SGML page Return to the Electronic Text Center at the University of Virginia where you will find some TEI texts being converted for Web access	other	misc
1205	 Date Tuesday GMT Server Tuesday GMT Research Interests Theory What are the computational mechanisms that connect signals and symbols How are visual structures interpreted How do we acquire language Do language and vision share mechanisms Applications How can visual reasoning methods be used to help solve real scientific and engineering problems	other	misc
1206	 Date Tue Jan GMT Server Fri Oct GMT Computer Science Graduate Students Computer Science Graduate Students Local phone numbers are listed off campus use Name Phone Ablavsky Vitaly ablavsky Ahmed Sajeed ahmed Anderson Scott anderson Araujo Elizeth araujo Aseltine Johnathan aseltine Atkin Marc atkin Ballesteros Lisa balleste Barrett Daniel barrett Batanov Alexander batanov Baumgartner Achim baumgart Beardsley Jean beardsle Berkman Neil berkman Bhandaru Malini malini Bhargava Alok bhargava Bhattacharyya Supratik bhattach Brown Eric brown Buluswar Shashidhar buluswar Cahoon Brendon cahoon Cavazos John cavazos Chamillard Albert chamilla Cheng cheng Chia Mike chia Clouse Jeffery clouse Coelho Jefferson coelho Crites Robert crites Cvetanovic Zarko cvetanov Daniels Jody daniels Das Madirakshi mdas Datta Suprakash datta Daumueller Katja daumuell Jayanta dey Dhagat Arundhati dhagat Diwan Amer diwan Dolan John dolan Dropsho Steven dropsho Duff Michael duff Dwyer Matthew dwyer Dyer Stephen dyer Eliot Christopher eliot Etessami Kousha etessami Fang Ming fang Firoiu Laura lfiroiu Firoiu Victor vfiroiu Friedman Timur friedman Fujii Hideo fujii Gan Jiuhe gan Gao Lixin gao Garvey Alan garvey Oscar ogonzale Grass Joshua jgrass Gregory Dawn gregory Greiff Warren greiff Sergio guzman Haines David haines Han chan Hansen Eric hansen Haugsjaa Erik ehaugsja Haugsjaa Kjeldy haugsjaa Havlicek James havlicek Huang Jin jhuang Huber Manfred huber Humphrey Marty humphrey Jaynes Christopher jaynes Kalra Archna archna Kalt Thomas kalt Kamath Mohan kamath Kaneko Hiroyuki Kaplan Alan kaplan Kasera Kamal kkasera Kasera Sandhya skasera Kasera Sneha kumar kasera Kim John kim Klassner Frank klassner Kokkoris Stavros kokkoris Kocica Anthony kocica Kundu Joydip kundu Kutlu Gokhan kutlu Kuvayev Leonid kuvayev Leban Bruce leban Leouski Anton leouski Li Chen li Lim William lim Long Qiegang qlong Lu cjlu Lu Zhihong zlu MacDonald Willard macdonal Mahamud Shyjan mahamud Mammen Dorothy mammen Manmatha Raghavan manmatha Marengoni Mauricio marengon Marsh Harry marsh McCall Erik mccall McCarthy Joseph jmccarth McCarthy Lewis lmccarth McNulty John mcnulty medina Molesky Lory lory Moon Sue Bok sbmoon Murfin Asaph murfin Nagendraprasad Maram nagendra Nahum Erich nahum Naumovich Gleb naumovic Nithrakashyap Arvind nithraka Oates James oates Oliver David oliver Padhye Jitendra jitu Papka Ron papka Cris pedregal Peri Jagan jagan Picquendar Marc picquend podorozh Ponte Jay ponte Prabhu Rajesh prabhu Precup Doina dprecup Purimetla Bhaskar bhaskar Pyreddy Pallavi pyreddy Rajeev Byrisetty rajeev Ramanathan Kumaresan ramanath Ramavarjula Bharathi ramavarj Ramjee Ramachandran ramjee Ravela Srinivas ravela Ridgway John ridgway Rubenstein Daniel drubenst Rubinstein Zachary rubinstein Sahu Sambit sahu Salehi James salehi Sandholm Tuomas sandholm Sarangan Selvakumar sarangan Schnackertz Theodore schnack Scudder Michael scudder Sen Subhabrata sen ShanmugasundaramJayavel shan Sharry David sharry Shi Qing qshi Shrikumar Hariharasubrahm shri Singhai Sharad singhai Sitkoff Nathan sitkoff Sivasankaran Rajendran sivasank Skalak David skalak Soderland Stephen soderlan Amant Robert stamant Stefanovic Darko stefanov Stein Cindy stein Stern Mia stern Stolle Frank stolle Swan Russell swan Tarr Peri tarr Teo Marie teo Wagner Thomas wagner Wang Xiaoguang xwang Weaver Glen weaver Whitehair Robert whitehai Wright Eric wright Wu Ziqiang Victor vwu Xavier Shehan xavier Xiong Ming xiong Xu Jinxi xu Xuan Ping pxuan Yanowitz Jason yanowitz Yates David yates Yee Richard yee Zhang Zhili zhzhang Zhang Zhongfei zzhang NEXT Publications Return to Home Page Last update June	other	misc
1207	 Date Wed Jan GMT Server Fri Feb GMT Raj Work Page Hi work on research projects at the Computer Science Dept at Columbia University and engineer storage systems at BoxHill Systems Columbia University My interests are about most aspects of computer systems and in particular Database Systems and RAID Technology Redundant Array of Inexpensive Disks For addresses and phone numbers finger my account Raj Kumar kumar Raj Kumar kumar	other	misc
1208	 Date Tue Jan GMT Server Tue Dec GMT CIS Course materials for CIS Fall Syllabus updated Due dates for Projects and delayed Hypertext Postscript Project Due September Hypertext Postscript input file input file Homework Due September Hypertext Postscript Hypertext solutions Postscript solutions Homework Due October typos corrected Hypertext Postscript Hypertext solutions Postscript solutions Project Due October Hypertext Postscript Input files Project Due November Hypertext Postscript Input file Note The contents of this file were extracted from the Stanford GraphBase copyright Stanford University however the file itself is not part of the Stanford GraphBase Project Due November Hypertext Postscript Input Homework Due November Solutions Homework Due From Ed of text From Ed of text Solutions Project Due December Hypertext Postscript Input Notes Output for input file Rod Howell howell	other	misc
1209	 Date Tue Jan GMT Server Wed Sep GMT Links related to Theory of Computation Some Fun and Useful Links Fall The textbook homepage The Turing machine Dominic animated solution to the Firing Squad Problem Last modified August by hadas	other	misc
1210	 Date Wed Jan GMT Server Fri Mar GMT Internet Search Tools and References convenient way to search computer science bibliography BibTeX Some technical reports at CMU elsewhere Check out Britannica Online Get some technical papers from specific schools good search tool from Indiana For general search use the WebCrawler An excellent search tool is Alta Vista Another powerful search engine at CMU is called Lycos For references dictionaries etc check out this place in Australia Search ftp sites with this good ftpsearch engine commercial but powerful search tool is called Infoseek Last updated on by Fahad Hoymany fahad	other	misc
1211	 Date Tue Jan GMT Server Introduction to Computers Homework Archive Boston University CAS Computer Science Dept CAS Introduction to Computers Homework Archive Assignment Due Date Assignment Due Date Assignment Due Date Assignment Due Date Assignment Due Date for points extra credit Due Date Created on July Updated on July	other	misc
1212	 Date Wed Jan GMT Server Mon Jul GMT Faculty Research Interests Faculty Research Interests The department provides brochure for Macintosh computers that describes our area specializations It requires HyperCard and QuickTime Download the brochure binhex archive and view it on your local Macintosh You may wish to look at individual researchers Laszlo Babai Professor Computer Science Todd Dupont Professor Computer Science and Mathematics James Firby Assistant Professor Computer Science Lance Fortnow Associate Professor Computer Science Ian Foster Associate Professor Computer Science Terry Gaasterland Assistant Professor Computer Science Kristian Hammond Associate Professor Computer Science Stuart Kurtz Associate Professor Computer Science Ketan Mulmuley Associate Professor Computer Science Gopalan Nadathur Associate Professor Computer Science Michael Professor Computer Science Janos Simon Professor Computer Science Robert Soare Professor Computer Science and Mathematics Michael Swain Assistant Professor Computer Science Last modified Thu Mar millard	other	misc
1213	 Date Wed Jan GMT Server Wed Jan GMT CS Lab Schedule Spring TA Libin Dong Time Friday Date Location Topic Jan Cancelled Jan Intro to Borland Jan Building Projects and Debugging Feb To Be Announced Feb Internet Tools Feb Using the WWW Mar Recursive Programming in Mar To Be Announced Mar Using Objects in Mar To Be Announced Apr Intro to Graphics Programming Apr To Be Announced Apr To Be Announced Lab Policies Students are required to preview the direction sheet carefully before the Lab Since the time of each lab is limited this is very IMPORTANT to let you finish the activities sheet in the Lab All lab activity sheets must be turned in at the end of the lab period No delay can be accepted Students who want to switch lab time must inform the TA in advance in case there wo be available position For the of programming assignments students are required to include both EXECUTABLE file and source files in the floppy disk points will be deducted from the score if executable file is not included	other	misc
1214	 Date Tue Jan GMT Server Thu Aug GMT Arizona Computer Science Financial Aid Financial Aid There are limited number of assistantships available through the Department of Computer Science Students with Teaching Assistantships lead course discussion sections or assist faculty in managing courses Students with Research Assistantships work on research projects within the Department International students are eligible to hold assistantship positions All assistantship positions pay variable salary based on degree program and in addition come with an tuition waiver Application forms are included with the admissions packet Completed assistantship applications and letters of recommendation should be returned with other application materials by February for fall applicants and August for spring applicants Occasionally additional assistantships become available later in the year Applications received after the above deadlines are held for consideration should such openings materialize In addition to the assistantship positions there are limited number of Graduate College Tuition Scholarships and Graduate College Registration Scholarships These scholarships waive either the tuition or registration fees depending on which type is awarded International students are also eligible for these awards No formal application is necessary All incoming students are automatically considered for these scholarships This department receives great number of applications each semester making all financial aid awards highly competitive We can not assess an chances of receiving admission financial aid until we receive completed application and all required supporting documents In addition it is not possible to predict the number of available assistantships in future semester The amount of financial assistance available to new students varies each semester and is determined by various factors including the number of current students completing their degrees The criteria for an assistantship are comparable to that of admission to our PhD program high scores on standardized tests adequate background in computer science strong letters of recommendation good grades from strong undergraduate program and research interests shared with the faculty Top of Page Department Home Page http Last updated March Wendy Swartz wjs	other	misc
1215	 Date Tue Jan GMT Server Wed Oct GMT Database Fundamentals Database Fundamentals Homework Due Wednesday November Consider an Extendible Hashing scheme where keys range from to and the hash function simply converts the key into its binary equivalent Assume that the buckets can hold up to four records Suppose that the directory and buckets contain the following initially Show what the directory and buckets look like after key is inserted Show what the directory and buckets look like after key is inserted Consider the following of order Show the that results from inserting the record with key into this Show the that results from inserting the record with key into the that results after part above Show the that results from deleting the record with key from the following of order Use Oracle and to develop program with embedded SQL in it to print nicely formatted report for the Presidents Database that you created in homework The report should list for each year of data in the database the year the name of the winner the winner party the winner number of votes the name of the loser the loser party and the loser number of votes Turn in listing of your program code with the embedded SQL in it and the formatted report that your program produces For details on how to do this see the Oracle web pages that you can link to from the course home page Note Do not hardcode the years for the report into your program Your program should consult the database determine for what years the database has data and then print the report for those years You can assume that if any data is present for given year then all data for that year is in the database When you are done with this assignment you can delete the Presidents Database you will not need it again Database Fundamentals Fall David Spooner spoonerd	other	misc
1216	 Date Tue Jan GMT Server Wed Oct GMT	other	misc
1217	 Date Tue Jan GMT Server Tue Nov GMT Computer Architecture Fall Computer Architecture Fall Grishman Course Schedule Last revised October Class Date Topic Text Assignment Historical Perspective Chap Logic Design Appendix Gates TTs logic eqns Canonical forms out uh Comb logic FFs comb ckt Sequential circuits Finite state machines FSM Register files and RAMs MIPS and Arithmetic Chap and MIPS Architecture ALU CLA CLA shifters uh MIPS ALU Multiplier Processor Data Path Chap Building data path Review for simple implementation Processor cont data paths Performance Issues measuring performance Chap improving perf pipelining Chap Memory Chap memory technology cache perf cache cont virtual memory Chap types of devices busses busses and interrupts memory interfacing devices spare Review for final exam	other	misc
1218	 Date Wednesday GMT Server Thursday GMT URCS Faculty Members URCS Faculty Members This is list of current Faculty Members at the University of Department of Computer Science James Allen james Dana Ballard dana Chris Brown brown Sandhya Dwarkadas sandhya Lane Hemaspaandra lane Henry Kyburg kyburg Tom LeBlanc leblanc Wei Li wei Nathaniel Martin martin Randal Nelson nelson Mitsunori Ogihara ogihara Ravi Prakash prakash Lenhart Schubert schubert Michael Scott scott Joel Seiferas joel Last change Oct by ferguson URCS People URCS Home Page	other	misc
1219	 Date Tuesday GMT Server Monday GMT Slivers Computational Modularity via Synchronized Lazy Aggregates Franklyn Turbak MIT Doctoral Dissertation Februrary Abstract Slivers are new approach to expressing computations as combinations of operators on aggregate data Unlike other aggregate data models slivers enable programmers to control operational aspects of modular programs In particular slivers can guarantee that networks of operators exhibit the desirable storage behavior and operation scheduling of intricate loops and recursions For example slivers can preserve the space efficiency of complex tree algorithm when it is expressed as the superposition of simpler tree walks The sliver technique is based on dynamic model of lock step processing that enables combinations of list and tree operators to simulate the operational behavior of single recursive procedure Operational control is achieved through synchronized lazy aggregates dynamically unfolding data structures that constrain how the processing of separate operators is interwoven The key to the technique is the synchron novel object that allows dynamically determined number of concurrently executing operators to participate in barrier synchronization Slivers embody notion of computational shape that specifies how the operational patterns of process can be composed out of the patterns of its components The utility of slivers is illustrated in the context of SYNAPSE simple language for expressing linear and computations SYNAPSE is built on top of OPERA new concurrent dialect of Scheme that incorporates the concurrency synchronization and required by the lock step processing model The semantics of OPERA are explained in terms of EDGAR novel graph reduction model based on explicit demand propagation Contents Below are links to individual chapters of the disseration For more concise overview of key aspects of the thesis research please see the papers on synchronized lazy aggregates and synchrons Table of Contents Acknowledgments Chapter Overview An overview of the dissertation Chapter Slivers motivation for sliver decomposition in the context of two monolithic programs an employee database program and an alpha renaming program Chapter The Signal Processing Style of Programming detailed analysis of why existing SPS techniques fail to express desirable operational characteristics of programs Chapter Computational Shape presentation of simple notion of computational shape Shapes are described in terms of the ordering induced on the call and return events in the execution of recursive procedure Chapter Synchronized Lazy Aggregates An explanation of the lock step processing model underlying the sliver technique Synchronized lazy aggregates are introduced as mechanism for guaranteeing that networks of slivers simulate the behavior of corresponding monolithic procedure Chapter SYNAPSE Programming with Slivers and Slags An illustration of the power of slivers and slags in the context of SYNAPSE simple language for manipulating synchronized lists and trees Chapter OPERA Controlling Operational Behavior presentation of OPERA the concurrent dialect of Scheme in which SYNAPSE is embedded An informal description of OPERA concurrency synchronization and features is followed by an explanation of how SYNAPSE is implemented in OPERA Chapter EDGAR Explicit Demand Graph Reduction An overview of EDGAR an explicit demand graph reduction model that provides an operational semantics for OPERA OPERA concurrency synchronization and mechanisms are formally described here Chapter Experience discussion of the experimental aspects of the research including the implementation and testing of EDGAR OPERA and SYNAPSE This chapter also describes the DYNAMATOR graphical program animator that proved invaluable in the development of the other systems Chapter Conclusion summary of the research including contributions and future work Bibliography Appendix Glossary The dissertation introduces large number of new terms and uses some existing terms in way The glossary is provided to help the reader adjust to the terminology Select here for PostScript viewer on the entire dissertation document Warning it is pages long with lots of figures Feedback Send all questions and comments about this work to lyn	other	misc
1220	 Tuesday GMT Elementary Computer Programming Fall Grading Policy Procedures Assignments Exercises will be assigned weekly in Recitation and collected at the start of the next Recitation Solutions for exercises will be posted immediately after Recitation Late submissions will be accepted with prior approval Quizzes Quizzes will be given in lecture irregularly and without notice Project One major individual programming effort is assigned during the semester Students are encouraged to propose individual programming projects All projects must be submitted and demonstrated on or before the last day of classes Examinations Three examinations are scheduled during the semester Neither the textbook nor any other materials may be used during exams Final Examination The Final Exam is comprehensive score of fifty percent or higher on the Final Exam is required to pass the course Neither the textbook nor any other materials may be used during the Final Exam Final Grade The grade scale is percent for Each student who scores eighty percent or above including all three exams may elect to receive the final letter grade or corresponding to their percentage score without taking the final examination Academic Honesty Students should respect the principles of academic honesty at all times Each and every assignment the individual project all quizzes and all exams should be the product of each student individual efforts Exceptions The instructor can accept late assignments for good reason with prior approval The instructor can waive assignments and quizzes under extreme circumstances The instructor is responsible for these specifications and their modification tekin Last Updated August	other	misc
1221	 Date Tue Jan GMT Server Sat Apr GMT Spring Picnic pring icnic When Sunday April at pm Venue Parker Creek Jordan Lake Check for directions Agenda We hope to have as much fun as we had in our last picnic We hope to have Ultimate Frisbee game Send us suggestions on more things to do Food The department will provide some minimal food in the form of You are welcome to bring along your Everyone is expected to potluck Please signup here on what you expect to bring for the party RSVP list Check on who has already signed up and what they are bringing Your Name Can you volunteer to help us with preparations Would be glad to Ca volunteer this time Number of guests that you are inviting excluding yourself Name of dish that you will be bringing What sort of dish is that Appetizer Main Course Dessert Other Please add any comments here eg Vegetarian Spicy Can you give ride Sure can contact me for more information Need ride will contact someone who can provide rides The official department for this event is Diane Riggs driggs	other	misc
1222	 Date Tue Jan GMT Server Fri Oct GMT Principles of Parallel Computing CSE Principles of Parallel Computing The Suggestions of Research Papers to be Presented will not just hand in the papers for you to read but will give you some pointers for you to look for more papers in the following areas There are several journals and conferences are important to go through such as IEEE Transactions on Parallel and Distributed Systems Proceedings of ICPP IPPS SPDP etc Please come to see me and may give you some starting papers Cache Issues Cache Design Cache Coherence Branch Prediction Issues Data Dependency Analysis Distribution and Partitions Loop Transformation Techniques Data Locality for Distributed Shared Memory Systems Task Partitions and Scheduling Multicast Routing Techniques Interconnection Networks Issues Issues on Systems Fault Tolerance Memory or DISK IO Organizations Parallel Programming Languages Survey The Suggestions of Term Projects Term projects can be done by either group of two or individual One possible project is to come out some ideas and do simulation to verify your idea For example you can simulate some routing teachniques scheduling techniques interconnection networks data distributions branch prediction cache coherence etc do want you to waste your time so please do something interest you Revised by Edwin Sha	other	misc
1223	 Date Tue Jan GMT Server Connection close Fri Apr GMT ETag bytes The Rockettes Microrovers for Mars The Rockettes Microrovers for Mars No no they not golf balls They are an artist conception of what Mars landing made by community of microrovers would look like The idea is that whole bunch of very small rovers could spread out and collect data collectively If each robot had few sensors and were programmed to disperse around the landing area it might be possible to gather more data than their size would suggest Having more than rover also allows for greater mission flexibility and reliability If there are two very interesting rocks in different directions from each other single rover would have difficult time getting to both of them at the same time Also if few of the microrovers malfunction there will still be enough left to complete the task at hand People Professor Rodney Brooks brooks Principal Investigator James McLurkin jdmac Microrobots Sponsors This work is sponsored by NASA JPL Related Research at the MIT AI Lab Pebbles mobile robot that uses single camera for obstacle avoidance in rough unstructured environments Some of the potential applications for this research include Mars exploration and explosive ordnance disposal The Ants Microrobots designed to explore ideas about robotic communities One of the potential applications for this research is explosive ordnance disposal Related Research Elsewhere IS Robotics Inc	other	misc
1224	 Date Tue Jan GMT Server Mon Sep GMT SRG Personnel CS UIUC SRG Current Personnel Roy Campbell David Raila Tan Willy Liao Amitabh Dave Aamod Sane Mohlalefi Sefika Tin Qian Ashish Singhai Zhaoyu Liu Zhigang Chen Yongcheng Li John Coomes Ng Srinivas Narayan Timothy Jon Fraser Ravi Talluri Oolan Zimmer Fabio Kon SRG Alumni	other	misc
1225	 Date Wednesday GMT Server Wednesday GMT My Personal Background My Personal Background Still trial version here so bear with grew up in Westlake Ohio suburb of Cleveland Ohio much maligned city It was suburb much like any other suburb so will leave it at that Though my life is not profoundly interesting number of times in my life can be classified as defining moments of me and my personality Those who know me may ask Was Steve always Computer Geek The answer can only be yes So suppose my first defining moment must go to early grade school when my aunt bought me my first computer The rest of my computing nature is Also can not neglect to mention my years in Geek Training that have been influential Gifted Talented My grade school years through junior high are much blur The end of junior high and my years through high school also mark defining moment for me when met my first love Those who know the story also know why it was quite influential in my attitudes and beliefs do miss her influence in my life quite bit and am still learning how to get around the world without her The transition time between and college was also very turbulent time and am glad to have met completely different group of friends at this time especially one Vicki Fairchild She was very special to me and at times felt as if our souls were intertwined somehow Unfortunately repeating pattern in my life is that such strong close friendships seem to dissolve rather quickly rather unexplainably and with much pain Will Remember You Vicki hope you have dealt with our distance better than The latest of my defining moments have occurred at Hiram College know different person would have been without the influence of Henry Hall or should that be Herny my dorm know it sounds odd that building would have much influence but it and the people it attracted definitely did It was quiet dry dorm which conjures up images of uptight people living in morgue However it was nothing at all like that Because of the residents aversion to heavy drinking and the rural nature of Hiram amusements and diversions other than the ordinary had to be created Some of the stranger moments were Toilet Paper Fights Pit Soccer and The huge often approaching violent tickle fights and the wild Power Outages deserve mention also However the most important part of Henry Hall the most special was the almost living Henry Lounge There is quiet kind of magic about the Lounge This was gathering place for large group of the residents of Henry simple apparently mundane TV lounge However it went way beyond place to watch TV True the only time the TV was off was in the aforementioned power outages but generally people were there to watch TV It became community microcosm of society perhaps but society that generally worked well You see you could always count on someone being in the lounge Someone you could talk to vent to or merely be with whether you knew them or not Conversation always ranged between deep serious discussions and frivolous oddball talks Many philosophical and intellectual discussion has occurred there including the nature of people to ghosts to logic emotion to the brain argument Not always was the conversation pleasant often it was also discussing betrayal of friendship and resistance of change as well as griping against the administration or classes Other negative aspects such as the Viper Crew that we all are part of in some way or another also manifested Emotions were often high in both ways healthy and unhealthy Generally however the Lounge shaped and adapted most people Because of its strange and eclectic nature it is the first place in many people lives where they can truly be themselves without fear that is an unusually unique thing and perhaps the most important Often people did not know who they really are until the Lounge they have the freedom to explore themselves their personality and their beliefs in the shadow of Lucifer the candy machine Every year the lounge was different but still held the magic Change is inevitable but hope that Henry lounge will never lose its persistence and its life There have been many people from Henry that have meant very much to me you know who you are hope to remain in contact with all of you Dan Toth deserves special note because he was not from Henry sometime wonder if he and are actually one person in some alternate universe somewhere Finally come to my girlfriend Betsy hope to add here in the future picture of her and perhaps have her add some information about herself We have been dating since the Winter of things are going well between us even through the painful distance between Hiram and Rochester Hopefully we will be together again soon Many important people and events have left out for did not feel like writing an autobiography at this time do however feel like mentioning my early friend Tony Skelley and people have known and stayed in contact with since grade school Sean Lehlbach and Charlotte Lee By the way hope you Henry people like this background and feel this is more interesting than before know hear about it if otherwise Some more information about me to be included at future date such as musical interests favorites and other such things be patient Return to Table of Contents Last Updated September by Steve Haley	other	misc
1226	 Date Tuesday GMT Server Without title Title CS Fall WinWin Negotiation Grading Criteria The maximum number of points were At most bonus points were possible Criterion Points Thorough application of WinWin artifacts good bodies attributes Thorough Effective negotiation process Good ID of Issues Options Good comments Effective agreement process Negotiation schedule Consistent or COCOMO result Thorough application of terminology Terms Detailed and complete Taxonomy Participation of stakeholders Completeness of Negotiation Compared to taxonomy Unresolved Issues uncovered Win Conditions others Summary Good suggestions on WinWin improvement and bug report Especially creative solution	other	misc
1227	 Date Tue Jan GMT Server Tue Oct GMT CPS Executive Summary CCC Computing Concepts and Competencies Executive Summary The explosive growth of well designed software mandates fundamental rethinking of the role of computing instruction in the curriculum and of the role of the Computer Science Department in delivering that instruction We propose new model based on joint determination of computing needs between CPS and served departments embedding examples into new service course See Teaching of Science Mathematics Engineering and Technology in Context An Institutional Venue for Reform submitted over President McPherson signature to the NSF Division of Undergraduate Education We will work both with faculty in CPS and in the served departments to create CCC Computing Concepts and Competencies service course in which the lecture component gives all students broad conceptual overview of both the concepts of computing and of the competencies needed to solve problems integral to their major fields of study The seamlessly integrated laboratory experience will consist of computing Focal Problems which epitomize core computing concepts and in turn exemplify the relevance of core computing competencies to the solution of those problems Focal Problems Computing Concepts Computing Competencies Working in partnership with faculty in the served departments we will create appropriate clusters of sections whose competencies content is tightly coupled to the needs of students in those clusters Those faculty will give much of the key competencies for students in their clusters while the CPS Department will provide the concepts instruction and the infrastructure to support the entire effort This course will replace both Using Computers and Integrated Introduction to Computing beginning in Fall and will thereafter be continuously revised to reflect changing instructional needs and computing technologies We expect total annual enrollment of about students on campus plus an undetermined number of distance education students CPS	other	misc
1228	 Date Tue Jan GMT Server Wed Feb GMT CS and Job Information Department of Computer Science CS and Job Information RIT Central Placement Student Services ACM Career Information DCS Home Page	other	misc
1229	 Date Tuesday GMT Server Brent Seales Address Page Addresses Mailing Address Computer Science Department Anderson Hall Lexington Kentucky Office Location Electrical Engineering Building The Engineering Annex Home Address Brigadoon Parkway Lexington Kentucky Phone Numbers Office Lab Fax Email and Links seales Brent Seales Hompage University of Kentucky Computer Science Department Homepage UK Distributed Computing Systems Laboratory Homepage University of Kentucky Homepage	other	misc
1230	 Date Wednesday GMT Server Monday GMT No Title Next About this document Go back to Lane home page Most of the recent papers from this list can be found in their technical report versions in the UR CS technical report archive which can be reached via my home page JOURNAL AND BOOK PUBLICATIONS Last Updated Lane Hemaspaandra born Lane Hemachandra BOOKS IN PREPARATION OR TO APPEAR The Complexity Theory Companion Hemaspaandra and Ogihara in preparation Computation Hemaspaandra and Torenvliet in preparation Complexity Theory Retrospective II Hemaspaandra and Selman editors to appear BOOK CHAPTERS Reductions and Local Search Fischer Hemaspaandra and Torenvliet in Complexity Logic and Recursion Theory ed Sorbi Marcel Dekker to appear Complexity Classes Hemaspaandra section in Handbook of Discrete and Combinatorial Mathematics ed Rosen CRC Press to appear Promises and Database Access Cai Hemachandra and Vyskoc in Complexity Theory Current Research eds Homer and Cambridge University Press pp Reductions to Sets of Low Information Content Arvind Han Hemachandra Lozano Mundhenk Ogiwara Silvestri and Thierauf in Complexity Theory Current Research eds Homer and Cambridge University Press pp Is Closed Under Subtraction Hemachandra and Ogiwara in Current Trends in Theoretical Computer Science Essays and Tutorials eds Rozenberg and Salomaa World Scientific Press pp REFEREED JOURNAL PUBLICATIONS Easy Sets and Hard Certificate Schemes Hemaspaandra Rothe and Wechsung Acta Informatica accepted subject to minor revision Logspace Reducibility Models and Equivalences Hemaspaandra and Jiang International Journal of Foundations of Computer Science accepted subject to minor revision Query Order Hemaspaandra Hempel and Wechsung to appear in SIAM Journal on Computing Threshold Computation and Cryptographic Security Han Hemaspaandra and Thierauf to appear in SIAM Journal on Computing Unambiguous Computation Boolean Hierarchies and Sparse Sets Hemaspaandra and Rothe to appear in SIAM Journal on Computing Pseudorandom Generators and the Frequency of Simplicity Han and Hemaspaandra Journal of Cryptology pp Autumn Strong Precludes Strong Immunity Hemaspaandra and Zimand Mathematical Systems Theory pp Computing Solutions Uniquely Collapses the Polynomial Hierarchy Hemaspaandra Naik Ogihara and Selman SIAM Journal on Computing pp August Reducibility Classes of Sets Hemaspaandra Hoene and Ogihara Theoretical Computer Science pp March Optimal Advice Hemaspaandra and Torenvliet Theoretical Computer Science pp February Nondeterministically Selective Sets Hemaspaandra Hoene Naik Ogihara Selman Thierauf and Wang International Journal of Foundations of Computer Science pp December Defying Upward and Downward Separation Hemaspaandra and Jha Information and Computation pp August Easily Checked Generalized Hemaspaandra and Silvestri SIAM Journal on Computing pp August Intersections and Indices Hemaspaandra and Jiang Theoretical Computer Science pp Recognition of Sparse Languages Hemaspaandra Ogihara and Toda Computational Complexity pp On the Complexity of Graph Reconstruction Kratsch and Hemaspaandra Mathematical Systems Theory pp Reductions Hemaspaandra and Hemaspaandra Theoretical Computer Science pp January Banishing Robust Turing Completeness Hemaspaandra Jain and Vereshchagin International Journal of Foundations of Computer Science pp On Checking Versus Evaluation of Multiple Queries Gasarch Hemachandra and Hoene Information and Computation pp July Complexity Theory for Feasible Closure Properties Ogiwara and Hemachandra Journal of Computer and System Sciences pp June Collapsing Degrees Via Strong Computation Hemachandra and Hoene Journal of Computer and System Sciences pp June Using Inductive Counting to Simulate Nondeterministic Computation Buntrock Hemachandra and Siefkes Information and Computation pp Compression Goldsmith Hemachandra and Kunen Computational Complexity pp Relating Equivalence and Reducibility to Sparse Sets Allender Hemachandra Ogiwara and Watanabe SIAM Journal on Computing pp June Lower Bounds for the Low Hierarchy Allender and Hemachandra Journal of the ACM pp January Separating Complexity Classes with Tally Oracles Hemachandra and Rubinstein Theoretical Computer Science pp January Simultaneous Strong Separations of Probabilistic and Unambiguous Complexity Classes Eppstein Hemachandra Tisdall and Yener Mathematical Systems Theory pp On Sets With Efficient Implicit Membership Tests Hemachandra and Hoene SIAM Journal on Computing pp December On the Limitations of Locally Robust Positive Reductions Hemachandra and Jain International Journal of Foundations of Computer Science pp September Sets Goldsmith Hemachandra Joseph and Young SIAM Journal on Computing pp June Kolmogorov Characterizations of Complexity Classes Hemachandra and Wechsung Theoretical Computer Science pp June Note on Enumerative Counting Cai and Hemachandra Information Processing Letters pp May Functions and the of Sets Hartmanis and Hemachandra Theoretical Computer Science pp April On Sets Polynomially Enumerable By Iteration Hemachandra Hoene Siefkes and Young Theoretical Computer Science pp March Probabilistic Polynomial Time is Closed Under Parity Reductions Beigel Hemachandra and Wechsung Information Processing Letters pp January On the Complexity of Ranking Hemachandra and Rudich Journal of Computer and System Sciences pp October Robust Machines Accept Easy Sets Hartmanis and Hemachandra Theoretical Computer Science pp August On the Power of Parity Polynomial Time Cai and Hemachandra Mathematical Systems Theory pp The Strong Exponential Hierarchy Collapses Hemachandra Journal of Computer and System Sciences pp December Enumerative Counting is Hard Cai and Hemachandra Information and Computation pp July The Boolean Hierarchy II Applications Cai Gundermann Hartmanis Hemachandra Sewelson Wagner and Wechsung SIAM Journal on Computing pp February The Boolean Hierarchy Structural Properties Cai Gundermann Hartmanis Hemachandra Sewelson Wagner and Wechsung SIAM Journal on Computing pp December On Sparse Oracles Separating Feasible Complexity Classes Hartmanis and Hemachandra Information Processing Letters pp August Complexity Classes Without Machines On Complete Languages for UP Hartmanis and Hemachandra Theoretical Computer Science pp Using Simulated Annealing to Design Good Codes El Gamel Hemachandra Shperling and Wei IEEE Transactions on Information Theory pp January About this document Next About this document Lane Hemaspaandra Sun Nov EST	other	misc
1231	 Date Tue Jan GMT Server Wed Oct GMT CPS Assignment FALL CPS FALL Assignment Due Monday by Last Date to Turn in Monday by points In your directory create directory called using the mkdir command Change into the directory In order to do this assignment you need to copy some files using the following cp command do forget the trailing period or dot cp This command will copy files into your directory for you to use If you type ls you should see the following files Makefile and For this assignment you be using database of English words from the Stanford GraphBase list compiled by Don Knuth This list has about words in it There is smaller file of data to work with also called In your ladder directory create link to these data files by typing ln ln Then you can access these files without specifying long for the files For the programming problem that follows you should use the style rules discussed in class which includes meaningful variable names indentation and comments pre and postconditions at the top of the file and for each function Also include your name date course and purpose in comment at the top of the program Problem Word Ladder Turning Stone into Money The input to the program is the name of word file The user should then be prompted for two words of the same length characters The output is sequence of words in which consecutive words share all but one letter starting with the first word and ending with the last One letter can be changed to another letter only if the resulting symbols form valid word For example to turn stone into money one possible ladder is replace by replace by etc stone shone shine chine chins coins corns cores cones coney money All of these words can be found in the Knuth file and in dictionary The user will continue to enter words and word ladders searched for until either of the words entered is NOT letters in length Assignment Part You are to write program that uses file of words to find the shortest ladder from one word to another using process outlined below You must develop class to do this the class Ladder has been started for you but you will need to add more member functions both public and private Your program should Read and store the words from file specified by the user Prompt the user to enter two words and continue to prompt for each pair of words output shortest ladder from the first word to the second If one of the words is not of length your program should halt sample run ladderq Enter filename Enter two words length to end smart brain Here is the ladder smart start stark stack slack black blank bland brand braid brain Enter two words length to end angel devil There is no path from angel to devil Enter two words length to end no more The file has extraneous information in it Ignore lines that begin with and only process the first characters on other lines Knuth asks that the file not be altered hence these restrictions Code to read this file is included as the member function LoadWords already written for you to use Algorithm To find the shortest ladder you should use the templated Queue class provided QueueAr the modified Queue class from the Weiss book First store all of the words from the file in vector of type Wnode this is done for you in LoadWords struct Wnode string word Wnode prev this assumes the use of the class string from You can use some other kind of string if you want ladder is found by putting the starting word or rather pointer to it on the queue then putting all words letter away from this word on the queue then putting all words letters away on the queue then all words letters away etc As each word is taken off the queue if the last target word is found the process can stop there may be other words on the queue but they be ignored Word is actually stored on the queue pointer to struct containing is stored The other field of the struct is pointer to the word that is one letter away from and that caused to be put on the queue the word predecessor For example if is house then pointers to structs containing mouse louse douse horse and so on are enqueued with each struct pointing to house since this word preceeded the others and caused them to be enqueued The first word does have predecessor It field can not be since this is used for another purpose An easy fix is to make the pointer it points to the struct itself and this will need to be checked when printing ladders More Details The first word entered by the user is looked up in the list of words and pointer to the struct containing the word is enqueued For extra credit your program should be able to handle first word even if the word is NOT in the list of words all other words in the ladder except perhaps for the last must be in the list of words Put pointer to the struct containing the word onto the queue it queue of Wnode pointers Then repeat the process below Dequeue an element it pointer Find all words one letter apart from the dequeued word If one of these is the target word you done or if one of the words is one apart from the target word you done you can stop early Otherwise enqueue each of the words found if it has been queued up before you can use the prev pointer fields in Wnode to determine if word has been enqueued before initially all prev fields should be set to this helps determine if word has been enqueued before This means each word is enqueued at most once When the target word is derived you need to print out the ladder from the first word to the target word The prev pointer in the Wnode stores information that will allow the ladder to be recreated you may need to use recursion or vector since the ladder will be backwards but should be printed properly Alternatively you can store the words in an and print them out in reverse without using recursion but using loop over the vector Ladder Member Functions You must implement the functions described below You find it useful to implement other member functions Sometimes the functions should be private This is the case when member function is helper function for other member functions but should be called by the user Making helper function private ensures that only other member functions can access the helper function but client programs can not Clear sets all prev fields to FindLadder tries to find ladder between two words that are parameters to the function FindLadder returns boolean value true if ladder is found and false otherwise Pass the strings to this function as const reference parameters PrintLadder prints the word ladder Private data may be needed to store the last node of the ladder the prev field of the last node can be used to access all other ladder nodes the first node in the ladder has pointer You probably find it useful to write function IsOneApart that is used to determine if two strings are one letter apart To do this count the letters that are equal If this is one less than the total number of letters in the words the words are one apart This function does NOT need to be member function it has two strings as parameters const reference and returns true if the strings are one letter apart You can just define this function in and use it there You probably want debugging functions to verify going on If you build member functions into your class you save time in the long run since the member functions can be used to help debug code You may want to write separate function to find word in the vector of words pointers to words read in You can write this code inline rather than making function out of it but the function can be useful in debugging and developing It is advisable that you test out each function you write to make sure it works correctly In order to do so it would be very helpful to create small data file with about words containing small ladder of size in it for testing Using Templates To use the templated Queue class you need to do use file called Template code needs to be seen by the compiler To this end all and files are included in separate file This file is illustrated below include include include template class Queue If you want several kinds of queues just put another definition in the file Once the file is compiled to you only need to relink not recompile every time you make change in This will make your recompiles much faster Extra Credit pts Write new version of called This program should process the words so that only good matches are tried when ladders are found The preprocessing step will take long time but word ladders will be found very quickly The idea is that for each word all words away are determined and stored somehow when the words are loaded When looking for candidate words to enqueue only words that are away these are already known are checked for previous use This saves searching through the entire list of words and checking whether each is one letter away Submitting Program When your programs compile and produce the correct output create README file please use all capital letters Include your name the date and an estimate of how long you worked on the assignment in the README file You must also include list of names of all those people students prof tas tutor with whom you consulted on the assignment See the rules for collaboration in the CPS syllabus To submit your programs electronically type leave off if you did do the extra credit README You should receive message telling you that the program was submitted correctly If it does work try typing in place of above You can submit by typing make submit or make submitX if you did the extra credit program if the correct README file is in the directory from which you submit You can always edit the Makefile command submit or submitX to add or change filenames	other	misc
1232	 Date Wed Jan GMT Server Wed Apr GMT PhOOTOO Pages Is it my Scrapbook Last Updated on April Back to my Home Page Everything is in black and white so you should have to sit there for hours waiting for stupid picture to display Pictures of my closest friends amp me Brandy my pooch	other	misc
1233	 Date Wed Jan GMT Server Tue Jan GMT Niranjan Theory Theoretical interests Niranjan Nilakantan Last modified Sun Nov EST	other	misc
1234	 Date Tue Jan GMT Server Mon Nov GMT CS Computer Organization II Readings CS Computer Organization II Readings August Tanenbaum Chapter August Tanenbaum Appendix August Continue Tanenbaum Appendix September Paul Chapter September Paul Appendix September Paul Chapter September Paul Chapter September Paul Chapter September Tanenbaum Chapter September Tanenbaum Chapter October Tanenbaum Chapter October Tanenbaum October Tanenbaum October Tanenbaum and October Tanenbaum and October Paul Chapter October Paul Chapter and Tanenbaum Chapter October Tanenbaum October Tanenbaum November Tanenbaum Appendix November Paul Look at Chapter	other	misc
1235	 Date Tue Jan GMT Server Thu Nov GMT The System Home Page Welcome to the World Wide Web home page for the System major component of the Fortran Tools effort at Rice University Project Summary Technical Papers Software Documentation Reported Bugs The Team Related Work Career Opportunities ARPA Blue Book Pages What New Fortran Compiler Overview Please direct additional questions about the System to Fortran Tools Home Page Fortran Tools Glossary Updated November by John johnmc http	other	misc
1236	 Date Tuesday GMT Server Thursday GMT RuCCS Colloquium Series Human Computer Vision Series The Rutgers Series on Human Computer Vision The series on Human and Computer Vision features weekly talks by researchers spanning both human and computer vision The majority of the speakers are from universities and research institutions from New York to Philadelphia with additional special guests from the US and abroad This series attempts to bring together in one forum vision researchers studying psychophysics cognition computer vision and machine vision The Rutgers Series on Human and Computer Vision is sponsored by Center for Cognitive Science Laboratory of Vision Research Department of Psychology Department of Biomedical Engineering Department of Computer Science Talks are Mondays at in the Psychology Building Room on Busch Campus brief reception will be held after the talk in Room Rutgers Center for Cognitive Science Psychology Building Addition Busch Campus Note Talks are also announced by email with reminders sent the day of the talk to people who have requested to be placed on our annouce list If you would like to be added to our announce list or would like additional information regarding this talk series please contact Sven Dickinson at sven or or Shan Yu INRIA France David Jacobs NEC Research Institute Gerald Westheimer Division of Neurobiology Univ of California Berkeley Rakesh Teddy Kumar David Sarnoff Research Center Gregory Hager Yale University Martin Gizzi Seton Hall University School of Graduate Medical Education Visvanathan Ramesh Imaging Visualization Department Siemens Corporate Research Rob de Ruyter van Steveninck NEC Research Institute Robert McPeek Harvard University James MacLean University of Toronto RuCCS Colloquia What is Cognitive Science Mail comments about this site to admin	other	misc
1237	 Date Tue Jan GMT Server Fri Feb GMT Publications Goldberg Ken Goldberg Recent Publications all publications are available in compressed postscript Desktop Teleoperation via the World Wide Web with Mascha Gentner Rothenberg Sutter and Wiegley To appear in the IEEE International Conference on Robotics and Automation May Nagoya Japan Completeness in Robot Motion Planning The First Workshop on the Algorithmic Foundations of Robotics Peters February Manipulating Algebraic Parts in the Plane with Anil Rao IEEE Transactions on Robotics and Automation To appear Shape from Diameter Recognizing Polygonal Parts with Gripper with Rao International Journal of Robotics Research February On the Existence of Modular Fixtures with Zhuang and YC Wong IEEE Conference on Robotics and Automation Pivoting Gripper for Feeding Industrial Parts with Carlisle and Anil Rao and Jeff Wiegley IEEE Conference on Robotics and Automation RISC for Industrial Robots Recent Results and Open Problems with Canny IEEE Conference on Robotics and Automation May San Diego CA Orienting Polygonal Parts Without Sensors Algorithmica Special Issue on Computational Robotics Volume August Computing Statistical Distribution of Stable Poses for Polyhedron with Wiegley and Rao Annual Allerton Conference on Communications Control and Computing University of Illinois September	other	misc
1238	 Date Tue Jan GMT Server Mon Jan GMT Duke University Computer Science People The People of the Duke UniversityDepartment of Computer Science Faculty Administrative Staff Research Associates Systems Staff Graduate Students Graduate Alumni Undergraduate Students Guests Enter keywords to look up in the Duke phone book Duke University Department of Computer Science Report suggestions and problems to webmaster Document last changed	other	misc
1239	 Date Tue Jan GMT Server Instructions to Request Grade Report Boston University CLA Computer Science Dept CLA Introduction to Computers Instructions to Request Grade Report You could request report of your grade in by sending an empty Email message to Azer Bestavros with the Subject line containing the sentence getgrade as shown below To Azer Bestavros best Cc Attchmnt Subject getgrade Message Text Upon sending an Email message as specified above you will receive within minutes grade report with your grade in all homeworks graded so far as well as the minimum maximum and average grade for the class This document has been prepared by Professor Azer Bestavros best Created on October Updated on October	other	misc
1240	 Date Wednesday GMT Server Chen Resume Chen BOX Birmingham AL chen Education Computer and Information Science expected University of Alabama Birmingham Physics June University of Alabama at Birmingham Physics June Tamkang University Taiwan Experience PC Lab Assistant Computer Science Department UAB Related Experience Coursework Computer Network theory technology and XNS protocols Project Communication Cost in Parallelism for Parallel Processing course Noise Filtering for Numerical Computing course Automation plan of airplane maintenance for software Engineeting course Compiler for Programming Language course Techniques Computer Skill Languages FORTRAN PASCAL LISP PROLOG SQL OS DOS UNIX Software ACCESS VISUAL BASIC Spectroscopic Method Laser Operation Argon and UV Laser Honor captain of dormitory volleyball team UAB captain of soccer team Tamkang University Taiwan Employment History PC Lab Assistant Computer Science Department UAB Teaching Assistantship Physics Department UAB Research Assistantship Physics Department UAB Physics and Chemistry teacher High School Taiwan Sergeant of vehicle maintenance Taiwan Armed Forces Taiwan Last update Back to Home	other	misc
1241	 Date Tue Jan GMT Server Tue Dec GMT CIS Course materials for CIS Syllabus Hypertext Postscript Homework Postscript Solution Ascii Programming Assignment Hypertext Postscript Input File Input File Programming Assignment Hypertext Postscript Input File Input File Input File Programming Assignment Postscript Input File Programming Assignment Postscript Programming Assignment Postscript Midterm Exam from Spring Postscript Ascii Final Exam from Spring Postscript Gurdip Singh singh	other	misc
1242	 Date Tue Jan GMT Server Tue Nov GMT CS Microcomputer Applications Other Links The Ode Project Internet Jokes FIFA Soccer	other	misc
1243	 Date Wednesday GMT Server Monday GMT CATV Based Metropolitan Area Network Using Distributed Switching Arthur Karshmer and Renwei Yan Computer Science Department Computing Research Laboratory New Mexico State University Las Cruces NM USA ABSTRACT number of protocols have been proposed to allow the use of standard cable television plants to support metropolitan area networking In the present work we describe new approach to solving the problem that has some interesting properties in its ability to support large numbers of users at fixed transmission rates at relatively low cost Introduction major goal of all computer network designs is the distribution of information in fast error free manor at the lowest possible cost One method of accomplishing this goal is to use already existing technologies in new and imaginative ways Although designed for different purposes the cable television systems CATV already in place in much of the provide an interesting and potentially useful platform for the distribution of digital data on metropolitan area scale As the CATV systems in use were initially designed for one way communications any plan to use them must include either upgrading currently installed upstream amplifiers or the actual implementation of them The problems associated with using these types of facilities were studied and it has been demonstrated that using such facilities is technically and economically feasible Karshmer Thomas and Phelan Karshmer and Thomas These studies along with others Hatamain Hafez have demonstrated potential strengths and weaknesses in using such systems Possibly the greatest strength of using CATV based networks is their almost universal existence in the Approximately of all homes are currently connected to cable plant and virtually every building in most cities is passed by cable One of the key problems associated with using the branching tree topology of cable plant is access control Due to the separation of upstream and downstream channels any message from source node leaf must be sent upstream to the head end and then downstream to the destination node another leaf This time can cause large delay message transmission and reception which can render an access control technique such as useless In the current work we present results from the analysis of system that reduces message transmission time on CATV network while not decreasing network throughput We develop model of CATV networking scheme which is then tested using well know simulation techniques Finally the simulation results are analyzed and are compared to best throughput and expected delay times Distributed switching over CATV network Figure shows simplified view of our CATV network with switches installed on the trunk Each switch is in turn connected to branch cable that supports branch nodes network subscribers Each trunk node switch has three inputs trunk upstream trunk downstream and branch upstream as well as three outputs Each branch node has one output for branch upstream and one input for branch downstreamSince all trunk nodes have certain level of intelligence the traffic flow on the trunk is totally controlled The goal of the intelligent trunk nodes is to messages onto the appropriate branch cable at the earliest possible time The head end is therefore not the only node to that can redirect messages If our system is able to redirect messages at the earliest possible time we believe the system can reduce message travel time reduce message delay and increase system throughput Figure shows the simulation results for the node case with different node distribution on the trunk and branch cables The distributions are trunk node and branch nodes trunk nodes nodes per branch trunk nodes and nodes per branch trunk nodes and nodes per branch and trunk nodes and nodes per branch Figure shows the DELAYs related to these different distributions The following figure shows packet length of or and baud rate of Figure shows that with fixed baud rate and fixed packet size or bits the throughput total number of packets on each branch cable is almost identical Therefore the total throughput of the system within given time is expressed in the following equation As the value is almost identical to the same values for and on each branch cable it seems clear that putting the control node on the trunk cable will linearly increase the throughput for the entire network In this case the implementation of an intelligent node on the trunk cable resulted in the desired performance Since Slotted Aloha can double the throughput on each branch we can see that the total throughput is also doubled This implies that the better the protocol on the branch level the more the total system throughput increases Figure shows that the DELAY time may be reduced even if the number of trunk control nodes increases The following equation shows that the de lay is mainly caused by two factors the size of waiting queue and the retransmission rate which is what queuing theory would predict If there are too many messages at the trunk control nodes waiting to be transmitted the DELAY will increase This means that if the traffic is greater than trunk capacity the store and forward protocol on truck level will cause long DELAY and deteriorate overall system performance Conclusions The results from the current study lead us to number of conclusions regarding the use of distributed intelligence approach to using CATV equipment to support metropolitan area networking Briefly stated they are Adding control nodes on the trunk cable increasing will reduce the DELAY with the number of uses subscribers in the system being fixed Proper values for the average transmission success rate and average transmission attempts will also tend to increase the throughput Increasing the Baud rate tends to reduce the and therefore has positive effect in reducing the which in turn reduces the DELAY see Figure Interestingly increasing the Baud rate beyond certain limit tends to cause the to increase Consequently the is reduced and the DELAY time increases see Figure Essentially our ability to reduce the DELAY time is function of the trunk cable transmit rate bit rate and the Increasing the value of will not cause the DELAY time to be increased because the throughput on each branch is effectively fixed and has normal distribution probability Therefore the more nodes users on branch the less frequently each branch node can send Packet onto branch cable as the throughput on each branch is fixed As result to the extent that trunk node can handle the traffic the waiting queue size will not increase and the DELAY time will not increase The model clearly demonstrates that our design is extendable we can increase the number of users by simply adding trunk control nodes to increase the system throughput without increasing the average system DELAY This is an important result as it tells us that small number of trunk nodes which are inexpensive and simple to install have dramatic impact on overall network performance Our results were obtained using Baud rate of using more realistic figure in the range of could only enhance our findings	other	misc
1244	 Date Wed Jan GMT Server Mon Jan GMT Researchers in Programming Languages and Compilers Researchers in Programming Languages and Compilers Here are some home pages of researchers working on programming language theory design implementation and related areas Disclaimer this list is not exhaustive Please let me know if you would like to be added to this list or if you would like an existing entry modified or deleted Back to the language research page Related Pages The list of home pages of functional language researchers The list of home pages of compiler researchers Oscar Nierstrasz list of useful home pages Who Who on the Web in Formal Methods Researchers in Logical Frameworks Program Analysis and Manipulation researchers Home Pages Abadi DEC SRC Security in distributed systems specification and verification methods principles of programming languages Samson Abramsky University of Edinburgh Semantics of programming languages concurrency game semantics program analysis Gul Agha University of Illinois at Logic programming formal semantics actors Alex Aiken Berkeley Program analysis type theory optimization constraint theories functional programming instruction scheduling Hassan Simon Fraser University programming logical and functional programming and the design of compilation techniques Maria Alpuente Technical University of Valencia Spain Logic Programming semantics extensions and applications integration of functional and logic programming languages abstract interpretation program manipulation Thorsten Altenkirch Chalmers Type theory categorical logic and program verification Saman Amarasinghe Stanford Compilers for parallel machines SUIF Jennifer Anderson Stanford Compilers for scalable parallel machines SUIF Peter Holst Andersen DIKU University of Copenhagen Partial evaluation Andrew Appel Princeton Standard ML of New Jersey Compilation optimization and garbage collection of mostly functional programming languages Zena Matilde Ariola University of Oregon Principles of programming languages formal semantics Arvind MIT All aspects of parallel computing and declarative programming languages Dynamic dataflow architectures the implicitly parallel programming language Id and the compilation of languages such as Id on parallel machines Mike Ashley University of Kansas Program analysis program transformations language design and implementation Mikhail Auguston New Mexico State University Programming languages design and implementation the design of the compiler writing language RIGAL software engineering testing and debugging automation assertion languages Lennart Augustsson Chalmers Functional programming and implementation Henry Baker Independent Garbage collection GC storage management programming languages Lisp Ada APL ML functional programming compilers linear types reversible computation parallel languages quantum computation Carlos Baquero Minho University Concurrent object oriented programming inheritance of concurrency control code extensions transactions on distributed and mobile computing Gerald Baumgartner Purdue Functional and languages type systems object types modules Bellegarde Oregon Graduate Institute Program transformation by rewriting functional programming automatic demonstration and the use of formal methods for software development Edoardo Biagioni Carnegie Mellon Functional languages parallel computing and architectures compilers networking operating systems and Lars Birkedal Carnegie Mellon Type theory modules Standard ML compilation of ML the ML Kit partial evaluation Sandip Biswas University of Pennsylvania Compilers type theory module systems separate compilation configuration management program slicing Michael Blair MIT Dynamically adaptive specialization partial evaluation program analyisi compilation type theory subtyping Guy Blelloch Carnegie Mellon Parallel languages and compilers NESL Matthias Blume Princeton Implementation of mostly functional languages in particular SML and Scheme efficient data representation separate compilation compilation management optimizations language design Alan Borning University of Washington languages and systems Lee Braine University College London Functional programming programming visual programming and language implementations Preston Briggs Rice Briot University of Tokyo programming and reflection artificial intelligence artificial life computer music Kim Bruce Williams College Semantics and design of programming languages type theory languages models of lambda calculus including subtypes and bounded polymorphism Barrett Bryant The University of Alabama at Birmingham Compiler design formal semantics technology Tim Budd Oregon State Programming languages Leda implementation techniques OOP Peter Buhr University of Waterloo Polymorphism persistence concurrency and concurrent monitoring visualization and debugging Margaret Burnett Oregon State University Visual programming languages design theory and implementation papers Rod Burstall Edinburgh proof and its relation to type theory development of correct programs with respect to specification applications of category theory in computer science Philippe Canalda INRIA Rocquencourt PAGODE generator of optimizing code generators compilation techniques CoSy an optimizing compiler platform software engineering automatic term rewriting system generation term and DAG normalization problem finite state automata with and unification pattern constraints dynamic programming reentrant programming pattern matching Luca Cardelli DEC SRC Theory of programming languages polymorphism subtyping objects recursion modularization typechecking distribution Obliq Steve Carr Michigan Technological University Compilers for parallel architectures Nicholas Carriero Yale Systems issues in the development and deployment of software tools for parallelism Giuseppe Castagna LIENS Laboratoire de Normale Type theory programming Manuel Chakravarty Technical University of Berlin Design and implementation of functional and logic programming languages with emphasis on the integration of both paradigms and parallel implementations Craig Chambers University of Washington Design and implementation of advanced languages Cecil Thomas Christopher Illinois Institute of Technology Parallel programming languages compilers experimental programming models computing and Icon Mark University of Delaware Programming languages and environments general purpose parallel programming compiler analysis and optimization Wayne Citrin University of Colorado Visual programming languages and environments Chris Clack University College London Language design programming environments and techniques especially functional programming high performance computing William Clinger Northeastern Higher order and functional languages design and specification optimizations and their correctness generational garbage collection Chris Colby Carnegie Mellon Program analysis via abstract interpretation of the aliasing synchronization and communication behavior of concurrent languages such as Concurrent ML Collard CNRS Laboratory PRISM Static analyses dataflow analyses automatic parallelization scheduling functional programming Charles Consel University of Static program analysis compilation and compiler generation programming environment prototyping and program transformation Robert Constable Cornell Systems for problem solving in programming and mathematics such as Nuprl Models and program refinement for the Polya programming language Gordon Cormack University of Waterloo Parsing and text processing attribute grammars data types concurrency Patrick Cousot ENS Paris Static program analysis abstract interpretation program development and verification semantics Dirk Craeynest Leuven Semantics directed compiler construction integrated environments programming language Ada software engineering Roger Crew Microsoft Research Semantics program analysis verification and transformations Ron Cytron Washington University in Louis Program optimization program transformation intermediate representations Mads Dam Swedish Institute of Computer Science First and higher order modal and temporal logics compositional verification techniques process specification languages and applications to computer based systems for cooperative work Laurent Dami de The HOP Calculus integration of functional and languages Olivier Danvy Aarhus University Programming languages partial evaluation continuations Rowan Davies Carnegie Mellon Type systems ML refinement types partial evaluation computation staging program analysis Jeffrey Dean University of Washington Practical whole program analysis partial evaluation interprocedural optimization for languages The Cecil project Mourad Debbabi Laval University Quebec Programming languages integration of paradigms semantics and formal methods Andr eacute DeHon MIT Quasistatic computing specialization feedback and adaptation Arie van Deursen CWI Amsterdam Language prototyping algebraic specifications tools program understanding software reengineering Stephan Diehl Universitaet des Saarlandes University Saarbruecken Semantics of programming languages semantics directed generation of compilers and abstract machines WWW programming languages Dinesh CWI Object oriented programming algebraic specifications theorem proving visual languages partial evaluation static program analysis Amer Diwan University of Massachusetts Garbage collection inlining memory system performance optimization for memory hierarchies partial evaluation program analysis compilers for languages Simon Dobson Rutherford Appleton Laboratory Programming abstractions for parallel and distributed systems compilation program transformation semantics Scott Draves Carnegie Mellon Partial evaluation abstraction performance Bruce Duba Microsoft Research Design and implementation of programming languages Dominic Duggan University of Waterloo Type systems and type inference object types dynamic types operational semantics unification explicit substitutions partial continuations application frameworks Dirk Dussart Katholieke Universiteit Leuven Belgium Program specialization techniques Susan Eggers University of Washington Dynamic compilation code scheduling parallel optimizations for locality Michael Ernst Rice University Static analysis slicing debugging including optimized code serialization of parallel programs game theory intellectual property David Espinosa MIT and Columbia Monads compiler and operating system architecture Leonidas Fegaras Oregon Graduate Institute Functional programming database programming languages query optimization program transformation and verification Matthias Felleisen Rice Principles of programming languages Mary Fernandez AT Research Improving software development through the design of very and programming languages and the development of tools for their efficient implementation such as the New Jersey toolkit Jeanne Ferrante University of California San Diego Intermediate representations for optimizing and parallelizing compilers optimization in parallel and memory hierarchy machines Andrzej Filinski Edinburgh Continuations CPS category theory Sigbjorn Finne Glasgow Lazy functional languages specifically Haskell and their use in the implementation of graphical user interfaces Cormac Flanagan Rice Analysis and implementation of parallel programming languages Ian Foster Argonne National Laboratory Parallel languages compilers runtime systems applications Christopher Fraser Bell Laboratories Retargetable code generation and optimization including lcc retargetable compiler for ANSI Timothy Freeman Carnegie Mellon Refinement types ML Dan Friedman Indiana University Principles of programming languages Svend HP Labs languages language support for coordination distribution concurrency persistence and David Gelernter Yale Linda parallel programming software ensembles artificial intelligence adaptive parallelism programming environments for parallelism realtime data fusion and expert databases Shai Geva Carnegie Mellon Semantics intensional aspects of computation domain theory concurrency functional programming reasoning about programs Giorgio Ghelli Pisa University Database programming languages type theory object oriented languages the database programming language Fibonacci Anwar Ghuloum Carnegie Mellon Compilers optimizing and parallelizing sequential languages parallel algorithms languages and architectures Andy Gill Glasgow Using equational reasoning to perform proofs deforestation purely functional finite maps parsing combinators Christopher Glaeser Nullstone Corporation Methodologies to evaluate compiler optimization and performance Joseph Goguen Oxford Software engineering formal methods object oriented relational and functional programming and their combinations concurrent computer architecture based on rewriting algebraic specification theorem proving hardware verification philosophy of computation Benjamin Goldberg New York University Functional programming memory management program optimization Andrew Gordon Cambridge Operational semantics and concurrency mechanised verification John Gough Queensland University of Technology Code generation optimization Implementation of programming languages strongly typed imperative languages Nicholas Graham York University Functional programming languages languages for developing user interfaces and groupware visual programming environments John Greiner Carnegie Mellon Language models of complexity type theory parallel algorithms Dave Grove University of Washington Design implementation and optimization of advanced languages such as Cecil Carl Gunter University of Pennsylvania Domain theory semantics of polymorphism computational aspects of linear logic structure and representation of partial information Rajiv Gupta University of Pittsburgh Parallelizing and optimizing compilers parallel architectures distributed and fault tolerant computing software testing and debugging Sandeep Gupta Colorado State University Parallelizing compilers parallel program synthesis and parallel computing Mary Hall Stanford Interprocedural optimization for parallelizing compilers SUIF Thomas Hallgren Chalmers Type systems with subtypes graphical user interfaces for functional languages Kevin Hammond Glasgow Design and implementation of pure functional languages such as Haskell John Hannan Penn State Operational semantics and type theory compiler verification mathematical logic program transformation abstract machines David Hanson Princeton lcc retargetable compiler for ANSI Programming languages compilers programming environments Michael Hanus RWTH Aachen Type systems for and implementation of logic programming languages integration of functional and logic programming languages ALF system abstract interpretation of logic functional logic and constraint logic programming languages James Harland Royal Melbourne Institute of Technology Foundations of logic programming linear logic proof theory deductive databases computational logic Robert Harper Carnegie Mellon Logical frameworks proofs ML modules lambda calculus type theory category theory semantics and logics of programs functional programming applications of functional languages to systems programming John Hatcliff DIKU University of Copenhagen Operational semantics correctness of program transformations continuations logics and type theory logical frameworks partial evaluation computational monads static analysis of programs Chris Haynes Indiana Type systems control abstraction symbolic computation Scheme Fritz Henglein DIKU University of Copenhagen Type inference systems program analysis algorithmic and computational complexity global program optimization Jonathan Hill Oxford Bulk Synchronous Parallel model functional programming Implementation of the HPF library in Fortran Michael Hind SUNY at New Paltz visiting IBM Research Compiler optimizations and programming languages Hoare Oxford Programming methods and languages proof techniques for programs distributed computing category theory in computing science switching circuit design Richard Holt University of Toronto Object oriented programming languages and teaching programming Urs University of California Santa Barbara programming languages compilers for languages compilation James Hook Oregon Graduate Institute Application of formal methods to software development the theory and practice of specification and programming languages and type theory Jim Horning InterTrust Technologies Language design and implementation specification languages and tools Larch and the Standard Template Library Susan Horwitz University of Wisconsin at Madison programming environments program slicing differencing and merging static analysis of programs and interprocedural dataflow analysis Antony Hosking Purdue University Programming language design and implementation compilation interpretation and optimization systems garbage collection database systems database and persistent programming languages and systems Empirical performance evaluation of prototype systems Brian Howard Kansas State Programming language design and theory particularly functional languages semantics and type theory Logic and computation Natural language processing Paul Hudak Yale Functional programming Haskell parallel programming in Haskell modular interpreters mutable abstract datatypes Graham Hutton University of Nottingham Functional programming relational programming polytypic programming programming calculi recursion operators categorical methods Graham Hutton Utrecht University The Netherlands Functional and relational programming category theory in computer science algebraic approaches to programming Purushothaman Iyer North Carolina State University Abstract Interpretation Concurrency Formal methods Daniel Jackson Carnegie Mellon Tractable representations and analyses of designs and code Specifications design methods static analysis model checking Quinn Tyler Jackson Lambda Systems Pattern matching translation modeling Suresh Jagannathan NEC Research Institute Advanced language and compiler technology for the Scheme programming language the incorporation of formal methods such as continuation models type inference abstract interpretation etc as foundation for such technology parallel and distributed computing for symbolic and irregular applications Sverker Janson SICS Swedish Institute of Computer Science Foundations design and implementation technology for multiparadigm languages that offer combination of concurrency distribution constraints and mutable state Johan Jeuring Chalmers Program calculation programming methodology type systems and programming languages for polytypic programming functional programming Trevor Jim University of Pennsylvania Semantics compilers type inference Cliff Jones Manchester University Compositional formal methods for parallel environments support systems for formal methods LPF Mark Jones University of Nottingham Programming language design and implementation type theory module systems program transformation and analysis functional programming Simon Peyton Jones Glasgow Design implementation and application of lazy functional languages In practical terms that means spend most of my time on our implementation of Haskell the Glasgow Haskell Compiler and its ramifications Jesper DIKU University of Copenhagen Semantic based program manipulation and program analyses Program specialization partial evaluation deforestation and supercompilation flow and analysis and representation analysis Martin Jourdan INRIA Rocquencourt France Attribute grammars esp the system program analysis compiler construction and generation Bill Kalsow DEC SRC programming languages and environments compilers and runtime systems Jasper Kamperman CWI Compilation of term rewriting systems algebraic equational and functional languages lazy rewriting algebraic specifications Uwe Kastens University of Paderborn Germany Methods and tools for language implementation compilation for parallel machines Dinesh Katiyar Sun Microsystems Programming languages languages systems interface definition languages type theory Richard Kelsey NEC Research Institute Compiling scheme Scheme style Andrew Kennedy University of Cambridge Type systems type inference dimension types and the extension of programming languages to support physical dimension functional programming David Keppel University of Washington Abstractions architectures binding times caches compilers dynamic compilation emulation operating systems performance analysis runtime code generation runtime systems code simulation threads tracing optimization Maurice van Keulen University of Twente Type systems polymorphy functional programming database specification semantics of such languages Gregor Kiczales Xerox PARC programming reflection metaobject protocols open compilers efficient compilation of programs David King Glasgow Expressing graph algorithms in Haskell algorithm design and correctness imperative functional programming Edgar Knapp Purdue Formal methods for concurrent program development tool support for program design retargetable implementation of concurrent programs Todd Knoblock Microsoft Research graphics and interactivity program specializaton run time code generation partial evaluation high level programming languages program analysis and optimization and type theory Dattatraya Kulkarni University of Toronto Compiler optimizations program transformations Kwangkeun Yi Korea Advanced Institute of Science and Technology program analysis programming environments program analysis tools safe programming Monica Lam Stanford Compiler optimizations computer architectures parallel computing SUIF Leslie Lamport DEC SRC TLA the Temporal Logic of Actions writing proofs James Larus University of Wisconsin at Madison Programming languages and compilers in particular languages and compilers for parallel machines design and programming of parallel computers compiling symbolic languages program profiling and tracing and program executable editing Konstantin Loyola University of Chicago Programming languages and compilers functional and programming type systems type inference software engineering John Launchbury Oregon Graduate Institute Functional programming functional algorithms the semantics of lazy evaluation incorporating destructive updates in Haskell partial evaulation program analysis Programming and specification language design and semantics formal methods program specification and verification programming methodology programming functional programming distributed computer systems Peter Lee Carnegie Mellon compiler generation program analysis and optimization ML compiler support for advanced systems software Rustan Leino DEC SRC Programming and program design technologies programming languages and systems specification and verification program semantics and modularity Mark Leone Indiana University code generation partial evaluation compiling functional programs program analysis and optimization type theory Xavier Leroy INRIA Rocquencourt Type systems module systems operational semantics implementation of ML the Caml Light compiler Michael Leuschel Katholieke Universiteit Leuven Partial evaluation and partial deduction and the ground representation specialised integrity checking Raph Levien UC Berkeley Compilers for languages analysis of memory access patterns closure representations avoiding the need for garbage collection Sean Levy Allen Dutoit Eric Gardner Eswaran Subrahmanian Carnegie Mellon Group Engineering Design Research Center CMU embeddable support for evolutionary prototyping user interfaces collaboration Sheng Liang Yale Design and implementation of modern programming languages modular semantics compiler generation portable common Leonid Libkin University of Pennsylvania Functional database query languages semantics of programming languages partial information Karl Lieberherr Northeastern University Adaptive Software adaptive architecture description languages Jim Lipton Wesleyan University Logic programming type theory intuitionistic semantics programming with relations categorical logic Lisper KTH Dept of Teleinformatics Theory for efficient implementation of declarative languages Data parallel and functional programming program transformations Annie Liu Indiana University Program analyses and transformations for efficiency improvement optimizing compilers interactive systems algorithm design program development methods Luc Maranget INRIA Rocquencourt Lazy ML compilation of pattern matching and parallel implementation strategies in term rewriting systems Dave Mason Waterloo Compilation of functional programming languages particularly of Standard ML for systems programming purposes literate programming and other aspects of text formatting Florian Matthes Hamburg University Germany Persistent programming environments extensible syntax type checking static and dynamic code optimization object store interfaces Bernd Mathiske Hamburg University Language implementation portable runtime systems code generation distributed persistent languages code mobility thread mobility autonomous network agents bidirectional language interfacing exception handling David McAllester MIT AI Laboratory Automated reasoning and type inference Erik Meijer Utrecht University Functional programming semantics directed compiler generation constructive algorithmics Marjan Mernik University of Maribor Slovenia Design and implementation of programming languages formal language definition compiler generators attribute grammars Dale Miller University of Pennsylvania Computational logic proof theory design and theory of logic and functional programming languages unification of typed lambda Prolog Robin Milner Cambridge Mathematical models of computation models and calculi for concurrent computation how to present logics to machines semantics of programming constructs John Mitchell Stanford Programming language analysis and design including module systems programming type systems and reasoning about programs applications of mathematical logic to programming languages and automated reasoning algorithms for static analysis of programs Greg Morrisett Cornell Systems hacking in languages compilers analysis via types modeling garbage collection concurrency threads Christian Mossin DIKU University of Copenhagen Type inference for analysis of functional programs Program analysis type systems logic lambda calculus and to some extent category theory Frank Mueller Berlin Compiler optimizations concurrent programming prediction of execution time Robert Muller Boston College Compilers for languages program representation program analysis and optimization extensible parsers Uwe Nestmann University of Erlangen Formal Semantics concurrency theory translation correctness Kristian Nielsen DIKU University of Copenhagen Deforestation partial evaluation supercompilation program analysis implementation of functional programming languages lazy evaluation Oscar Nierstrasz University of Berne Semantics of concurrency software composition languages Rishiyur Nikhil DEC CRL Parallel computing languages and implementations runtime systems architectures Functional languages and implementations especially parallel implementations Tobias Nipkow Technische Automatic and interactive theorem proving system verification rewriting unification type systems Steve Novack University of California Irvine Compiling for parallelism Lars Nyland University of North Carolina at Chapel Hill languages for prototyping parallel algorithms Development of complex parallel algorithms Transformation of code to parallel implementations John Glasgow Using functional programming to specify and reason about parallel systems such as digital circuits and data parallel architectures nondeterminism debugging functional programming environments Peter Syracuse University Semantic and logical foundations of imperative computation Bryan Glasgow Parallel computing operating systems compilers partial evaluation functional programming languages and all sorts of odd permutations of these topics James MIT Storage systems design for information retrieval and persistent object applications Atsushi Ohori Kyoto University Type inference polymorphic record calculus compilation parallelism Martin Odersky University of Karlsruhe Formal methods for the definition of programming languages and the design and manipulation of programs Special areas of interests are program calculi type systems semantics of programming languages and programming language implementation John Ophel La Trobe University Melbourne Australia Polymorphic programming languages modules Mehmet Orgun Macquarie University Sydney Logic programming applied temporal logic dataflow computation temporal databases Jens Palsberg MIT Theory and implementation of programming languages Didier Parigot INRIA Rocquencourt Attribute grammars the system Algirdas Pakstas Agder College Distributed programming system architect language ALADDIN integrated compiler development environment Grammar Debugging Tool and Parser Constuctor Krishna Palem New York University Optimizing compilers parallelism instruction scheduling and register allocation compiling for embedded systems George Papadopoulos University of Cyprus Term graph rewriting systems coordination models logic functional and programming Larry Paulson Cambridge The Isabelle theorem prover Formalizing axiomatic set theory Formalizing induction and coinduction principles in set theory and logic Standard ML Frank Pfenning Carnegie Mellon Type theory and its application to language design in particular and languages Logic automated theorem proving formal program development and programming environments Michael Philippsen ICSI Berkeley Languages and compilers for parallel and distributed machines Benjamin Pierce Indiana University Static type systems subtyping bounded quantification type inference intersection types concurrency John Plevyak University of Illinois Concurrent programming language design and compilation Type Inference Structure Analysis Concurrent The Illinois Concert project Gordon Plotkin Edinburgh Applications of logic especially denotational and operational semantics of programming languages semantics of type systems monadic theories of computation general proof theory and the semantics of natural language particularly intensional logics for situation theory Lori Pollock University of Delaware Optimizing compilers for high performance architectures compiler phase integration language and compiler support for cluster computing optimizing explicitly parallel programs parallel compilers Salil Pradhan Northeastern University Adaptive architecture description languages Vaughan Pratt Stanford Semantics of parallel and distributed computing Jan Prins University of North Carolina at Chapel Hill programming languages formal techniques in program development parallel algorithms and parallel computation compilation of programs for parallel execution William Pugh University of Maryland Algorithms and data structure design and analysis skip lists compilers for massively parallel architectures integer programming for array data dependence analysis Ramanujam Louisiana State University Parallelizing compilers computing programming languages computer architecture programming environments Norman Ramsey University of Virginia tools retargetability literate programming and debugging Chris Reade Brunel University Functional programming functional theory of programming languages type theory and formal methods Jonathan Rees MIT Scheme data types lexically scoped macros modules categories monads operating systems Jakob Rehof DIKU University of Copenhagen Type systems type inference logical and computational aspects of type systems type systems in program analysis Alastair Reid Glasgow Use and implementation of functional languages graphics garbage collection user interfaces debugging Formal program development transformation and implementation of algebraic specifications of abstract data types John Reif Duke Parallel algorithms compilers for parallel machines formal methods for synthesis of parallel algorithms Mark Reinhold NEC Research Institute Garbage collection compilation techniques type systems semantics and the visualization and analysis of program performance Didier Remy INRIA Rocquencourt Type systems object oriented programming Thomas Reps University of Wisconsin at Madison programming environments program slicing differencing and merging interprocedural dataflow analysis and incremental algorithms Jon Riecke Bell Laboratories Theory of programming languages operational and denotational semantics logics of programs formal methods type systems and inference abstraction languages with state control polymorphism Kristoffer Rose DIKU University of Copenhagen Semantics lambda calculus rewrite systems explicit substitution abstract machines sharing graph reduction Guido van Rossum CWI Centre for Mathemathics and Computer Science Amsterdam languages scripting languages prototyping languages designed and implemented Python ABC Francois Rouaix INRIA Rocquencourt Extensions of the ML type system overloading programming abstract types type operators modularity Erik Ruf Microsoft Research Design implementation and optimization of programming languages and the use of program analysis to support program understanding and transformation Barbara Ryder Rutgers program analyses and software tools for programming environments Chair of ACM SIGPLAN Amr Sabry University of Oregon Compilers data flow analysis abstract interpretation programming language calculi and semantic foundations David Sands DIKU University of Copenhagen Programming language semantics and their applications to abstract interpretation and related semantics based analysis techniques Don Sannella Edinburgh LFCS Formal development of modular software from specifications Modularization mechanisms proof Semantics Patrick Sansom Glasgow Implementation and runtime support of pure functional languages including compiler analysis and optimisation garbage collection and profiling Joao Saraiva Universidade do Minho Compilers attribute grammars parallel compilation Andre Scedrov University of Pennsylvania Mathematical logic mathematical aspects of programming structures Bill Scherlis Carnegie Mellon program analysis and manipulation information structures David Schmidt Kansas State Denotational semantics and intuitionistic type theory Michael Schwartzbach BRICS University of Aarhus Programming languages type systems type inference static program analysis data types language design implementation Cotton Seed MIT and the Motorola Cambridge Research Center Computer architecture compilers for MPPs dataflow and implicitly parallel languages program analysis Peter Sestoft Royal Veterinary and Agricultural University Denmark Functional programming languages and their implementation program analysis and transformation and partial evaluation Zhong Shao Yale Efficient compilation of languages interaction of languages and compilers with modern architectures programming environments and formal methods Tim Sheard Oregon Graduate Institute reflection type parametric programming program transformation and algebraic programming Olin Shivers MIT Advanced programming languages such as Scheme and ML systems and personal user interfaces Duncan Sinclair University of Strathclyde Functional programming and in particular how HCI research could be used to make creation of graphical user interfaces for functional programs easier Satnam Singh Glasgow Using functional languages for hardware specification synthesis and analysis Anthony Sloane James Cook University Generation of programming language implementations tools and environments from specifications Scott Smith Johns Hopkins Operational semantics of imperative and concurrent programming languages Operational equivalence of programs logics of programs Ellen Spertus MIT Value dependence graph IR code generation and register allocation for architectures Vugranam Sreedhar McGill University Data flow analysis compiler optimization instruction level parallelism multithreaded architecture optimizing explicit parallel programs memory consistency models Bjarne Steensgaard Microsoft Research Static program analysis program transformation value dependence graph IR data flow analyses store splitting partial evaluation Patrick Steyaert Brussels Free University Reflection and programming languages and systems User interfaces user interface building application building Allen Stoughton Kansas State Programming language semantics full abstraction models of the applied typed lambda calculus PCF logical relations and lambda definability David Stoutamire International Computer Science Institute Compiling for distribution compiling for locality garbage collection Sather Dave WJ University of York UK Compiler verification and the PVS verification system Walid Taha Oregon Graduate Institute Transformational programming systems functional programming programming software engineering and compilers Carolyn Talcott Stanford Formal reasoning semantics of programming languages open distributed systems reflection Domenico Talia Rende Italy Parallel computing architectures concurrent programming languages distributed systems Bob Tennent Edinburgh Semantics and design of programming languages and logics George Thiruvathukal Lake Shore Labs Metromail Corp Illinois Institute of Technology Object oriented languages enhanced actors programming model virtual machines parallel and distributed programming languages class libraries and typing systems Stephen Thomas University of Nottingham Use and implementation of functional languages the design of abstract architectures for functional languages particularly the TIM Frank Tip IBM Watson Program analysis program program slicing optimizations of programs Mario Tokoro Keio University computing concurrent programming distributed and open systems and cooperative problem solving Andrew Tolmach Portland State University Functional language implementation and tools David Toman Kansas State Implementation of PROLOG and LP languages semantics of LP languages semantics and expressivity of database query languages David Turner Glasgow Type systems program analysis functional programming implementation of concurrent calculi Tseng Stanford Compiler support for scalable parallel architectures SUIF Franklyn Turbak Wellesley College Programming language semantics and implementation deforestation compilation visual languages robot languages Mark Vandevoorde MIT Optimizing programs with specifications Eelco Visser University of Amsterdam Formalisms and tools for language design and prototyping syntax definition type systems documentation tools grammar formalisms parsing algebraic specification German Vidal Technical University of Valencia Spain Integration of functional and logic programming languages abstract interpretation program transformation Philip Wadler Glasgow Linear logic monads call by need type classes parametricity deforestation strictness analysis data abstraction and garbage collection William Waite University of Colorado at Boulder Automation of compiler construction Mitchell Wand Northeastern Semantics compiler correctness type inference David Watt University of Glasgow Action semantics language design compiler generation rapid prototyping Martin Weichert Chalmers Concurrency William Weihl MIT Parallel and distributed systems programming languages compilers operating systems and computer architecture Pierre Weis INRIA Design and implementation of functional programming languages in particular their compilation and type systems and in particular the Caml language Daniel Weise Microsoft Research Using advanced representations and analysis to build better compilers and programming tools Still seeking the holy grail of abstraction without cost even though do explicitly hack partial evaluation anymore Morten Welinder DIKU University of Copenhagen Partial evaluation of Standard ML analysis program generator generators David Whalley Florida State University Compiler optimizations support tools for performance evaluation and diagnosing compiler errors predicting execution time Paul Wilson University of Texas at Austin Memory management garbage collection allocators persistence Texas extensible languages and compilers RScheme memory hierarchies free software Russel Winder University College London Languages and environments for developing parallel systems development of information systems including processes techniques tools environments and philosophical aspects Jeannette Wing Carnegie Mellon Formal specifications concurrent and distributed systems programming languages programming methodology and search and retrieval in the information superhighway Michael Winikoff Melbourne University Logic programming linear logic Lygon functional programming Michael Wolfe The Portland Group Compiler optimizations compiling for parallel machines David Wolfram The Australian National University Semantics of declarative languages languages and semantics of concurrency in languages effectiveness of implementations Andrew Wright NEC Research Institute Soft typing type systems compilation techniques Scheme ML Limsoon Wong University of Pennsylvania Institute of Systems Science Singapore Interoperable systems multimedia systems programming methodologies query languages and programming language semantics Gao Xiaocheng Beijing University of Aero and Astro BUAA Constraint hierarchy object oriented languages Linux Takashi Yamanoue Kyushu Institute of Technology Visual programming parallel programming attributed grammars Katherine Yelick Berkeley Programming languages and runtime support for parallel machines optimizing explicitly parallel programs Akinori Yonezawa University of Tokyo Parallel computation models programming languages programming and natural language processing Zhang University of Georgia at Athens Domain theory semantics of programming languages applied logic nonmonotonic reasoning Benjamin Zorn University of Colorado at Boulder Programming language design and implementation with specific emphasis on language runtime systems and the ways in which they can support efficient program execution and ease of programming Back to the language research page Additions and corrections are welcome Mark Leone mleone	other	misc
3753	 Server Date Sunday GMT Monday GMT Course Home Page CS Info Syllabus Labs Links Announcements Room Update Due to unforseen circumstances we are still unable to use Upson for class Therefore here are the following room assignments for Tuesday and Wednesday Section in Philips Section in Upson Thursday class will meet in the MacLab as usual Prelim The first prelim will be on Wednesday It is an closed book exam that will cover all course material covered through the first lab assignments Labs and Lab are both due on Tuesday You do not need computer to do Lab	course	cornell
3754	 Server Date Sunday GMT Thursday GMT Advanced Language Implementation CS Advanced Language Implementation Contents Description Handouts Administrivia Web Links Description Modern programming languages such as SML Java Haskell and Dylan provide features such as objects and closures polymorphism abstract data types and classes garbage collection exceptions and continuations threads and synchronization constructs This class will survey modern techniques for efficient implementation of these features Our focus will be on the implementation of modern functional languages but we will make connections to other kinds of languages notably Handouts Handouts are now on separate page Administrivia Instructor Greg Morrisett Office Upson Email jgm Phone Admin Assistant Linda Competillo Upson Office Hours MWF or send email for an appointment TA Evan Moran Office Upson Email evan Phone Office Hours Tuesday Thursday Web Links Mark Leone Resources for Programming Language Research The Fox project information about Standard ML Reference information for postscript User guide Description of the base environment Description of the system environment Library documentation Documentation of available tools Reference indexDocumentation of available tools gentle introduction to SML Andrew Cumming MIT info on	course	cornell
3755	 Server Date Sunday GMT Thursday GMT Computer Science Computer Science Fall Course Information August is an introductory course covering broad range of computer science concepts and techniques including data abstraction recursion program correctness generic functions object oriented programming pattern matching and languages and their evaluators We use the Dylan language an object oriented dynamic language developed at Apple Computer which is well suited for covering broad range of introductory computer science topics This is not course about the Dylan language it just happens to be the notation that we have chosen for writing programs The major goals of the course are to teach students how to think clearly about programs and programming and to provide toolbox of modern programming techniques that will be applicable in any language What course to take Students often wonder whether to take or focuses on programming skills in the language Java whereas provides exposure to broad range of computational and programming problems using number of programming paradigms including functional and imperative programming techniques If you have good CS background or good formal skills mathematics or physics you should probably take Transfers between and in either direction are encouraged during the first two weeks Reaching Us The best way to reach the course staff is by posting questions or comments using the Web site http This site contains all course materials and runs CoNote server which allows students and staff to post questions and answers as annotations to the handouts and problem sets In order to access the Web site you will need to request and password for the CoNote system To do this simply go to the home page and follow the instructions Your and password will be created by Monday if you request them this week You can also reach the course staff is by sending email to but this should not be used for asking questions about problem sets or handouts use the Web site Who We Are Dan Huttenlocher Professor Upson Tobias Mayr TA Upson James Hamblin ugrad TA Robert Szewczyk ugrad TA Justin Voskuhl ugrad TA Andras Ferencz consultant Melissa Ho consultant When We Meet Lectures are Tuesday and Thursday at in Kimball and recitations are Monday and Wednesday at or Recitations expand on the material in lecture and provide more opportunity to ask questions Consulting hours for help with problem sets or other questions will be held from until midnight the two evenings before each problem set is due see schedule below Thus for problem sets due on Tuesday there will be consulting hours Sunday and Monday evenings and for those due on Thursday there will be consulting hours Tuesday and Wednesday evenings Consulting hours are in the public Mac lab in Upson Office hours are James Hamblin TBA Dan Huttenlocher Tobias Mayr Robert Szewczyk TBA Justin Voskuhl TBA Course Materials There is no textbook for this course There will be course handouts and lecture notes which will be available both in hardcopy and on the course Web site The Dylan interpreter is available free on the course Web site and was developed by Justin Voskuhl for this class It is implemented in Java and thus will run under any Java capable Web browser The best current browser it changes almost weekly is Netscape for which has Borland Java compiler There are also standalone versions available that you can download onto your computer if you do not want to use the Web browser version One word of warning if you download standalone Dylan onto your machine make sure that you are using the most recent version by checking the web site Course Requirements Students are responsible for all material in the assigned readings as well as that covered in lectures and in recitations There will be six problem sets two preliminary exams and final exam schedule is given below Each problem set will be combination of written exercises and programming assignment Course grades will be based on combination of the problem sets and exam scores The problem sets will account for approximately one half of the total grade No late assignments will be accepted we will generally grade assignments immediately and return them the following class period You should try to complete the programming assignments early as we will not accept late work The best use of your time and the machine time is to think about the problems before sitting down at the computer No matter how many times we say this it takes long time to sink in think about the problems before sitting down at the computer Policy on Joint Work Much of the learning in this course comes from doing the programming problems You may work jointly with one other person on the assignments no more than two people should work together However if you work together with someone you must submit single joint assignment with both names on it Under no circumstances may you hand in work done with or by someone else under your own name If in doubt credit the person from whom you got help You would be amazed at how easy it is to tell when people work together on problem sets so please do make life unpleasant for all of us by breaking these rules Public Lab Facilities CIT and various colleges on campus provide public Macintosh and PC facilities you may use your own machine or the public ones The CS department does not provide computer facilities for this course The course consultants will be available in the Upson Mac lab see above Problem Set Due Dates and Exam Dates All problem sets are due before on the due date For example an assignment due Tuesday must be submitted electronically to the course server by on Tuesday that is late Monday night No late assignments are accepted so make sure you submit your final solution by the correct time and date Assignment Assignment Assignment Prelim Assignment Assignment Prelim Assignment Final Exam see exam schedule Lecture Outline The Study of Computation and an Introduction to Dylan Function Abstraction and the Substitution Model of Evaluation Procedures and Processes Iteration Recursion and Induction Higher Order Procedures Functional Arguments and Values Analysis of Algorithms Orders of Growth Data Abstraction Structures Contracts and Implementations Hierarchical Data Lists Trees and the need for Quotation Recursive List Processing and Reasoning about Lists Symbolic Differentiation An Extended Example Generic Operations Type Dispatching and Generic Functions Generic Operations Polynomial Arithmetic System Assignment and the Environment Model of Evaluation Assignment and Local State Variables Objects with State and Object Oriented Programming Object Oriented Programming and Inheritance Multimethods and More About Object Oriented Programming Mutable Data Stacks and Queues Mutable Data Heaps Heapsort and Priority Queues The Metacircular Evaluator Dylan in Dylan Variations on Expression Evaluation Compilation and Optimization Streams Infinite Streams Nonlocal Exits Catch and Throw Garbage Collection and the Illusion of Infinite Memory Topics in CS Randomization and Quicksort Topics in CS Computability	course	cornell
3756	 Server Date Wednesday GMT Monday GMT Home Page Foundations of Artificial Intelligence Computer Science Department Cornell University Fall Welcome to Course Information for and Course Materials for and Code of Academic Integrity Please read Announcements claire The due date for Program has been moved to Monday Nov at the beginning of class scott Solution to Homework is now here kevin The code on the PCs for programming assignment is now all set Note that new file needs to be loaded all of the functions are the same but they have been rearranged slightly Also variables previously defined as constants were changed to parameters to appease the compiler these vars are still bracketted by Those of you using the PC lab should use the files there Those using the cs machines should use the files on Netscape kevin can be found in at for those with PC accounts kevin For those of your using the PC lab there is serious gremlin in the code for programming assignment You will still be able to look at the code and get started on the assignment but the planner will not successful run upon completion of Meanwhile we be hunting Those using the cs machines should have this problem kevin Special Offer Limited Time Only Are you concerned about getting zero on the third program Worry no longer Just complete the assignment as specified on the Course Materials page and positive grade will result Guaranteed This offer available only through November Only one assignment per group please claire There is clarification to problem in homework Unless otherwise specified you can assume that either the system adds the fact that JB is Dodge Van to the KB at query time or the fact that JB is Dodge Van already exists in the KB The postscript document has been modified to include this clarification scott The new homework is here The new homework is here Its due kevin The solution to Programming Assignment is now available on the Course Materials page claire The solution to the midterm is available from the Homeworks and Solutions portion of the home page claire Information about the status reports due Tuesday is now available in the section of the home page claire Reminder No class on Monday scott Solutions to Homework are right here in postscript Other CS course home pages CS Department home page	course	cornell
3757	 Server Date Sunday GMT Saturday GMT Home Page Database Systems and Information Retrieval Department of Computer Science Cornell University Spring Grades Have nice summer Introduction This three credit course covers the fundamentals of database systems and information retrieval The course will be roughly two thirds databases and one third information retrieval Topics to be covered in database systems include the following data modeling model relational model physical organization indexing and hashing relational database design database query languages query optimization crash recovery concurrency control and transaction processing The information retrieval part deals with how to find useful information in large textual databases This part of the course will cover inverted file systems the vector space model the SMART system vector similarity indexing weighting ranking relevance feedback phrase generation term relationships and thesaurus construction retrieval evaluation and if time permits automatic text structuring and summarization Link to Course Material class notes homeworks solutions Class Times and Place Tuesday Thursday minutes Thurston Prerequisites or and is recommended Books Database System Concepts by Korth and Silberschatz McGraw Hill Second Edition Required see cover Fundamentals of Database Systems by Elmasri and Navathe Benjamin Cummings Second Edition on reserve Principles of Database and Systems by Ullman Computer Science Press on reserve The information retrieval part of the course will use photocopied material from Salton books and research papers Instructor Amit Singhal singhal Upson Office hours Tuesday Thursday Teaching Assistants Sophia Georgiakaki spg Office hours Wednesday in Upson or by appointment send mail Marcos Aguilera aguilera for only Amith Yamasani amith Office hours only by appointment send mail Grading Exams There will be two midterms each worth of your final grade and final exam worth of your final grade Homeworks There will be five homeworks in the semester each worth of your final grade Homework Policies You can work in groups of up to people on homework If you work in group clearly indicate the names of all the group members on each homework The entire group will receive the same grade Homeworks will be available on the home page on Tuesday and will be due in class on Thursday of the following week solution set along with grading guide will be available of course after the due date through the course home page No late homeworks will be accepted Illegible homeworks are hard for your TAs to grade Even though it is not required you are encouraged to type your homeworks Use LaTeX if possible if you do already know it this will be good opportunity for you to learn LaTeX Homework Submission Please attach cover page to your homeworks with names of all the group members sorted alphabetically by the last name Also write on the cover page For Example Bill Clinton Bob Dole Ross Perot Graded Homeworks Graded homeworks will be returned in class sorted alphabetically by the last name of the first group member from the cover page The grade will be listed on the first page following the cover page If you do not want your homeworks returned in this way please send mail to the instructor Regrade Policy All regrade requests should be submitted to the instructor in writing within week after you get back your graded homeworks Course Schedule This is tentative schedule for the course All chapters refer to Korth and Silberschatz Tuesday January Introduction Model Reading Chapters and Thursday January Model Relational Model Reading Chapters and Tuesday January Relational Algebra Reading Chapter Homework available Thursday February Tuple Relational Calculus Domain Relational Calculus Reading Chapter Tuesday February SQL Reading Chapter Thursday February Integrity Constraints Relational database design Reading Chapters and Homework due Tuesday February Relational database design Reading Chapter Homework available Thursday February Relational database design Reading Chapter Tuesday February File Structures Reading Chapter Thursday February Indexing Reading Chapter Homework due Tuesday February Query Optimization Reading Chapter Thursday February Prelim Tuesday March Query Optimization Reading Chapter Homework available Thursday March Crash Recovery Reading Chapter Tuesday March Crash Recovery Concurrency Control Reading Chapters and Thursday March Concurrency Control Reading Chapter Homework due Spring Break Tuesday March Transaction Processing Reading Chapter Homework available Thursday March Transaction Processing Reading Chapter Tuesday April Introduction to Information Retrieval Thursday April Vector Space Model Homework due Tuesday April Term Weighting Thursday April Prelim Tuesday April Indexing Homework available Thursday April Evaluation Tuesday April Relevance Feedback Thursday April Document Clustering Homework due Tuesday April Advances in Information Retrieval Thursday May Advances in Information Retrieval	course	cornell
3758	 Server Date Wednesday GMT Thursday GMT Home Page Home Page Looking for Admin handouts and information incl TA office hours Lecture notes Assignment information Recitation information The Ethics Professionalism and Social Responsibility Page or maybe Electronic Submission Procedure Group Performance Evaluations Web resources Quotes and other fun stuff collection of jokes has been started here Submit your own Sumedh office hours Breaking News Recitation this Monday will be held in the csuglab floor Upson Misc Stuff Converting raw text to Postscript Some people have asked how to convert raw text to Postscript The simple way is to use the Unix program enscript Here are two suggested ways of doing this enscript enscript The first prints the files good for source code The second prints them The gives nice header This generate Postscript file If you leave out the it should just send the file to the printer More to come Last modification Wed Nov EST	course	cornell
3759	 Server Date Monday GMT Thursday GMT CS Fall Advanced Programming Languages Fall Faculty Robert Constable rc cs Upson Office Hours Monday Teaching Assistant Ravi Kumar ravi cs Upson Office Hours Thurs Fall Notes Fall Assignments Fall Notes Fall Notes Fall Notes Nuprl Classic ML Comments Questions Suggestions on Web page Please pavel	course	cornell
3760	 Server Date Wednesday GMT Thursday GMT Home Page Systems Programming and Operating Systems Practicum in Operating System Kenneth Birman News Group Course Syllabus Lecture Notes Unix Filesystem Structure Linking Static and Dynamic Assignments Assignment Assignment Assignment Assignment Assignment Solutions Solution Solution Solution Solution Prelim Solution TAs LiLi Upson Hall Phone lili Office Hours Wednesday and Friday Huang Upson Hall Phone ychuang Office Hours Tuesday and Thursday Mihai Budiu Upson Hall Phone budiu Office Hours Wednesday and Thursday Last modified Thu Nov	course	cornell
3761	 Server Date Wednesday GMT Friday GMT CS Advanced Database Systems CS Advanced Database Systems Time AM Tuesday and Thursday Place Upson Survey Proposal Due Project Proposal Due Prelim Exam UP Paper Survey Due Evaluation Project Completion Final Exam AM HO Contents Lecture Schedule Prelims Sample Questions Answers outside firewall Prelim Result Stats Project And Survey Project Info The PREDATOR DBMS Current Lists outside firewall Reference Material List Handouts Notes and Mail Archive Course Description Prerequisites TextBook Information Grading Professor Teaching Assistants Course Description CS is being offered for the first time in Fall It is intended to give students solid background in the design and development of database management systems DBMS Database systems are possibly the largest pieces of software and certainly among the most valuable pieces of software While DBMS is in one sense giant application program there are surprisingly many principles behind its development and use The database industry is growing and thriving and the demand for knowledgeable database engineers is much greater than the supply The database research community is also active and there are always new problems to be addressed because of the explosive amounts of data that people wish to access This course forms essential background for anyone who wants to become systems engineer at database development company or become an informed user of database systems or become database systems researcher or develop systems in any domain that manipulate large amounts of data or find out how teller machine really works number of advanced fundamental DBMS concepts will be covered Although this is not intended to be an introductory course it is new course and there may be students in the class with different backgrounds Consequently the discussion of various topics will begin with quick review of basic material taught in CS Click here for tentative list of topics to be covered In terms of workload here what the course involves There will be midterm and final examination These will test breadth of basic concepts Each student will have to do survey paper on specific advanced topic Here is list of possible topics The purpose of this is to be aware that what is being taught in the course is only fraction of what is out there This paper will be due three weeks after the midterm and should be complete with references It will require reading papers from journals and conference proceedings in the engineering library will suggest initial references and you will have to pursue additional references from there Click here for information on reference material in the library development project involving programming Look here for more information There will be no written homework assignments Students take turns writing lecture notes Depending on enrollment this means each person will have to take notes once or twice in the semester Hopefully this additional work will turn out to be useful around exam time Here are the details in Development Project The term project is an important part of the course and will involve significant amount of programming You can choose whether you wish to work alone or in teams of two However the projects will involve proportionally more work The goal of the project is to get experience at building some specific DBMS component to get comfortable working with large and modifying it in modular manner The second goal is as important as the first one because all database systems are huge software systems and rarely do you have the luxury of starting from scratch This forces you to write modular code and also to understand the interaction between the different system components when the inevitable bugs appear There are two research DBMS prototypes that will be used in the projects One is MINIBASE which is software associated with the textbook It is simple database system that provides all the components from the SQL parser down to the disk manager This should hopefully be available depending on our being able to compile and run it in our computing environment The important part of MINIBASE is the interface description of the various system components The actual code comes from class projects Consequently projects using MINIBASE will involve writing component like the buffer manager based on specification of its interface The other prototype is PREDATOR which is query processing engine that have been developing for my research There are number of possible projects some of which could lead to research topics that can be built on top of PREDATOR The focus here is on the functionality like complex queries and new data types If you are not familiar with recommend MINIBASE project because the amount of design needed is minimal If you think you are interested in database systems research then you should do PREDATOR project If you fall in neither category then you should decide whether you want project at the DBMS storage access buffer areas or the query processing optimization areas and choose between MINIBASE and PREDATOR There are also some general projects that involve neither system If you have your own idea on suitable project you should talk with me about it well in advance of the project proposal date Here is tentative list of possible projects In all the projects there will be certain steps that should be followed As part of the project proposal you should discuss with me and submit an ordered list of pieces of functionality that the project will produce There will be review in which you meet with me to discuss the progress that you have made towards completing the project The code you write must follow the coding conventions of the particular system that you are working on detailed coding conventions document will be provided and should be followed closely This is something that will be very picky on and that will contribute to the grade you get on the project Project submission should include demo and reasonable amount of test data Some useful references are Home page for PREDATOR Home page for MINIBASE Course TextBook The primary text is beta edition of new book on database systems Database Management Systems by Raghu Ramakrishnan This book contains many more details than are in most other introductory database books It is also associated with free software for an instructional database system MINIBASE which we might use in class assignments The textbook is available in the campus store for Here are other textbooks which could be used as references Korth Silberschatz Database System Concepts Second Edition This is the standard introductory database text but lacks the detail to be used in graduate course Michael Stonebraker Readings in Database Systems Morgan Kaufmann Second Edition This is collection of relatively recent papers in the area collected and introduced by Stonebraker who developed the Ingres Postgres and Illustra database systems Many of these are fundamental papers on core areas Elmasri Navathe Fundamentals of Database Systems Second Edition This is an alternative introductory database text Gray Reuter Transaction Processing Concepts and Techniques Morgan Kaufmann This is the bible of transaction processing pages long and tells you all there is to know and lot more about transactions It is wonderful reference to clear up confusing aspects of concurrency control recovery transaction semantics etc Some reference material has also been placed in the library Click here for details Information Here are some resources about programming Tutorial CS The language under construction Debugging with gdb GNU Make Grading Policies The grades for the course will be assigned based on the following percentages Prelim exam Final exam Survey paper Lecture Notes Term project The prelim exam will be on the evening of Oct at in Upson It will be set to be comfortably finished in hrs but an extra half hour will be provided for those who need it Likewise for the final exam The final should be in exam period Dec but this again is tentative and needs to be confirmed The final exam will focus on material not tested in the but the material covered in the earlier part of the course may form background for some of the questions Professor Praveen Seshadri Office Upson Phone praveen cs Office Hours AM Tuesday and Thursday Teaching Assistants Wei Tsang Ooi Office Upson Hall Phone weitsang cs Office Hours MWF AM noon	course	cornell
3762	 Server Date Wednesday GMT Monday GMT Data Structures Computer Science Fall Time and place Tuesday Thursday pm Kimball Course staff and office hours Handouts Assignments Corrections to the current Assignment Solutions to past Assignments and Prelims Prelim and Final dates Programming Language Academic Integrity Text Errata postscript Recently downloaded copy of the Errata sheet for the text pages Current estimate on the approximate Schedule Topics covered in lecture and the corresponding chapters in the text Includes rough prediction of future lectures Last updated Lab accounts Send email to heng if you do not yet have Lab account Assignments Homework due Tuesday September Statistics graded out of mean SD Assignment due Thursday September Statistics graded out of for program for written part mean SD Assignment due Thursday September Statistics graded out of mean SD Assignment due Thursday October Statistics graded out of mean SD Assignment due Tuesday October Statistics graded out of mean SD Average time spend hours Assignment due Tuesday October Statistics graded out of mean SD Assignment due Tuesday November Statistics graded out of mean SD Assignment due Tuesday November Late assignments will not be accepted Assignment due Tuesday November Late assignments are due the Tuesday after Thanksgiving December Corrections and Clarifications to the current Assignment Assignment and Prelim Solutions Homework Solutions Homework Solutions Homework Solutions to Recommended problem Homework Solutions to Assigned problems Homework Solutions to Recommended problems Homework Solutions to Assigned problems Prelim Solutions Homework Solutions Homework Solutions to Recommended problems Homework Solutions to Assigned problems Homework Solutions to Recommended problems Homework Solutions to Assigned problems Homework Solutions to Recommended problems Homework Solutions to Assigned problems Info on Assignments Please fill out the info sheet and the release forms for the class if you have not done so yet Graded homework is available in stack in the Undergrad Office Upson If you prefer that we hold onto your homework until you pick it up then you should clearly mark HOLD at the top of the first page of the homework Homeworks will only be accepted in class and on time Late homework will receive grade of zero However to cover cases of emergency or illness up to two assignments will be accepted one lecture late or one assignment two lectures late without penalty You do not need to inform me about late homeworks in advance or to give me any excuses Excuses for late homeworks beyond the first two will not be accepted Other Handouts Printed handouts are available on the Web In addition extra copies of these handouts will be dropped off at the Undergraduate Office Upson immediately following class will use some transparencies for the lecture Copies of the transparencies will be available at the lecture but not be available afterwards General Information Getting Started with Microsoft Visual Version Prelims and Final Prelim Thursday October Prelim Thursday November Final Monday December Prelims will be given on the above days in class Programming Language Programs can be written in either or If you do not know either or you might consider taking concurrently to this class to learn or you have to learn it by yourself using any book or one of the online Tutorials and Tutorials Online An Introduction to by Marshall Brain This is great introduction for people who know procedural language like Pascal or Fortran Programming in by David Marshall These are the course notes for class at the Cardiff University Lots of example programs lecture notes for the initial weeks of last are seems very helpful in learning Learn Today is guide to lot of books example programs and online tutorials Each reference is very well annotated The Yahoo Page If you wish to surf the web in search of more material this is the place to start The Frequently Asked Questions page Should be useful in answering the common questions that come up while learning and using Also contains link to several online tutorials The Frequently Asked Questions page Should be useful in answering the common questions that come up while learning and using The Newsgroup Academic Integrity Students are allowed to collaborate on the homework to the extent of formulating ideas as group Each student is expected to write up the homework by himself or herself Students may not copy any part of someone else written homework or code	course	cornell
3763	 Server Date Sunday GMT Saturday GMT CS Home Page CS Software Engineering Technology and Techniques Computer Science Department Cornell University Fall Course Staff Samuel Weber Professor Upson weber Office Hours MF Ioi Lam TA Upson ioi Office Hours Vineet Buch TA Upson buch Office Hours Thursday Yaron Minsky TA Office Hours None Course Materials Course Overview Course Handouts Lecture Notes Recitation Notes Resources Assignment Grades and Remarks Other Stuff Frequently Asked Questions From Borland samuel Last modified Oct	course	cornell
3764	 Server Date Sunday GMT Monday GMT CS Fall CS Fall Professor Monika Rauch Henzinger Email mhr Course Information Homeworks Solutions Lectures Lecture Graph Exploration Lecture Greedy Algorithms Lecture Matroids Lecture Matroids Lecture Dijkstra Algorithm Lecture Algorithm Lecture Matrix Closure Lecture Binomial Heaps Lecture Binomial Heaps Lecture Fibonacci Heaps Lecture Treaps Lecture Randomized Search Trees Lecture Lecture Lecture Lecture MaxFlow Lecture MaxFlow MinCut Theorem Lecture MaxFlow Algorithms Lecture MaxFlow Lecture MaxFlow Preflow Push Lecture MaxFlow Preflow Push Lecture MaxFlow Dynamic Tree Implementations	course	cornell
3765	 Server Date Sunday GMT Saturday GMT Home Page Introduction to Natural Language Understanding Computer Science Department Cornell University Spring Welcome to Course Information for Course Materials for Code of Academic Integrity Please read Announcements Here is list of resources available in brill directory for the Brill part of speech tagger brown directory for the Brown corpus tagged directory for small corpus annotated with information text is from the corpus xwn executable for WordNet be sure to set the environment variable WNSEARCHDIR to before you run xwn Finally this site contains description of the contents of the Penn Treebank II collection of annotated text We have this here at Cornell You can use any part of it that you like for your projects Talk to Francis about how to access it Other useful information for the project Database of recent papers in Computational Linguistics and NLP AI Repository contains has pointers to code for various NLP system components Presentation Schedule What to Turn in for the Project Other CS course home pages CS Department home page	course	cornell
3766	 Server Date Sunday GMT Wednesday GMT Introduction to Scientific Computation Introduction to Scientific Computation Summer Class Information Syllabus Source Code Handouts Problem Sets An introduction to elementary numerical analysis and scientific computation Topics include interpolation quadrature linear and nonlinear equation solving fitting and ordinary differential equations The Matlab computing environment is used Vectorization efficiency reliability and stability are stressed Class Information Staff Nikos Pitsianis instructor Office Upson Hall nikos Office Hours and and any other time by appointment Ozan Hafizogullari teaching assistant Office Upson Hall ozan Office Hours and Th and any other time by appointment Lectures Class meets every day in Upson Hall Course Administration Laurie Buck Upson All the questions concerning grade recording accounts should be addressed to the course administrator Prerequisites CS and of Math or Math Course Materials Text Introduction to Scientific Computing Approach Using Matlab by Charles Van Loan It will be distributed in class Software MATLAB You can purchase Student Matlab for either the MacIntosh or the PC version though you do not have to Computer Labs This course has been designated to use the three computer labs Upson Sibley and Martha Van Rensselaer Problem Sets There will be assignments which will be handed out in lecture or from this page Extras will be available in rack outside Upson Assignments will be collected in class All the computing problems will be done in MATLAB Return of graded work will be handled in class An assignment is due at the beginning of the class on the due date Late assignments wo be accepted for credit The worst grade from the six assignments will be ignored for the final grade Each assignment can be done alone or with at most one partner Print your name one copy with both names if working in pairs on the first page and include your student ID No change or addition of partner names after an assignment has been handed in Exams There will be midterm and final exam Days and times are listed below Grading Your final total score will be computed as follows Best assignments Midterm Final Your final grade will be assigned according to your relative ranking in the class based on your final total scores June Introduction out June Programming in MATLAB June Errors June Floating Point Numbers Registration Deadline June Polynomial Interpolation July due out July Piecewise Interpolation July Hermite July No Class July Cubic Splines Add Course Deadline July Numerical Integration due out July July Composite Rules Change Deadline July Adaptive Quadrature July Review due Drop Course Deadline July Midterm Exam at the classroom out July Matrices and Operations July Linear Systems and LU July Least Squares July QR and Givens July Cholesky due out July Finding Roots July Minimize Function of One Variable July Minimize Multivariate Functions July Solve Systems July Initial Value Problems due out July Euler Euler July Methods Adam Methods due Review No Class Final Exam at the classroom Source Code Examples from Introduction to Scientific Computing At the Mac labs Upson Sibley and Martha van Rennselaer Hall the source code is located at the folders If you plan to work on your own stand alone computer or at lab other than the assigned ones here is the source code for the examples For Mac file For other systems or Unix You uncompress and untar with the unix command zcat tar xfv It is highly recommended you get and use zcat Or just browse through an FTP session You need postscript file viewer installed at your computer in order to see the files below Handouts grades randperm length grades ans Problem Sets Assignment Assignment Assignment and Assignment	course	cornell
3767	 Server Date Sunday GMT Tuesday GMT Home Page Systems Programming and Operating Systems Practicum in Operating System Kenneth Birman News Group Course Syllabus Lecture Notes Unix Filesystem Structure Linking Static and Dynamic Assignments Homework Homework Homework Homework Homework Assignment Solutions Solution Solution Solution Solution Prelim Solution TAs LiLi Upson Hall Phone lili Office Hours Wednesday and Friday Huang Upson Hall Phone ychuang Office Hours Tuesday and Thursday Mihai Budiu Upson Hall Phone budiu Office Hours Wednesday and Thursday Last modified Tue Nov	course	cornell
3768	 Server Date Sunday GMT Wednesday GMT Practical Distributed Systems Practical Distributed Systems Registration in is necessary for students taking General Information Course Overview and Logistics Readings Homeworks Homework Due Homework Due postscript Homework Due Examinations Midterm Examination Due postscript Final Examination Due postscript Annotated Bibliographies Selected annotated bibliographies prepared by class	course	cornell
3769	 Server Date Wednesday GMT Tuesday GMT CS Home Page Multimedia Systems Computer Science Department Cornell University Fall Course Staff Course Info Course Materials Students Web Pages Project Web Pages Some useful links Newsgroup Anouncements Newsgroup Access Rivl bug Comments or questions about this web page Send mail to janosi	course	cornell
3770	 Server Date Sunday GMT Friday GMT Home Page Foundations of Artificial Intelligence Computer Science Department Cornell University Fall Welcome to Course Information for and Course Materials for and Code of Academic Integrity Please read Announcements claire Final grades will be available sometime Saturday can send you your grade via if you request me to do so via claire Final exam is Dec Upson Alternate date is Dec Upson Other CS course home pages CS Department home page	course	cornell
3771	 Server Date Sunday GMT Sunday GMT CS Home Page Multimedia Systems Computer Science Department Cornell University Fall Final Project Presentation Schedule Course Staff Course Info Course Materials Students Web Pages Project Web Pages Some useful links Newsgroup Anouncements Newsgroup Access Rivl bug Comments or questions about this web page Send mail to janosi	course	cornell
3772	 Server Date Sunday GMT Friday GMT Home Page Spring Home Page Spring Message of the Day Welcome to the Home Page Remember to check here frequently for important information regarding the course Prelim is Tuesday April The review session will be held on Sunday April at in Baker Course Information Instructors Teaching Assistants Office Hours Getting course materials from the World Wide Web CodeWarrior on your personal Mac Programs Lecture Programs Program Program Program Program Program Program Exams Prelim Tues February Prelim Thur March Prelim Tues April Final Exam Mon May Last Updated April Spring pierce	course	cornell
3773	 Server Date Wednesday GMT Friday GMT Fall Home Page Fall Automata and Computability Theory Welcome to Click to see Course Information Lecture Notes Homework and Exams Study Guide Announcements Course notes available in hardcopy Do do the homework sets in the notes New TA office hours Incorrect due date Prelim Prelim Revised Homework Homework erratum Change of room for Nikolay office hours Code of Academic Integrity Please read Other CS courses CS Department	course	cornell
3774	 Server Date Wednesday GMT Monday GMT Home Page Structure and Interpretation of Computer Programs Computer Science Department Cornell University Fall Course Materials Access to course materials requires and password which you can request by attempting to access the materials Course Info Dylan Interpreter New window Dylan Interpreter This window Note some Web browsers including Netscape do not correctly check for changed Java class files Thus when NOODLLE is changed you may see inconsistent behavior Here how to fix it If you are working with parter link you directories with the PartnerJoin Utility Announcements	course	cornell
3775	 Server Date Sunday GMT Tuesday GMT CS Advanced Programming Languages Fall MWF Upson Instructor Tom Henzinger Upson tah Office hours after class and by appointment Teaching assistant Neal Glew Upson glew Office hours Tu Th and by appointment Handouts Handout September Course Information Handout September Getting Started with ML Handout October Homeworks Homework due September solutions Homework due September solutions Homework due October solutions Homework due October solutions Homework due November solutions Homeworks Gries Homework due November solutions Homework due December solutions Homework due December solutions Raw Notes Raw notes September Raw notes September Raw notes September Raw notes September Raw notes September Raw notes September Raw notes September Raw notes September Raw notes October Raw notes October Raw notes October Raw notes October Raw notes October Raw notes October Raw notes October Raw notes November Raw notes November Raw notes November Raw notes November Raw notes November Raw notes December Raw notes December Scribe Notes Lecture September Lecture September Lecture September Lecture September Lecture September Lecture September Lecture Introduction to ML Lecture September Lecture September Lecture September Lecture September Lecture September Lecture September Lecture October Lecture October Lecture October Lecture October Lecture October Lecture October Midterm October solutions Lecture October Lecture October Lectures Gries Lecture November Lecture November Lecture November Lecture November Lecture November Lecture November Lecture November Lecture November Lecture November Lecture December Lecture December Lecture December Lecture December	course	cornell
3776	 Server Date Wednesday GMT Monday GMT Fall Home Page Computers and Programming Computer Science Department Cornell University Fall Question and problems about this page should be emailed to Nawaaz Ahmed nawaaz You may have trouble viewing the tables if you using an early version of NetScape Changes to this document are logged Click here for the latest updates The order of the updates since November has been changed so that the latest updates are at the top of the page You can also post problems you have found solutions to them and any other related material to the newsgroup This is an experiment let me know if using the newsgroup link is problem on the macs Course description Course staff Updated with office hours information Additional References Lecture notes Handouts Assignments Code samples Exams and Solutions Course description COM Computers and Programming also ENGRD Fall spring summer credits Credit will not be granted for both COM and Prerequisite COM or equivalent programming experience Intermediate programming in language and introduction to computer science Topics include program development proofs of program correctness program structure recursion abstract data types programming data structures and analysis of algorithms Java is the principal programming language There will be two prelims and one final for this course Prelim October Prelim November Final December The exact location of the prelims will be announced later	course	cornell
3777	 Server Date Wednesday GMT Wednesday GMT Discrete Structures Discrete Structures Course Information Instructor Professor Sam Toueg Upson Tel sam Office Hours Monday Wednesday or by appointment Teaching Assistants Debra Goldberg Rhodes Theory Center Tel debra Office Hours Tuesday pm and Wednesday pm in Upson NOTE Next Tuesday the office hours will end at pm Athanasios Kyparlis Upson Tel kyparlis Office Hours Thursday pm and Friday am noon in Upson Newsflash November Prelim grades are posted in front of Upson October Additional Consulting Hours October Announcements Handouts Reading Assignments Homeworks Solutions Announcements Please remember to return your homework in the yellow campus mail envelope with your name written on it Handouts Course Information Questionnaire Reading Assignments Sections and Friday August Section Monday September Section Wednesday September Sections and Monday September Sections and Wednesday September Section Wednesday October Sections and Wednesday October Section Friday October Sections and Friday November Sections and Wednesday November Sections and Monday November Homeworks IMPORTANT Unless we specify otherwise in all homeworks and exams in you should justify your answers with clear and rigorous proofs Grading will be according to the following criteria correctness and completeness and clarity precision and conciseness Homework Homework Homework Homework Homework Homework Homework Homework Homework Homework Homework Solutions Solution of Homework Solution of Homework Solution of Homework Solution of Homework Solution of Homework Solution of Homework Solution of Prelim Solution of Homework Solution of Homework Solution of Homework Solution of Homework Last updated on November Please comment to	course	cornell
3778	 Server Date Sunday GMT Thursday GMT Home Page Systems Programming and Operating Systems Practicum in Operating Systems Selections that display this symbol correspond to postcript documents How to hand in phase of HOCA Course Information Course Schedule Last Changed Groups Handouts Handout GIF Format Postcript Format Penne ai Broccoli Questions and Answers Last Changed The CHIP Computer System Console Window Example Using CHIP Chip Console Tutorial Principles of Operation Configuration File The HOCA Operating System The HOCA Operating System Specifications This page is maintained by Lorenzo Alvisi	course	cornell
3779	 Server Date Wednesday GMT Tuesday GMT Fall Home Page CS Introduction to Computer Programming Computer Science Department Cornell University Fall This page is under construction Practice problems and solutions are now available Clarifications for Program are available The Program Solution is now available Course Description Grading Policies Exam Schedule Programming Assignments Academic Integrity please read it and remember it well Course Description Computer Science Introduction to Computer Programming Offered in Fall credits Prerequisites knowledge of continuous mathematics trigonometry and calculus Math or or equivalent An introduction to elementary computer programming concepts Emphasis is on techniques of problem analysis and the development of algorithms and programs The subject of the course is programming not particular programming language The principal programming language is The course does not presume previous programming experience Programming assignments are tested and run on interactive microcomputers Alternative version of COM emphasizing examples and applications involving continuous mathematics including trigonometry and calculus Computer Science basically teaches the same material as There are some differences though besides the last letter assumes the knowledge familiarity with continuous math as opposed to discrete one including trigonometry and calculus One might wonder what that means in programming course Well computer science and math interact in many ways and introduces one of them scientific computing This does not mean that is easier than It means that if you think you are comfortable with integrals derivatives will show you ways of applying your knowledge to computer programming The point of it is not necessarily to test that knowledge but rather expand it and apply it would like to encourage people who think they would qualify to take this course Continuous math might not sound that attractive but you can only benefit with this choice It is often hard to find good examples of real world problems in an intro course for CS but finds one If you are not sure whether you qualify please talk to the instructor Zabih and ask him for an opinion Besides that there is slight difference in the topics taught in and although for the most part they coincide one with another If you already know bit about will spend some more time on pointers and the model of the language itself If you do know what this means it does matter just disregard the last sentence Grading Policies Grades for will be computed as follows course grades Prelim Prelim Prelim Final Graded assignments and exams will be returned in sections You can pick up the unclaimed from consultant in Carpenter provided you have an ID with you Regrades If you feel an exam or program has been incorrectly graded fill out regrade request giving your reasons in writing attach the exam to it and give it to the consultant in the Carpenter lab regrade request can cause your grade to go up or down the paper will be regraded from scratch regrade must be submited within one week after the graded work has been returned Posted Grades Grades will be posted outside the Carpenter lab by either srudent ID or code that you give us It is your responibility to verify that our records are correct If you find an error please contact the course administrator Laurie Buck but please only during her office hours Note since an error in our records can occur you should probably keep your graded until you your grade with the posted one Exam Schedule Exam times ExamDateTimeLocation Prelim September Prelim October Prelim November Kimball Upson Final December Note will cover different material than Therefore the corresponding exams will be held in different rooms Lectures Time Tuesday Thursday or You can go to either lecture but for the sake of consistancy try to stick to only one Location First five lectures will be held together with in Olin Starting September Kimball Sections Sections begin Monday September This is their schedule CS Sections DayTimeRoom Sections are required part of the course used to clarify topics covered in lecture discuss programming problems and work additional problems and excercises Graded programs and exams are returned in sections Sample solutions and practice exams are handed out there All sections for CS each week will cover the same topics Therefore if you miss one you can substitute it with another one later that week However you will be registered for only one section and that will be the only one where you can pick up your graded work Also excersises might differ in different sections depending on the instructor and the interests of the students Obtaining the copies If you miss class or for some other reason not get handout there are always copies of them in the Carpenter lab If they run out please tell it to one of the consultants there and we will print more of them out COURSE NOTES Lecture Sorry about the special characters in the handout that look funky on the web working on improving it lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture Programming Assignments Program four The files you need for Program are now available They are and You should only modify the type definition typedef of bigint in and should not modify at all Program was due November at The solution is available Program five Program was passed out in class on November Clarifications are available There are two instructor for They are Ramin Zabih Holds the lectures Lecture Czar Office Upson ph rdz Office Hours Held on the basis Leon Harkleroad Holds the sections Section Czar Office Upson ph leon Office Hours Thur There are also three TAs We are Adam Florence Writes and revises the homeworks also holds sections but he still remains The Homework Czar Office Upson ph aflorenc Office Hours WR and by appointment Lin Czarina Office Upson weiwei Office Hours by appointment rarely stay in my office so please email me before you go to my office You are more than welcome to talk to me and to ask me questions as long as do have class but make sure that you email me first Thanks Nikola Valerjev Maintains the web site Web Czar Office Upson nikola Office Hours Walk in basis If you have any questions grading syllabus course material completely lost just come to us and we try to put you back on track You can also ask consultants in Carpenter to tutor you during more quiet hours If you have any complaints about the course assignments are too hard or you just can not grasp of what in the world the instructor is talking about etc please tell us This will not affect your grade in any negative manner Academic Integrity You may work with one other person on the programming assignments Below group refers to either an individual or pair two of students working together on program The work you submit is CS must be the result of your group effort only The use of computer in no way modifies the standard academic integrity expected under the Cornell University code of conduct You may discuss work with students not in your group you may discuss general strategies However cooperation should NEVER involve one student possessing copy of all OR part of program written by student outside the group regardless of whether that copy is on paper or on disk In addition any output submitted with your program must have been produced by your program by running it as described in the assignment The penalty for violating the code can include failure in CS University disciplinary action and permanent mark on your transcript ASK FIRST if you have any questions about whether particular behavior violates our integrity expectations or the University Code This page is page is mantained by If you have any comments suggestions error reports complaints etc about this site please mail me at weiwei and will try to satisfy your needs as long as it does violate the University policies Last Updated Back to the computer science course page	course	cornell
3780	 Server Date Sunday GMT Monday GMT CS Home Page CS Home Page Brian Smith Your Tour Guide Course Information Homework Assignments Assignment Assignment Assignment Assignment Projects Project Project Spec Lectures Table of Contents postscript of slides are here Introduction to Computer Systems CPU Organization Programming Procedures Recursion and Stacks Assemblers Linkers and Loaders Interrupts and Introduction to Logic Design	course	cornell
3781	 Server Date Wednesday GMT Tuesday GMT Semantics of Programming Languages CS Semantics of Programming Languages Contents Description Texts and Prerequisites Handouts Scribed Lecture Notes Homework Assignments Contact Information Relevant Web Links Description Lectures MWF Upson Though is called Advanced Programming Languages in the course book it is better entitled Semantics of Programming Languages The goal of this course is not to conduct broad survey of programming languages like Java or SML nor to directly study implementation mechanisms for these languages compressed dispatch tables for multiple inheritance Rather the goal of this course is to study the principles of formal notation for describing computations and tools for analyzing and proving properties of computations These concerns subsume the study of specific programming languages or implementation mechanisms and hence lead to deeper understanding of programming specification logic mathematics and proof theory For example we will study notations for abstractly specifying how programs compute operational semantics as well as notations for describing what programs compute denotational semantics In turn the abstract but precise realization of these notations will allow us to study techniques induction logical relations for formally proving interesting and relevant properties of programming languages type safety or compiler correctness Ideally student coming out of this course will have learned something about how to make informal concepts and notation precise and how to manipulate the notation to demonstrate useful properties Textbooks Semantics of Programming Languages Carl Gunter ML for the Working Programmer Second Edition Larry Paulson Prerequisites On the programming side we assume experience with at least or language Preferably students will have some knowledge and experience working with functional language such as Scheme ML or Haskell On the theoretical side we assume basic proficiency in undergraduate mathematics logic and computer science basic knowledge of computability turing machines recursive functions and logic predicate calculus as well as some mathematical maturity is required This course is designed for PhD students in CS Math OR and EE It is not for MEng or undergraduate students If you are an MEng or undergraduate student you must talk to the instructor to find out if the course is suitable for you Contact Information Newsgroup Instructor Greg Morrisett Upson jgm Office Hours MF after class or by appointment Admin Assistant Linda Competillo Upson TA Erlingsson Upson ulfar Office Hours Tue Thu Relevant Web Links Mark Leone Resources for Programming Language Research Emacs mode for ML needed by The Fox project information about Standard ML Reference information for postscript User guide Description of the base environment Description of the system environment Library documentation Documentation of available tools Reference indexDocumentation of available tools gentle introduction to SML Andrew Cumming MIT info on	course	cornell
3782	 Server Date Sunday GMT Monday GMT Home Page CS Structure and Interpretation of Computer Programs Computer Science Department Cornell University Spring Course Staff Course Info Course Materials Announcements Emacs and MacMarlais demos Section Room Change Prelim Time and Place How to Make the Graders Happy Bug fix in PS General Exam Announcements Extension of due date Last Modified by JEH	course	cornell
3783	 Server Date Wednesday GMT Tuesday GMT CS Fall If you are running Netscape or IE click here Links to individual pages no frames Course general stuff section info Office hours MOTW downloads of homeworks info on class handouts course syllabus info on when exams will be Requirements and criteria for grading and homework schedule Other references on the web other goofy stuff Note The preceding pages contain tables If your browser is not able to handle tables then please email dwu Page last updated	course	cornell
3784	 Server Date Wednesday GMT Tuesday GMT The Design and Analysis of Algorithms Homepage Instructor Ronitt Rubinfeld TA Evan Moran Time MWF Location Upson Text Kozen The Design and Analysis of Algorithms Handouts Course announcement Syllabus Homeworks Homework last modified Homework last modified Homework last modified Homework last modified last modified Homework last modified last modified Homework see addendum see new copy of Homework last modified Homework last modified Solutions Solution Solution Solution Solution Solution Solution Solution Announcements There will be an exam on Thursday at in Upson Talk to me or Evan to reschedule if you can not make it at that time You may refer to the Kozen text an cheat sheet and your class Rajeev Motwani lecture notes on approximations PET paper	course	cornell
3785	 Server Date Sunday GMT Sunday GMT Summer Home Page Systems Programming and Operating Systems Prereq or permission of instructor Instructor Induprakas Kodukula prakas Teaching Assistant Nawaaz Ahmed nawaaz MOTD MOTD Archive Subject Description Prerequsites Course Outline Textbooks Course Schedule Quizzes Grading Policy Statement on Collaboration Office Hours Course Material Send Comments Subject Description Systems Programming and Operating Systems An introduction to the logical design of systems programs with emphasis on multiprogrammed operating systems Topics include process synchronization deadlock memory management methods information sharing protection and security and file systems The impact of network and distributed computing environments on operating systems is also discussed This is subject requiring constant attention Prerequsites Complete familiarity with the material of is assumed In particular knowledge of computer architecture assembly programming language and program structure is required cover some of the introductory material in class as required but the purpose of that will be to remind the audience of the material Course Outline The course will be organized roughly as follows say roughly because depending on the feedback from the class may change the order or the content of particular sections We start off with an overview of concurrency issues discuss synchronization issues in particular ensuring mutual exclusion deadlock detections and prevention algorithms discuss multiprocessor issues as well Next we go on to memory management Here we discuss virtual memory and various methods used to implement virtual memory such as paging and segmentation Next we cover file systems Finally we look at evolution of the traditional operating systems and look at If time permits we have few lectures on advanced topics such as multi threading and serverless file systems Textbooks The principal text book for the class is the Operating System Concepts book by Abraham Silberschatz and Peter Galvin also distribute class notes which will cover the material completely The class notes will also be available on the world wide web from the class home page at the end of each class Course Schedule We will meet Monday thru Thursday from during the weeks of There will be two quizzes The first will be on and the second will be on The final will be on In addition there will be weekly assignments for the first weeks of class These will be handed out on Thursday and will be due the following Thursday at the start of the class Quizzes Grading Each of the homeworks will carry weightage of for combined weightage of The final will be worth and there will be two midterms worth each There will also be surprise quizzes to determine the understanding of the course material by the class Policy Statement on Collaboration At most people can form group and collaborate on each homework Each such group will need to submit only one copy of the homework The quizzes and the final will be closed book and closed notes Office Hours Induprakas Kodukula Monday ETC Nawaaz Ahmed Tuesday Wednesday Thursday Upson Course Material Send Comments Maintained by Induprakas Kodukula	course	cornell
3786	 Server Date Sunday GMT Sunday GMT Spring Home Page Computers and Programming Computer Science Department Cornell University Spring Question and problems will this page should be emailed to Jeff Foster jfoster You may have trouble viewing the tables if you using an early version of NetScape The contest The first prelim will be on Thursday March We announce times and places soon Topics covered in the prelim The second prelim will be on Tuesday April The rooms were announced in lecture Topics covered in the second prelim The final exam will be on Monday May at noon in Olin last names and Olin last names The final exam will cover everything in the course Additional topics convered in the final Office hours DayWhenWhereWho session Consulting on Chris Jose Thanks to Chris and Jose for taking the time out of their studying to do this Course description Course staff lecture notes handouts code samples Gofer Enhance Other Web Servers Course description COM Computers and Programming also ENGRD Fall spring summer credits Credit will not be granted for both COM and Prerequisite COM or equivalent programming experience Intermediate programming in language and introduction to computer science Topics include program development proofs of program correctness program structure recursion abstract data types programming data structures and analysis of algorithms is the principal programming language Course staff and office hours Instructor Hal Perkins Upson Office hours Thursday and by appointment Email hal Teaching assistants Correction Office hours will be held in the TA office Jeff Foster Upson Office hours Tuesday Email jfoster Alan Kwan Upson Email kwan David Walker Upson Office hours Monday Email walker Sections Spring Sections DayTimeRoomInstructor Perkins Perkins Walker Walker Walker Foster Foster Consulting Consulting hours are in Upson The regular consulting schedule in effect until the last day of classes is and Friday Spring Consulting SundayMondayTuesdayWednesdayThursdayFriday None None None None None lecture notes Lecture notes are available in three formats MacBinary files that contain Microsoft Word files Rich text format files parseable by Microsoft Word and others Plain text The date listed next to the lecture is the date the lecture was posted not the date the lecture was given Macintosh BINHQX Lectures Preliminaries Lectures Basic Classes Lecture More Classes Lecture Pointers and Arrays Lecture Dynamic Storage Allocation Lectures Classes with Dynamic Data Lecture Fine Points of Classes Lecture Introduction to OOP Lecture Derived Classes Lecture Program Correctness Algorithmic Notation Lecture Triples and Assignments Lecture Assignments Conditionals and Loops Lecture Proving Loop Correct Lecture Functional Programming Lecture Types in Gofer Lecture Currying Map and Filter Lecture Recursion Iteration Lecture Application Architectures and Frameworks Lecture Linked Lists Lecture Algorithmic Analysis Lecture More Linked Lists Lecture Binary Trees Lecture Classes and Linked Data Structures Lecture Industrial Strength Lecture Java BINHQX files can be processed by Stuffit Expander If you have PC see the http address for Aladdin Systems to find Windows version Thanks to Armando Nunez for the tip Rich text Lectures Preliminaries Lectures Basic Classes Lecture More Classes Lecture Pointers and Arrays Lecture Dynamic Storage Allocation Lectures Classes with Dynamic Data Lecture Fine Points of Classes Lecture Introduction to OOP Lecture Derived Classes Lecture Program Correctness Algorithmic Notation Lecture Triples and Assignments Lecture Assignments Conditionals and Loops Lecture Proving Loop Correct Lecture Functional Programming Lecture Types in Gofer Lecture Currying Map and Filter Lecture Recursion Iteration Lecture Application Architectures and Frameworks Lecture Linked Lists Lecture Algorithmic Analysis Lecture More Linked Lists Lecture Binary Trees Lecture Classes and Linked Data Structures Lecture Industrial Strength Lecture Java Plain text Lectures Preliminaries Lectures Basic Classes Lecture More Classes Lecture Pointers and Arrays Lecture Dynamic Storage Allocation Lectures Classes with Dynamic Data Lecture Fine Points of Classes Lecture Introduction to OOP Lecture Derived Classes Lecture Program Correctness Algorithmic Notation Lecture Triples and Assignments Lecture Assignments Conditionals and Loops Lecture Proving Loop Correct Lecture Functional Programming Lecture Types in Gofer Lecture Currying Map and Filter Lecture Recursion Iteration Lecture Application Architectures and Frameworks Lecture Linked Lists Lecture Algorithmic Analysis Lecture More Linked Lists Lecture Binary Trees Lecture Classes and Linked Data Structures Lecture Industrial Strength Lecture Java handouts Handouts are in postscript format You can print them on almost any laser printer If you want to view them you need an application like Ghostview Handout Preliminaries Handout Assignment Handout CodeWarrior Intro section Handout Assignment Handout Assignment Handout Assignment Code samples Lecture Cell class Lecture Complex class Lecture Sets of characters Lectures Simple list class Lecture Dictionary class Gofer There are there flavors of Gofer available MacGofer is available in the public labs MacGofer PC Gofer UNIX Gofer The FTP site for Gofer is and the FTP site for MacGofer is Please do not ftp if you can help it If you find piece of Gofer you think is of general interest let me know and make it available from here MacGofer sources and manuals are available on the CS department ftp server Other Web Servers The final project for is available on the CS department ftp server Other Web Servers Computer Science Department CUINFO Metrowerks CodeWarrior homepage Aladdin Systems makers of Stuffit Expander home page Comments or suggestions Jeff Foster	course	cornell
3787	 Server Date Sunday GMT Monday GMT CS Machine Vision CS Machine Vision Course Staff Instructor Ramin Zabih Teaching Assistant Justin Miller Class Time and Place MWF Phillips Project Suggestions Problem Sets Problem Set Problem Set Course Class Notes How to Scribe Week January Regularization January Simulated Annealing February Computing Motion via Regularization February Calculus of Variations February Maximum Likelihood Estimation February Markov Random Fields February Snakes February Stereo and Motion February Introduction to Correlation February Mestimation March Methods March Guest Lecture March Transforms Cont March Correlation and Census Transform March No lecture Cont March Stereo Geometry Cont April Geometrical Transforms April Motion Segmentation April Tracking April Motion Tracking Cont April Edge Detection April Continuation of Model Based Vision April Hausdorff Distance April Guest Lecture Eigenhausdorff April Face Recognition Section Notes The Optical Flow Constraint Equation Other Sources Computer Vision Home Page History of Object Recognition	course	cornell
3788	 Date Tue Nov GMT Server Thu Aug GMT title page Operating System Principles Section this is not the Web page for Section Official entry from NCSU Graduate Catalog Course staff Instructor Edward Gehringer Daniels Hall efg Office hours PM MW Teaching assistant Carl Hobson cphobson Postscript of Course Handouts Solutions to Problem Set Solutions to Problem Set Solutions to Problem Set Solutions to Problem Set Solutions to Problem Set Solutions to Problem Set Answers to Test NCSU Computer Science Department Back to NCSU Electrical Computer Engineering Department efg Ed Gehringerupdated	course	misc
3789	 Date Wed Nov GMT Server Introduction to Robotics SPRING Introduction to Robotics SPRING Professor Jim Cremer Class hours MWF MacLean Hall Cremer office hours and by appointment MLH TA Dan Stevenson Stevenson office hours TTh robot lab Class mailing list robotics Index Policies and Grading Course Schedule Lab Assigments Homework Assignments Other Handouts Additional Sources of Information Textbook Introduction to Robotics Mechanics and Control by John Craig Second Edition Publishing Company Reading MA Tentative class schedule Week Course intro and lab intro Chapter course introduction Text Ch lab introduction in Introduction to use of Pumas Raven and Fish Demonstrations of past course projects Week Chapter Spatial descriptions and transformations Chap Spatial descriptions and transformations Text Chap continued Transformations varous orientation representations Text Lab exercise Week Chapter Kinematics Week Chapter Inverse Kinematics Week Chapter Jacobians velocity and static forces Week Chapter Dynamics Week Chapter Trajector generation Week Chapter Control Week buffer will really finish Ch here Field trips labs etc will stretch the schedule to here SPRING BREAK NO CLASS Week intro to specialized topics project discussion Week locomotion Week motion planning Week grasping Week robot programming languages planners Week and project presentations FINAL WWW and Internet Resources To be filled in	course	misc
3790	 Date Tue Nov GMT Server Wed Apr GMT Functional Programming Administrative Information Lecture Notes Programming Hints and Study Helps Homework Related Links Official Course Description from Undergraduate Brochure Instructor Teaching Assistants Andrew Lumsdaine Finger Yan Lin Finger James Regovich Finger Greg Sharek Finger Administrative Information Syllabus Policies and Procedures Instructional Objectives FAQ List The Six Scheme Mantras Homework Groups Lectures Introduction Functional Programming Introduction Recursion and Iteration Towers of Hanoi Higher Order Procedures product Programming with Abstract Data Abstract Data Cons Car Cdr and All That Symbols Pattern Matching Extended Example Solving Maze Extended Example Networks Extended Example Mergers Humorous Example Message Passing Run Amok Modularity Objects and State Local State flip The Environment Model of Evaluation Object Oriented Programming Mutable List Structures Streams Metalinguistic Abstraction The Metacircular Evaluator Programming Hints and Study Helps Code all of it from the text Scheme User Guide Scheme Reference Guide GNU Emacs Interface to Scheme Emacs Quick Reference Exams From Prior Years Exam Spring Exam Solutions Spring Exam Spring Exam Solutions Spring Final Exam Spring Final Exam Solutions Spring Problem Sets Problem Set Problem Set Solutions Problem Set Problem Set Solutions Problem Set Problem Set Solutions Problem Set Problem Set Solutions Problem Set Problem Set Problem Set Part One Problem Set Part Two Problem Set Links Scheme Home Page Internet Scheme Repository Home Page Lambda Humour Hal Abelson Home Page Gerry Sussman Home Page Hot Hot Hot Welcome Godiva Online Home Page	course	misc
3791	 Date Wed Nov GMT Server Tue Sep GMT Introduction to Computer Science Honors Section Introduction to Computer Science Honors Section Computer Science Times Not offered in the period from through Instructors Dist TAS Honors Section of Computer Science for students whose programming experience and ability enable them to proceed more rapidly than is possible in the regular sections and who are willing to devote correspondingly more work to the course Admission to this course will be through Final placement between this course and Computer Science will be decided during the first week of the term Back to Dartmouth CS Home Page	course	misc
3792	 Date Wed Nov GMT Server Mon Nov GMT CPS FALL CPS Fall Program Design and Analysis II Classes Assgnments Quiz Group Work Groups Grades Tests Review Session for Test is Monday Nov at in LSRC FINAL EXAM is scheduled for Saturday Sorry had nothing to do with this Send complaints to the registrar Course Materials and Handouts Check Teer and Carr cluster staffing schedule Course Syllabus Read the CPS Newsgroup Contacting Professors or TAs Is this the right CPS course for you Be UTA for CPS next semester Learn Unix commands postscript Here is some helpful unix commands for you to try To learn more try typing man command for any command Feel free to post questions on the newsgroup OIT online help page Some Classes Vector class to use type include Matrix class to use type include String class from CPS to use type include Assignments Assignment Getting Started html This is ready for use Assignment html Now due You can start the assignment now Necessary files have been setup You should take look at the Getting Started handout first It shows you how to setup your environment for this course This is just warmup programming assignment You should be able to do this assignment using Vector or array if you prefer You do not need to use Stacks Hash Tables Trees or other data structures you might know about We will be covering these structures and their implementation in later in the semester For this assignment am not looking for the best solution just solution Using these other data structures might make the assignment longer than intended Assignment html Now Due by Mon Sept earns bonus points Assignment hints Assignment sample solution Note this was thrown together quickly by jsr so it may not follow all the style rules you are suppose to follow it may have typos and it is not the only way to do this assignment Keep that in mind Assignment sample solution Note this was thrown together quickly by jsr so it may not follow all the style rules you are suppose to follow it may have typos and it is not the only way to do this assignment Keep that in mind Assignment html Note this assignment MUST be turned in on time Solutions will be handed out the same day Assignment hint Assignment Solutions Assignment Assignment html html html html html Assignment html Assignment hints text Lecture Notes Overview postscript Review Pointers postscript Linked Lists postscript and Classes More on Classes Analysis postscript templates postscript Stacks and Queues postscript Recursion postscript and Trees postscript and Binary Search Trees postscript Sorting postscript Trees notes not available online see Scot for handout Trees notes not available online see Scot for handout Random Quizzes Quiz Due Tues Solution Quiz Due Thurs Solution Quiz Due Tues Solution Quiz Due Tues Solution Quiz Due Tues Solution Quiz Due Tues Solution Quiz Due Tues Solution Quiz Due Thur Solution Group Work Group Project Current Groups Groups Grades current grades points per item Tests Tests from previous CPS or related courses NOTE These tests may contain material we have not covered CPS test Fall postscript and html and answers text CPS test Fall postscript and html and answers text Last modified August or later forget to update this by Susan Rodger rodger	course	misc
3793	 Date Tue Nov GMT Server Mon Oct GMT Introduction to Multimedia Center for Advanced Technology New York University Welcome to the Introduction To Multimedia web site The Lecture Slides and Notes for the Spring semester will be posted soon In the meantime the Spring information can be found below Lecture Slides and Notes Assignments and Due Dates	course	misc
3794	 Server Date Wednesday GMT Thursday GMT CSE Home Page Beginning of JavaScript Applet function seed var Under Construction var var out var if seed seed var seed else if seed seed for seed seed var seed else if seed if seed var seed else End of JavaScript code CSE Home Page Introduction to Parallel Processing Spring Under Construction News Group Lectures Exams Resources Midtermcanceled FinalThursday May of the grade HomeworksTBA of the grade LecturerVal Tannen val OfficeMoore Th Course AdministratorSusan Deysher Announcements am distributing another homework today Th in class It will be due on Tu	course	misc
3795	 Date Tue Nov GMT Server Mon Oct GMT Fall updated Sunday October Computers Organization New York University Fall Instructor Nathan Hull Phone Office Warren Weaver Hall Room Office Hours Email hull Syllabus Assignment due Tuesday October Assignment due Thursday October Chee Yap Class Note The following programs work ONLY on the Dewar Assembler not on the Turbo Assembler	course	misc
3796	 Date Wed Nov GMT Server CLA CS Introduction to Computer Science II CLA CS Introduction to Computer Science II Boston University Computer Department Department Syllabus Homework and Documentation Guidelines Homework Homework Homework Homework Homework	course	misc
3797	 Date Tue Nov GMT Server Mon Mar GMT CS Homepage CS Theory of Programming Languages Spring Computer Science Home Page Univ of Idaho Home Page Welcome to CS Theory of Programming Languages Home Page This page contains information related to the class such as the syllabus newsgroups and the assignments Please let me know if there anything can do to improve it It is very likely that this page and the information contained in it will change drastically during the semester Class Information Class Meets Tu and Th in JEB The class syllabus in Postscript or in MS Word format Course Overview in Postscript or as MS Word file Literature Review Guidelines in Postscript or as MS Word file Final Project Guidelines Lectures Homework Office Hours MW Other Office Hours by appointment Midterm Sample Problems handed out an old exam AND try out Program Sample Code Related Information You can read the following newsgroups for information on programming languages or check out the network sites listed at WWW Virtual Library in the or check out the network sites listed at Yahoo in the Languages Directory or list of programming language research pages can be found Here jimaf	course	misc
3798	 Date Wed Nov GMT Server Fri Oct GMT CIS Course materials for CIS Fall Syllabus Hypertext Postscript Homework due Hypertext Postscript Homework due corrected Hypertext Postscript due corrected as stated in class Hypertext Postscript Rod Howell howell	course	misc
3799	 Server Date Wednesday GMT Thursday GMT CS Home Page CS Design and Implementation of Programming Languages CS is one term course on compiler optimizations being taught at Caltech This year the course is being taught by Mary Hall visiting professor from Stanford The course will cover the basics of compiler construction with emphasis on optimization techniques and parallelizing compilers First Term California Institute of Technology Pasadena CA	course	misc
3800	 Date Tue Nov GMT Server Fri Sep GMT The CS and Math Homepage Harvey Mudd College CS and Math Theory of Computation Fall Interactive Automata Simulator Syllabus Homework Assignments Late Homework Policy Schedule and Office Hours Ran Homepage Fun and Useful Links Last modified August by hadas	course	misc
3801	 Date Wed Nov GMT Server BU CLA CS Concept in Programming Languages Page BU CLA CS Concept in Programming Languages Fall Home Page as of Syllabus and Schedule Project Descriptions HW Class meetings TueThu Instructor Marina Chen Office Hours Tue Wed Thur mcchen MCS Graders Natasha Tatarchuk natashat Arijit Sarcar asarcar Notes Slides Solutions Sample Midterm and Solution Midterm and Solution Marina Chen Created Last update	course	misc
3802	 Date Wed Nov GMT Server Thu Oct GMT CS Gonzalez CS Fall Added Sept at pm Instructor Teofilo Gonzalez Office Engineering Phone Office hours pm and Th pm teo cs Teaching Assistants Bogdan Cocosel Discussion Session Office Building trailer Room Office hours pm and pm bcocosel cs Huican Zhu Discussion Session Office Building trailer Room Office hours pm and pm hczhu cs Added October at pm The code we will review Thursday Oct is in file You may one to see the one used last year which does the same thing but in slightly different way That program is in file Copy them into your directory and type then type Sample input one number per line October pm You may use the listitarator class for the hw as long as it results in time efficient procedure as without it time efficient with respect to notation For problem two if you do insert insert insert results in very inefficient code So just implement the operation directly Remember we want time efficient code but do not try to optimize to the last bit do not try to reduce to the last bit the constant in the notation for the time complexity October pm Typo in Hw In the sorting algorithm problem replace if count by if count October pm Comments on the project Use Note that is either zero or it is positive integer Typos replace retured by returned replace occurence by occurance replace occurences by occurances replace ingnore by ignore replace clases by classes An example for the project is in Comments on the project The root node in both figures should have instead of an October pm Comments on the project The root node in both figures should have instead of an October pm Just called the RBR and they said the old midterms for are there If they are not listed then ask the person in the counter directly October pm As we said in the first handout you must work in the project and homeworks individually As said before in the project my member functions should not be your final memeber functions The purpose of the functions is to give examples on how to acceess the data However the data in the nodes should be left untouched In the project handout page say that is followed by CR should have said that is followed by CR or blank The same holds for string little program to read data is in file October pm In the project say that when ArrayTrieNode or LinkedTrieNode has count that becomes it should become TinyTrieNode That is INCORRECT sorry about that It becomes TinyTrieNode when in addition to the count being the StrEnds is TRUE October pm The homeworks have been graded You can pick them up during my office hours today from The solutions are in the RBR They are also in the file You can print that file or view it with ghostscript The press the left bottom on the dismiss sign if it appears Put the mouse insede the window and type CR to advance the page Additional information on ghostview appears when you type man In the hw it should say that Bogdan Cocosel is of the solutions October pm Oops forgot to add this But here it is In the file and the file you will find code to access and create the two examples in the project handout You can copy them into your directory compile it and run it October am As we say in the project description we are dealing with sets so we do not keep multiple copies of the same word in the same set Also the input is ERROR FREE But one might try to insert word in set that is already there or delete word that is not in set In the first case you must not insert the word and the count needs to remain unchanged In the second case the count must remain unchanged and nothing must be deleted Note that this is important to facilitate testing If you implement insert as in the class notes you will have to make to passes over the Trie in some cases Either to update the count when inserting new word or unupdating the count if it was updated incorrectly because the word was already there You can create member function whoami defined like GetNext to return the type of object you have for derived classes like TinyTrieNode October pm Remember that the final type of node DEPENDS on the NUMBER OF WORDS in that subtree It DOES NOT depend on the number of nodes or the number of nonnull pointers in that subtree October pm The Office hours of the TAs on Wednesday and Friday will be in CSIL from now till December If you would like CSIL to be open during the Thankgiving Holidays please send to humphrey cs It would be nice if you specify the times and days you want it be open and if you would like to babysit the machines Under Construction Current Weather Beginner Guide to HTML The Virtual Library DO NOT CLICK HERE	course	misc
3803	 Date Wed Nov GMT Server BU CLA CS Analysis of Algorithms Page BU CLA CS Analysis of Algorithms Assaf Kfoury Spring HOME PAGE Class Meetings Tu Th Instructor Assaf Kfoury Office Hours Tu Th Coordinates kfoury cs Grader Loredana Lo Conte Coordinates loredana cs Cummington Use before telephone Syllabus Course Policy Tests Grades use small font and wide window Handouts Problem Sets Selected Solutions Questions Solutions Questions Solutions Useful Pointers Short Bibliography Assaf Kfoury Created Modified	course	misc
3804	 Date Wed Nov GMT Server Wed Nov GMT Database Fundamentals Database Fundamentals Instructor David Spooner Fall Administrative Documents Course Introduction and Syllabus Unofficial lecture notes in HTML These lecture notes are under construction and in some cases even been proof read yet Use at your own risk Homework Assignments Homework Due Wednesday September Sample Solution Homework Due Wednesday September Sample Solution Homework Due Wednesday October Sample Solution Homework Due Wednesday November Sample Solution Homework Due Wednesday November Project Documents Project Team Assignments Project Home Pages Project Part Description Project Part Description Project Part Description Oracle Introduction to Oracle Lectures Lecture August Lecture August Lecture September Lecture September Lecture September Lecture September Lecture September Lecture September Lecture September Lecture October Lecture October Lecture October Lecture October Lecture October Lecture October Lecture November Lecture November Lecture November and November Lecture November and November Lecture December Database Fundamentals Fall David Spooner spoonerd	course	misc
3805	 Date Tue Nov GMT Server Home Page Elementary Programming Concepts is an introductory course in computer programming for Starting in the Fall semester we will use the programming language none Current Instructor Ann Ford arford Graduate Student Instructors Phillip Jewell pjewell Greg Lewis gregl Baheer Rajalingam baheer Christopher Wong chrisv This course is not intended for majors in Computer Science or Computer Engineering and as of Fall term will not serve as for Concentrators and those who wish to take must take as the More Information on General Course Information Office Hours Discussion Sections Lecture Notes Final Exam Information Information on the Computer Science Concentration Computer Science Engineering Home Page	course	misc
3806	 Date Wed Nov GMT Server Seminar in artificial intelligence Spring Seminar in artificial intelligence Spring Parallelization of deduction strategies Instructor Maria Paola Bonacina bonacina Class meetings TuTh in Gilmore Hall This course is an extension of the tutorial of the same title that the instructor gave at the Twelfth International Conference on Automated Deduction CADE in June Nancy France and its background may be found in the paper Parallelization of deduction strategies an analytical study Bonacina and Hsiang Journal of Automated Reasoning Vol Contents of the course The parallelization of deduction strategies is research topic which is becoming increasingly popular and important It combines knowledge from theorem proving distributed systems parallel programming and distributed algorithms This course provides systematic approach to this area at the of several fields The course is organized as follows Deduction strategies Basic definitions Survey of selected strategies as examples conceptual framework for parallel deduction Classification of deduction strategies from the point of view of parallelization Types of parallelism for deduction Presentation and discussion of relationships between classes of strategies and types of parallelism Survey and analysis of selected approaches to parallel deduction including Prolog technology parallel theorem provers Parallel theorem provers Parallel implementations of the Buchberger algorithm Parallel implementations of completion Parallel theorem provers Analysis of the problems suggestion and discussion of solutions What are the obstacles in effectively parallelizing deduction strategies How the choice of the deduction strategy the type of architecture and the type of parallel computation interact in determining the issues including size and degree of dynamicity of the data base of clauses shared memory versus distributed memory and conflicts between parallel inferences Focus on strategies Back to my teaching page This page was last updated on Monday CDT by Maria Paola Bonacina bonacina	course	misc
3807	 Date Wed Nov GMT Server BU CLA CS Introduction to Computer Graphics Page BU CLA CS Introduction to Computer Graphics Spring HOME PAGE Programming Assignments due due due due Homework Assignments due due due Solutions Final Exam May PM in MCS Class Meetings Mon Wed Fri Instructor Stan Sclaroff Room phone sclaroff cs Office Hours Grader John Isidoro jisidoro acs Course Description This is an introductory undergraduate course in computer graphics The course will focus primarily on the fundamentals of and graphics algorithms and geometry with some discussion of devices animation techniques and visual realism as time and class interest allows Syllabus Course Policy Tests Grading etc Stan Sclaroff Created January	course	misc
3808	 Server Date Tuesday GMT Tuesday GMT EECS Home Page EECS VLSI Design II Winter Richard Brown Office EECS Phone Email brown TA unofficial Phiroze Parakh phiroze Class alias Design by Mike Riepe General Information Course Information Useful Web Sites The University of Michigan High Performance Microprocessor Project University of Idaho VLSI Links Synopsys University Program new VLSI text book by Prentice Hall Digital Integrated Circuits Jan Rabaey The Web Virtual Library for Electrical Engineering MIT Semiconductor Subway Career Mosaic Internet Online Career Center	course	misc
3809	 Date Tue Nov GMT Server Tue Sep GMT NCSU Computer Science Department Web Page Design Computer Science Department Web Page Design North Carolina State University Department of Computer Science Fall Topics available Syllabus for the course quick tutorial for HTML Lecture Notes for Fall Class Schedule for Fall Homework assignments for Fall HTML Quick Reference Manual HTML Search Engines and Virtual Libraries	course	misc
3810	 Server Date Wednesday GMT Wednesday GMT Computer Science Introduction to Computer Organization Winter Class TTh MARB Professor Mark Clement TMCB Office Hours MWF or by appointment TA Aaron Judd TMCB Text Patterson and Hennessy Computer Organization Design The Interface Course Material Computer Science is beginning course in computer organization and fundamental programming concepts The course will analyze fundamental concepts involved in understanding how computers work and will provide significant programming experience in MIPS assembly language Prerequisites CS suggested Computer Laboratory The Macintosh lab located in room will be used for all programming assignments There are approximately machines designated for use These machines are available on an unscheduled basis however students should plan their time so that the labs can be completed in advance of the due date in order to avoid heavy use times The are available in the lab for simple syntax questions only Some of the may not be familiar with the MIPS assembly language Lab Fee Each student must purchase two yellow Computer Science Materials cards at the bookstore information desk upstairs sign them put your CID number on them and drop them in the box provided in the lab Additional information including Lab hours and help sections Lab descriptions assignments class schedule grading sample exam questions MIPS instruction set summary and MIPS assembly examples can be found on the WWW page for You can view the page using netscape on the machines in the lab You should plan to attend one of the How to use the lab help sections to find out how to get started Mark Clement Mon Jun MST	course	misc
3811	 Date Wed Nov GMT Server Distributed Computing Distributed Computing Seminar Spring Room Time pm Thursdays Notes Soma Chaudhuri talk will be in MLH George Varghese talk is on Friday The time and place of this talk will be announced later	course	misc
3812	 Date Tue Nov GMT Server Thu Oct GMT CS Homepage CS Data Communications Spring Computer Science Home Page Univ of Idaho Home Page Welcome to CS Data Communications Home Page This page contains information related to the class such as the syllabus newsgroups and the assignments Please let me know if there anything can do to improve it It is very likely that this page and the information contained in it will change drastically during the semester Class Information Class Meets Tu and Th in JEB The class syllabus in Postscript or in MS Word format Course Overview in Postscript or as MS Word file Literature Review Guidelines in Postscript or as MS Word file Final Project Guidelines Lectures Homework Sample Midterm Office Hours MW Other Office Hours by appointment Related Information You can read the following newsgroups for information on data communications or check out the network sites listed at WWW Virtual Library in the Communications and Telecommunications Listing or check out the network sites listed at Yahoo in the RFCs index or the Internet Engineering Task Force IETF page jimaf	course	misc
3813	 Date Wed Nov GMT Server Sat Sep GMT CS Homepage CS Algorithmic Analysis Fall Section AM MWF SFLC Section AM MWF MARB Text Fundamentals of Computer Algorithms by Horowitz and Sahni This course focuses on five algorithm design paradigms You will find links below to information related to the class such as the course outline the readings the assignments the newsgroup etc SYLLABUS SCHEDULE LAB HOMEWORK GRADES NEWSGROUP There are many advantages to using course home page Including To facilitate distribution of information without the use of paper To encourage communication between students newsgroup and To help students to become familiar with the internet Teacher Douglas Campbell Please email suggestions to improve this page to campbell Work Home Office TMCB Office Hours AM MWF or by appointment Teaching Assistant Jeff Penfold penfold Office TMCB Ext Hours Monday through Friday AM Class Information Grade Breakdown Syllabus Facilities Whats New Assignments The regular homework for this course consists of an ungraded course orientation assignment and five graded assignments dealing with topics discussed in class Readings Each day you will be expected to read the textbook section mentioned in class or found on the newsgroup It is up to you to check this often enough to make sure that you are up to date on the readings Newsgroup The newsgroup for this class is You will need to become familiar with this method of communication and be tolerant of it asyncronous nature ie you may not see your posting appear immediately Interesting Things on the World Wide Web Here is link to the BYU Home Page Some links available from the BYU Home Page that may also be useful to you include BYU Computer Science Home Page This page contains useful links to documents on creating your own WWW pages including template you may choose to use to help you begin your own home page The Learning Tool is another link which allows exploration for educational resources by subject It also contains instruction on creating WWW pages and link to templates you can use for your home page Useful References If you have questions on Usenet and the Newsgroups check out the Frequently Asked Questions FAQ for the Usenet For search facility use search machine Created January by Douglas Campbell	course	misc
3814	 Date Tue Nov GMT Server Tue Nov GMT Home Page Fundamentals of Computer Science using Instructor Amy Greenwald Tuesdays and Thursdays Tisch UC Course Goals This is course in computer programming concepts for students with little or no programming experience The intent is to teach students to write both clear and efficient programs by emphasizing structured programming principles Instructor Students Lectures Problem Sets Project Quizzes Midterm Exam Final Exam Amy Greenwald Office Phone Office Warren Weaver Hall Room Office Hours Tuesday mornings ish Electronic Office Hours Thursday mornings ish amygreen URL http Students Grades Lectures Lecture Information html ps Syllabus html ps Write in html ps Program Hello world Lecture Borland Tutorial Variables Variable Declarations Basic Data Type int Assignment Statements Programs Welcome to Addition Lecture Borland Tutorial Basic Data Type float Arithmetic in Precedence Order of Operations Programs Division Polynomial Euclid Lecture if else Statements switch Statements Programs if Grade nested Grade switch break Grade while Loop Lecture while Loops break continue Statements Programs Class Average while Class Average Class Average Lecture Algorithmic Design General Solution Psuedocode Solution in Programs Class while Lecture Review for Quiz Review Statements Review while Loops Dangling Else Lecture Formal Syntax Dangling Else Programs Guess Incorrect Guess Correct Lecture for Loops Increment Statements Programs Count for Count while Lecture for Loops Constants Programs for Lecture Nested Loops Programs Stars Triangle Lecture Functions Programs function Square Cube Square or Cube Lecture Midterm Review Programs Yet Again Almost the Same Increment After Increment Before Trace this Program Now Trace this Program Questions Anna Question long int Bradly Question Just for Fun SeaGong Question Lecture Midterm Exam Lecture Midterm Solutions Lecture Special Guest Lecture Speaker Fabian Monrose Topic Cryptography Cryptography Lecture Data Types short long unsigned double Math Library Functions sqrt getchar and putchar Programs char as int Square Root Lecture Standard Library Functions rand srand Call by Value Call by Reference Scope Storage Classes Programs Dice rand srand auto extern Lecture Arrays Programs Five Sum Sum of Squares Lecture More on Arrays Programs Array lowercase Array uppercase Lecture Arrays Passing Arrays to Functions Programs One Dice Array Two Die Array Call by Reference Key Array Lecture Project Intro to Pointers Programs Test Lecture More on Pointers Programs Swap Size of Arithmetic Lecture Still More on Pointers Programs Variables Pointers Arrays Pointers StrLen and StrCpy Binary Arithmetic Lecture Lecture Special Guest Lecture Speaker Ron Even Topic Java Lecture Final Review Problem Sets Problem Set Due Date Tuesday html Solution Set Posted Thursday Problem Set Due Date Tuesday html Solution Set Posted Thursday while Problem Set Due Date Tuesday html Solution Set Posted Thursday html Problem Set Due Date Tuesday html Solution Set Posted Thursday Problem Set Due Date Thursday html Solution Set Posted Tuesday Problem Set Due Date Thursday html Solution Set To be Posted Tuesday Problem Set Due Date Thursday html Solution Set To be Posted Tuesday Project Project Due Date Tuesday html The intent of this project is to build cryptographic system which encrypts plaintext and decrypts ciphertext possibly using keyword The system may utilize the transposition cipher the Vigenere cipher the Playfair cipher or any original variants of these ciphers See the cryptography slides for detailed descriptions of these ciphers No late projects will be accepted Quizzes Quiz Due Tuesday October html Quiz Solutions Posted Thursday October html Quiz Due Tuesday December html Midterm Exam Tuesday October html The midterm consists of questions for total value of points In general the questions are of the form given program what is the output In addition several questions ask you to write short segments of code The first two questions are short answer just like the quiz The next three questions cover and switch statements The sixth question covers for and while loops And the last two questions are program traces Midterm Solutions html Programs Name One Two Dangling Else Conditional switch for Loop while Loop Factorial Fibonacci Final Exam Friday December	course	misc
3815	 Date Wed Nov GMT Server Computer Science Spring Computer Science Fall Computer Science Department Boston University Current information Homework and its solution after the submission date in the directory Useful pointers Instructor Peter Gacs Email gacs Phone Office MCS Office hours Tue Wed Time Tue Thu Place MCS Texts Required Lovasz Computation Complexity translation by Gacs file on about pages Print on publp bind at the BU Copy Center Recommended Leonid Levin Fundamentals of Computing Elements of the Theory of Computation Introduction to Automata Theory Languages and Computation Papadimitriou Computational Complexity AW ISBN Description Topics covered Machine models Undecidability Complexity notions Some important algorithms Compression and theorems Nondeterminism NP problems Randomized algorithms Prime number tests Description complexity randomness information Pseudorandom generators Quadratic residuosity and cryptography Parallel algorithms Exponential lower bounds alternating machines and games Decision trees Communication complexity Homework Homework Given every Tuesday Must be returned next Tuesday credit if late by one class period no credit thereafter Each student can get at most one exception for not submitting homework on time Exams One midterm one class period length and one final exam Only single sheet of handwritten notes is allowed The final exam covers the whole material Grading In the final grade your homeworks count and your exams and An Incomplete grade will only be given in exceptional circumstances Cooperation It is OK to discuss the homework with your classmates but you must write it up yourself and understand it will ask questions if the solution is suspicious	course	misc
3816	 Date Tue Nov GMT Server Tue May GMT Discrete Mathematics please check it out right now Course Information Course Description University Honor Code Lecture Notes Homework Assignments Grades Newsgroup Useful Web Sights check them out HINTS ON FINAL EXAM Credits Robert Szczerba	course	misc
3817	 Date Tue Nov GMT Server Wed Sep GMT CS Homepage CS Computer Security Concepts Fall Computer Science Home Page Univ of Idaho Home Page Welcome to CS Computer Security Concepts This page contains information related to the class such as the syllabus newsgroups and the assignments Please let me know if there anything can do to improve it It is very likely that this page and the information contained in it will change drastically during the fall semester of Class Information Syllabus Course Overview Literature Review Guidelines Office Hours MW Th PST Other Office Hours by appointment Information about reading newsgroups using Emacs Lectures Jim	course	misc
3818	 Date Wed Jan GMT Server Thu Sep GMT CpSc Course Syllabus Computer Science Database Management Systems Policies and Procedures Fall Course CPSC Section Database Management Systems TTh Long Instructor Arthur Pellerin Office Room College of Nursing Building Hours Th Other times by appointment or if am available Phone Office Home UserId ARTPELL Course Goals To learn the theory and applications of database management systems To choose design and implement an application which uses database management system Textual Materials Fundamentals of Database Systems Elmasri and Navathe required Other required or optional materials to be purchased from the Union copy shop at various times during the semester Material on database to be used for your project Grading Approximate Project Tests Assignments Pop Quizzes Final Examination Grading Scale Approximate Examinations There will be approximately four regular written examinations taken during class time and written final examination Pop quizzes may be given at any time Assignments There will be few assignments and one major project The project is team effort Grades will be assigned individually to the members of the team Your grade on the project will be determined by your work and by your contribution to the team effort Each team member will rate all of his team members and that rating may be taken into account in assigning the grade Teams will meet with me at various times during the semester in order to assess progress on the project Attendance Policy will call roll only for informational purposes Missing class is not penalized However you will be held responsible for all work missed If you miss test or quiz without valid excuse you will not be allowed to take makeup Whether your excuse is valid or not will be at my discretion Participation in approved university events and documented illness will be considered to be valid reasons for missing class If no one has arrived to teach the class you may leave after minutes If class will not be held you will generally be informed before the class meets or at the beginning of the class period Graduate Students Graduate Students will be required to submit two written reports on approved journal articles related to the subject matter in the course In addition higher level of accomplishment is expected of graduate students on the assignments This HTML document was created by Steven Afrin on Wednesday September	course	misc
3819	 Date Tue Nov GMT Server Tue Feb GMT DISCRETE STRUCTURES II DISCRETE STRUCTURES II Spring INSTRUCTOR Srinivasan Office Room CoRE Busch Campus email srinivas Select General Information Course Syllabus and Outline of Lectures	course	misc
3820	 Date Wed Nov GMT Server Tue Jan GMT Interaction Design Project Interaction Design Project same as ME Stanford University may not be offered other years Instructors Ellen Tauber Interval Research Corporation Terry Winograd Computer Science David Kelley Product Engineering Time Schedule Information Winter unit Thursday PM History room Spring units time and place to be announced Course Description Students work in small interdisciplinary project teams to develop innovative technology prototypes to be submitted to an international student design event sponsored by Interval Research Corporation Course material will focus on software and hardware interfaces interaction and design aesthetics as well as some of the underpinnings of successful design reflective iterative design process group dynamics of effective interdisciplinary teamwork and working with users Group work and opportunities to develop skills by identifying resources Students from wide variety of disciplines including Computer Science the Design Division of Mechanical Engineering the Social Sciences for example communication psychology education and the professional schools including Business and Medicine are encouraged to join the class and can play major role in the success of their teams Because the course is based on interdisciplinary teams there is no general Rather students should have depth of knowledge in one of the relevant disciplines The spring quarter course will be limited to students and requires that the student have taken the winter quarter course Priority will be given to those who will not be able to take the course in the future and by needs to balance the teams by discipline Click here for course syllabus Click here for list of HCI courses at Stanford Information provided for the Stanford Computer Science Department by the HCI Course Coordinator as part of the description of HCI at Stanford Last updated January	course	misc
3821	 Server Date Wednesday GMT Tuesday GMT CSE Home Page CSE Introduction to Computer Architecture Fall General Information General Course Information Newsgroup Course Directory All course assignments tests and solutions after the due date are available online Please DO NOT print copies of this material on the CETS printers You may access them directly on eniac in the directory or via the WWW links given below Assignments and Solutions Examples used in Class during Lectures Examples used in the Text and old assignments with solutions Tests and their Solutions lecture All lectures and tests are given in Moore Section Richard Lou Paul Office Hours My office hours are Monday Tuesday and Wednesday from in Room Walnut Street Homeworks All homework solutions are to be mailed to Teaching Assistant Subin Shrestha subin Office hours Monday Wednesday and Friday from in Room Walnut Street Miscellaneous Related Links Upenn CIS Department Upenn Dining Philosophers Eniac Users Guide Introduction to Unix lou	course	misc
3822	 Date Tue Nov GMT Server Tue Jan GMT CS Parallel and Computation URL http Harvey Mudd College Spring Computer Science Parallel and Computation Course Personnel Instructor Robert Keller Olin MTuWTh or by appt keller muddcs Secretary Nancy Mandala Olin nancy muddcs CS Intern for account problems etc TBD Beckman TBD muddcs Catalog Description Characteristics and applications of parallel and systems Specification techniques architectures languages design and implementation credit hours Prerequisites Prerequisites CS and credit hours Texts Michael Quinn Parallel computing Theory and practice Second Edition Selected references such as papers will be provided Course Requirements There will be two or three programming assignments on parallel machines as well as some written assignments Participants will present short tutorial lectures on chosen topic Participants will choose project with the instructor approval and report the results to the class CS Topic Outline MQ denotes reading pages in Quinn book Motivation for parallel computing MQ Response time User concurrency Throughput Fault tolerance Logical structuring Example parallel applications Expression evaluation Matrix computations Database search Sorting Measuring and analyzing parallel program performance Serial parallel time speedup Efficiency Generic models Models PRAM parallel machine MQ DAG directed acyclic graph model WT model JaJa BSP parallelism Models Interconnection Networks MQ MIMD SIMD SPMD Models Dataflow Systolic arrays Functional programming Logic programming goal trees programming Architecture Studies MQ SIMD architectures Connection Machine ICL DAP Masspar MIMD architectures Shared memory Sequent Symmetry Cray Partitioned memory Paragon nCube NUMA memory access machines BBN butterfly Cedar Clusters Other architectures Dataflow Graph reduction VLIW instruction word machines Systolic arrays Neural networks Programming Review of processes communication Rendezvous Unix process management Barrier synchronization Mach Higher level Linda Futures operators Language issues Parallel decomposition Dataflow analysis Trace scheduling Languages MQ Concurrent Functional Languages Sisal MultiLisp Fortran Fortran Ada Concurrent Concurrent Prolog Strand PVM MPI Mapping and scheduling MQ Other System issues Scalability Isoefficiency metric Kumar Cache coherence Combining networks Load balancing Deadlocks Fault tolerance Algorithm Studies Elementary MQ Matrix multiplication MQ Fast Fourier Transform MQ Solving Linear Systems MQ Sorting MQ Parallel Search MQ Graph Algorithms MQ Combinatorial Search MQ Applications and case studies Finite elements Parallel logic programs Monte Carlo traveling salesman problem simulation Theorem proving Systems Characteristics and examples of systems Timing and performance issues Handling time delays and timeouts Deadline specification and scheduling Language requirements Table of Contents Parallel Computing Theory and Practice Introduction PRAM Algorithms Processor Arrays Multiprocessors and Multicomputers Parallel Programming Languages Mapping and Scheduling Elementary Parallel Algorithms Matrix Multiplication The Fast Fourier Transform Solving Linear Systems Sorting Dictionary Operations Graph Algorithms Combinatorial Search Some additional references Joseph JaJa An introduction to parallel algorithms Guy Blelloch Vector models for computing MIT Press Vipin Kumar et Introduction to parallel computing design and analysis of algorithms Geoffrey Fox et Parallel computing works Gregory Pfister In search of clusters Worldwide Web Links Supercomputing and Parallel Computing Research Groups RCS Id keller Exp keller	course	misc
3823	 Date Wed Nov GMT Server Algorithms and Data Structures Home Page Algorithms and Data Structures Course Home Page for Fall Class Time TTh Jessup Hall Professor Ted Herman follow link for office hours and email Teaching Assistant Hao Yu follow link for office hours and email Textbook Manber Introduction to Algorithms Course Goals The main theme of the course is to cover the science aspect of computer science as it is developed in the area of computer algorithms Students will get exposure to analysis of resource requirements of algorithms basic data structures commonly used in algorithm design and familiarity with the major paradigms of sequential algorithms Additional Information Pointers from this Web page will provide details of the course syllabus homework assignments programming assignments special announcements examination dates lecture summaries examples and other useful documents Many of the pointers will refer to postscript documents so the browser that you use to follow the pointers needs to have postscript document display driver or it may be that your browser will allow you to download the postscript to local file that you can format for display and printing Links to documents that have been recently changed have symbol next to the link News Nov Examination results for third exam posted Syllabus follow this link Examinations First examination was September to see solutions follow this link second examination was October to see solutions follow this link third examination was November to see solutions follow this link Grading results examinations and homeworks Lecture Summaries Oct up to Nov Graphs and Paths Oct Oct Sorting Oct Oct Search Trees Sep Sep ADTs Hashing Sep Sep Recursion Sep Sep Sep Analysis Sep Iteration Aug Aug Sep Induction Homework follow this link Reading follow this link Programming Assignment The second assignment is due December for details follow this link Nov Third examination was held November exam and solutions have been posted Nov Solutions to sixth homework posted Nov Sixth homework posted due November Nov Lecture summaries for November posted Nov Reading assignment for Chapter posted Oct Solutions to fifth homework posted Oct Second programming assignment posted due December Oct Fifth homework posted due October Oct Reading assignment for Chapter posted Oct Examination grades posted Oct Second Examination was on October questions and solutions posted Oct Solutions to fourth homework posted Oct The first programming assignment is due on Tuesday October Oct Readings for Chapter posted Oct New homework posted due October Oct Solutions to third homework posted Sep Readings from textbook now includes most of chapter and some important exercises to read see details on readings page Sep Lecture notes on search trees posted Sep Third homework assignment posted due October Sep Readings from text updated Sep summary of the exam grades is posted Sep First examination questions solutions and grading guidelines are posted on the examinations page Sep Lecture notes for Sep are posted Sep preview of the first programming assignment has been posted Sep Solutions to second homework posted Sep Lecture notes on recursion posted Sep Second homework due September posted Sep Lecture notes for analysis notation posted Sep Another hint on printing postscript see below Sep Solutions to first homework posted Sep One class member offers the following advice on how you can print postscript from Mac in any ITC The method requires that you print on the laser printer which means you need to have laser punchcard the postscript wo print on an imagewriter These are the steps Make sure the laser printer is selected by using chooser under the apple menu Use netscape to download the postscript file to local disk Open tcp connect II under the file menu There is command called print postscript file under the file menu of tcp connect Open this function find the file you had previously saved and open it Sep Reading guide updated Sep Additional lecture notes for and Sep posted Sep Postscript Viewers no guarantee for the following pointers gathered some files from archives on the Internet but have not tried these myself Notice that these are rather large files so do try to download via modem perhaps in an ITC you can download them For PC the following combination of files gives you ghostscript and ghostview ghostscript is necessary for ghostview For the following viewer claims to display using TrueType but not sure it would handle the figures and equations in the lecture notes For Macs we have use this one for Macs or Power PC Macs this one is for Power PC Macs only Aug HOW TO SAVE postscript file and bypass ghostview under Netscape instead of pressing the left button on the link press the right button on your mouse that will give you an option to Save Link As Then save the file in source format after you save it maybe you can use some other tool to print or view it Aug Reading for Chapter Aug First homework posted due September Ted Herman Thu Nov	course	misc
3824	 Date Wed Nov GMT Server Wed Nov GMT Software Design and Implementation Software Design and Implementation Computer Science Times Arrange Instructors Cormen winter Nicol spring Prerequisite Computer Science or Dist TAS Techniques for building large reliable maintainable and understandable software systems Topics include programming paradigms for real systems systems programming tools interfaces for both and workstation programming environments functional programming software engineering structured design testing and documentation Concepts are reinforced through technical and cultural readings written homework several programs and one group programming project Back to Dartmouth CS Home Page	course	misc
3825	 Date Wed Nov GMT Server Thu Apr GMT Natural Language Processing Natural Language Processing Instructor Mike Gasser Make an appointment with me Send me message Time TuTh Room Woodburn Contents Announcements Topics Coursework Other sources of information Schedule Announcements Here is the final exam fairly primitive program for playing with Holographic Reduced Representations Plate is at on the sharkestra moose and department SGIs Here is enough information to get you started with it Here is new optional paper by Paul Rodriguez on languages and simple recurrent nets Topics This course provides an introduction to the field of natural language processing or computational linguistics including both analysis and generation Speech processing machine translation and computational approaches to language acquisition and language evolution are also given some attention wide range of linguistic phenomena including phonology morphology syntax and semantics and pragmatics will be treated and examples will come from various languages We will be concerned both with how well particular approaches solve practical problems and with how well they model human data The course is divided into two relatively separate components The first deals with symbolic approaches to language processing We will cover parsing and generation algorithms emphasizing modern approaches but will spend more of our time considering the sorts of grammars that support parsing and generation With respect to theory and notation we will stick mainly with Phrase Structure Grammar probably the most popular approach in computational linguistics today The second component of the course deals with statistical and connectionist approaches to language processing which despite their very different origins and motivation share many underlying mechanisms as well as lack of linguistic knowledge We will emphasize the acquisition of knowledge phonological morphological syntactic semantic temporal processing and the relation between perception and the The course schedule however will be organized around topics rather than approaches Thus we will look at morphology approaches to parsing and semantic case for example in each case considering how both symbolic and approaches deal with the problem For each topic we will also look at acquisition as well as processing Coursework and Prerequisites Students should have some background in AI such as and be able to program in Scheme or Lisp Some linguistics background would also be very helpful but is not required Cognitive science students from outside of computer science are encouraged to enroll Coursework includes Project This may be done in collaboration with others in the class It should include running program though this can be based on existing software in the case of connectionist models and report which relates the work to other work in the area An attempt will be made to relate projects to each other by constraining the type of language that is handled Grading paper relevance originality success lessons learned Suggestions for projects simple story you might want to use for your project Exams There will be two exams each covering half of the course You need only take the portion of each exam covering the approach symbolic or which is not related to your project Discussion of papers Students will be responsible for leading discussion of some of the papers we will be reading Here schedule Readings for the class will be kept on reserve in Swain Library copy will also be left in box in the Computer Science Department Copy Room Reading list Discussants for readings Class Newsgroup Some Other Sources of Information The Computational Linguistics Archive ACL Home Page The Natural Language Software Registry Information on Igor Tutorial on One Approach to NL Generation Tutorial on Speech Visualization Index to various sites PC Kimmo and Related Programs The Language Software Helpdesk Schedule Week Introduction Tu The field Questioning everything sacred Th The big picture Dimensions along which approaches vary Kinds of linguistic knowledge Overview of connectionist models Week Words Phonology Morphology Symbolic Approach Readings Gazdar and Mellish ch Antworth Tu Phonology and morphology linguistic introduction updated Week Words Phonology Morphology Connectionist Approaches Readings Gasser Regier Tu recognition Acquisition of morphology Th Project ideas Reduplication challenge to morphology models Week Words Lexical Semantics Symbolic and Connectionist Approaches Tu Lexical semantics approach to lexical relations Ari Tour of LETRS Main Library Week Words Lexical Semantics Statistical Approaches Speech Readings Allen Appendix Tu Grounding word meaning Doug disambiguation Th Speech Week Phrases and Sentences Grammars Augmented Grammars Reading Gazdar and Mellish ch Tu Syntax and semantics Th Grammars Week Phrases and Sentences Syntax and Semantics Compositionality Tu Grammars More problems with simple grammars Yes this is an old slide from Introduction to grammars Th What HPSG grammars look like Week Phrases and Sentences Unification Grammars Tu What HPSG grammars look like Th Unification revisited Parsing Week Phrases and Sentences Connectionist Syntax and Semantics Readings Pollack Elman Tu Another HPSG example The problem of structure in connectionist nets Th Connectionist approaches to structure Pollack Jeff Week Phrases and Sentences Connectionist Structure cont Parsing Tu Elman Andy More on connectionist structure Th Some parsing issues Week Phrases and Sentences Parsing and Generation Approaches Readings Lange and Wharton Tu Chart parsing Ambiguity Th Some approaches to sentence generation Lange and Wharton Jim Week Machine Translation Statistical Approaches Again Discourses Symbolic Approaches Readings Hutchins and Somers Allen ch Tu Localist connectionist networks Statistical approaches to syntax Th Machine translation Hutchins and Somers Michael Week Discourses Symbolic Approaches Tu Machine translation cont Pragmatics overview Speech acts Speech acts Week Discourses Symbolic and Connectionist Approaches Reading John Tu Progress report on project due John Wendy Using world knowledge Th Discourse structure of topics metaphor metonymy humor deception none of which have good account of Week Language Acquisition Revisited Tu Comparison and analogy mental spaces Th Language acquisition Parting thoughts Final exam Week Mo Exams due electronically Tu Reports on projects Project reports due Last updated December URL http Comments gasser Copyright The Trustees of Indiana University	course	misc
3826	 Date Tue Nov GMT Server Thu Nov GMT title page CSC Ethics in Computing This course is survey of the ethical issues involved in computing It discusses the way that computers and software pose new ethical questions or pose new versions of standard moral problems and dilemmas It stresses case studies that relate to ethical theory Welcome to the web page for CSC Course information Course policy Syllabus with links to reading material and discussions NetForum discussions Last year final exam for help in studying Computer Science Department efg Edward Gehringer	course	misc
3827	 Date Wed Nov GMT Server Mon Oct GMT Top page CSCI Mastering the World Wide Web Fall Sections Lecture Labs Instructor Rick McMullen mcmullen cs Assoicate Instructor Jerry Franke franke cs Lectures Monday and Wednesday Lindley Hall Hall Thursday Friday Lindley Friday Lindley An advanced course on Web technology offered by the Computer Science department at Indiana University NOTE This course no longer requires authorization for registration You should check the programming prerequisites though and be sure you meet them to get the most out of the class If you are unsure about whether your programming background will be sufficient send mail to Rick McMullen Course information General information about course mechanics Course topics Syllabus Resources newsgroup Lecture notes Homework and reading assignments Term project description Student term projects Term project suggestions for the desparate Midterm key Assignment notes have incorporated the changes Jerry Franke and Greg Hormann suggested in the code in There are also some more hints in the source and diff files for the two source files that edited and Course Overview This course is intended to provide technical programming and administrative background and experience for career with the Web Students should have at least two semesters programming experience or its equivalent and be comfortable working with an operating system such as Unix or DOS They should also have familiarity with the Internet and the Web such as could be gained in CSCI Working the Web Topics to be covered include web server administration advanced web design and authoring web protocols HTTP gopher FTP WAIS news mail interfacing services into the web HTML forms CGI searching and indexing technologies and strategies programming for the web perl Java technologies VRML secure executables encryption As needed for understanding the Web background will be provided on Internet network protocols and programming standards relating to the Web eg URI SGML MIME MPEG JPEG and the historical context of the technologies Also throughout the course consideration will be given to the economical sociological ethical and legal ramifications of the Web and the Internet in general The course will be very and projects oriented Students should gain direct knowledge and experience of how to run web site with full functionality and how to keep current with these technologies Lectures and discussions will utilize projected computer display for the instructor Primary Texts Build Web Site by and Devra Hall Prima Publishing Learning Perl by Randal Schwartz Associates Other materials as indicated in class mcmullen original course materials by Steve Kinzler	course	misc
3828	 Date Tue Nov GMT Server Fri Nov GMT Fundamental Algorithms Spring Fundamental Algorithms Spring Professor Chee Yap Course Information Ftp pickup site Homework solution sample test etc	course	misc
3829	 Date Wed Nov GMT Server Tue Nov GMT Fall Indiana University Computer Science Department Programming Languages Fall General Information Overview Textbooks Syllabus Assignments Tools and Advise Grading Administrivia Course Evaluation General Information Instructor Christopher Chris Haynes email chaynes Associate Instructor Gustavo Gomez email ggomezes Credit Hours Requirements Prerequisite and or Corequisite Lecture Section meets Tuesday and Thursday to in Discussion Sections Section meets Monday to in Section meets Wednesday to in Office Hours Tuesday to in LH Chris Haynes to in LH Chris Haynes Thursday to in Gustavo Gomez to in LH Chris Haynes to in LH Chris Haynes Local newsgroup Web URL http Catalog Description Systematic approach to programming languages Relationships among languages properties and features of languages and the computer environment necessary to use languages Overview This course provides an introduction to the foundations of programming languages allowing thorough understanding of programming language semantics and critical implementation characteristics This provides the basis for the best choice and use of existing languages as well as language design Interpreters and other programs are used throughout to present the essential elements of programming languages in precise analytic manner The extensive use of interpreters in this course also develops skill in abstraction powerful programming paradigm To thoroughly understand programming languages or most any topic it is necessary to have variety of models or views at varying levels of abstraction In this course we will employ range of models from very almost mathematical semantics to very almost assembly language and emphasize the connections between levels Scheme is used as language throughout the course but this course is about fundamentals that are the basis for most programming languages not just Scheme Special attention will be given to modeling the semantics of the Java language via series of type checkers and interpreters slide presentation available in condensed form summarizes these points and others Topics include Induction Recursion and Scope Direct semantics interpreters style interpreter Imperative form and stack architecture Static and dynamic semantics for programming architecture Materials Required Essentials of Programming Languages by Friedman Wand and Haynes This text known hereafter as EOPL should be available in any of the three big textbook bookstores Aristotle or the Bookstore but you may get it cheaper if you can find grad or undergrad student taken or and is willing to part with it Recommended The Little Schemer by Friedman and Felleisen This should also be available in the bookstores and couple copies are on reserve in the Swain Hall library The Little Lisper is older but similar Other Other materials may be required through the semester These materials will be announced in class and will be made available through the White Rabbit on Indiana near Kirkwood and will cost few dollars to cover copying costs Syllabus Read the indicated material for each week before the week begins You are not expected to understand the material on first reading but having read it once first you will be much better prepared for class and discussion sections Read the material for the first two weeks in the first week much of it should be review More material on Java will be made available later Links in the list below are to the lecture scripts Week of September Re introduction to Scheme EOPL preface and chapter chapter through section and chapter through section Week of September Static Properties of Programs EOPL remainder of chapters and Week of September Quiz Imperative programming Chapter sections and Simple interpreters EOPL chapter through section Week of September Local binding procedures and assignment EOPL sections through Week of September Recursion and dynamic scope EOPL rest of chapter Weeks of October style EOPL chapter sections and Week of October CPS rules EOPL chapter sections and First exam Week of October interpreter continuations as records and reified continuations EOPL sections through continuations and exception handling Week of October Imperative form and control stack architecture EOPL sections and thoroughly Week of November Environment stack architecture EOPL rest of chapter for general information not responsible for code details Paramater passing EOPL chapter not responsible for material involving arrays Week of November Second exam Introduction to programming and Java EOPL section Week of November Java programming tutorial Java type checker and interpreter Week of November Thanksgiving break Week of December More programming Java style EOPL section for general information Also emphasis on the importance of virtual member functions in as illustrated by Week of December Advanced Java topics Classes Attendance at discussion sections is mandatory Usually problem or set of problems will be given out at the beginning of discussion section and the class will be broken up into small groups to solve the problems The AI leading the discussion section will go between groups answering questions and asking questions about the work done so far and about the class material Your answers to these questions and your progress on the problems given in discussion section will count toward your final grade Some lectures may also be conducted in this manner and some other lectures will present material not found in the book Do miss class Assignments For the most part assignments will be handed in by email to an automatic checker with feedback emailed back almost immediately Assignments may be prepared on the system of your choice but should run properly using Chez Scheme version Homework will be graded by hand but the automatic checker will detect some errors An assignment will usually be given each week Assignments will be added to the list below by on Friday and due before the next Friday Late assignments will not be accepted Assignment Due Solution Basic Scheme Static Properties Simple Interpreter Procedures and Assignment Recursion and Dynamic Scope Exam in class on no assignment solution CPS Transformation CPS with Abstract Continuations CPS with Registers and Stacks solution Exam in class on no assignment solution Call by by reference Tools and Advise Our web has information on use of Scheme at IU including emacs support We will be using few Scheme extensions not mentioned in EOPL Points will be deducted on the homework quiz and exams if the cardinal rules of indentation are violated so make it habit to follow them whenever you write Scheme code This will greatly aid your Scheme programming Though emacs is big help it is strongly suggested that you write solutions to all exercises by hand and check them carefully for correctness before approaching computer This will give you practice at indentation by hand which is necessary for exams and more importantly it is in most cases much easier to find mistakes in this course exercises by thinking about them than by debugging The assignments do count whole lot toward your grade but extensive experience has shown that students who do not make serious effort to do the assignments independently do poorly on exams Experience has also shown that if most students spent much more time with paper and pencil before approaching computer they would spend much less time debugging and better understand their programs An hour with pencil is often worth several at the keyboard Grading The following is tentative schedule for evaluation with approximate percentage contributions to the final grade Self assessment Quizette percent Scheme Quiz September in class percent Write in minutes several programs similar to those in the first assignment answers Exam One October in class on EOPL chapters through percent sample exam from last spring is available Exam Two November in class on material covered in class through November does not include chapter parameter passing percent sample exam from last spring is available Final Exam December percent The final will cover the whole course with emphasis on material after the second exam sample final from last spring is available Assignments percent Subjective assessment based on attendance participation and preparation for lectures and discussion sessions percent The sample exams are provided only to provide general idea of what to expect The content of the course this semester differs somewhat especially after the second exam Administrivia Incompletes An incomplete final grade will be given only by prior arrangement in exceptional circumstances conforming to departmental policy in which the bulk of course work has been completed in passing fashion Possibly Important Dates September Last day to the course October Last day to drop the course on your own December Last day to drop the course with approval Academic integrity For your ethical pleasure you should read the Computer Science Department statement on academic integrity It dry but important Course Evaluation Before the end of the semester please complete the electronic Course evaluation forms for Chris Haynes and your discussion section AI Gustavo Gomez Chris Haynes chaynes	course	misc
3830	 Date Tue Nov GMT Server Mon Nov GMT title page CSC Software Engineering Syllabus Assignment LaTeX source Project Pages Groups List Assorted Links All Grades Lecture Notes Mon Nov Wed Nov Mon Nov Wed Nov Mon Nov Wed Nov Mon Nov Mon Oct Wed Oct Mon Oct Announcements Here is the second extra credit description Here is the source code for the second extra credit This is the story on the Ariane rocket failure Here is the first extra credit assignment Enjoy Here is the code sample from class Here the peer review policy This is grading policy for the projects Here is the new midterm review page Here is my revised version of the Recipe Program Functional Overview We will have quiz in class on Monday Here is review of topics we have covered The final exam will be on Friday from Here an update on the Internet Explorer bug we discussed Computer Science Department Instructor TA Andrew Freeman jrossie	course	misc
3831	 Date Wed Nov GMT Server Wed Nov GMT Home Page Language Implementation Fall Kent Dybvig and John Zuckerman Contents Electronic Communication Office Hours Readings Course Goals Course Topics Projects Project Information Quizzes Online Project Code Course Evaluation Electronic Communication Class newsgroup Class homepage http Dybvig dyb Zuckerman johnz Office Hours Dybvig or by appointment Zuckerman by appointment Readings Alpha AXP Overview by Oscar Waddell Alpha AXP Assembly Language Guide available online via dxbook Chez Scheme System Manual Report on Scheme also available in postscript The Scheme Programming Language second edition optional Code Generation IU Technical Report Additional reading material to be announced Course Goals Understand the basic structure of compiler Develop capability to design and implement the various pieces Understand more fully how languages are implemented Course Topics Overview Lexical analysis Syntactic analysis parsing storage management Parameter passing mechanisms Code generation Projects Lexical analysis and parsing of Scheme objects due Fri Sep Parsing of an alternative algebraic syntax due Fri Oct Code Simplification due Fri Oct Code Simplification II due Fri Nov Code Generation due Sun Dec Project Information All projects are coded in properly indented Scheme Code generator generates assembly code for the Alpha AXP processor Projects should be run on zinc or copper click here to request an account Written project reports are required as well as electronic submission of code Projects are graded on style presentation and efficiency as well as function Projects require significant amount of time and effort so start early Care and neatness pay off Each project counts equally towards final grade Some project due dates have grace period during which projects may be handed in without penalty Please make an effort to hand in your projects by the official due dates and use the grace periods only for emergencies You will fall behind if you consistently miss the due date as the class will have moved on to the next topic by the time the official due date has passed Quizzes May be given any time notice Do not count towards final grade Misc See the individual project web pages for information on testing your projects Course Evaluation TBA dyb	course	misc
3832	 Date Tuesday GMT Server The CS Homepage The CS Homepage Last updated special event On we will show the short film Sorting Out Sorting in class commercial Next semester will be teaching CS Computability and Complexity The time and place for CS have been changed to am MWF in All students should read this file about proofs and plagiarism Equally mandatory reading is the following How to deal with your professor The Syllabus Homework Thursday at the beginning of class pp draw picture use induction to show that this property holds at each stage of the algorithm either give pseudocode or explain how to modify the algorithm with reference to the pseudocode in the book Problems to think about and not hand in Homework Thursday Dec at the beginning of class assume that every vertex of the graph has at least one edge to from it Show that is in the same connected component as defines an equivalence relation on the vertices of an undirected graph Does is reachable from define an equivalence relation on the vertices of directed graph Practice problems for the second midterm Homework due dates September October November December the Tuesday after and the Solutions to homework Info on scholarship for seniors graduating in May to pay for next semester Old stuff from this page including means and medians of homeworks and exams Algorithms Textbook Bibliography This is list culled from various online bibliographies thus the different formats of some of the algorithms books consult Please consider doing little tutoring There is real need for instance for CS discrete math tutors you get to set your hours you help fellow students and you earn money What more could you ask for tutoring opportunity lectures My home page Sites you should visit Every student should read this Whining Lowers Grades The rest are here for your amusement and edification True Lies Told By Graduate Students SACM stuff Ian Parberry Speaker Guide What Every New Grad Student Should Know Dilbert Robotman	course	misc
3833	 Date Tue Nov GMT Server Thu Feb GMT Introduction to Computer Science Introduction to Computer Science Spring Credits Objectives To provide the requisite foundation for future courses in Computer Science by developing the necessary programming and problem solving skills structured problem solving programming in language testing documentation and style with brief introduction to several key areas of computer science namely Searching and Sorting Data Structures Numerical Computations and Machine Representation This course is intended for those students interested in specializing in computer science although it is accessible to anyone with some mathematical sophistication Prerequisites or placement in Calc Outline Algorithms and Elementary programming in Pascal on Apple Macintosh Programming style testing and debugging Structured data in Pascal arrays records Searching and sorting Procedures and functions recursion Introduction to dynamic data structures linked structures queues stacks trees Elements of program life cycle including program representation Expected Work programming assignments Examinations hourlies final exam Course Materials Course Syllabus Handout Parameters Handout Procedures Project Handout Representations and Addresses Handout Catastrophic Error	course	misc
3834	 Date Wed Nov GMT Server Sat Jun GMT CIS syllabus fall Programming Language Design and Analysis Spring MWF Dave Schmidt Instructor Office Text The Structure of Typed Programming Languages by Schmidt MIT Press Supplemental material Introduction to Standard ML by Robert Harper Available from Union Copy Center about We will study how programming languages are designed how to analyze programming language with tools like abstract syntax definitions typing rules and denotational semantics how to use languages with typing systems that go beyond those in languages Lectures OF LECTURES The core language The abstraction principle The parameterization principle The qualification principle Lambda abstraction and records Lambda calculus Propositional and predicate typing Prerequisites first course in comparative programming languages knowledge of and elementary understanding of structure of compiler Grading Exercises will be selected from the exercise sets at the end of each chapter of the text Exams will be given at midterm and at the end Note to undergraduates regarding course prerequisite The prerequisite for this course is If you have not taken you must see the instructor immediately The Engineering College may choose to drop you from this course without notice if you do not have the prerequisite course It is your responsibility to drop the course if you are enrolled but decide not to complete the course Note on the University policies regarding academic dishonesty Plagarism and cheating are serious offenses and may be punished by failure on the exam paper project in which cheating occurred or by failure in the course or even expulsion from the University Details are given on Pages in the Student Life Handbook which is contained in the KSU Campus Phone Book Joergen Steensgaard jsm at the Danish Technical Institute Lyngby has assembled an impressive web site for course he taught which is similar to this one Dave Schmidt schmidt	course	misc
3835	 Date Wed Nov GMT Server Fri Nov GMT Introduction to Distributed Systems Introduction to Distributed Systems Amr El Abbadi Department of Computer Science UCSB TR Engr Fall Units Welcome to the home page for General Information Instructor Amr El Abbadi Office Engineering Office hours TR Email address amr Teaching Assistant Xun Cheng TA office Trailer TA office hours Tuesday and Friday Email address xun Format In this class will be presenting some of the fundmental topics that form the basis of research in Distributed Systems The topics we will cover are in no way exhaustive and of course they reflect my own subjective biases will be using Tanenbaum textbook as well as short collection of papers This combination should help expose you to both some practical and well as theoretical aspect of distributed systems expect you all to read the chapters and papers that discuss in class strongly encourage you to come and talk to me about any distributed systems topics that are not covered in this list expect to hand out homework assignments Some of these will involve programming some of the basic ideas discussed in class Some of the homeworks may involve reading paper that is related to the topic being discussed in class have put several books on reserve in the library some of which may provide some background material while others complement the class Textbook and Notes Distributed Operating Systems Andrew Tanenbaum Prentice Hall Additional papers are available at The Grafik Arts Policies and Exams There will be one in class on October and final exam Requests for exam and homework regrades must be submitted within weeks of their return Finally grades will be approximately allocated as follows final homeworks and projects Course Related Information Help on Socket Programming How to turn in Homework Sample running result for Problem in Homework Turnin method and format for Problem in hw are the same as those for Problem in hw except replacing with Handouts Homework Xun Cheng Last modified Thu Nov PST	course	misc
3836	 Date Tue Nov GMT Server Tue Aug GMT Computer Architecture Computer Science is sophomore level introduction to computer architecture The syllabus gives an overview according to how last taught the course which was in Spring Back then we used set of lecture notes for the course which are collected into form All of the problems and solutions are given The course notes are reproduced at the beginning of each semester and are available from the Reprographics service in the Busch Campus Center for about You can take peek at the first few chapters which have been placed The PostScript version is also accessible from the version in case is too rough on your book budget But do go printing the whole pages on our Rutgers printers Beware that different hardcover textbook was used in the Summer session and Fall and that may use that textbook when lecture the course again My current plan is to use the lecture notes as supplement to the textbook though you would not be expected to buy the whole stack We would probably distribute portions free of charge in that case Online UNIX documentation for Rutgers systems We will use the Rutgers computing facilities for some of the coursework Have look at the documentation for how to use our facilities	course	misc
3837	 Date Wed Nov GMT Server Fri Nov GMT CPS FALL CPS Fall Introduction to Programming Design and Analysis Assignments Labs Quiz Grades Lecture Notes Old Tests FINAL EXAM is scheduled for Friday This page contains materials for Rodger CPS course Ramm CPS course here Course Materials and Handouts Check Teer and Carr cluster staffing schedule Setting Permissions Course Syllabus Read the CPS Newsgroup Contacting Professors or TAs Contacting Lab TAs Is this the right CPS course for you Lecture Notes Introduction Ch Program Construction Ch Parameters Input and Arithmetic Ch Classes and Compiling Ch Conditionals Ch Functions Returning Values Ch Remaining Lecture notes from Ramm Lecture Lecture Lecture Lecture Lecture Lecture Lecture Lecture Lecture binsearch addsorted Lecture binsearch addsorted charplot Lecture Printing Lecture Notes that are in Postscript format For files that are in postscript format you need postscript previewer You should be able to view them on the SparcStations If you want to print them while viewing them select save and save as file with extension for example You can then send the file to the printer by typing lpr Random Quizzes Quizzes are now located here Grades current grades points per item Last modified Sept or later forget to update this by Susan Rodger rodger	course	misc
3838	 Date Wed Nov GMT Server Sun Sep GMT Topics in Interaction Topics in Interaction Stanford University Topics of current research interest in interaction Contents change from quarter to quarter May be repeated for credit Plans for courses this year are not yet definite Potential courses for Winter and Spring are Digital Multimedia Tools Environments Also listed as Music Stephan Schwanauer Sumitomo and CCRMA Planned for Spring Mondays Interactive External Cognition Seminar Stu Card and Peter Pirolli Xerox PARC Filmcraft in User Interface Design enrollment limited to Chuck Clanton Aratar Information Design Nathan Shedroff vivid Reactive and Proactive Computer Agents Ted Selker IBM Overview Degree Programs Courses Faculty Research FAQ Information last updated by winograd September	course	misc
3839	 Date Tue Nov GMT Server Sun Apr GMT Fundamental Algorithms Home Page Fundamental Algorithms Wednesday Problem session Monday Room Warren Weaver Hall Professor Ernest Davis Reaching Me davise phone office Warren Weaver Hall office hours Tuesday and Thursday Syllabus Instructions for course email list Problem set due Solution set Problem set due Solution set Problem set due Solution set Problem set due March Solution set Probs and Solution set Prob Problem set due March Solution set Problem set due April Solution set Problem set due April Topics on final exam Sample final exam	course	misc
3840	 Date Wed Nov GMT Server Tue Jul GMT syllabus fall Computability Theory Autumn MWF Dave Schmidt Instructor Office Text Computability by Nigel Cutland Supplemental notes will be available later in the course Objectives to understand and appreciate the fundamental requirements of an algorithm and programming language what can and can not be programmed fundamental counting techniques for computer science time and space complexities of solvable problems applications of the above concepts Lectures OF LECTURES Minimal assembly language Capabilities of assembly language equivalent formulations functions Turing machines Church thesis Basic enumeration techniques theorem Universal algorithms Undecidable problems Recursively enumerable sets Reducibility The recursion theorems Introduction to complexity theory The complexity classes and NP Prerequisites or Grading is based primarily on homework exercises but there might also be one or two exams Dave Schmidt schmidt	course	misc
3841	 Date Wed Nov GMT Server Introduction to Computers Boston University CAS Computer Science Dept CAS Introduction to Computers CS is general introduction to computers and their applications that assumes no previous knowledge of the subject introduces computers and their uses in the arts and sciences what they are how they work how they can be programmed what they can and can not do It is for people who read about such topics as microprocessors or the WWW and want to understand them for people who need to have data processed on the job and for people who see the computerization of our society and ask about the meaning of it all Instructor Name Bob Gaimari Email rgaimari Office ext Hours Thur Fri or by appointment Teaching Fellow Name Rob Pitts Email rip Office ext Hours Mon Tue Thu Class Meeting Time Place STO Course Archives Course Syllabus Homeworks Archive Miscellaneous Handouts Discussion Sections Student Home Pages Not available outside the CS cluster This document has been adapted from one prepared by Professor Azer Bestavros best Created on February Updated on March	course	misc
3842	 Date Wed Nov GMT Server Wed Nov GMT CS Home Page CS Learning and Software Engineering Fall Instructor Scott Woodfield Office TMCB Hours MWF Phone woodfiel Teaching Assistants Butch Istook istook Mark Laird laird Jo Spencer spencer Office TMCB Office Hours New Things Course Goals You will learn software development using in Unix environement We will emphasize design programming in testing makefiles and simple configuration managment Text How to Program by Deitel Deitel this is required Learning GNU Emacs Cameron NOT Required Learning the Vi Editor Linda Lamb NOT Required Unix in Nutshell Aho NOT Required Managing Projects with Make Andrew Oram NOT Required Workload Quizzes There will be several surprise quizzes Approximately of your quiz grades will be dropped Projects There are projects Testing Program Adding the Gender Class Adding Names Adding Standard Events Testing Simple Interaction There will be no TA help for Projects and In Lab Tests THE SPECS FOR THE IN LAB TESTS The Game of Life Calculator CLICK HERE TO START THE TEST click here to stop the test There will be Programming Tests One will be taken during the Final Exam Week before the final For two programming tests including the final you will be given in advance list of several programming problems When you arrive at the lab to take the test you will be told which problem to program You will have hours to implement solution Final in Class Communication We would like to meet with you when you have problems but if you ca please use Much of the information for the class will be given through this web page and via newsgroup Other Points of Interest Grades to Grades to Schedule Lectures Grading Guidelines Frequently Asked Questions Newsgroup Examples of Similar Projects OSA Tutorial UNIX tutorial Discussion of White Box Testing in Examples of Exception Usage Pascal to Command Conversion YOU ARE RESPONSIBLE FOR ALL INFORMATION CONTAINED WITHIN THIS SYLLABUS ANYTHING ON THE WEB AND ANYTHING SAID IN CLASS Last updated October Scott Woodfield woodfiel	course	misc
3843	 Date Wed Nov GMT Server Tue Sep GMT Algorithms and Data Structures Algorithms and Data Structures Computer Science Times Arrange Instructors Drysdale Prerequisite Computer Science and Students are expected to be familiar with basic concepts from graph theory discrete mathematics linear algebra and probability The main topics of the course are paradigms for designing algorithms divide and conquer greedy method structured search balancing dynamic programming scaling problem reductions and the criteria for their analysis average case lower bounds sensitivity amortization resource tradeoffs The course deals primarily with the classical sequential algorithms but also introduces parallel distributed random probabilistic and approximation algorithms as time permits The techniques are illustrated with algorithms for several domains drawn from among information retrieval graphs networks matroids string matching cryptology arithmetic matrices and algebra Many examples of important data structure and algorithms are described Back to Dartmouth CS Home Page	course	misc
3844	 Date Wed Nov GMT Server Advanced Computer Architecture Advanced Computer Architecture Course Syllabus Textbook and References This document has been prepared by Professor Azer Bestavros best Date of last update September	course	misc
3845	 Date Wed Nov GMT Server Computer Science Fall Computer Science Automata and Formal Languages Fall Syllabus Click here for postscript version of Homework Due Thursday December LATE HOMEWORKS ACCEPTED Click here for postscript version of Homework Due Tuesday November Click here for postscript version of Homework Due Tuesday November Click here for postscript version of Homework Click here for postscript version of Homework Click here for postscript version of Homework Instructor David Martin MCS second floor in Graduate Student Lane my office department office messages only Click here to send mail to dm Office Hours Monday Tuesday Thursday Watch for additional or altered hours as the semester progresses Classroom and Meeting Times Classes meet Tuesday and Thursday according to standard BU conventions in MCS the basement of Cummington St Required Textbook Automata and Formal Languages An Introduction Dean Kelley Prentice Hall Other Useful Books Elements of the Theory of Computation Lewis Papadimitriou Prentice Hall Introduction to Automata Theory Languages and Computation Hopcroft Ullman Prerequisites To enroll in this course you must have satisified the following course requirements If you have done so but still want to remain in the course please see me MA Discrete Mathematics CS or CS Programming Data Structures in Topics This course is core requirement in undergraduate computer science curriculums at most colleges Its purpose is threefold first to encourage you to investigate the nature of computation second to further develop your formal reasoning and writing skills and third to add new techniques to your programming bag of tricks Accordingly we will develop several formal models of computation each more powerful than the last At each stage we will prove some of what our intuition suggests and sometimes what it denies about these models We will also see how most models admit two very different characterizations one of machines that are able to recognize certain events and another of grammars that are able to generate exactly what these machines recognize In particular we will study regular languages regular expressions finite deterministic and nondeterministic automata grammars pushdown automata turing machines and more if time allows Grading Homeworks Midterm Thursday October Final Saturday December Note that each test is worth homeworks The tests will be much simpler than the homeworks Homework Assignments When writing up your homework there are two goals you must keep in mind first to give evidence that you have put real thought into the problem and second to convince the reader that your solution is correct and that you know why As programmer you have some experience with this sort of writing an effective program must be written for both compiler and human reader Similarly solutions to your problems must be correct in the sense of solving the stated problem but they must also be comprehensible to the grader As with any writing the first draft of problem solution is usually unpresentable All of the pieces may be there but they tend to be chaotically assembled The single most important thing you can do to make your solutions presentable is to rewrite them after you have discovered why they are correct and then to throw away or at least tuck away your initial draft Remember scratch paper is cheap Be careful to realize that this emphasis on presentation has nothing to do with whether English is your native language or whether you prefer to write your solutions with pencil pen quill or word processor solution starts by stating assumptions and then works towards clearly defined goal emphasizing the overall direction and omitting the superfluous Late Policy In general you will have at least one week to work on homework assignment and at least three opportunities to attend my office hours before that assignment is due Assignments turned in late for any reason will be marked late and will be scored at of their face value Assignments turned in more than week after they were due will be scored at of their face value that is we will still attempt to evaluate them but they will not count towards your grade For excused lateness such as illness and family emergency see the Grading Appeals section below Collaboration and Plagiarism vi LL collaboratus pp of collaborare to labor together fr laborare to labor to work jointly with others esp in an intellectual endeavor to cooperate with or assist usu willingly an enemy of one country and esp an occupying force to cooperate with an agency or instrumentality with which one is not immediately connected Collaboration is encouraged primarily in the first and third senses when working on homework problems and preparing for exams None of the problems in this class are intended to have secret solutions the more resourceful you are at discovering solutions the more time you will have to write them well Indeed if you are stuck on problem will be happy to talk with you about it during office hours However the solutions you turn in must be your original writing Copying prepared solution is not collaboration at all it is plagiarism also vt to steal and pass off as one own the ideas or words of another to present as one own an idea or product derived from an existing source Plagiarizing another words is not tolerated at Boston University It is so disdained that there are specific procedures for accusing and punishing those who plagiarize Do not copy another person work and present it as your own The above definitions were snatched from the Webster server at BU Grading Appeals Simple clerical errors will be corrected as soon as they are brought to my attention Perhaps you will disagree about the grading of particular problem or feel that an instance of lateness was justified In order to bring this to my attention you must prepare written appeal with supporting documents and give it to me during the last week of class will carefully consider these appeals and make reasonable adjustments to your benefit when preparing the final grades This is only mechanism for dealing with my gradebook in fair manner You are always welcome to approach me with your concerns If you do know whether or how to write an appeal use this as guideline am likely to look more kindly upon That was just really bad week for me than My homework was always late because uh had headache Attendance Attendance is not an official part of the course grade but it is your responsibility to stay informed Some announcements will be made only in class Mailing List Other announcements will be made only by email To add yourself to the course mailing list log on to CS cluster computer such as csa and type csmail The Computer ABC of claimed to be the first electronic digital computer Photo courtesy of the History of Computing Page at Virginia Tech Prepared by David Martin Click here for information on other courses	course	misc
3846	 Date Tue Nov GMT Server University of Michigan EECS Computer Architecture Professor Trevor Mudge TA Steve Hatala TA Mark Davis Please send comments and suggestions to mdavis By the way you should use the current version of Netscape or MS Internet Explorer to see framing	course	misc
3847	 Date Tue Nov GMT Server Sat Aug GMT CSC Introduction to Computing Homepage Section Section Section Course Objectives CSC is an introductory course in programming using the language Its primary purpose is to teach you problem solving and design in the context of the program development in Upon satisfactory completion of this course you should have fundamental understanding of what program development is all about be familiar with problem solving techniques commonly used in elementary programming know syntax and proper use of functions control structures arrays text files and simple structs and classes in know debugging and testing techniques know commonly used elementary algorithms develop style of programming that makes programs readable and readily modified understand the need for abstraction and verification Return to CSC Department Home Page	course	misc
3848	 Date Tue Nov GMT Server Mon Nov GMT Page Home Page Revised PROGRAM ASSIGNMENT Example Welcome NOTICE EXAM NOTICE Example If you are using the MICROLAB to enter your programs please do the following if you want to avoid grief When you bring up your SAC account you will notice menu bar at the top of you session One of the items is TERMINAL Pick it This will present you with another menu Pick PREFERENCES Make sure that your emulation is and the BUFFER SIZE is set to Most of the lab stations default to lines and this makes for confused editor session See maybe you were crazy it WAS vi Do forget the ACM Lectures and Syllabus Program and Documentation Standards NEW Procedure for Submitting Programs Must READ Welcome Dialing in Various usefull files Introduction to vi Reference to vi Summary to vi Unix Tutorial Unix Introduction UNIX HELP How To Prepare Compile and Submit Programs EXAMPLES Sample Script READ and PRINT this for submitting work PROGRAMMING ASSIGNMENTS PROGRAM and PROGRAM PROGRAM and SPECIAL INTEREST Interview with World Renown Computer Scientist Donald Knuth ACM Undergraduate Letures unix sac vi www etc ACM Home page Other Usefull Links Set up sac account under construction double fines for speeding	course	misc
3849	 Date Wed Nov GMT Server Mon Sep GMT Ron Lancaster CS CS Language Design and Implementation Monday Wednesday Friday Hayes Hall Room Catalog Description Fundamental concepts of languages Processors data operations sequence control data control storage management syntax translation Prerequisite data structures course like CS or CS Textbook None but course packet is available at Fast Company Ridge Street Examinations Two exams will be given during the semester The exam will be on Friday October and the final exam will be given at on Thursday December Term Project The term project requires the implementation of rather small programming language Projects are done independently and can be implemented in or Pascal on almost any computer you have available progress report is due on Wednesday October and the project itself must be turned in by Wednesday December Last modified	course	misc
3850	 Date Wed Nov GMT Server Wed Nov GMT COMPUTER SCIENCE COMPUTER SCIENCE John Escobar Office and Phone Sage Office Hours Tuesdays or by appointment escobj Section Tuesday VCC SOUTH Section Friday JEC Recitations Homepages Project Goodies Glinert Stuff Grading Policy ANNOUNCEMENTS Arnold answers your questions about Project HTML ASSIGNMENT Due Friday at midnight Quiz To be taken at the end of Recitation Quiz Take home quiz To be handed in at the begining of Recitation Total Hits Since October Created by John Escobar	course	misc
3851	 Date Wed Nov GMT Server Tue Sep GMT Computer Graphics Computer Graphics Computer Science Times Arrange Instructors Danskin Prerequisite Computer Science and Mathematics or Computer Science is recommended Dist TAS This course has two themes the theory behind graphical software and the implementation of this software Topics will include the transformations needed to display and images including perspective line drawing algorithms mapping projection interpolation and some work on hidden surface removal and shading algorithms Back to Dartmouth CS Home Page	course	misc
3852	 Server Date Wednesday GMT Thursday GMT THE HOME PAGE CSE Introduction to Switching Theory and Logic Design Laboratory Section Some links of interest lab manual newsgroup Syllabus Consultants TA Sanjay Udani DSL home page CIS home page Hans Kuhlmann kuhlmann Lab manager DSL Room	course	misc
3853	 Date Tue Nov GMT Server Thu Dec GMT Computer Architecture Home Page Computer Architecture Tuesday and Thursday Room Warren Weaver Hall Professor Allan Gottlieb Last Update Nov Reaching Me my preference read it often gottlieb phone office Broadway Tenth Floor office hours Tuesdays and Thursdays Recent News Items Extra office hours will be in monday afternoon and tuesday morning No appointment needed should be in by monday at the latest should be in by tuesday Wed is unlikely snow will be in thursday morning Comments on the final The exam is today thursday One good problem would be like what we did the last day of class The exam defines new instruction in class it was jmp states the format of the instruction for jmp it was opcode address gives the semantics and asks you to modify the datapath to include support for this function You would probably need to add one or more new control signals for jmp the control signal was called jump Mano type questions will be something like of the test asked bunch of homeworkwork questions from Questions like those are fair game Here are answers to questions received Which chapters and sections of the book will be covered on the final Mano We did chapters and PH We briefly did chapters and assumed knowlege of chapters except floating point We did chapter We did We did Also what chapters in the two books overlap The mano material is used in HP chapters and Recent Assignments Nov Nov Oct More Information Textbooks Homework Policy Lab Policy Old Assignments Old News Items	course	misc
3854	 Date Tue Nov GMT Server Fri Oct GMT CS Computer Organization II Homepage CS Computer Organization II Overview Syllabus Instructor Textbook Readings Lecture Schedule Laboratory Schedule Tryits Examination will be on Monday October Checklist questions are due by Wednesday November Examination II will be on Wednesday November	course	misc
3855	 Date Tuesday GMT Server Wednesday GMT CPSC Analysis of Algorithms Home Page ANALYSIS OF ALGORITHMS Taught by Buckles Department of Electrical Engineering Computer Science Room Stanley Thomas Hall Office Hours MW Phone number buckles Text Thomas Cormen Charles Leiserson and Ronald Rivest Introduction to Algorithms McGraw Press New York Text errata postscript Other Texts not required Ellis Horowitz and Sartaj Sahni Fundamentals of Computer Algorithms Computer Science Press Potomac MD Gilles Brassard and Paul Bratley Algorithmics Theory and Practice Prentice Hall Englewood Cliffs NJ Richard Neapolitan and Kumarss Naimipour Foundations of Algorithms Heath and Company Lexington MA Problem Books not required Ian Parberry Problems on Algorithms Prentice Hall Englewood Cliffs NJ Stinson An Introduction to the Design and Analysis of Algorithms Second Edition The Charles Babbage Research Centre Pierre Manitoba Handouts The EECS Guidelines for Students contains the general departmental policies concerning written and programming assignments posting of grades and most importantly academic honesty postscript The Computer Resource Policies contains the rules regarding legitimate use of departmental computers It also contains useful information about accounts and directions for obtaining additional information Loads of additional information including an introduction to Unix how to change your password and printing The course syllabus postscript CPSC Addendum postscript FINAL EXAM Thursday Last Quiz Solutions Assignments Available Due Date Home Work Solutions Home Work Solutions Home Work Solutions Home Work Solutions Home Work Solutions Home Work Solutions Home Work Solutions Home Work Solutions Home Work Solutions Some interesting links related to algorithms University of Southern California Also USC Alley Oop Many other links Other EE CS Courses	course	misc
3856	 Date Wed Nov GMT Server No Title CS Algorithms Fall Computer Science Department Boston University Solutions Homework Midterm Office hours Book Cormen Leiserson Rivest Algorithms Topics Some commonly used algorithms and data structures Analysis from the point of view of correctness and the amount of resources used Some of the topics sorting recursion set data structures dynamic programming greedy algorithms backtracking shortest path graph matching some algebraic algorithms NP problems Prerequisites Kind of work required Read the textbook solve the homework problems may involve writing programs as well as giving mathematical proofs participate in the class discussion Homework given in general on Thursday and due in class on Tuesday days later No credit for late homework Tests midterm exam and final exam closed book closed notes and one or two unannounced short quizzes For the tests single handwritten crib sheet is permissible Final grade Approximately for homework for the midterm for the final for the quizzes for class participation Information updates on the Web at http Tentative more detailed plan of topics Intro Insertion sort Alg anal concepts Recursion Merge sort Rates of growth More rates of growth Recursive listing of permutations Heaps More heaps Quicksort Analysis of randomized Quicksort Median in exp linear time Hashing with linked lists Hashing open adressing Monday schedule due to Columbus Day Binary search trees Shift everything down trees Dynamic programming Greedy algorithms More greedy algorithms Graph representation search search Midterm material up to trees Eval of midterm search Topological sort Spanning trees Mergeable heaps Shortest paths Shortest paths cont shortest paths Max flow Bipartite matching illustrated on the longest path problem Thanksgiving Approximation algorithms vertex cover and set cover Polynomial complexity NP problems problems Shift from above Tba Peter Gacs gacs	course	misc
3857	 Date Wed Nov GMT Server Sun Apr GMT Mind and Computation Main Page Mind and Computation Main Page Mind and Computation The Mind and Computation Seminar features talks by IU graduate students and faculty and occasional visitors on topics in artificial intelligence other areas of computational cognitive science and interaction All Computer Science students doing or considering research in AI are encouraged to enroll Enrollees who have already passed the Computer Science Screening Examination will be expected to present one talk during the academic year either on their own research or on survey of topic of general interest Others will be expected to attend regularly The Seminar is offered as course in both the fall and spring semesters In order to receive credit for more than one semester students must make at least one presentation to the group for every two semesters in which they are enrolled For students who have passed the Computer Science Screening Exam this will normally take the form of talk on their own research For less advanced students the presentation will usually consist of talk either on their own research or on an area of current interest in AI Graduate students from departments other than Computer Science are also welcome to enroll and people not enrolled are welcome to attend the talks There are six or seven MaC meetings each semester Fridays in Lindley Hall Fall Schedule Pei Wang IU Computer Science John Rehling IU Computer Science David Leake IU Computer Science Andy Kinley and Dave Wilson IU Computer Science Jonathan Mills IU Computer Science Kyle Wagner IU Computer Science Spring Schedule Bob Port IU Linguistics and Computer Science Georg Dorffner University of Vienna Mar Doug Eck and Mike Gasser IU Computer Science Mar Jim Newkirk IU Computer Science Apr Jenett Tillotson and Matthias Scheutz IU Computer Science Apr Pantelis Papadopoulos IU Computer Science Last updated April URL http Comments gasser Copyright The Trustees of Indiana University	course	misc
3858	 Date Wed Nov GMT Server Computer Science Spring Computer Science Spring Computer Science Department Boston University Current information Homework and its solution after the submission date in the directory Useful pointers The Unix Reference Desk Perl Manual More on Perl Instructor Peter Gacs Email gacs Phone Office MCS Office hours Mon Wed Time Mon Wed Fri Place MCS Texts Required Kernighan Pike The Unix Programming Environment ISBN Wall Schwartz Programming Perl and Associates ISBN Stevens Advanced Programming in the UNIX Environment ISBN Recommended Schwartz Learning Perl and Associates ISBN Description The course teaches the use of the facilities of the Unix operating system in the writing of application programs General principles of operating system design will be discussed only as much as necessary for this purpose We will be programming in shell in the Perl language and The topics include the file system terminal process management and interprocess communication We will concentrate on the specific system available Solaris but the concepts and techniques learned will be applicable to other Unix versions and even other operating systems Knowledge of the programming language and use of the Unix system to edit build and execute programs is prerequisite Homework Weekly programming assignments due generally Sunday evenings at by The Subject line of the message must contain the word The credit given for the homework decreases by every hour after student can get at most one exception for not submitting homework on time Exams Only single sheet of handwritten notes is allowed The final exam covers the whole material Grading Homework makes up of the grade with left to the midterm and final examination each and left to reward active class participation An Incomplete grade will only be given in exceptional circumstances Cooperation Cooperation is recommended in understanding various concepts and system features But the actual programming and debugging of the homework must be wholly individual work Plagiarism is often easy to discover The University requires me to forward every suspected case of plagiarism to the appropriate committees Tentative timetable Jan basic concepts from Feb programming March Start using too files and directories March creating and connecting processes March Midterm material up to but excluding exec March signals terminals job control April sockets tba	course	misc
3859	 Date Wed Nov GMT Server Computer Science Fall Computer Science Automata and Formal Languages Fall Syllabus Last modified Click here for an HTML version of Homework due on Tuesday December Click here for postscript version of Homework Click here for an HTML version of Homework due on Friday November Click here for postscript version of Homework NOTE be sure to fetch the attached figures below for complete set of solutions Click here for an HTML version of the Homework solutions Click here for an HTML version of the Homework attached figures Click here for postscript version of the Homework solutions Click here for an HTML version of Homework due on Tuesday October Click here for postscript version of Homework NEWS FLASH Problem cancelled in Homework Click here for an HTML version of Homework due on Thursday October Click here for postscript version of Homework Click here for postscript version of Homework due on Thursday September Click here for postscript version of Homework solutions The dfa diagrams are on the bulletin board outsise my office Instructor David Martin MCS Click here to send mail to dm Office Hours Tuesday pm Wednesday or later Thursday and by appointment Classroom and Meeting Times Classes meet Tuesday and Thursday according to standard BU conventions in MCS the basement of Cummington St Required Textbook Introduction to the Theory of Computation Preliminary Edition Michael Sipser PWS Publishing Company See http for an list of errors in the book One copy of this book will be on reserve at the Science and Engineering library after put another copy on reserve if can find one You will read most of the textbook in this course Other Useful Books Elements of the Theory of Computation Lewis Papadimitriou Prentice Hall Introduction to Automata Theory Languages and Computation Hopcroft Ullman Prerequisites To enroll in this course you must have satisified the following course requirements If you have done so but still want to remain in the course please see me MA Discrete Mathematics CS or CS Programming Data Structures in Topics This course is core requirement in undergraduate computer science curriculums at most colleges Its purpose is threefold first to encourage you to investigate the nature of computation second to further develop your formal reasoning and writing skills and third to add new techniques to your programming bag of tricks Accordingly we will develop several formal models of computation each more powerful than the last At each stage we will prove some of what our intuition suggests and sometimes what it denies about these models We will also see how most models admit two very different characterizations one of machines that are able to recognize certain events and another of grammars that are able to generate exactly what these machines recognize In particular we will study regular languages regular expressions finite deterministic and nondeterministic automata grammars pushdown automata turing machines and more if time allows Grading The following breakdown is tentative but reasonably representative of how grades will be computed mentioned an optional project but decided how to fit that into the scheme yet Homeworks Midterm Thursday Final Tuesday pm Note that each test is worth homeworks The tests will be much simpler than the homeworks Homework Assignments When writing up your homework there are two goals you must keep in mind first to give evidence that you have put real thought into the problem and second to convince the reader that your solution is correct and that you know why As programmer you have some experience with this sort of writing an effective program must be written for both compiler and human reader Similarly solutions to your problems must be correct in the sense of solving the stated problem but they must also be comprehensible to the grader As with any writing the first draft of problem solution is usually unpresentable All of the pieces may be there but they tend to be chaotically assembled The single most important thing you can do to make your solutions presentable is to rewrite them after you have discovered why they are correct and then to throw away or at least tuck away your initial draft Remember scratch paper is cheap Be careful to realize that this emphasis on presentation has nothing to do with whether English is your native language or whether you prefer to write your solutions with pencil pen quill or word processor solution starts by stating assumptions and then works towards clearly defined goal emphasizing the overall direction and omitting the superfluous Late Policy In general you will have at least one week to work on homework assignment and three opportunities to attend my office hours before that assignment is due Assignments turned in during one of the two class periods following the due date will be graded at of their face value Assignments turned in later than that will receive no credit but we still grade them for feedback purposes Collaboration and Plagiarism vi LL collaboratus pp of collaborare to labor together fr laborare to labor to work jointly with others esp in an intellectual endeavor to cooperate with or assist usu willingly an enemy of one country and esp an occupying force to cooperate with an agency or instrumentality with which one is not immediately connected Collaboration is encouraged primarily in the first and third senses when working on homework problems and preparing for exams None of the problems in this class are intended to have secret solutions the more resourceful you are at discovering solutions the more time you will have to write them well Indeed if you are stuck on problem will be happy to talk with you about it during office hours However the solutions you turn in must be your original writing Copying prepared solution is not collaboration at all it is plagiarism also vt to steal and pass off as one own the ideas or words of another to present as one own an idea or product derived from an existing source Plagiarizing another words is not tolerated at Boston University It is so disdained that there are specific procedures for accusing and punishing those who plagiarize Do not copy another person work and present it as your own The above definitions were copied from the Webster server at BU Attendance Attendance is not an official part of the course grade but it is your responsibility to stay informed Some announcements will be made only in class And obviously it easier to learn things from teacher than directly from the book Unless you hate the teacher Mailing List Other announcements will be made only by email To add yourself to the course mailing list log on to CS cluster computer such as csa and type csmail The Computer ABC of claimed to be the first electronic digital computer Photo courtesy of the History of Computing Page at Virginia Tech Prepared by David Martin Click here for information on other courses	course	misc
3860	 Date Tue Nov GMT Server Thu Feb GMT Numerical Analysis and Computing Numerical Analysis and Computing Spring Credits Objectives To expose the student to the development application and analysis of basic numerical algorithms This course or equivalent is REQUIRED of all CS majors Prerequisites CALC II Linear Algebra Working knowledge of FORTRAN PASCAL or similar language Equivalents Numerical analysis Credit can not be given for more than one of these courses Outline Solution of equations Solution of linear algebraic systems Approximation interpolation Numerical differentiation and integration Solution of ordinary differential equations Expected Work Textbook assignments programs Examinations or hourlies Final Exam Course Materials Course Syllabus	course	misc
3861	 Date Wed Nov GMT Server Mon Nov GMT CIS CIS Theoretical Foundations of Computing Semester Fall Instructor Allen Stoughton Course syllabus Course calendar messages Exercise Sets Exercise Set Model answers to Exercise Set Exercise Set Model answers to Exercise Set Exercise Set Model answers to Exercise Set Exercise Set Model answers to Exercise Set Exercise Set Model answers to Exercise Set Exercise Set Examinations Last year Examination Model answers to last year Examination Last year Final Examination Model answers to last year Final Examination Examination Model answers to Examination Allen Stoughton allen	course	misc
3862	 Date Wednesday GMT Server Wednesday GMT CMP SCI Translator Design CMP SCI Translator Design Fall Instructor Eliot Moss Associate Professor Office LGRC across from department main office Email moss Phone Fax Teaching Assistant Karsten Jung Office LGRT Email jung Phone Class schedule Lectures LGRC Fri LGRT and honors only Discussion LGRT Class Documents General information files Syllabus schedule requirements etc Latest course news welcome file Definition of language compiled in project Lecture related files Friday lecture grammar algorithms postscript save paper postscript Friday lecture value numbering postscript save paper postscript Homework related files Homework assignment solution postscript Homework assignment Homework assignment Homework assignment Project related files Project assignment Project assignment Project assignment Project assignment	course	misc
3863	 Date Wed Nov GMT Server BU GRS CS Distributed Systems Seminar Page BU GRS CS Distributed Systems Seminar Heddaya Home Page Schedule Participants Class meetings Instructor Heddaya Hrs heddaya Prerequisites Consent of instructor Overview This instance of the seminar will revolve around the theme of distributed cooperation among parallel program threads among human users and among information servers The goals and meanings of such cooperation vary tremendously but the problems that arise in these different contexts seem to recur We will range over the fields of parallel computing distributed operating systems distributed databases hypertext and maybe economics The following three themes will help us ground our exploration Parallel computing on distributed systems threads synchronization and communication Distributed resource allocation in cooperative environment Internet Supporting human collaborative work efficiently and predictably The final choice of topics will depend on the interests of the participants as expressed in the first few weeks of the semester Format class meeting will generally consist of presentation and discussion of narrow topic covering two or three papers Each participant will give one or more presentation with the following duties In first week of semester schedule date and topic of presentation email choice Two weeks before class meeting select paper for the other participants to read email URL or supply photocopy to me Class meeting present the topic in minutes then instigate and lead minutes of class discussion During the presentation portion questions will be limited to clarifications only One week after class meeting email me notes covering both the presentation and the discussion LaTeX source is much preferred Course credit for registered students will be based on participation in class discussions as well as the above duties Created Maintained by Abdelsalam Heddaya	course	misc
4319	 Server Date Wednesday GMT Friday GMT Ronitt Rubinfeld HomePage Ronitt Rubinfeld am an assistant professor at the Cornell Department of Computer Science Some recent papers and talks Courses Randomness and Computation Spring at MIT CS Fall Engineering Fall Graduate Students Funda Ergun Ravi Kumar cv Computer Science Fair homepage Hal Wasserman web page describing in the area of Address Ronitt Rubinfeld Computer Science Department Upson Hall Cornell University Ithaca New York telephone fax email ronitt Pictures of my new nephew Eitan Rubinfeld	faculty	cornell
4320	 Server Date Sunday GMT Wednesday GMT Gerard Salton Gerard Salton Professor gs Harvard University text processing is rapidly expanding field of research and development Large masses of text now exist that can be cheaply stored on optical storage media and rapidly retrieved on demand Furthermore sophisticated methods are available for analyzing document texts formulating appropriate user queries conducting rapid file searches and ranking the retrieved items in decreasing order of importance to the users At Cornell we design and operate large text processing environments where texts can be handled without restrictions as to size or subject matter In the absence of knowledge bases that would be useful for unrestricted text databases we use text analysis systems that determine the meaning of words and expressions by refined context analysis using statistical and probabilistic criteria Using the approaches we are able to determine text similarity with high degree of accuracy There are two main applications The automatic generation of structured text collections hypertext where semantically similar pieces of text are automatically linked Hypertext representations of large databases provide flexible browsing capabilities for text access The automatic retrieval of interesting text excerpts in response to available search queries We have done extensive work with an automated encyclopedia consisting of about encyclopedia articles the Funk and Wagnalls New Encyclopedia In addition we are also processing the TREC collection consisting of about documents covering number of different subject areas over gigabytes of text sophisticated search and retrieval service exists as well as text linking system capable of relating different text sections paragraphs and sentences The main test vehicle continues to be the current version of the Smart text analysis and retrieval system operating under UNIX on Sun Sparc Stations and terminal equipment University Activities Member Engineering College Library Committee Professional Activities Associate Editor ACM Transactions on Information Systems Program Committee SIGIR Seventeenth Int Conference on Research and Development in Information Retrieval Dublin Ireland EP Electronic Publishing Darmstadt Germany Information Retrieval and Genomics National Library of Medicine Bethesda Maryland May and Virtual Reality Moscow September Lectures Automatic Construction of Hypertext Links Federal Institute of Technology ETH Zurich Switzerland June Progress in Information Retrieval Research University of Konstanz Germany June Hypertext and Information Retrieval ASIS National Meeting Columbus Ohio October Automatic Text Utilization in Large Full Text Databases Computer Science Colloquium Ohio State University Columbus Ohio October Automatic Information Retrieval Lecture Course at Seattle Washington November Full Text Information Retrieval Microsoft Corporation Seattle Washington November Automatic Text Utilization Workshop on Information and Genomics National Library of Medicine Bethesda Maryland May Publications Approaches to Passage Retrieval in Information Systems Proceedings Annual National Conference on Research and Development in Information Retrieval Association for Computing Machinery New York with Allan and Buckley Selective Text Utilization and Text Traversal Proceedings Association for Computing Machinery New York November with Allan Automatic Structuring and Retrieval of Large Text Files Communications of the ACM February with Allan and Buckley Text Retrieval Using the Vector Processing Model Proceedings Third Annual Symposium of Document Analysis and Information Retrieval University of Nevada Las Vegas Nevada April with Allan Software The Smart text analysis and retrieval system is made available free of charge for research purposes Several hundred copies of Smart version have been distributed and are used around the world Return to List of Faculty Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4321	 Server Date Wednesday GMT Tuesday GMT Kenneth Birman Kenneth Birman Professor PhD Univ of California Berkeley My research is concerned with distributed computing and operating systems My focus is on using distributed programming model based upon virtual synchronous process groups to solve such problems as managing replicated data coordinating actions in distributed setting and performing dynamic reconfiguration This is done in way that provides although it is limited to certain classes of reasonably benign failures My effort has theoretical and practical side The practical work started in when we developed computing system called the Isis Toolkit Isis with software tools to support virtual synchrony and became widely popular We are now developing new system Horus which is intended to be more flexible than Isis and which addresses issues such as communication and security The most important feature of Horus is its extensive use of layering which permits it to be reconfigured for special purposes The basic idea is that Horus users should pay only for features that they actually use but should have available very broad collection of options Horus also seeks leverage from the emergence of ATM network technology and from communication techniques such as Active Messages which originated in work on parallel supercomputers Horus embodies an advanced security technology developed by graduate students Mike Reiter and David Cooper which is unusual in combining security privacy and high availability in single package On the more fundamental side of the effort the Horus group is looking at techniques for specifying and proving properties of structured systems We are using the ML language to develop executable of the major Horus layers with the goal of using Nuprl system to prove that the latter correctly implements the former We are also studying extensions of the virtual synchrony model notably in work by Roy Friedman on adding guarantees to Horus and in work by Mark Hayden on support for probabilistic broadcast primitives and programming tools Horus is very much collaboration The architecture and development side of the effort is headed by Robbert van Renesse Werner Vogels and Roy Friedman Six graduate students are working on aspects of the system including the development of programming tools for multimedia communication applications security and privacy protocols that exploit ATM and other problems We are also collaborating within the department notably with Thorsten von Eicken and Brian Smith University Activities Chair Engineering Policy Committee Acting Head Computer Science Department Master of Engineering Program Member Computer Science Department Faculty Recruiting Committee Member Cornell Academic Leadership Committee Professional Activities Editor in Chief ACM Transactions on Computing Systems Chief Scientist Isis Distributed Systems Inc Member ISAT study group on Robustness of Critical Elements of the National Information Infrastructure Publications The process group approach to reliable distributed computing Communications of the ACM December Integrating runtime consistency models for distributed computing Journal of Parallel and Distributed Computing Reliable distributed computing using the Isis toolkit eds Birman and van Renesse IEEE Computer Society Press Los Alamitos California Reliability through consistency IEEE Software May with Glade Distributed Software Horus system Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4322	 Server Date Wednesday GMT Thursday GMT Fred Schneider Fred Schneider Professor PhD State Univ of Stony Brook Techniques for understanding concurrent programs are becoming increasingly important as distributed computing systems become widespread in applications My research has focused on the development of these techniques have been heavily involved in applying assertional reasoning to the design of concurrent distributed and programs am completing textbook on this subject Along with David Gries continue investigations concerning our equational logic This past year we streamlined the inference rules and evaluated number of techniques for handling undefined terms and partial functions Thomas Bressoud and completed building and analyzing our implementation of replication management for HP architecture Our protocols ensure that the sequence of instructions executed by two virtual machines running on different physical processors are identical The protocols also coordinate issued by these virtual machines Use of hypervisor to implement replica coordination is attractive at least in theory When replica coordination is implemented in hypervisor it instantly becomes available to all hardware realizations of the given architecture including realizations that did not exist when the hypervisor was written Second when replica coordination is implemented in hypervisor single implementation suffices for every operating system that executes on that architecture Finally by implementing replica coordination in hypervisor the applications programmer is freed from this task Jointly with Dag Johansen University of Norway and Robbert van Renesse started the TACOMA project And COrnell Moving Agents to investigate support and use of mobile processes in building applications By structuring system in terms of agents applications can be constructed in which bandwidth is conserved Data may be accessed only by an agent executing at the same site as the data resides An agent typically will filter or otherwise reduce the data it reads carrying with it only the relevant information as it roams the network Two TACOMA prototypes have been completed and we are implementing third system based on our experiences Finally developed with Scott Stoller new algorithm for detecting whether particular computation of an asynchronous distributed system could have passed through global state satisfying some given state predicate The new algorithm allows more efficient detection than is possible with previous algorithms University Activities Sabbatical leave Professional Activities Distributed Computing Editor Information Processing Letters Editor IEEE Transactions on Software Engineering Editor High Integrity Systems Editor Annals of Software Engineering Editor ACM Computing Surveys Texts and Monographs in Computer Science Program Committee Member International School and Symposium on Formal Techniques in and Systems Program Committee Member International Conference on the Mathematics of Program Construction Program Committee Member International Workshop On Responsive Computer Systems Program Committee Member Workshop on Composability of Systems Program Committee Member Fifth IFIP Working Conference on Dependable Computing for Critical Applications Program Committee Member Sixteenth IEEE International Systems Symposium Program Committee Member DIMACS Workshop on Verification and Control of Hybrid Systems Steering committee Center for High Integrity Software Systems Assurance CHISSA National Institute of Standards and Technology Member ISAT Defensive Information Warfare Study Group Advanced Research Projects Agency Review committee Leibniz Center at Hebrew University Member IFIP Working Group Programming Methodology Awards Fellow American Association for Advancement of Science Fellow Association for Computing Machinery Lectures Proof outlines for programs lectures International Summer School Marktoberdorf Germany July On the origin of traditions Banquet speech International Summer School Marktoberdorf Germany July Reasoning about programs by exploiting the environment AFOSR Meeting In Software and Systems Washington Verifying hybrid systems by exploiting the environment Symposium on Formal Techniques in and Systems Lubeck Germany Panelist comparative merits of synchronous partially synchronous and asynchronous models for systems Symposium on Formal Techniques in and Systems Lubeck Germany Moderator issues in writing formal specifications Specification and Refinement of Reactive Systems International Conference and Research Center for Computer Science Dagstuhl Germany Merging policies Workshop on Computer Support for Policy Analysis and Design George Mason University Virginia Avoiding AAS mistakes Invited speaker Air Traffic Management Workshop NASA Ames Research Center Reasoning about programs by exploiting the environment Technical University of Munich Munich Germany Proof outlines of the past University of North Carolina Chapel Hill North Carolina March Adding virtually Distinguished Lecture Series University of North Carolina Chapel Hill North Carolina March Moderator and panel organizer teaching logic as tool SIGCSE Technical Symposium on Computer Science Education Nashville Tennessee March Proof outlines of the past Technion Haifa Israel March Adding virtually University of Norway April Concurrent programs from specifications University of Norway April Placing agents on airplanes view of AAS and its successor ARPA ISAT Defensive Information Warfare Study Group Meeting Washington June Publications Reasoning about programs by exploiting the environment Proceedings International Colloquium Jerusalem Israel July Lecture Notes in Computer Science New York with Fix Notes on proof outline logic Working Material International Summer School Marktoberdorf Germany July Research on and computing Software and Systems Program Summary Bolling Air Force Base Washington Air Force Office of Scientific Research Hybrid verification by exploiting the environment Formal Techniques in and Systems Lubeck Germany September Lecture Notes in Computer Science Volume New York with Limor Fix Equational propositional logic Information Processing Letters February with Gries Refinement for An aircraft protocol Foundations of Ultradependable Parallel and Distributed Computing Paradigms for Dependable Applications Kluwer Academic Publishers with Marzullo and Dehn Teaching logic as tool Proceedings SIGCSE Technical Symposium on Computer Science Education Nashville Tennessee March SIGCSE Bulletin with Gries Operating system support for mobile agents Proceedings Fifth Workshop on Hot Topics in Operating Systems Orcas Island Washington May with Dag Johansen and Robbert van Renesse Verifying programs that use Science of Computer Programming with Stoller On teaching proof Arts Sciences NewsLetter Spring with Gries new approach to discrete teaching mathematics Primus June with Gries Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4323	 Server Date Wednesday GMT Friday GMT Dan Huttenlocher Home Page Daniel Huttenlocher Associate Professordph fax Research My main area of research is visual matching and recognition My work in this area ranges from theoretical algorithms using techniques from computational geometry to applications of visual matching in systems for remote collaboration viewing document images over wide area networks video monitoring and target recognition am also interested in uses of new types of electronic documents for communication remote collaboration and education Algorithms for comparing geometric structures methods for visual matching and recognition implementation is available Fast indexing using an Eigenspace approximation to the Hausdorff fraction and Matlab implementation is available Performance evaluation and modeling of recognition methods Video monitoring object tracking and identification DigiPaper highly compact universally viewable document image format CoNote system for supporting collaboration with shared documents Teaching Brian Smith and are developing new course on authoring Web documents which will be offered for the first time in Spring also teach an introduction to computation and programming and course in computer vision Professional Activities work with Xerox PARC on electronic document image processing and am starting small group investigating these problems at Cornell am program of the IEEE conference on computer vision and pattern recognition which will be held in San Juan PR in June Other Interests Two of my favorite activities are snowboarding and mountain biking but without the stupid attitude Last Updated November	faculty	cornell
4324	 Server Date Sunday GMT Wednesday GMT Robert Constable Robert Constable Department rc University of Wisconsin Madison Research We are engaged in the study of computer systems that provide mechanical assistance in problem solving especially in programming and mathematics This involves long term study of ways to make the formalization of mathematics feasible and useful We have implemented three such systems in the past tne years PRL and Nuprl Our major experimentation is with Nuprl Lisp program that implements constructive theory of types Systems such as Nuprl are useful formalizations of mathematics because they can express wide variety of proof and methods as metalevel programs of the system These provide considerable theorem proving power Moreover Nuprl is especially useful because it can evaluate the computational content of theorems In principle Nuprl is both fomal system of mathematics and programming language We continue to improve Nuprl the current version used at Cornell is called Nuprl It differs from its predecessors in having new term editor designed by Stuart Allen and implemented by Richard Eaton Its internal structure is more modular making the system suitable for he definition of wide variety of logics beyond the constructive type theory Also the entire mechanism has been rebuilt and by Paul Jackson building on the work of Douglas Howe This contributes to the generic nature of Nuprl Finally this version of the system can refer to itself There is an internal description of the language and its logic built principally by William Aitken using the theory developed by Allen Howe and myself Richard Eaton designed link between the internal description of the logic and the logic itself which makes it possible to prove theorems about the process of proving theorems We are also engaged in three exciting joint ventures One is with Miriam Leeser of Electrical ENgineering and the other two are in Computer Science with David Gries on Polya and with Richard Zippel on Weyl With Lesser we are involved in hardware synthesis and verification Leeser and her student Mark Aagard have used Nuprl to prove the correctness of boolean circuit minimization package Pbs used by circuit designers This is component of Leeser Bedroc system it implements the weak division algorithm which is widely used in circuit design systems This major theorem proving effort taught us great deal about the effectiveness of our technology in the hands of expert users from an application domain The second joint venture involves building model of the Polya programming language and program refinement mechanism for it both designed by David Gries which will enable him to write his handbook of algorithms in the manner that he devised through years of study of the programming process Stuart Allen has givne formal definition of Polya We expect to be experimenting soon with transforms and trying to capture the programming style that Gries wants We have recently begun collaboration that we hope to relate to the Polya effort Conal Mannion has been exploring the possibility of using Nuprl in computational science We have been discussing problems with Richard Zippel and are hoping to connect symbolic algebra system Weyl with Nuprl in the near future This will be used to explore the development of scientific computing software using Weyl and Nuprl together with other tools that Zippel is building Professional Activities Editor Journal of Symbolic Computation Editor Academic Press Editor Journal of Logic and Computation Editor Oxford University Press General Chair LICS Program Committee North American Jumelage Program Committee Theoretical Aspects of Computer Software NSERC Canada NSF Theoretical Computer Science University Activities Chair Computer Science Recruiting Committee Computer Science Computing Facilities Committee Provost Study Committee on Mathematics Lectures Formal theories and software systems fundamental connections between computer science and logic INRIA Anniversary Celebration Paris France December The Nuprl software development system Computer Science Colloquium Ben Gurion University Ber Sheva Israel January Formal theories and software systems State of Israel Symposium Tel Aviv Israel January Association for Symbolic Logic Annual Meeting Notre Dame University Notre Dame Indiana March Metaprogramming in type theory State University of New York Buffalo New York March Formal explanations of software Formal Methods and Software Engineering Workshop University of Pennsylvania Philadelphia Pennsylvania May Publications Formal theories and software systems fundamental connections between computer science and logic In Future Tendencies in Computer Science Control and Applied Mathematics ed Bensoussan and Verjus Lecture Notes in Computer Science December Metalevel programming in constructive type theory In Programming and Mathematical Method ed Manfred Broy NATO ASI Series	faculty	cornell
4325	 Server Date Wednesday GMT Wednesday GMT Tim Teitelbaum Associate Professor Department of Computer Science Cornell University tt Research Interests Incremental Computation Transformational Programming Programming Environments Editors Compilers Attribute Grammars Ada Vita Last updated	faculty	cornell
4326	 Server Date Wednesday GMT Friday GMT Faculty Research Interests Sam Toueg Sam Toueg Professor Princeton University Research Interests My research interests include distributed computing and work on methodologies paradigms and algorithms for distributed systems in both and systems My goal is to bridge the gap between theoretical results and the need for efficient and practical solutions In collaboration with Tushar Chandra and Prasad Jayanti two Computer Science students we continued our work on unreliable failure detectors for systems and on objects for systems fundamental result of distributed computing states that the Consensus problem can not be solved with deterministic algorithm in asynchronous systems This impossibility result is due to the inherent difficulty of determining whether process has crashed or is merely very slow in such system In our work we were able to determine exactly how much information about failures is necessary and sufficient to solve Consensus We first showed one can use an unreliable failure detector that can make an infinite number of mistakes to solve Consensus in systems with majority of correct processes We then proved that to solve Consensus any failure detector has to provide at least as much information about failures as Thus is the weakest failure detector for solving Consensus in asynchronous systems with majority of correct processes We are now exploring the practicality of implementing and of applications that rely on for their correctness concurrent system consists of processes communicating via shared objects shared object is if each process that accesses this object is guaranteed to get response even if all the other processes crash We are now exploring hierarchies of object types where each object type is assigned to level that corresponds to its ability in implementing other objects In particular Prasad Jayanti has shown that hierarchy Herlihy is not robust Informally in this hierarchy there is an object at level that can be used to implement objects at any level We are now exploring the question of whether robust hierarchies exist Selected Publications Bracha and Toueg Asynchronous consensus and broadcast protocols Journal of the ACM vol Srikanth and Toueg Optimal clock synchronization Journal of the ACM vol El Abbadi and Toueg Maintaining availability in partitioned replicated databases ACM Transactions on Database Systems vol Neiger and Toueg Automatically increasing the of distributed algorithms Journal of Algorithms vol Chandra and Toueg Unreliable failure detectors for asynchronous systems Proceedings ACM Symposium on Principles of Distributed Computing August Montreal Canada Chandra Hadzilacos and Toueg The weakest failure detector for solving consensus Proceedings ACM Symposium on Principles of Distributed Computing August Vancouver Canada Jayanti Chandra and Toueg shared objects Proceedings IEEE Symposium on Foundations of Computer Science October Pittsburgh Pennsylvania Neiger and Toueg Simulating synchronized clocks and common knowledge in distributed systems Journal of the ACM vol	faculty	cornell
4327	 Server Date Wednesday GMT Tuesday GMT Claire Cardie Claire Cardie Assistant Professor Upson Hall Phone Fax Email cardie Click on these to see RESEARCH INTERESTS COURSES THAT TEACH SELECTED PUBLICATIONS NLP and ML Links My entry in the department annual report Amalgams softball stats Finger Lakes Tandem Tour with the Westys Research Interests Although my research spans number of subfields within artificial intelligence including machine learning reasoning and cognitive modeling the focus of my research is in the area of natural language understanding The NLP group at Cornell is primarily interested in investigating the use of machine learning techniques as tools for guiding natural language system development and for exploring the mechanisms that underly language acquisition Our work focuses on two related areas the design of systems that can efficiently and reliably extract the important information from document and the machine learning of natural language Information Extraction As part of Cornell CSTR project we are using information extraction techniques to support browsing of technical texts The Kenmore Project The focus of the Kenmore project is on developing techniques to automate the knowledge acquisition tasks that comprise the building of any NLP system Very generally Kenmore acquires linguistic knowledge using combination of symbolic machine learning techniques and robust sentence analysis It has been used with corpora from two domains to perform tagging semantic feature tagging and concept activation and to find the antecedents of relative pronouns In current work we are extending Kenmore to handle larger text corpora and additional disambiguation tasks In all of our work we evaluate the language learning components in the context of the larger NLP application in which it is embedded The goal of the project is to determine the conditions under which machine learning techniques can be expected to offer approach to knowledge acquisition for NLP systems Teaching Natural Language Understanding Spring Foundations of Artificial Intelligence and Practicum in Artificial Intelligence Fall Seminar in Natural Language Understanding Selected Publications Automating Feature Set Selection for Learning of Linguistic Knowledge Cardie Proceedings of the Conference on Empirical Methods in Natural Language Processing University of Pennsylvania Embedded Machine Learning Systems for Natural Language Processing General Framework Cardie In Wermter and Riloff and Scheler Gabriele eds Connectionist Statistical and Symbolic Approaches to Learning for Natural Language Processing Lecture Notes in Artificial Intelligence Springer Originally presented at the Workshop on New Approaches to Learning for Natural Language Processing International Joint Conference on Artificial Intelligence AAAI Press Chapter Introduction Thesis Cardie Knowledge Acquisition for Conceptual Sentence Analysis Thesis University of Massachusetts Amherst MA Note that this file contains just the introductory chapter of the thesis Knowledge Acquisition for Conceptual Sentence Analysis Cardie Thesis University of Massachusetts Amherst MA Available as University of Massachusetts CMPSCI Technical Report pages Approach to Knowledge Acquisition for Sentence Analysis Cardie Proceedings of the Eleventh National Conference on Artificial Intelligence Washington DC AAAI Press MIT Press Using Decision Trees to Improve Learning Cardie Proceedings of the Tenth International Conference on Machine Learning Amherst MA Morgan Kaufmann Acquisition of Relative Pronoun Disambiguation Heuristics Cardie Proceedings of the Annual Conference of the Association for Computational Linguistics Newark DE Association for Computational Linguistics Learning to Disambiguate Relative Pronouns Cardie Proceedings of the Tenth National Conference on Artificial Intelligence San Jose CA AAAI Press MIT Press Using Cognitive Biases to Guide Feature Set Selection Cardie Proceedings of the Fourteenth Annual Conference of the Cognitive Science Society Bloomington IN Lawrence Erlbaum Associates and Working Notes of the AAAI Workshop on Constraining Learning with Prior Knowledge San Jose CA Cognitively Plausible Approach to Understanding Complicated Syntax Cardie and Lehnert Proceedings of the Ninth National Conference on Artificial Intelligence Anaheim CA AAAI Press MIT Press Analyzing Research Papers Using Citation Sentences Lehnert Cardie and Riloff Proceedings of the Twelfth Annual Conference of the Cognitive Science Society Cambridge MA Lawrence Erlbaum Associates NLP and Machine Learning Links Computational Linguistics Archive database of recent CL papers ACL Special Interest Group on Natural Language Learning Machine Learning Digest Machine Learning Resources Researchers Machine Learning links to the home pages of ML researchers Penn Treebank II AI Repository contains has pointers to code for various NLP system components	faculty	cornell
4328	 Server Date Wednesday GMT Thursday GMT Keshav Pingali Keshav Pingali Associate Professor PhD MIT My research group works in the areas of programming languages and compilers for parallel architectures Our goal is to develop tools for generating parallel code for applications programs that deal with large sparse matrices Most scientific applications involve the numerical solution of partial differential equations The techniques used almost always produce system of algebraic equations that involve large sparse matrices Unfortunately existing compiler technology does poor job of parallelizing sparse matrix programs We take radically different approach to this problem Our compiler produces parallel programs from sequential programs using information from the user about the sparsity structure of matrices in the program This enables us to use tools from the restructuring compiler area Preliminary experiments with some Krylov space solvers show that the code produced by our compiler is competitive with code in libraries like Argonne PetSc library We will extend our approach to direct methods for solving linear systems and to applications that require adaptive mesh refinement This project builds on our earlier work on restructuring compilation techniques for dense matrix programs We have developed restructuring techniques for compiling programs to distributed memory and memory access NUMA architectures like the IBM and where processor can access local memory faster than memory To get good performance the compiler must not only parallelize but must also ensure locality of reference by matching code and data distribution when references must be made block transfers are preferable to many small messages We recently developed the best algorithm known for the automatic alignment of computation and data and are incorporating it into our compiler In earlier work we developed novel loop restructuring technique called access normalization which transforms loop nests for increased locality and potential for block transfers and implemented it in the LAMBDA loop transformation toolkit our paper summarizing these results won the best paper prize at ASPLOS We worked with to transfer this technology to HP FORTRAN compiler product line for uniprocessors and multiprocessors We have developed new frameworks for program analysis and optimization based on the dependence flow graph DFG The DFG knits together the data and control dependence information of program permitting the development of optimization algorithms that generate better code than is possible with competing approaches Our results are of independent interest for example we recently developed optimal algorithms for control dependence problems answering foundational question that had been open for almost decade This work led to the development of algorithm for computing the static single assignment SSA form of programs These results have been incorporated into number of compilers including those at IBM Microsoft HP and Flavors Professional Activities Panel member and organizer ACM Symposium on Principles and Practice of Parallel Programming Member NSF National Young Investigator NYI Awards Panel Consultant Hewlett Packard Labs Intel Corporation Army Ballistic Research Labs Odyssey Research Math Sciences Institute ACM TOPLAS IEEE Transactions on Computers Journal of Parallel and Distributed Computing Journal of Supercomputing IEEE Computer Editorial Board International Journal of Parallel Programming Awards National Science Foundation Presidential Young Investigator IBM Faculty Development Award Best paper prize ASPLOS Lectures Fast algorithms for control dependence problems Corporation Chelmsford Massachusetts January Computer Science Department Wayne State University Detroit Michigan February Rutgers University New Brunswick New Jersey May Microsoft Research Laboratories Redmond Washington June Publications Solving alignment using elementary linear algebra Proceedings of the Seventh Annual Workshop on Languages and Compilers for Parallel Computers LCPC Lecture Notes in Computer Science Ithaca NY August with David Bau Induprakas Kodukula Vladimir Kotlyar and Paul Stodghill APT data structure for optimal control dependence computation ACM SIGPLAN Conference on Programming Language Design and Implementation PLDI June with Gianfranco Bilardi Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4329	 Server Date Wednesday GMT Thursday GMT Donald Greenberg Donald Greenberg Jacob Gould Schurman of Computer Science Director NSF Science and Technology Center for Computer Graphics and Scientific Visualization PhD Cornell University For the past two decades our computer graphics activities have involved the development of wide range of graphic input and display techniques number of input methods have been implemented and progress has been made on large variety of display routines Graphics research topics previously investigated include polygon clipping hidden surface algorithms texturing spatial and temporal aliasing problems geometric modeling parametric surface descriptions and color science Our current focus of graphics research involves the modeling of very complex environments and algorithms for realistic image synthesis modular testbed that is sufficiently flexible to evaluate different modeling and image generation techniques has been created Laboratory research is now being conducted on light reflection models methods for determining the interaction between reflecting surfaces techniques for improving the computational efficiency of parallel processing strategies perceptual studies surface modeling motion control dynamics constraint modeling strategies and host of other topics related to complex modeling and realistic image displays New application research is being started in volume rendering and medical imaging digital photography animation and the development of generic tools for scientific visualization as well as core technologies for environments Most of the research is conducted within the facilities of the Program of Computer Graphics which is member of the new National Science Foundation Science and Technology Center for Computer Graphics and Scientific Visualization Other participating universities are Brown University California Institute of Technology University of North Carolina Chapel Hill and the University of Utah University Activities Director Program of Computer Graphics Director National Science Foundation Science and Technology Center for Computer Graphics and Scientific Visualization Professional Activities Editorial Board Computer Graphics Journal National Academy of Engineering Founding Fellow American Institute of Medical and Biological Engineering Fellow ACM Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4330	 Server Date Wednesday GMT Thursday GMT Tom Henzinger Thomas Henzinger HAVE MOVED Assistant Professor Computer Science Department Cornell University Ithaca NY Email tah Phone Fax Research Formal support for the development and analysis of concurrent and embedded systems Related research at Cornell and worldwide Resume Publications Reactive modules formal methodology for the analysis of concurrent systems logics and timed transition systems formal methodology for the analysis of systems Clock systems and timed automata more formal methodology for the analysis of systems Hybrid automata formal methodology for the analysis of embedded systems Bibliography bibtex list of publications Tools HyTech symbolic model checker for linear hybrid systems Courses CS Fall Advanced Programming Languages Conferences HYBRID Verification and Control of Hybrid Systems CAV Verification Last updated on September tah	faculty	cornell
4331	 Server Date Wednesday No match GMT Thursday GMT Jon Kleinberg Homepage Jon Kleinberg kleinber Assistant Professor of Computer Science Cornell University Ithaca NY My research interests are in algorithms and combinatorial optimization with an emphasis on approximation computational geometry network optimization and distributed computing and algorithms in molecular biology Recent work has included approximation algorithms for routing and disjoint paths problems in networks adversarial queueing theory an approach to analyzing the stability of network routing protocols without probabilistic assumptions geometric methods in combinatorial optimization particularly the use of positive programming and geometric algorithms for studying molecular conformation am spending the academic year visiting the IBM Almaden Research Center Click here to see Selected Publications Miscellaneous Links PAPERS Approximation Algorithms and Combinatorial Optimization Kleinberg unsplittable flow Proc IEEE Symposium on Foundations of Computer Science to appear Kleinberg Rubinfeld Short paths in expander graphs Proc IEEE Symposium on Foundations of Computer Science to appear Kleinberg Tardos Disjoint paths in densely embedded graphs Proc IEEE Symposium on Foundations of Computer Science Kleinberg Tardos Approximations for the disjoint paths problem in planar networks Proc ACM Symposium on Theory of Computing Aggarwal Kleinberg Williamson paths on the mesh and new in VLSI layout Proc ACM Symposium on Theory of Computing Goemans Kleinberg An improved approximation ratio for the minimum latency problem Proc Symposium on Discrete Algorithms Kleinberg Goemans The Lovasz theta function and programming relaxation of vertex cover To appear in SIAM Discrete Math Algorithms Kleinberg The localization problem for mobile robots Proc IEEE Symposium on Foundations of Computer Science Kleinberg search in simple polygon Proc Symposium on Discrete Algorithms Kleinberg lower bound for balancing algorithms Information Processing Letters Kleinberg Geometric algorithms Information Processing Letters Kleinberg algorithms for robot navigation and server problems Master Thesis Parallel and Distributed Computing Andrews Awerbuch Fernandez Kleinberg Leighton Liu Universal stability results for greedy protocols Proc IEEE Symposium on Foundations of Computer Science to appear Borodin Kleinberg Raghavan Sudan Williamson Adversarial queueing theory Proc ACM Symposium on Theory of Computing Kleinberg Attiya Lynch between message delivery and quiesce times in connection management protocols Proc Israel Symposium on Theory of Computing and Systems Kleinberg Mullainathan Resource bounds and combinations of consensus objects Proc ACM Symposium on Principles of Distributed Computing Geometric Algorithms Berger Kleinberg Leighton Reconstructing Model with Arbitrary Errors Proc ACM Symposium on Theory of Computing Huttenlocher Kleinberg Comparing point sets under projection Proc Symposium on Discrete Algorithms Huttenlocher Kedem Kleinberg On dynamic Voronoi diagrams and the minimum Hausdorff distance for point sets under Euclidean motion in the plane Proc ACM Symposium on Computational Geometry Huttenlocher Kleinberg Invariants of set of points or line segments under projection Cornell University Computer Science Technical Report TR July SOME LINKS Search Tools and Bibliographies AltaVista Infoseek Excite Yahoo NYNEX Yellow Pages Glimpse computer science bibliographies NCSTRL Networked Computer Science Technical Reports Library David Jones Hypertext Bibliography Project Academic Sites Cornell University Cornell Computer Science Cornell Operations Research MIT Lab for Computer Science MIT LCS Theory of Computation Group Stanford Computer Science Berkeley Computer Science Computing Research Association National Science Foundation Theory of Computing TCS Virtual Address Book Bibliographies on of Computer Science Compendium of NP Optimization Problems FOCS conference SODA conference STOC conference Computational Biology Computational Biology at USC CARB Biocomputing Resources SDSC List of Computational Biology Servers Computational Geometry David Eppstein Geometry Junkyard Jeff Erickson Computational Geometry Page Internet Security MITRE Security Information Resources Princeton Safe Internet Programming Group Ron Rivest Cryptography and Security Links Miscellaneous Netscape Intellicast CNN Interactive Tennis Association Chess Online Car Talk Jon Kleinberg Department of Computer Science Upson Hall Cornell University Ithaca NY kleinber	faculty	cornell
4332	 Server Date Wednesday GMT Thursday GMT Activities Tardos Tardos Associate Professor Department of Computer Science Upson Hall Cornell University Ithaca NY phone fax Email eva School of Operations Research and Industrial Engineering phone FAX eva Click here to see my daughter Rebecca Julia Shmoys Current Activities Current Research Recent Publications Current Research Broadly speaking my research interest is the theory of algorithms including many aspects of computational complexity theory am mostly working on combinatorial optimization problems in particular network problems approximation algorithms and linear and integer programming problems Recent Publications Research Papers Survey papers Research Papers Shmoys and Tardos An approximation algorithm for the generalized assignment problem Mathematical Programming Preliminary version has appeared in the proceeding of the Annual Symposium on Discrete Algorithms January Plotkin and Tardos Improved Bounds on the Ratio for Multicommodity Flows to appear in Combinatorica Preliminary version has appeared in the Proceedings of the Annual ACM Symposium on Theory of Computing pp ORIE Klein Plotkin Stein and Tardos Faster approximation algorithms for the unit capacity concurrent flow problem with applications to routing and finding sparse cuts SIAM Journal on Computing Preliminary version has appeared in the proceedings of the Annual ACM Symposium on the Theory of Computing Leighton Makedon Plotkin Stein Tardos Tragoudas Fast Approximation Algorithms for Multicommodity Flow Problems Journal of Computer and System Sciences special issue pp Preliminary version has appeared in the Proceedings of the Annual ACM Symposium on the Theory of Computing Plotkin Shmoys and Tardos Fast approximation algorithms for fractional packing and covering problems to appear in Mathematics of Operations Research ORIE Preliminary version has appeared in the Proceedings of the Annual IEEE Symposium on the Foundations of Computer Science Goemans Goldberg Plotkin Shmoys Tardos and Williamson Improved approximation algorithms for network design problems In the proceeding of the Annual Symposium on Discrete Algorithms January pp ORIE Hoppe and Tardos Polynomial Time Algorithms for Some Evacuation Problems In the proceeding of the Annual Symposium on Discrete Algorithms January pp ORIE Hoppe and Tardos The Quickest Transshipment Problem in the proceeding of the Annual Symposium on Discrete Algorithms pp ORIE Klein Plotkin Rao and Tardos Approximation Algorithms for Steiner and Directed Multicuts ORIE Kleinberg and Tardos Approximations for the Disjoint Paths Problem in Planar Networks in the Proceedings of the Annual ACM Symposium on Theory of Computing pp ORIE Kleinberg and Tardos Disjoint Paths in Densely Embedded Graphs in the Proceedings of the Annual IEEE Symposium on the Foundations of Computer Science pp new version of ORIE Rabani and Tardos Distributed Packet Switching in Arbitrary Networks in the ACM Symposium on Theory of Computing May pp ps version Fleischer and Tardos Separating Maximally Violated Comb Inequalities in Planar Graphs to appear in IPCO June ORIE Survey Papers Goldberg Tardos and Tarjan Network Flow Algorithms in Paths Flows and eds Korte Lovasz and Schrijver Tardos Strongly Polynomial and Combinatorial Algorithms in Optimization in the Proceedings of the International Congress of Mathematicians Kyoto Tokyo Shmoys and Tardos Computational complexity Handbook of Combinatorics eds Graham Grotschel and Lovasz North Holland to appear Lovasz Shmoys and Tardos Combinatorics in Computer Science to appear in the Handbook of Combinatorics eds Graham and Lovasz North Holland to appear Tardos Approximate Theorems and Fast Approximation Algorithms for Multicommodity Flow Problems annotated bibliography In Proc of the Summer School on Combinatorial Optimization in Maastricht The Netherlands Tardos Approximate Theorems and Fast Approximation Algorithms for Multicommodity Flow Problems In Proc Network Optimization Theory and Practice NETFLOW in San Miniato PI Italy	faculty	cornell
4333	 Server Date Wednesday GMT Thursday GMT Dean Krafft Selected URLs Dean Points of Interest Cornell Servers Cornell CS home page CUINFO Web Server Engineering Library page Cornell Legal Information Institute Cornell Directories Project public server page DIMUND Document Image Understanding and Character Recognition WWW Server SIAM gopher server CS Information Capture and Access Course Illinois Digital Library Stanford Digital Library Michigan Digital Library Berkeley Digital Library Search Tools The Lycos WWW Search Engine Veronica GOPHER Search Tool The Archie Gateway search Anonymous FTP sites The CMU CS Department has put together an excellent collection of search tools Network Information Scout Report at Internic Planet Earth and the Whole Internet Catalog which is part of the Global Network Navigator CERN WWW Reference Page All the FAQs Various Stuff Mailing List Pro Audio Gear FolkBook Folk Music Home Page Ithaca Weather Forecast and the weather elsewhere Security Reference Index	faculty	cornell
4334	 Server Date Wednesday GMT Thursday GMT John Hopcroft John Hopcroft Joseph Silbert Dean of Engineering Professor of Computer Science PhD Stanford University On January was appointed dean of the College of Engineering and now oversee the ten academic departments that comprise the college as well as various research units My involvement with the Computer Science Department continues through research on robust geometric algorithms modeling and simulation and information capture and access In collaboration with the Design Research Institute we are developing technologies to facilitate information capture and access within an engineering design environment Among the technologies being researched are distributed databases and persistent object storage document image processing and management multimedia and user interface technology information science for heterogeneous data knowledge representation and organization and remote collaboration technologies Professional Activities Member National Research Council Commission on Physical Sciences Mathematics and Applications Member National Science Board Member Scientific Advisory Board United States Air Force Member National Academy of Engineering Fellow American Academy of Arts and Sciences Fellow American Association for the Advancement of Science AAAS Fellow Institute of Electrical and Electronics Engineers IEEE Fellow Association for Computing Machinery Chairman SIAM Board of Trustees Member Scientific Advisory Committee for the David and Lucile Packard Foundation Member Sloan Research Fellowship Committee Advisory Board Supercomputing Research Center Institute for Defense Analysis Editor Oxford University Press International Series on Computer Science Algorithmica Discrete and Computational Geometry Associate Editor International Journal of Computational Geometry and Applications Journal of Computer and Systems Sciences Journal of Information Sciences Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4335	 Server Date Wednesday GMT Monday GMT Praveen Seshadri Home Page Praveen Seshadri Assistant Professor Computer Science Department Cornell University Upson Hall Ithaca NY USA Office FAX Advanced Database Systems CS Fall The PREDATOR DBMS Project End ADTs as we know them The Case for Enhanced Abstract Data Types SIGMOD submission Professional Publications The SEQ project time to put your database in order Management of Sequence Data postscript of my PhD thesis in page format Personal Warren Road Ithaca NY Ranjani Ramamurthy Green Bay Packers	faculty	cornell
4336	 Server Date Wednesday GMT Tuesday GMT David Gries Page David Gries William Lewis Professor of Engineering rer Munich Institute of Technology My interests are in programming methodology in particular the formal development of programs and in related areas such as programming languages programming language semantics and logic am as interested in the teaching of these topics as am in further research in them In fact understanding how logic and formalism can be taught as useful tool at the college level has been an overriding concern of mine in the Click on any of the following items for more information Teaching logic as tool Curriculum Vita Short biography Texts written by Gries The programming language Polya Announcement of DIMACS Symposium on teaching logic Links to papers for the symposium Cornell CS Department Home Page Computer Science Upson Hall Cornell University Ithaca NY gries Short biography of David Gries was born in Flushing New York and spent years there before escaped received Queens College in and went to work for the Naval Weapons laboratory as civilian as met my Elaine few months later and we were married in November We went to Illinois for more education received Masters degree in math from Illinois in My assistantship was to help two Germans Manfred Paul and Ruediger Wiehle write full Algol compiler for the IBM computer it was fun figuring out how to implement recursion efficiently before there were many papers on the topic This ended up in my wife and going to Munich for almost three years received my doctorate under Bauer and Joseph Stoer from MIT the Munich Institute of Technology Germany in June This was in math or numerical analysis since computer science theses were not yet kosher was an assistant professor of Computer Science at Stanford from to While at Stanford our twins Paul and Susan were born What made it more exciting than usual was that they were born on the birthday of myself and my twin April So when my twin is in town Elaine makes four birthday cakes We left Stanford because it had no weather We moved to Cornell which has weather in and have been snowed in ever since was Department Chair in and became the William Lewis Professor of Engineering in had Guggenheim Fellowship in Return to table of contents am better known for my text writing and my contributions to education than on the wonderfulness of my research Do what you are good at bloom where you are planted have received number of awards for contributions to education the IEEE Taylor Booth Award the ACM SIGCSE award in Cornell Outstanding Educator Award in the Clark Award from Cornell College of Arts Sciences in and the American Federation of Information Processing Societies AFIPS education award in am proud of all my advisees but two stand out Susan Owicki thesis laid the foundation for proofs of correctness of parallel programs with the notion of paper by us on the topic won the ACM Award for best paper in programming langauges and systems And thesis just won the ACM award for Raman designed and implemented system for speaking any document including technical articles and books The same document can be printed or spoken Being able to speak mathematics in an effective manner was an important goal of his work Reading for the Blind is already using his system to produce audio cassettes served as Chair of the Computing Research Association then the Computer Science Board in the late when it opened its office in Washington and began seriously to represent computing research interests also conducted the Taulbee Surveys in the period and am proud of obtaining essentially complete responses from computer science departments during that period No other comparable survey has had such response rate One year it required only telephone calls to get the departments to send in their questionnaires received the Computing Research Association Service Award for this work on the Surveys and for chairing the Association during its move toward respectability and responsibility am currently editor for IPL Acta Informatica Formal Aspects of Computing and Software Concepts and Tools This editing keeps me busy but enjoy it try to take an interest in individual papers when know the area and will suggest substantial rewrites myself when believe it will help Serve where you can best serve Fred Schneider and are of Springer Verlag Texts and Monographs in Computer Science What do do in my spare time It used to be sports like golf softball volleyball swimming and table tennis Once in China split my pants playing ping pong An hour later while giving lecture mentioned that the audience should not laugh when turned around and explained why The interpreter spoke and everyone laughed However do know whether he told the truth or just said Gries made joke also used to sing barbershop and Gilbert and Sullivan And working around the house carpentry wiring remodeling has taken lot of time and yielded considerable satisfaction Return to table of contents	faculty	cornell
4337	 Server Date Wednesday GMT Wednesday GMT Bruce Randall Donald Bruce Randall Donald Associate Professor brd MIT Weather in Palo Alto My Official Departmental Home Page Cornell Robotics and Vision Laboratory Dan Huttenlocher and founded the Cornell Robotics and Vision Laboratory in Research My interests include robotics microelectromechanical systems geometric algorithms and artificial intelligence Robotics is the science that seeks to forge an intelligent computational connection between perception and action Working with graduate student Jim Jennings research associate Daniela Rus graduate student Russell Brown and lab alumnus Jonathan Rees now at MIT we developed team of autonomous mobile robots that can perform sophisticated distributed manipulation tasks such as moving furniture The robots run robust SPMD protocols that are completely asynchronous and require no communication With grad student Karl and EE Professor Noel MacDonald we are building massively parallel array of microactuators in the Cornell National Nanofabrication Laboratory The array is SCREAM chip containing over actuators in square centemeter and can orient small parts without sensory feedback Our microfabricated actuator arrays could be used to construct programmable at any scale or to build IC walking VLSI chips Graduate student Amy Briggs worked with Dan Huttenlocher vision group to develop sensor planning and surveillance system for team of mobile robots The robots use vision to detect and intercept targets in the lab Demos Massively parallel actuator arrays MPEG video of Tommy chasing Lily Tommy and Lily are mobile robots we built Using algorithms developed by the vision group in our lab Lily can track Tommy and follow him using visual information alone This video shows Lily view of the chase Face Morphing Selected Recent Publications Donald and MacDonald Upper and Lower Bounds for Programmable Vector Fields with Applications to MEMS and Vibratory Parts Feeders International Workshop on the Algorithmic Foundations of Robotics Toulouse France Briggs and Donald Robust Geometric Algorithms for Sensor Planning International Workshop on the Algorithmic Foundations of Robotics Toulouse France Donald and MacDonald Silicon Actuator Arrays for Micro Manipulation Tasks IEEE Workshop on Micro Electro Mechanical Systems MEMS San Diego California February Donald and MacDonald Classification and Lower Bounds for MEMS Arrays and Vibratory Parts Feeders What Programmable Vector Fields Can and Can not Do Part IEEE International Conference on Robotics and Automation ICRA Minneapolis Minnesota April Donald and MacDonald New and Improved Manipulation Algorithms for MEMS Arrays and Vibratory Parts Feeders What Programmable Vector Fields Can and Can not Do Part II IEEE International Conference on Robotics and Automation ICRA Minneapolis Minnesota April Provably Good Approximation Algorithms for Optimal Kinodynamic Planning Robots with Decoupled Dynamics Bounds with Xavier Algorithmica Vol no pp Provably Good Approximation Algorithms for Optimal Kinodynamic Planning for Cartesian Robots and Open Chain Manipulators with Xavier Algorithmica Vol no pp Kinodynamic Motion Planning with Xavier Canny and Reif Journal of the ACM Vol No pp Information Invariants for Distributed Manipulation with Jennings and Rus in International Journal of Robotics Research in press Donald Jennings and Rus Minimalism Distribution Supermodularity Journal of Experimental and Theoretical Artificial Intelligence JETAI in press am writing book entitled Information Invariants in Robotics draft of the first quarter of this book appeared as paper in Artificial Intelligence Here it is Information Invariants in Robotics Revised MS based on the paper On Information Invariants in Robotics Artificial Intelligence Vol Jan pp Distributed Robotic Manipulation Experiments in Minimalism in International Symposium on Experimental Robotics ISER Stanford CA Moving Furniture with Teams of Automonous Mobile Robots with Jennings and Rus in Society of Japan International Workshop on Intelligent Robots and Systems IROS Pittsburgh PA Sensorless Manipulation Using Massively Parallel Actuator Arrays with Mihailovich and Noel MacDonald Proc IEEE International Conference on Robotics and Automation San Diego CA May demo and more detailed explanation Program Mobile Robots in Scheme with Rees Proc IEEE International Conference on Robotics and Automation Nice France May pp Information Invariants for Distributed Manipulation with Jennings and Rus in The First Workshop on the Algorithmic Foundations of Robotics Peters Boston MA ed Wilson and Automatic Sensor Configuration for Planning with Amy Briggs Proceedings IEEE International Conference on Robotics and Automation San Diego CA May Other Publications Recent Theses and Papers of PhD Students Patrick Xavier PhD Except for the thesis these TR are mostly superseded by three more recent journal papers listed starting here Amy Briggs PhD Her Papers and Thesis Russell Brown PhD His Papers and Thesis Jim Jennings Trained in Our Lab Daniela Rus Jonathan Rees Dinesh Pai More papers are avalable through the Cornell CS TR server Some other papers are listed here Cornell CS TR version of my Online Tech Reports Cornell Library Catalog CS TR index Obtaining Copies of Papers Copies of our papers are available via anonymous FTP Pictures We have developed team of small autonomous mobile robots that can move furniture around in our lab for group portrait of our robots Click here to see picture of Tommy and Lily mobot pushing couch Click here to see picture of Tommy and Lily rotating couch Click here to see picture of Tommy the mobile robot drawn by Loretta Pompilio Click here to see pictures of people and robots working in the lab Our lab was on The Discovery Channel Beyond and you can find out more about it here Fun Poem by Alfred the Mail Agent Family Pictures play in Harmful If Swallowed in Ithaca sometimes play with in California More Other people and robots in the Cornell Robotics and Vision Laboratory Cornell Robotics and Vision Laboratory home page Other people in the Cornell CS department Click here for search tools and information access stuff Return to Cornell CS Why say click here You will have the tallest darkest leading man in Hollywood Merian Cooper to Fay Wray	faculty	cornell
4338	 Server Date Wednesday GMT Thursday GMT Catherine Wagner Catherine Wagner Senior Lecturer PhD Cornell University My primary responsibilities in the Computer Science Department are in teaching am working with others in the department to revise the curriculum for our lower level courses am specifically interested in the development of course for students who are for our introductory course in programming University Activities Computer Science Undergraduate Curriculum Committee Professional Activities Association for Symbolic Logic Association for Computing Machinery Institute of Electrical and Electronics Engineers Association for Women in Mathematics Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4339	 Server Date Wednesday GMT Sunday GMT Stephen Vavasis Stephen Vavasis Associate Professor Department of Computer Science Rhodes Hall Cornell University Ithaca NY email vavasis phone fax During the period to am on sabbatical at MCS Division Bldg Argonne National Laboratory Cass Argonne IL email vavasis phone fax Note change in area code effective My research interest is numerical analysis You sure what numerical analysis is Please see the essay by my colleague Trefethen More specifically am interested in Numerical optimization and complexity issues Numerical methods for boundary value problems Geometric problems arising in scientific computing Sparse matrix computations have few recent manuscripts available Vavasis and Ye primal dual accelerated interior point method whose running time depends only on click here Hough and Vavasis Complete orthogonal decomposition for weighted least squares click here Mitchell and Vavasis An aspect ratio bound for triangulating cut by hyperplane click here Driscoll and Vavasis Numerical conformal mapping using and Delaunay triangulation click here The QMG package have recently completed software project on mesh generation for the finite element method in three dimensions The software package called QMG is available at the source code level by anonymous ftp With QMG you can construct polyhedral geometric objects with very complicated topology holes internal boundaries etc and automatically create an unstructured tetrahedral mesh for them The mesh generator is based on algorithmic work by Scott Mitchell and me You can also solve an elliptic boundary value problem div on your domain The package is written in and Matlab and is distributed for free at the level anonymous ftp distribution began QMG was released on November features many improvements over including faster mesh generation algorithm VRML graphics much cleaner code boundary mesh generation algorithm compatibility with Microsoft Windows NT as well as Unix and compatibility with as well as Matlab Please see the documentation Vavasis page from the annual report Back to CS home page	faculty	cornell
4340	 Server Date Wednesday GMT Sunday GMT Monika Henzinger Homepage Monika Rauch Henzinger Assistant Professor Computer Science Department Cornell University Ithaca NY Email mhr Phone Fax Currently on leave at Digital Equipment Corporation Systems Research Center Homepage Research Interests Combinatorial and Graph Algorithms especially Dynamic Graph Algorithms and Randomized Data Structures Graph Theory Data Structures Lower Bounds Recent Publications Dynamic Graph Algorithms Project Page Program Committees Homepage of CS Fall	faculty	cornell
4341	 Server Date Wednesday GMT Thursday GMT Charles Van Loan Charles Van Loan Professor PhD University of Michigan We continue to develop new methods for various Kronecker product computations In particular we have method for solving the nearest Kronecker product problem when the factor matrices are subjected to inhomogeneous constraints Some applications in signal processing and Markov processes are solved as result Kronecker product descriptions for various fast wavelet transforms have also been derived Our aim is to proceed by analogy to the FFT where such descriptions have played an important role in the development of algorithms Both undergraduate texts on computational science that have been working on for the last four years are now in production One is currently being translated into in anticipation of the fall semester University Activities Computer Science Department Undergraduate Curriculum Committee Department Representative Arts and Sciences Chairs Meeting Freshman Admissions Reader Arts and Sciences Professional Activities Editor SIAM Journal of Matrix Analysis Member Wilkinson Prize Committee SIAM Member DiPrima Prize Committee SIAM Member Organizing Committee Householder Conference Member Householder Prize Committee Lectures Applications of the Kronecker product Linkoping University Sweden January Umea University Sweden January Building intuition for computational science Umea University Sweden January Applications of the Kronecker product Ohio State University April Building intuition for computational science Ohio State University April Publications Optimizing closed loop adaptive optics performance with use of multiple control bandwidths Journal of the Optical Society of America with Ellerbroek Pitsianis and Plemmons Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4342	 Server Date Wednesday GMT Thursday GMT Faculty Research Interests Dexter Kozen Dexter Kozen Joseph Newton Pew Jr Professor in Engineering PhD Cornell University Research Interests My research interests include algorithms and complexity especially complexity of decision problems in logic and algebra and logics and semantics of programming languages Papers Available Online Kleene algebra set constraints type inference computational algebra automata theory algorithms and complexity logic Bibliography list of all publications Cornell technical reports Course Notes Structure and Interpretation of Computer Programs Automata and Computability Theory Fun Stuff Family pictures Rugby The Effect Computer Science Department Upson Hall Cornell University Ithaca New York USA kozen work home fax	faculty	cornell
4343	 Server Date Wednesday GMT Thursday GMT Juris Hartmanis Juris Hartmanis Walter Read Professor of Engineering PhD California Institute of Technology The strategic goal of our research is to contribute to the development of comprehensive theory of computational complexity Computational complexity is the study of the quantitative laws that govern computation and it is an essential part of the science base needed to guide harness and exploit the explosively growing computer technology Computational complexity classifies problems by the amounts of various computational resources needed to solve them This classification yields complexity classes each of which consists of all problems that can be solved within given computational resource bound To gain deeper understanding of what makes problems hard to compute we explore various complexity classes relations between these classes and the internal structure of these classes We also study the between different computational resources in problem solving with particular attention to memory requirements randomness as computational resource and interactive computing University Activities Member Faculty Council of Representatives Chair Computer Science Department Recruiting Committee Honors ACM Turing Award with Member National Academy of Engineering Foreign Member Latvian Academy of Sciences Fellow American Academy of Arts and Sciences Fellow New York State Academy of Sciences Fellow American Association for the Advancement of Science AAAS Charter Fellow of the ACM Professional Activities Editor Lecture Notes in Computer Science SIAM Journal of Computing Journal of Computer and Systems Sciences Advisory Board for EATCS Monographs in Theoretical Computer Science Board of Directors Computing Research Association IFIP Technical Committee for Foundations of Computer Science Advisory Council George Brown School of Engineering Rice University Houston Texas National Academy of Engineering Peer Committee for Computer Science and Engineering Visiting Committee to the Physical Sciences Division University of Chicago EATCS Council Board of Advisors International Journal for the Foundations of Computer Science World Scientific Press Editorial Board Chicago Journal of Theoretical Computer Science Electronic Journal for the Foundation of Computer Science MIT Press Foundations Editor Electronic Journal for Universal Computer Science Goedel Prize Committee Member Computer Science and Telecommunications Board of the National Research Awards Honorary doctoral degree University of Dortmund Lectures Some observations about computer science Banquet speech International Logic Programming Symposium Cornell University November Computational complexity its scope nature and future Distinguished Lecture Series University of Virginia February Distinguished Lecture Series University of Tennessee April Publications On computational complexity and the nature of computer science Turing Award Lecture Communications of the ACM October The random Oracle hypothesis is false Journal of Computer and System Sciences August with Richard Chang Benny Chor Oded Goldreich Johan Hastad Desh Ranjan and Pankaj Rohatgi On Hausdorff and topological dimension of the Kolmogorov Complexity of the real line Journal of Computer and System Sciences December with Cai On the weight of computations EATCS Bulletin February Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4344	 Server Date Wednesday GMT Wednesday GMT Ramin Zabih Home Page Ramin Zabih Assistant Professorrdz fax ResearchMy research interests lie in Computer Vision and Multimedia am currently interested in constructing search engine for images using some new methods we have developed recently been thinking about the economic impact of freely available pricing information on the Web My essay on this subject appeared in Phil Agre electronic newsletter The Network Observer in March StudentsI work with PhD students Jing Huang Vera Kettnaker and Olga Veksler also spend fair amount of time with various undergraduates principally Greg Pass and Justin Voskuhl Other undergraduates include Scott Cytacki Justin Miller and Rob Szewczyk PublicationsMost of these publications are available in postscript or in PDF acrobat format Free PDF readers for variety of different architectures are available from Adobe Histogram Refinement for Image Retrieval Greg Pass and Ramin Zabih IEEE Workshop on Applications of Computer Vision Sarasota Florida December Comparing Images Using Color Coherence Vectors Greg Pass Ramin Zabih and Justin Miller Fourth ACM Conference on Multimedia Boston Massachusetts November Algorithms for Detecting and Classifying Scene Breaks Ramin Zabih Justin Miller and Kevin Mai Third ACM Conference on Multimedia San Francisco California November Local Transforms for Computing Visual Correspondence Ramin Zabih and John Woodfill Third European Conference on Computer Vision Stockholm Sweden May TeachingI am currently teaching an introduction to computer programming In the Spring will teach course in computer vision If you are interested in that course there are scribe notes from my lectures available on the web page have also taught an introduction to computation and programming Professional ActivitiesI am on the program comittee for the IEEE conference on computer vision and pattern recognition which will be held in San Juan PR in June am also on the organizing committee for the IEEE Workshop on access of Image and Video Libraries to be held in conjunction with AcknowledgementsThis web page design is courtesy of Dan Huttenlocher Last Updated November	faculty	cornell
4345	 Server Date Wednesday GMT Tuesday GMT Faculty Research Interests Greg Morrisett Greg Morrisett jgm Assistant Professor of Computer Science Cornell University Ithaca NY Office Upson Hall Office phone Table of Contents Research Interests Teaching Selected Papers Related Research Links Personal Information Research Interests My primary research interests are in the development and use of advanced programming languages am particularly interested in the use of languages such as Standard ML for building systems software including systems operating systems and distributed systems Lately have focused on the implementation issues that have kept safe languages from being used in the construction of systems software To this end my research has concentrated on producing code for languages that is faster consumes less memory and supports hacking with the bits am also interested in bringing powerful tools from programming language theory such as compilation partial evaluation abstract interpretation and code generation into the design specification and construction of real systems software Teaching CS Semantics of Programming Languages Fall CS Advanced Language Implementation Spring Selected Papers Semantics of Memory Management for Polymorphic Languages Greg Morrisett and Robert Harper CMU Technical Report Also appears as September Compiling with Types Greg Morrisett gzipped postscript Thesis Published as CMU Technical Report December TIL Optimizing Compiler for ML Tarditi Morrisett Cheng Stone Harper Lee SIGPLAN Conference on Programming Language Design and Implementation The Compiler Performance and Safety Through Types Morrisett Tarditi Cheng Stone Harper Lee Workshop on Compiler Support for Systems Software Typed Closure Conversion Yasuhiko Minamide Greg Morrisett and Robert Harper To appear in the Symposium on Principles of Programming Languages Extended version published as CMU Technical Report July Abstract Models of Memory Management dvi version Greg Morrisett Matthias Felleisen and Robert Harper Conf on Functional Programming Languages and Computer Architecture Extended version published as CMU Technical Report dvi version also as CMU Fox Note Compiling Polymorphism Using Intensional Type Analysis Robert Harper and Greg Morrisett Proc of the Annual ACM Symposium on Principles of Programming Languages San Francisco January Optimistic Parallelization Greg Morrisett and Maurice Herlihy October Refining Stores Gregory Morrisett Proceedings of the ACM SIGPLAN Workshop on State in Programming Languages Copenhagen Denmark June Procs and Locks Portable Multiprocessing Platform for Standard ML of New Jersey Gregory Morrisett and Andrew Tolmach Proceedings of the Fourth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming San Diego May Portable Multiprocessing Interface for Standard ML of New Jersey Gregory Morrisett and Andrew Tolmach June Also appears as Princeton TR Adding Threads to Standard ML Eric Cooper and Gregory Morrisett December Related Research Links Mark Leone Resources for Programming Language Research used to be member of the Fox Project at Carnegie Mellon information about Standard ML Home pages of researchers in programming languages Home pages of research projects in programming languages oriented bibliographies Cornell Department of Computer Science Personal Information Home Address Warren Road Ithaca NY phone	faculty	cornell
4346	 Server Date Wednesday GMT Friday GMT Faculty Research Interests Brian Smith Brian Smith bsmith Xerox Professor of Computer Science University Of California at Berkeley Office Upson Hall Office phone Office hours this semester Tues Thurs to Research Interests Teaching Selected Publications Research Talks Misc Links Research Interests My research goal is to make video first class data type in our computing environment To this end my research group Project Zeno is building technologies supporting the storage communication and processing of continuous media data In contrast to other commercial and research approaches which require specialized hardware operating systems or networks to be usable all of these technologies we are designing fit into the current research environment Our premise is that the current hardware software and communication infrastructure is sufficient to support research into continuous media systems and applications We are verifying this hypothesis by building working systems Our research on storage systems is directed towards building the Zeno distributed video file server The Zeno architecture uses network of workstations connected by generic local area network an ethernet common environment in computing research laboratories Each workstation can act simultaneously as both client and server of continuous media data As client workstation plays video stored on one or more servers As server workstation is file server for video data Each client can receive video stored at several servers and each server can service several clients Compared with large centralized servers the advantages of this design are Scalability As new clients are added new servers are automatically added Load balancing The load generated by serving videos is distributed both across machines and across networks in the case where the servers are located on different networks Low initial investment By utilizing existing infrastructure the Zeno architecture promotes early adoption in research environments with almost no initial investment Our research on communication systems is centered around best effort delivery protocols Such protocols are built on existing network protocols and in contrast to many other research efforts do not need to reserve network resources to establish connection Resource reservation protocols are well suited to the national communication infrastructure where users can be charged on per call basis for bandwidth and connections but are poorly suited to network environments where the network is shared resource equally accessible by all researchers Our approach is appropriate for the latter environments commonly found in research laboratories The communication protocol we have developed called is built on top of the UDP datagram protocol and is designed to transport audio and video data in playback applications in local metropolitan and wide area networks is used by the Zeno file server to deliver audio and video data to clients paper describing cyclic UDP is available online as well as the slides from research talk Our research on processing video data has been First we are developing algorithms to process video data in the compressed representation Processing video without decompression leads to dramatic in processing performance since it both removes the processes of compression and decompression and reduces the amount of data that must be processed Experiments with an implementation of these ideas on JPEG compressed image data indicates that the data can be processed one to two orders of magnitude faster than what was possible with previous approaches We are currently extending these ideas by parallelizing the algorithms using networks of workstations and by developing method for transcoding video in software In video transcoding video is translated from one compression format to another useful operation for video file servers that must service heterogeneous clients paper describing compressed domain processing is available online Our research on video processing is also exploring methods to simplify experimentation with video processing by developing programming language where video is first class data type This language called Rivl pronounced rival allows video processing effects to be specified independent of the resolution and format of the source material The language does for video what Postscript did for text and graphics it provides resolution independent method for specifying video processing Thus the same program can process low quality QuickTime video very quickly while editing decisions are made and then be used to format high quality finished product in much the same way that Postscript can be previewed on workstation at low quality then sent to dpi printer for camera ready copy paper describing RVL is available online talk that reviews our research on video processing both compressed domain processing and Rivl is available online The common theme of all these efforts is to provide tools to make video usable in our research environment talk that reviews this research is also available online Teaching At Cornell University teach an undergraduate course CS on computer architecture and graduate course CS on multimedia systems Selected Publications Jonathan Swartz Brian Smith Resolution Independent Video Language Proc of the Third ACM International Conference on Multimedia San Francisco CA November An HTML version is also available Asif Ghias Jonathan Logan David Chamberlin Brian Smith Query By Humming Large Musical Information Retrieval in An Audio Database Proc of the Third ACM International Conference on Multimedia San Francisco CA November An HTML version is also available Peter Liu Brian Smith Lawrence Rowe Name Server Proc of the Workshop Toronto Ontario Canada July Brian Smith Brian Smith Fast Software Processing of Motion JPEG Video Proc of the Second ACM International Conference on Multimedia San Francisco CA October Lawrence Ketan Patel Brian Smith MPEG video in software representation transmission and playback IS Symposium on Electronic Imaging Science Technology San Jose California February Brian Smith Lawrence Rowe Stephen Yen Tcl Distributed Programming Proc of the Workshop Berkeley CA June Ketan Patel Brian Smith and Lawrence Rowe Performance of Software MPEG Video Decoder Proc of the First ACM International Conference on Multimedia Anaheim CA August pp Brian Smith Lawrence Rowe New Family of Algorithms for Manipulating Compressed Images IEEE Computer Graphics and Applications September Lawrence Rowe Brian Smith Continuous Media Player Third International Workshop on Network and Operating Systems Support for Digital Audio and Video San Diego CA Selected Research Talks Distributed Multimedia System Research at Cornell My most recent research Resolution Independent Video Language Talk at Xerox Webster Research Center June Transmission Protocol for Continuous Media Data Computing with Video Xerox Site Review Nov University of Minnesota Colloquium Talk Feb Misc Links Multimedia Courses on the Web The Art Work of Annette Hanna Manual Electronic Proceedings CMT Documentation The PriceWeb	faculty	cornell
4347	 Server Date Wednesday GMT Sunday GMT Lloyd Trefethen Lloyd Trefethen Professor LNT My appointment at Cornell is in the Computer Science Department am also affiliated with the Center for Applied Mathematics the Department of Mathematics and the Cornell Theory Center My field is numerical analysis scientific computing have personal view of what this means Specific interests include numerical linear algebra numerical solution of PDE numerical conformal mapping approximation theory and fluid mechanics In recent years much of my work has been related to matrices and operators that is matrices and operators whose eigenvectors are not orthogonal and applications Textbooks Finite Difference and Spectral Methods textbook Numerical Linear Algebra textbook by Trefethen and Bau SIAM Recent papers MultiMATLAB MATLAB on multiple processors Matrix iterations the six gaps between potential theory and convergence Pseudospectra of linear operators Some other recent papers Other items Classic papers of numerical analysis Curriculum vitae Pseudospectra bibliography bet with Peter Alfeld Current PhD students at Cornell Vicki Howle Yohan Kim Divakar Viswanath Previous PhD students at MIT and Cornell Jeff Baggett Toby Driscoll Alan Edelman Louis Howell Walter Mascarenhas Noel Nachtigal Satish Reddy Toh Some other colleagues Jim Demmel Anne Greenbaum Martin Gutknecht Des and Nick Higham Anne Trefethen Andre Weideman	faculty	cornell
4348	 Server Date Wednesday GMT Wednesday GMT Thorsten von Eicken Thorsten von Eicken Assistant Professor Upson Hall Phone Fax Email tve Projects The architecture provides network interface for clusters of workstations It offers and communication over LANs The current implementation uses Sun Workstations interconnected by ATM Active Messages Several projects are porting Active Messages to new platforms including the ATM cluster and the IBM and extending the model to programs is simple extension to for parallel computing has been ported to several new platforms including shared memory multprocessors running and the IBM Courses Introduction to Digital Systems and Computer Organization Fall Computer Architecture Spring Frontiers of Parallel Systems Fall User Level Network Architecture Guest Lecture May Departmental Talks Reports Departemental Annual Report entry Fall Forum talk slides Departemental Annual Report entry Fall Forum talk slides Personal Web pages TvE pond with real water fish and plants Tired of the firewall Try my MacPPP which generates the password automatically without you ever having to think about it well after few months your passwords suddenly run out and you have to run to and installation instructions Selected Publications Network Interface for Parallel and Distributed Computing Thorsten von Eicken Anindya Basu Vineet Buch Werner Vogels to appear June Communication over ATM Networks using Active Messages von Eicken Avula Basu Buch Presented at Hot Interconnects II Aug Palo Alto CA An abridged version of this paper appears in IEEE Micro Magazine Active Messages Mechanism for Integrated Communication and Computation von Eicken Culler Goldstein and Schauser Proceedings of the Int Symp on Computer Architecture May Gold Coast Australia Active Messages an Efficient Communication Architecture for Multiprocessors von Eicken Thesis November University of California at Berkeley Papers published at UC Berkeley The links lead to postscript versions of the papers Parallel Programming in Culler Dusseau Goldstein Krishnamurthy Lumetta von Eicken Yelick Proceedings of Supercomputing November TAM Compiler Controlled Threaded Abstract Machine Culler Goldstein Schauser von Eicken Journal of Parallel and Distributed Computing Special Issue on Dataflow June Evaluation of Mechanisms for Parallel Programs in the and the Spertus Goldstein Schauser von Eicken Culler and Dally Proc of the Int Symp on Computer Architecture San Diego CA May LogP Towards Realistic Model of Parallel Computation Culler Karp Patterson Sahay Schauser Santos Subramonian von Eicken Proc of Fourth ACM SIGPLAN Symp on Principles and Practice of Parallel Programming San Diego CA May Two Fundamental Limits on Dataflow Multiprocessing Culler Schauser von Eicken Proceedings of the IFIP WG Working Conf on Architectures and Compilation Techniques for Fine and Medium Grain Parallelism Orlando FL Jan Active Messages Mechanism for Integrated Communication and Computation von Eicken Culler Goldstein and Schauser Proc of the Int Symposium on Computer Architecture Gold Coast Australia May Multithreading for Lenient Parallel Languages Schauser Culler and von Eicken Proceedings of the Conference on Functional Programming Languages and Computer Architecture Cambridge MA August Parallelism with Minimal Hardware Support Threaded Abstract Machine Culler Sah Schauser von Eicken and Wawrzynek Proc of Int Conf on Architectural Support for Programming Languages and Operating Systems CA April Analysis of Multithreaded Architectures for Parallel Computing Culler and von Eicken Proceedings of the Annual Symp on Parallel Algorithms and Architectures Crete Greece July That it	faculty	cornell
4349	 Server Date Wednesday GMT Thursday GMT Thomas Coleman Thomas Coleman Cornell University am Professcp No match Computer Science Department and the Center for Applied Mathematics also have strong affiliation with the Theory Center where am Director of group the Advanced Computing Research Institute Finally am member of the Cornell Computational Optimization Project CCOP group of Cornell faculty and researchers interested in the broad field of computational optimization discrete and continuous Research Program My research program is concerned with the design and understanding of practical and efficient numerical algorithms for continuous optimization problems My primary interest is the development of computational methods and tools for problems Projects Automatic Differentiation Image Imaging Parallel Linear Programming Minimization with Linear Inequalities Nonlinear Equality Constraints Students Postdocs and Professional Activities Recent Papers Books Current and Former PhD Students Research Associates and Postdocs Software Computational Mathematics Links Curriculum Vitae The Best Thomas Coleman Rhodes Hall Cornell University Ithaca New York coleman	faculty	cornell
4350	 Date Mon Nov GMT Server Fri Nov GMT Samiha Mourad Samiha Mourad Associate Dean Professor Ain Shams University Egypt Polytechnic University New York North Carolina State University She is the director of the VLSI Design Laboratory and Digital Systems Laboratory Research Interests Fault Detection and Diagnosis Design for Testability VLSI Design Go back to Faculty page smourad	faculty	misc
4351	 Date Wed Nov GMT Server Sat May GMT Richard LeBlanc Information Page Richard LeBlanc Richard LeBlanc received the degree in physics from Louisiana State University in and the and degrees in computer sciences from the University of Wisconsin Madison in and respectively He is Professor and the Associate Dean of the College of Computing of the Georgia Institute of Technology where he has been faculty member since January LeBlanc research interests include software engineering programming language design and implementation and programming environments Most of his research work particularly that associated with the Clouds Project has involved application of these interests in distributed computing systems He is also interested in software development methodologies and tools LeBlanc has served as technical consultant to industry on the Ada language and Ada compilation techniques He has done consulting work with the Lockheed Aeronautical Systems Company on the development of methodology for producing highly reliable digital flight control software and has served as consultant on software reliability and fault tolerance to corporations in the computing and telecommunications industries He has published successful textbook on compiler construction Crafting Compiler and Crafting Compiler with that has been adopted at over colleges and universities LeBlanc is member of the Association for Computing Machinery the IEEE Computer Society and Sigma Xi Contact information At Georgia Tech College of Computing Atlantic Drive Georgia Institute of Technology Atlanta Georgia rich Last Modified August by Eugene Liang eugene	faculty	misc
4352	 Date Mon Nov GMT Server Fri Nov GMT Samuel Marateck marateck Publications Books Selected Journal Articles The plot Course Homepages Introduction to Computer Science Fall Department of Computer Science Courant Institute of Mathematical Sciences New York University Mail Address room Mercer New York NY Phones voice fax Email marateck NYU Tech Reportshypertext	faculty	misc
4353	 Server Date Thursday GMT Thursday GMT Lewis Johnson Lewis Johnson Research Interests Interests center around the use of artificial intelligence and interaction in education and lifelong learning He leads several projects in this area The Intelligent Documentation project is developing system that dynamically generates descriptions and explanations of software systems to this effort called will integrate graphical media into these explanations and explore the use of design rationales in explanation of software The Virtual Environments for Training VET is developing autonomous pedagogical agents to increase the effectiveness of virtual environments for training purposes The PROBES project is developing tools for analyzing explaining and critiquing behavior in training simulations This builds on earlier work on debriefable agents and plan recognition The Automated Distance Education ADE project is developing multimedia distance education software incorporating automated student assessment and curriculum sequencing Biography Johnson is Project Leader of the Educational Technology Group at the USC Information Sciences Institute and Research Associate Professor of Computer Science at the University of Southern California USC Lewis Johnson received his degree in Linguistics in from Princeton University and his and degrees in Computer Science from Yale University in and respectively He is of the journal Automated Software Engineering He is member of the Steering Committee of the Software Engineering Conference member of the Executive Committee of the Artificial Intelligence in Education Society of the First Autonomous Agents Conference and Chair of SIGART When not working with computers Lewis sings professionally in concert and on stage He is member of the American Guild of Musical Artists and the American Federation of Television and Radio Artists Contact Information University of Southern California Information Sciences Institute Admiralty Way Marina del Rey CA Tel Fax johnson	faculty	misc
4354	 Server Date Thursday GMT Friday GMT Dipak Ghosal Field of Interest UC Davis Department of Computer Science Dipak Ghosal Assistant Professor Professor Ghosal primary interests are in the areas of networks and wireless communication systems with particular emphasis on the impact of these new technologies on the network and higher layer protocols and applications He has worked extensively on various protocol and architectural issues of the existing telephone network Professor Ghosal is also interested in the application of parallel architectures and distributed computing principles for protocol processing in networks Office Engineering II Phone ghosal Last modified August	faculty	misc
4355	 Date Mon Nov GMT Server Fri Oct GMT Michael Fitzpatrick Homepage	faculty	misc
4356	 Date Thu Nov GMT Server Fri Aug GMT Richard Newton Richard Newton University of California at Berkeley Professor newton Holmes McDonald Distinguished Teaching Award Eta Kappa Nu Society Best Paper Award Design Automation Conference Best Paper IEEE Design of Integrated Circuits and Systems Best Paper Award IEEE International Conference on Computer Design Best Paper Award Design Automation Conference Best Paper Award European Circuit Conference Distinguished Lecturer IEEE Circuits and Systems Society Committees General Chair Design Automation Conference Member Technical Advisory Board CAD Framework Initiative CFI Organizer ACM Workshop on Synthesis Simulation and Physical Design Leningrad USSR Associate Editor IEEE Transactions on Design Member Technical Program Committee IEEE International Conference on Computer Aided Design Member Technical Program Committee IEEE International Conference on Computer Aided Design Selected Publications Test Generation and Verification for Highly Sequential Circuits with Ghosh and Devadas IEEE Trans Design Vol No May pp Exact Algorithms for Output Encoding State Assignment and Boolean Minimization with Devadas IEEE Trans Design Vol No January pp Law MOSFET Model and Its Applications to CMOS Inverter Delay and Other Formulas with Sakurai IEEE Circuits Vol No April pp Electronic CAD Frameworks with Harrison Spickelmier and Barnes Proc IEEE Vol No February pp invited Synthesis and Optimization Procedure for Fully and Easily Testable Sequential Machines with Devadas Ma and IEEE Trans Design Vol No October pp	faculty	misc
4357	 Date Thu Nov GMT Server Thu Aug GMT Elwyn Berlekamp Elwyn Berlekamp Massachusetts Institute of Technology Professor berlek IEEE Richard Hamming Medal IEEE Koji Kobayashi Computer and Communications Award IEEE Centennial Medal Member National Academy of Engineering Fellow IEEE Miller Research Professor Chair Computer Science Division Selected Publications Algebraic Coding Theory Aegean Park Press Blockbusting and Domineering Combinatorial Theory Series Vol No September pp Encoders IEEE Trans Information Theory Vol pp Factoring Polynomials over Large Finite Fields Mathematics of Computation Vol pp patents	faculty	misc
4358	 Date Thu Nov GMT Server Wed Jun GMT Faiman Michael Michael Faiman Areas of research interest Communication Networks Design Management Routing Flow Control Design of Digital Systems Logic Computer Architecture Systems Micropro cessors Distributed Systems Networks Microproc essors Research Group Administrative help Julie Thomas Digital Computer Laboratory West Springfield Avenue Urbana IL fax faiman Go back to Faculty Index	faculty	misc
4359	 Date Mon Nov GMT Server Wed Sep GMT Home Page for Eric Allender Eric Allender Associate Professor Department of Computer Science Rutgers University PO Box Piscataway NJ USA Phone FAX Email allender Office Hill My research centers on questions in complexity theory including circuit complexity Kolmogorov complexity measure theory and properties of complexity classes Professional Activities Electronic Colloquium on Computational Complexity DIMACS Special Year on Logic and Algorithms Dagstuhl Seminar on Structure and Complexity IEEE Conference on Computational Complexity formerly known as the Structure in Complexity Theory Conference Chicago Journal of Theoretical Computer Science Complexity Theory Lecture Notes Selected Publications Classes Office Hours Advising Etc the chair of the Undergraduate Advising Committee Click here for information concerning advising Click here for current Office Hours Related Links at Rutgers Department of Mathematics DIMACS Rutgers Info System Search Facility test	faculty	misc
4360	 Date Mon Nov GMT Server Fri Feb GMT Hassan Hassan Foundation implementation and application of programming languages for Intelligent Software email hak titles Professor of Computing Science MPR Teltech NSERC Industrial Senior Chair in Intelligent Software Systems Education Grenoble France Computer Science Univ of Pennsylvania Philadelphia PA Computer Science Univ of Pennsylvania Philadelphia PA Habilitation agrave diriger des recherches Informatique Universit eacute de Paris France Laboratory Affiliations Intelligent Software Group director Intelligent Systems Lab associate Logic Programming Lab associate Graduate Students Current Research Recent Funding Selected Publications Back to Faculty Home Page	faculty	misc
4361	 Date Monday GMT Server Jone home page Warren Jones Professor and Department Chairman Schedule Research Interests Internet Information Filtering Research and Tool Development The exponential growth of information available of the Internet together with the accompanying increase in the complexity of the Internet itself requires the development of more effective tools for accessing this environment The goal of this research is to make contributions to the basic understanding of both the structure and dynamics of information processing in the Internet and to develop both extensions to existing filtering tools which improve their effectiveness and new approaches to the filtering process Methodologies which will be used include neural networks natural language understanding and genetic algorithms research group called Studies in Information Filtering Technology for Electronic Resources SIFTER has been formed to pursue these investigations The primary application of this research is to healthcare delivery systems Education Georgia Institute of Technology Selected Publications	faculty	misc
4362	 Date Mon Nov GMT Server Elke Rundensteiner homepage Elke Rundensteiner Assistant Professor Contact Info University of Michigan Dept of Electrical Engineering and Computer Science Beal Avenue Ann Arbor MI rundenst Tel Fax Office EECS Research Interests Database Systems and Databases Engineering and Scientific Databases Digital Libraries Research Projects Project Descriptions Project Descriptions File postscript Members of Research Group Students in Research Group University of Michigan Database Group UMDG UMDG Research Papers and Reports Listing of all papers Publications Biographical Information Vitae of Rundensteiner Teaching Winter Course Information	faculty	misc
4363	 Date Thursday GMT Server Wednesday GMT Jerry Potter Previous Hassan Peyravi Up Computer Science Faculty Next Michael Rothstein Jerry Potter Professor Jerry Potter received his Bachelors degree from the University of Iowa his Masters from Stevens Institute and his from the University of Wisconsin Madison He has worked at IDA Supercomputing Research Center Goodyear Aerospace Xerox Research and Bell Telephone Laboratories He is Professor of Computer Science at Kent State University While at Goodyear he was involved in software development for the STARAN ASPRO and MPP SIMD computers While at the Supercomputing Research Center he performed research on the Connection Machine for and years He has been funded by the Naval Ocean Systems Center NOSC the Office of Naval Research ONR the Naval Surface Weapon Center NSWC NASA Langley NASA Lewis and an Ohio Edison Innovative Research Grant His research interests include the continuing development of the associative computing paradigm the integration of associative SIMD computers with other architectures in heterogeneous supercomputer environment the development of techniques for compilation on massively parallel SIMD computers natural language and artificial intelligence processing on SIMD computers and the development of techniques for the introduction of parallel programming at the high school level Selected Research Accomplishments Over the last years Potter has developed and implemented the Associative Computing Paradigm as general purpose approach to parallel computing His research has resulted in an associative language ASC incorporating constructs to exploit associative search and memory allocation for scalable parallel computing He has recently published Frontiers of Computer Science research monograph ASSOCIATIVE COMPUTING Plenum Publishers February on his work in associative computing He was awarded an Ohio Innovator Award in for his research on parallel and associative computing He has supervised Ph students MS students and refereed for numerous conferences and journals He is also an area editor for the Journal of Parallel and Distributed Computing He has had support from NOSC and NASA for the investigation of Heterogeneous Associative Computing Ph Students Asthagiri An Associative Parallel Compiler for an Associative Computing language July Leangsuksun Practical Task Mapping Strattegies for Heterogeneous Computing Environments May Scott Heterogeneous Associative Computing In progress DeLozier Natural Language Operating System In progress Students Graduated Four recent graduates below DeLozier Image Processing Algorithms for Radiographic Analysis Fall Miles Parallel Algorithms for Global Optimization Fall Haverstock New Assembler for the STARAN Spring Kotran Dynamic Dump Debugger for ASC Fall Selected Research Funding and Awards Robot Environment Expert System NASA Langley Ohio Edison Innovative Research Award State of Ohio Associative Heterogeneous Computing NRAD Programming Techniques for SIMD Computers ONR Miscellaneous Research Activities Area Editor Journal of Parallel and Distributed Computing Outstanding Reviewer Award from COMPUTER Associative Processing Invited presentation to ONR Invited presentation to USC Invited presentation to SUNY Albany Robot Vision and SIMD Computers Invited presentation to George Mason University Selected Research Publications THE MASSIVELY PARALLEL PROCESSOR MIT Press An Associative Model of Computation Proceedings of the Second International Conference on Supercomputing Volume III May pp Data Structures for Associative Computers in Proceedings of the Symposium on the Frontiers of Massively Parallel Computation George Mason University Fairfax Array Processor Supercomputers with Meilander Proceedings of the IEEE Vol No December pp Exploiting Data Parallelism for Efficient Execution of Logic Programs with Large Knowledge Bases with Bansal Proc of the International Conference of Tools for Artificial Intelligence Washington USA November pp Parallel Associative Lexing with Asthagiri in Proceedings of the International Parallel Processing Symposium pp Associative Computing Research Monograph Plenum Publishing February Associative Prolog with Bansal Associative Computing by Potter Plenum Publishers February An Associative Model to Minimize Matching and Backtracking Overhead in Logic Programs with Large Knowledge Bases with Bansal The International Journal for Engineering Applications of Artificial Intelligence Pergamon Press Volume Number pp Data Parallel Shell for Large Knowledge bases with Bansal in Advanced Research Series in Knowledge Base Shells World Scientific Publishers Heterogeneous Associative Computing Keynote Speech in Proceedings of the Workshop on Heterogeneous Processing New Port Beach Calif April pp ASC An Associative Computing Paradigm in COMPUTER November pp with Baker et farrell	faculty	misc
4364	 Date Thu Nov GMT Server Fri Oct GMT Joseph Flaherty Joseph Flaherty flaherje Amos Eaton Polytechnic Institute of BrooklynNumerical Analysis Scientific Computation and Adaptive Methods Flaherty came to Rensselaer from New York University in Since his arrival he has been studying scientific computation and is currently investigating adaptive methods for differential equations He has recently become interested in developing versions of these methods that will run on variety of parallel computers His goal is developing automatic systems for solving partial differential equations These systems will allow scientists and engineers to describe problems in natural way automatically select appropriate numerical techniques solve the equations to prescribed level of accuracy and display the results His software is adaptive It can automatically change numerical methods and can move create or destroy finite difference or finite element meshes while the system is solving the equations and learning more about their properties techniques are general and thus capable of helping engineers confront and describe phenomena such as stresses in metals aerodynamics pollution dispersion in lakes and temperatures in nuclear reactor vessels These problems are typical of many practical situations where small scale structures form evolve propagate and decay during the course of calculating the solution Reliable robust and efficient software that automatically captures and resolves the phenomena as they appear would be very useful to scientists and engineers who may not know the nature or location of the situation beforehand His major successes have been in and transient systems His work relies heavily on the use of computer graphics so that scientists and engineers can easily specify their problems and visualize their results He and fellow researchers are starting to investigate adaptive methods for problems and procedures that are suitable for parallel computers Embedded data structures within the adaptive procedures can be exploited to develop efficient parallel strategies Faculty and Their Research	faculty	misc
4365	 Date Mon Nov GMT Server Tue Apr GMT Faculty Profile Saab Youssef Saab Assistant Professor PhD Computer Science University of Illinois Urbana office Math Science Bldg phone email saab Research interests Combinatorial Optimization Design Automation Graph and Geometric Algorithms Stochastic Algorithms Teaching CS CS CS Return to Faculty	faculty	misc
4366	 Jack Minker Options Comments System Administration Jack Minker Email minker Current Position Professor Department of Computer Science UMIACS University of Maryland Research Interests Artificial intelligence Logic Programming Research group PRISM Current Research Projects Combining Knowledge Bases Cooperative Answering Disjunctive Deductive Databases Null Values Understanding negation Courses Artificial Intelligence Spring Database Design Fall Discrete Structures Fall Additional information Electronic Sally Minker Electronic Art Gallery Vita with publication list DVI Papers available Carolina Ruiz and Jack Minker Combining Closed World Assumptions with Stable Negation To appear in Fundamenta Informaticae Jack Minker Logic and Databases Year Retrospective Invited Keynote Address Workshop on Logic in Databases San Miniato Italy July Jack Minker and Carolina Ruiz Mixing Default Rule with Stable Negation Proc of the Fourth International Symposium on Artificial Intelligence and Mathematics Fort Lauderdale Florida pages Parke Godfrey Jarek Gryz and Jack Minker Semantic Query Optimization for Evaluation In the Proceedings of the International Symposium on Methodologies for Intelligent Systems ISMIS Zakopane Poland June Dietmar Seipel Jack Minker and Carolina Ruiz Model Generation and State Generation for Disjunctive Logic Programs To appear in the Journal of Logic Programming Jose Alberto Fernandez Jarek Gryz and Jack Minker Disjunctive Deductive Databases Semantics Updates and Architecture Invited Paper at BISFAI Carolina Ruiz and Jack Minker Computing Stable and Partial Stable Models of Extended Disjunctive Logic Programs in Nonmonotonic Extensions of Logic Programming edited by Dix Pereira and Przymusinski Lecture Notes in Computer Science pages Fernandez Minker and Yahya Computing Perfect and Stable Models Using Ordered Model Trees Computational Intelligence Jack Minker and Carolina Ruiz Semantics for Disjunctive Logic Programs with Explicit and Default Negation Fundamenta Informaticae Anniversary Issue edited by Rasiowa volume number pages Parke Godfrey Jack Minker and Lev Novik An Architecture for Cooperative Database System Proceedings of the International Conference on Applications of Databases Lecture Notes in Computer Science Springer Verlag Vadstena Sweden June Invited paper Adnan Yahya and Jack Minker Representations for Disjunctive Deductive Databases Jack Minker An Overview of Nonmonotonic Reasoning and Logic Programming Workshop on Logic Programming and Reasoning Jack Minker and Carolina Ruiz On Extended Disjunctive Logic Programs Proceedings of the Seventh International Symposium on Methodologies for Intelligent Systems Invited Paper Edited by Komorowski and Ras Lecture Notes in Artifical Intelligence pages June Grant Horty Lobo Minker View Updates in Stratified Disjunctive Databases Journal Automated Reasoning Vol March pp Jose Alberto Fernandez and Jack Minker Computation of Perfect Models for Disjunctive Theories Journal of Logic Programming Submitted Preliminary version presented at the Workshop on Disjunctive Logic Programs International Logic Programming Symposium San Diego California Jose Alberto Fernandez Jorge Lobo Jack Minker and Subrahmanian Disjunctive LP Integrity Constraints Stable Model Semantics Annals of Mathematics and Artificial Intelligence Adnan Yahya Jose Alberto Fernandez and Jack Minker Ordered Model Trees normal Form for Disjunctive Deductive Databases Technical Report and University of Maryland Institute for Advance Computer Studies College Park MD July Submitted to the Journal of Automated Reasoning Terry Gaasterland Mark Giuliano Anne Litcher Yuan Liu and Jack Minker Using Integrity Constraints to Control Search in Knowledge Base Systems International Journal of Expert Systems pp Volume Number Shekhar Pradhan Jack Minker and Subrahmanian Combining Databases with Prioritized Information Computer Science Technical Report Series University of Maryland at College Park and August Terry Gaasterland Parke Godfrey Jack Minker and Lev Novik Cooperative Answering System Proceedings of the Logic Programming and Automated Reasoning Conference edited by Andrei Voronkov Lecture Notes in Artificial Intelligence Petersburg Russia pages July Jose Alberto Fernandez and Jack Minker Disjunctive Deductive Databases Proceedings of the Logic Programming and Automated Reasoning Conference Terry Gaasterland Parke Godfrey Jack Minker and Lev Novik Cooperative Answers in Database Systems Proceedings of the Space Operations Applications and Research Conference Houston Texas August Jose Alberto Fernandez and Jack Minker Semantics of Disjunctive Databases International Conference on Data Technologies Terry Gaasterland Parke Godfrey and Jack Minker Relaxation as platform for cooperative answering Journal of Intelligent Information Systems Terry Gaasterland Parke Godfrey and Jack Minker An Overview of Cooperative Answering Journal of Intelligent Information Systems Kluwer Academic Publishers vol no pp Invited paper Also appears as Terry Gaasterland Parke Godfrey and Jack Minker An Overview of Cooperative Answering Nonstandard Queries and Nonstandard Answers edited by Robert Demolombe and Tomasz Imielinski in series Studies in Logic and Computation Clarendon Press Oxford pp Zahidul Khandaker Jose Alberto Fernandez and Jack Minker Tractable Class of Disjunctive Deductive Databases Workshop on Deductive Databases International Conference on Logic Programming Jack Minker Toward Foundation of Disjunctive Logic Programming Proceedings of the National Conference on Logic Programming invited paper Donald Perlis and Jack Minker Completeness Results for Circumscription Journal of Artificial Intelligence Jack Minker and Donald Perlis Computing Protected Circumscription Journal of Logic Programming Last modified Fri Aug	faculty	misc
4367	 Date Wed Nov GMT Server Fri Oct GMT Mark Guzdial Information Page Graphics Visualization and Usability Center Mark Guzdial Mark Guzdial is an Assistant Professor in the College of Computing at Georgia Institute of Technology He received his in education and computer science joint degree at the University of Michigan in where he developed Emile an environment for high school science learners programming multimedia demonstrations and physics simulations He is also the designer of MediaText multimedia composition environment used in elementary and high school classrooms Mark is member of the GVU Center the Cognitive Science program and the EduTech Institute Mark recently workshop with Rick Weingarten of Computing Research Association for the National Science Foundation The charge of the workshop was to set research agenda for Computer Science in Educational Technology The draft report from that workshop is available Current Areas of Interest Educational computing scaffolding construction and design environments for students constructionism collaboration support log file analysis and visualization computational science computer modeling simulation and visualization for students Mark Guzdial current research centers on facilitating student learning through student design construction and analysis of artifacts Philosophically he is constructivist even constructionist but he sees need for support to enable and facilitate student construction of artifacts and knowledge His goal is to provide to students similar kinds of opportunities that professional scientists and engineergs have for learning and exploring through computation He has developed simulation environments for learning science through construction and is now exploring visualization and collaboration environments to facilitate science and engineering learning To evaluate the usability and learnability of the environments he creates Mark is developing techniques for analysis of user event traces log files Recent Classes with Interesting Home Pages CS Modeling and Design Winter which is where WebCaMILE was first used in CS CS Modeling and Design Spring where STABLE was first used CS Design and Evaluation of Educational Software CS Modeling and Design Fall Current Research Projects NSF Multimedia Courseware Project With John Stasko and Jim Foley am working on creating effective multimedia courseware for Computer Science courses using WWW Scaffolding and Design The design of Emile revolved around providing of what educators called scaffolding support which enables students to perform activities and to learn through those activities In collaboration with Elliot Soloway Kenneth Hay and Yasmin Kafai an interface design emphasis on design is evolving part of which is scaffolding CaMILE Collaborative and Multimedia Interactive Learning Environment is new learning environment designed to support students in collaboration with multimedia annotations CaMILE can be seen as MediaText on network DEVICE Dynamic Environment for Visualization in Chemical Engineering DEVICE is an environment in which Chemical Engineering students learn through process of design in simulated world DEVICE is being developed by Noel Rappin The eventual goal is to merge simulation support with collaboration tools to create support for learning in Chemical Engineering SCOPE Scaffolded and COntextualized Programming Environments for Engineering Education This project is sponsored by the National Science Foundation Log file analyses and visualizations are used to understand the effectiveness of the supports provided in these environments Cognitive Multimedia project with John Stasko Richard Catrambone Ashwin Ram and Mike Byrne sponsored by ONR focuses on trying to understand the most effective ways to construct interactive multimedia Generalized Scaffolding STABLE is first attempt at creating generalized scaffolding not modifying the environment but providing scaffolding multiple representations generic plan libraries la GPCeditor or Emile and collaborative environments in support of an existing work environment VisualWorks Smalltalk STABLE is being tested in CS during Spring Instructions on how to create STABLE cases are available Research Projects from the University of Michigan Working with Elliot Soloway and Elliot Highly Interactive Computing Environments group Mark was primarily involved in three projects at the University of Michigan GPCeditor Goal Plan Code Editor is Pascal programming environment that provides explicit supports for student design MediaText is multimedia composition environment for grades students Mark designed MediaText with Elliot and MediaText is now commercial product developed by Constructive Instruments and distributed by Apple Computer and Wings for Learning Emile is programming environment for science students exploring physics by creating simulations Emile was Mark dissertation work Emile implements scaffolding which provides adaptable levels of support Copies of recent AERA papers are available in WWW formats Contact information Ma rk Guzdial Graphics Visualization Usability Center College of Computing Atlantic Drive Georgia Institute of Technology Atlanta GA guzdial My family album Updated October	faculty	misc
4368	 Date Monday GMT Server Sprague home page Alan Sprague Associate Professor Schedule Research Interests Parallel Graph Algorithm and Computational Geometry The parallel graph algorithm research centers on algorithms for special classes of graphs such as chordal graphs Similar techniques and concepts lead to algorithms for certain computational geometry problems such as parallel algorithm to construct the constraint graph used in compaction of VLSI circuits Parallel Tree Search Algorithms Tree searching methods are used in artificial intelligence AI and optimization plus various other areas Branch and bound is one tree search method This research centers on how to partition the task for multiprocessor and how to partition the data structures used both for shared memory and distributed memory systems Other research addresses different search strategies including minimax and to name few The issues being addressed include distributing the coach among either shared memory multiprocessors or distributed memory multiprocessors and interprocessor communication to maximize search efficiency by letting each processor show search information Education Ohio State University Selected Publications	faculty	misc
4369	 Date Mon Nov GMT Server Fri Sep GMT Robert Rodman Robert Rodman Associate Professor Ph University of California Los Angeles Rodman research interests are in voice processing computational linguistics and applied CTI interface He is currently working on such projects as computer identification of speakers by voice automated lip synchronization the use of computerized telephone calls in political campaigns the use of computerized telephone calls to monitor elderly or frail persons living alone He has also published in the area of performance assessment of speech hardware use of voice as aids to the handicapped speech recognition of Chinese and theoretical linguistics He is the of popular linguistics textbook He is on the editorial board of the International Journal of Speech Technology and member of the Association of Computational Linguistics ACL and the Linguistic Society of America LSA Representative Publications Automated Direct Translation of to with Koster and Bitzer Proceedings of the Annual Asilomar Conference on Signals Systems and Computers pp An Introduction to Language Harcourt Brace Jovanovich with Fromkin Voice System for the Computer Entry of Chinese Characters Computer Speech and Language with Han Vol pp Voice Dialogue Systems with Bierman Intelligent Systems State of the Art and Future Directions pp Computer Speech Recognition in Augmentative Communication Journal of the American Voice Society Vol July pp Department of Computer Science Box College of Engineering North Carolina State University Raleigh NC last update by Script	faculty	misc
4370	 Date Thu Nov GMT Server Fri Aug GMT Raimund Seidel Raimund Seidel Cornell University Associate Professor on extended leave seidel NSF Presidential Young Investigator Award Committees Journal of Symbolic Computation Special Issue on Computational Geometry Member Editorial Board Discrete and Computational Geometry Member Editorial Board Journal of Symbolic Computation Member Editorial Board Computational Geometry Theory and Applications Chair Annual ACM Symposium on Computational Geometry Member Program Committee ACM Symposium on Computational Geometry Member Program Committee IEEE Symposium FOCS Member Program Committee Workshop on Algorithms and Data Structures WADS Member Program Committee Scandinavian Workshop on Algorithm Theory SWAT Member Program Committee ACM Symposium on Computational Geometry Member Program Committee IEEE Symposium FOCS Selected Publications Linear Programming and Convex Hulls Made Easy Discrete and Computational Geometry Vol pp Single and Fast Randomized Algorithm for Computing Trapezoidal Decompositions and for Triangulating Polygons Computational Geometry Theory and Applications Vol pp Randomized Search Trees with Aragon Proc IEEE Symp on Foundations of Computer Science pp The Ultimate Planar Convex Hull Algorithm with Kirkpatrick SIAM Computing Vol pp Constructing Convex Hulls at Logarithmic Cost per Face Proc ACM Symp on Theory of Computing pp Left to right Butler Lampson Michael Clancy winner of first Diane McEntyre Award for Excellence in Teaching Caryn Dombroski Jacob Nora Wagner Raimund Seidel Martina Seidel Lotfi Zadeh Niklaus Wirth Regina Godfrey Marijke Lawler Eugene Lawler Jacob Lampson and Wirth are winners of the Distinguished Alumnus Award in Computer Sciences and Engineering	faculty	misc
4371	 Date Thu Nov GMT Server Wed Aug GMT Resume Of Steven Jacobs Steven Jacobs Email Phone Employment History TRW Systems Integration Group Redondo Beach CA to present to present Presently professional staff manager of organization for TRW Enterprise Solutions TES the commercial part of TRW Systems Integration Group Managing personnel assigned throughout California Member of the Software Engineering Process Group SEPG special team to improve the Division software development processes as defined by the Software Engineering Institute Refining procedures and training software engineers on policies processes and standards Taught over personnel at multiple TRW locations in the West the new division policies and processes Beckman Instruments Brea CA to to Director of the Software Development organization for the Diagnostics Development Center of Beckman Built up organization into highly qualified software team that met major product delivery schedules This was accomplished by intensive training use of consultants in key areas reassigning personnel per individual strengths hiring and coaching Overall responsibilities include staffing resource allocation management of budget representing software in Beckman strategic planning and project performance of software teams to August Software Lead for the Console MPC Project for multiple new instrument projects at Beckman Beckman designs manufacturers sells and services laboratory systems for clinical analysis and investigation into life processes MPC is written in running the QNX UNIX operating system Lead group to coordinate interfaces between multiple instruments TRW Systems Integration Group Redondo Beach CA to to TRW SEPG Defined policies processes and standards for software engineers Supported numerous activities Received numerous commendations for these efforts May to Apr Managed organizations of TRW software developers varying in size from to persons developing wide range of applications Skill Center Manager of the Software Engineering and Applications Software Skill Center from April to April Responsible for over of software programs both contract work and This included proposal work to solicit the business and contract performance Managed personnel assigned throughout the and Europe Recognized in customer survey as the best of the eight Skill Center managers in the Division Managed the Human Machine Interface HMI Systems Department from April to April growing the organization from persons to technically superior software engineers before being merged into the larger Skill Center Was recognized as an excellent TRW Department Manager from customers employees and peers Was selected to run the larger Skill Center organization in process that reduced Departments into eight Skill Centers As an additional duty was responsible for two HMI product developments that landed two large contracts for TRW As part of the role of the leader of the HMI Department became on the products and technology later growing to be recognized expert related to software engineering and HMI Developed an innovative seminar concept for easy enjoyable and free technical Expert in cost and schedule control of dynamic tasks Received Cash Award for personnel evaluation process Supported numerous corporate activities to further enhance my value to the corporation Affirmative Action Chair management trainer TRW representative at TRW Foundation presentation Division Newsletter contributor and other activities Selected to train numerous personnel on new techniques and practices both by travel to and video May to May Software manager for programming task on network communications systems running to Apr Systems Analyst for number of software activities with full perspective for software development Performed requirements definition and system operator task analysis software and database architecture design computer simulation performance analysis software development test and documentation Technically expert in of software technologies including GUI UNIX workstation platform applications and tools and Ada programming CASE DBMS and others Jet Propulsion Laboratory Pasadena CA July to Systems Analyst Performed operations research statistical studies and information system development of research and development programs University of Southern California Los Angeles CA Fall to present concurrent with above Instructor Computer Science Department Education Computer Science UCLA Mathematics Monmouth University NJ Personal Enjoy technical writing and teaching Over publications and presentations can be provided upon request Married two daughters and one son Jogger Professional Societies Activities and Awards ACM HFES and Senior Member IEEE Course author and presenter at ACM Tutorial Week Los Angeles Program Committee and referee for numerous technical conferences and publications Organized and TRW Conference on HMI Technology and Applications Panel Session Organizer for ACM Computer Human Interaction CHI Conference Workshop Chair at and ACM CHI Conferences Technical of Parallel Processing Conference Panel Session Organizer National Computer Conference Formerly ACM Executive Council Member of Chapter West Los Angeles College Computer Science Advisory Committee Publications and Presentations Software Development Policies and Process Course developed for TRW instructor September EXCEL Performance Review System Beckman Instruments internal training Brea CA August instructor User Interface The Critical Design Feature part of session entitled User Interface Design Impact on Clinical Information Technology Annual Meeting of the Association for the Advancement of Medical Instrumentation Anaheim CA May presenter and panelist User Interface Software Process Tools and Techniques one day nationally broadcast seminar for USC and National Technical University NTU April author and lecturer Introduction to ISO Course Beckman Instruments internal training Brea CA December and instructor Diagnostics Development Center Software Process Course Beckman Instruments internal training Brea CA December and instructor Laboratory Instruments and Data Management Systems Design of Software User Interfaces and Software Systems Validation Operation and Monitoring Proposed Guideline National Committee for Clinical Laboratory Standards NCCLS November Developing User Interface Software in the one day nationally broadcast seminar for USC and National Technical University NTU September and lecturer User Interface Design Tutorial ACM Tutorial Week Los Angeles Culver City CA June author and instructor User Interface Design Course Beckman Instruments internal training Brea CA June author and instructor Software Development Process Course developed for TRW course coordinator and lecturer Developing User Interface Software in the one day nationally broadcast seminar for USC and NTU June and lecturer User Interface Software short course for UCLA Extension February course coordinator and lecturer Developing User Interface Software in the one day nationally broadcast seminar for USC and NTU August and lecturer User Interface Software Development Environment for the short course for UCLA Extension February course coordinator and lecturer Decision Making panel session summary Proceedings of the ACM Conference on Human Factors in Computing Systems CHI Seattle WA April author Human Machine Interface Technology Crucial for TRW Keynote Address Proceedings of the TRW Conference on HMI Technology and Applications Carson CA February author User System Interface TRW Quest Magazine Summer Project Planning module of the TRW Fundamentals of Project Management Course August author and instructor Decision Support Computer Human Interaction ACM Computer Human Interaction CHI conference workshop results in ACM SIGCHI Bulletin January System Design and Evaluation module of the TRW Systems Engineering Course July and instructor Decision Support Computer Human Interaction ACM Computer Human Interaction CHI conference workshop results in ACM SIGCHI Bulletin January author Requirements module of the TRW Software Engineering Course February and instructor Proceedings of the International Conference on Parallel Processing IEEE Computer Society Press August System Design for Multiple Site Configurations Proceedings of the IEEE Phoenix Conference on Computers and Communications Phoenix AZ March author Analyzing Computing Resources for the Satellite Ground System Proceedings of the International Conference on System Science Honolulu HI January Software Management Issues for New System Designs AFIPS Press Proceedings of the National Computer Conference Las Vegas NV July Technique for Systems Architecture Analysis and Design Applied to the Satellite Ground System SGS Proceedings of the IEEE Computer Society International Conference on Distributed Computing Systems San Francisco CA May System Design for Multiple Site Configurations draft IEEE Computer Society Technical Committee on Systems Newsletter Vol No Fall author Software Management for the AFIPS Press Proceedings of the National Computer Conference Anaheim CA May Performance Prediction and Analysis for Distributed Data Processing Systems Proceedings of the ACM Computer Science Conference Orlando FL February author Method for Comparing Distributed Computer System Architectures Proceedings of the IEEE Computer Software and Applications Conference COMPSAC Chicago IL November Operating Systems Chapter in the Handbook of Software Engineering Edited by Vick and Ramamoorthy New York Van Nostrand author Methodology for Computer Performance Appraisal of Communications Satellite System Proceeding of the NSIA Software Conference Arlington VA October Teaching Software Engineering in the Adult Education Environment Proceedings of the ACM Computer Science Conference Louis MO February author Technique for Comparative Assessment of Software Development Management Policies AFIPS Press Proceedings of the National Computer Conference Anaheim CA May Book Review of Compiler Construction Theory and Practice by Barrett and Couch IEEE Computer February and Book Review of Database Professional Primer by Kroenke IEEE Computer April author Electric Vehicle Assessment Insights Gained in the Use of SPSS Proceedings of the Annual SPSS User and Coordinators Conference Chicago IL October author The Many Faces of Program Librarian INFOSYSTEMS magazine October author	faculty	misc
4372	 Date Tue Jan GMT Server Tue Jan GMT IU Computer Science Steve Johnson Previous Next All Steve Johnson Computer Science department of Indiana University Bloomington Indiana Finger me for more information or to see if logged on My personal Web page hyplan My departmental report narrative Position Faculty Office Lindley Address Lindley Hall Bloomington IN USA Office phone Fax phone Home phone sjohnson	faculty	misc
4373	 Date Thu Nov GMT Server Martin Hardwick Martin Hardwick Titles Professor of Computer Science RPI Director Laboratory for Industial Information Infrastructure President STEP Tools Inc Member of the Board PDES Inc Member of the Board US Product Data Association Email Address hardwick Telephone Number Address Center for Industrial Innovation Rensselaer Polytechic Institute Troy NY Bio Dr Martin Hardwick is Professor of Computer Science at Rensselaer Polytechnic Institute and Director of the Laboratory for Industial Information Infrastructure He is principal investigator in the DARPA Initiative in Concurrent Engineering at Rensselaer and has performed research for ARPA NSF GE IBM DEC HP and Wright Patterson AFB He developed the ROSE data management tools for engineering and has also developed change management and version control tools for concurrent engineering visualization tools for STEP geometry and data access interfaces for STEP databases Hardwick is the author of numerous papers on engineering database systems and concurrent engineering and has presented many public lectures internationally on these topics He is the deputy convenor of Working Group of ISO STEP the group responsible for the STEP Data Access Interface SDAI and other implementation methods of the STEP standard Hardwick has worked on numerous data integration programs including the DARPA Initiative in Concurrent Engineering the ARPA Simulation Based Design Program the NIST ATP PreAmp progrm three NSF programs and two Air Force programs Software written by Hardwick is being used for data exchange at several fortune companies including in the aerospace sector Boeing McDonnel Douglas GE and Pratt Whitney and in the automotive sector GM Ford and Daimler Benz team lead by was responsible for designing the protocols that allow different STEP application protocols to in database Hardwick is the president of STEP Tools company that makes and markets set of software tools for the standard He received his bachelor and doctorate degrees from Bristol University in England in and He is member of the IEEE Computer Society and the ACM Available Documents Data Protocols for the Industial Virtual Enterprise Selected Recent Publications of total On Object Oriented Databases Materialized Views and Concurrent Engineering Proc Database Symposium of the American Society of Mechanical Engineers Saxena editor August Implementing the Specification in an Object Oriented Database Proc of Skomara editor Society of Manufacturing Engineers Dearborn Michigan November with the Data Engineering Research Group Managing Change Using STEP Proc Concurrent Engineering and CALS Conference Washington Spears editor Society for Computer Aided Engineering June with the Data Engineering Research Group Implementing Concurrent Engineering Using STEP EXPRESS and Delta Files in Languages for Manufacturing and Design Gruver and Broudreaux editors Springer Verlag London Lessons Learned using the Standard and Object Oriented Databases to Implement Concurrent Engineering Proc CALS Expo James Nell San Diego December Using Persistent Object Technology to Support Concurrent Engineering invited chapter in Concurrent Engineering Elsevier Science Publishing Company Gu and Kusiak with Spooner Using STEP and EXPRESS to Implement Concurrent Engineering Results of An Experiment AUTOFACT ASME Chicago November Mapping EXPRESS AIM to ARM Using Database Views Comparison of Three Approaches Annual EXPRESS User Group International Conference October Greenville SC Efficient Database Implementation of EXPRESS Information Models with Loffredo Annual EXPRESS User Group International Conference October Greenville SC Concurrent Engineering with Delta Files IEEE Computer Graphics Applications January Volume Number pp	faculty	misc
4374	 Date Mon Nov GMT Server Mon Jul GMT Carl McCrosky University of Saskatchewan Carl McCrosky Web Pages Carl McCrosky is Professor of Computer Science at the University of Saskatchewan and an Adjunct Professor at TR Labs both institutions are in Saskatoon Canada His research interests include telecommunications functional programming languages and VLSI Personal information Research interests and topics pages not yet built Development projects Graduate students current and former Papers published accepted and submitted Courses offered this academic year Interesting tidbits You too can fight censorship on the Internet	faculty	misc
4375	 Date Mon Nov GMT Server Mon Jun GMT Winifred Asprey Winifred Asprey WINIFRED ASPREY is Professor Emeritus and the founder of the Computer Science Department at Vassar College Click here for the history of Asprey and computing at Vassar College Comments Please send to Back to the list of Vassar CS Faculty Back to the Vassar CS Department Home Page	faculty	misc
4376	 Date Mon Nov GMT Server Wed Nov GMT Dick Botting Home Page CALIFORNIA STATE UNIVERSITY SAN BERNARDINO COMPUTER SCIENCE DEPARTMENT Personal Teaching Research Topics for Graduate Theses and Projects My assigned task Local Places of Interest and entrances into the World Wide Web	faculty	misc
4377	 Date Mon Nov GMT Server Tue Sep GMT Ed Durfee Homepage Edmund Durfee is an associate professor at the University of Michigan Department of Electrical Engineering and Computer Science and member of the Artificial Intelligence Laboratory durfee Mail UM AI Laboratory Beal Avenue Ann Arbor MI USA Voice Fax Portrait Research Interests perpetually under construction My research centers around intelligent coordination among multiple autonomous systems involving the proactive selection planning of actions that improve performance in multiagent context My work thus is concerned with how artificial agents should decide what courses of action to commit to given multiagent world how they should meet those commitments including meeting constraints and how they should revise and renegotiate their commitments based on unexpected events in their environment The that am involved in include The Michigan DIAG Distributed Intelligent Agents Group The UGV Unmanned Ground Vehicles Project part of the ARPA Planning and Control Initiative SSA Ship System Automation CIRCA The Cooperative Intelligent Control Architecture UMDL The University of Michigan Digital Library project CREW The Collaboratory for Research in Electronic Work An Architecture for Distributed Configuration Design Our multiagent simulation testbed MICE is available via anonymous ftp and some of my papers are available in compressed postscript format Short Biography Edmund Durfee received the AB degree in chemistry and physics from Harvard University Cambridge in the MS degree in electrical and computer engineering and the PhD degree in computer and information science from the University of Massachusetts Amherst in and respectively His PhD research developed an approach for planning coordinated actions and interactions in network of distributed AI systems He is currently an Associate Professor in the Department of Electrical Engineering and Computer Science at the University of Michigan where his interests are in distributed artificial intelligence planning blackboard systems and problem solving He has published extensively in these areas and is author of the book Coordination of Distributed Problem Solvers Kluwer Academic Press In his most recent work he has been designing framework for coordination based on hierarchical behavior specifications and he has been developing an integrating architecture for combining and intelligent systems He is recipient of Presidential Young Investigator award from the National Science Foundation Prior to joining the faculty at the University of Michigan in he was Research Computer Scientist in the Department of Computer and Information Science at the University of Massachusetts He is an associate editor for IEEE Transactions on Systems Man and Cybernetics and has served on number of conference and workshop program committees including the Distributed AI Workshop He is member of the IEEE Computer Society the Association for Computing Machinery AAAI and AAAS more complete postscript version of my vita is available Courses Taught EECS Elementary Programming Concepts EECS Programming and Introductory Data Structures EECS Introduction to Artificial Intelligence Winter EECS Knowledge Systems Fall EECS Advanced Artificial Intelligence More Web Links JAIR Journal of Artificial Intelligence Research Last Updated	faculty	misc
4378	 Date Tuesday GMT Server Tuesday GMT Gerald Jay Sussman Gerald Jay Sussman can be tougher than this Matsushita Professor of Electrical Engineering Click to see short biography Selected Publications of Gerald Jay Sussman Computational Model for the Acquisition and Use of Phonological Knowledge Kenneth Yip and Gerald Jay Sussman MIT Artificial Intelligence Memo March Amorphous Computing Harold Abelson Thomas Knight Gerald Jay Sussman MIT Artificial Intelligence Memo Comparison between subsonic flow simulation and physical measurements of flue pipes Panayotis Skordos and Gerald Jay Sussman Proceedings of ISMA International Symposium on Musical Acoustics Le Normont France July Also MIT Artificial Intelligence Memo April Gravitational radiation from particle in circular orbit around black hole II Numerical results for the nonrotating case Curt Cutler Lee Samuel Finn Eric Poisson and Gerald Jay Sussman Phys Rev No pp Feb The last three minutes measurements of coalescing compact binaries with LIGO Cutler Apostolatos Bildsten Finn Kennefick Markovic Ori Poisson Sussman and Thorne Phys Rev Letters pp Chaotic Evolution of the Solar System Gerald Jay Sussman and Jack Wisdom Science July The Supercomputer Toolkit general framework for computing with Berlin Katzenelson McAllister Rozas Sussman and Jack Wisdom International Journal of Electronics no pp Intelligence in Scientific Computing Hal Abelson Eisenberg Halfant Katzenelson Sacks Sussman Wisdom Yip CACM no May The Dynamicist Workbench Automatic preparation of numerical experiments Hal Abelson and Gerald Jay Sussman in Symbolic Computation Applications to Scientific Computing Grossman ed Frontiers in Applied Mathematics vol Society for Industrial and Applied Mathematics Philadephia Lisp Language for Stratified Design Hal Abelson and Gerald Jay Sussman Byte Magazine February pp The Lisp Experience Hal Abelson Matthew Halfant Jacob Katzenelson and Gerald Jay Sussman Annual Review of Computer Science pp Abstraction in Numerical Methods Matthew Halfant and Gerald Jay Sussman Proc ACM Conference on Lisp and Functional Programming Advanced Computing for Science Piet Hut and Gerald Jay Sussman Scientific American no October Numerical evidence that the motion of Pluto is chaotic Gerald Jay Sussman and Jack Wisdom in Science July The Outer Solar System for Million Years James Applegate Douglas Gursel Gerald Jay Sussman Jack Wisdom Astronomical Journal pp July reprinted in Lecture Notes in Physics Use of supercomputers in stellar dynamics Springer Verlag Digital Orrery James Applegate Douglas Gursel Hunter Seitz Gerald Jay Sussman in IEEE Transactions on Computers No pp September reprinted in Lecture Notes in Physics Use of supercomputers in stellar dynamics Springer Verlag Structure and Interpretation of Computer Programs Hal Abelson Gerald Jay Sussman and Julie Sussman MIT Press and published translations in French Japanese and German Model of the Filaments in the Galactic Center Quinn and Gerald Jay Sussman Astrophysics Journal pp January The Best Length for Mainspring Gerald Jay Sussman with Julie Sussman Newsletter of the Massachusetts Watchmaker Association pp June gjs MIT AI Lab room Technology Square Cambridge MA USA	faculty	misc
4379	 Date Tue Nov GMT Server Thu Dec GMT Zena Ariola Zena Ariola Assistant Professor Education BS University of Pisa Italy PhD Harvard University Research Areas Parallel Programming Languages Compilers Parallel Architectures ariola webmaster University of Oregon Department of Computer and Information Science	faculty	misc
4380	 Date Mon Nov GMT Server Tue Apr GMT Stella Atkins Stella Atkins Medical Imaging Visual Languages Distributed and Parallel Systems Design email stella Associate Professor of Computing Science Chemistry Nottingham Univ Phil Computer Science Warwick Univ Computer Science Univ of Laboratory Affiliations Medical Imaging Distributed Computing Graduate Students Current Research Recent Funding Selected Publications Additional Information Back to Faculty Home Page Number of visitors since April	faculty	misc
4381	 Date Thu Nov GMT Server Fri Nov GMT Pavel Pevzner PAVEL PEVZNER PROFESSOR DEPARTMENT OF MATHEMATICS DEPARTMENT OF COMPUTER SCIENCE UNIVERSITY OF SOUTHERN CALIFORNIA MAIL Denney Research Building DRB ADDRESS Los Angeles California PHONE FAX OFFICE DRB EMAIL ppevzner Books Research Papers online Research Papers list CV Procrustes Gene Recognition Software USC Computational Biology Home Page http webmaster August	faculty	misc
4382	 Date Mon Nov GMT Server Mon Jul GMT About Dr Sung Yoo Dr Sung Yoo Associate Professor Educational Background Seoul National University North Carolina State University Areas of expertise computer operating systems computer graphics micrcomputers optical character recognition List of Classes Taught by Yoo CSCI Operating Systems Design CSCI Advanced Computer Graphics CSCI Operating Systems II CSCI Software Design and Development CSCI Computer Graphics CSCI Computer Graphics CSCI Operating Systems CSCI Data Structures II CSCI Computer Graphics for Majors CSCI Numerical Analysis CSCI Data Structures CSCI Programming CSCI Computer Science II CSCI Introduction to Computer Science CSCI Computer Orientation CSCI Computer Literacy How to Contact Yoo By cssung By Phone In Person Kirksey Old Main Room	faculty	misc
4383	 Date Wed Nov GMT Server Chuck Eastman Home Page Chuck Eastman Home Page an error occurred while processing this directive Charles Eastman Charles Eastman is Professor in the Colleges of Architecture and Computer Science at Geoergia Institute of Technology Atlanta Eastman teaching and research is in the areas of design solids modeling and engineering databases and design theory with over seventy published papers in theses fields Arch University of California Berkeley Previous Positions Professor of Architecture Director of the Center for Design and Computation UCLA Professor of Architecture and Computer Science University Director of the Center for Building Science and of the Computer Graphics Lab and President Formative Technologies Pittsburgh Selected Recent Publications Eastman and Siabiris generic building product model incorporating building type information Automation in Construction pp Dasu Sriram and Eastman Management of Design Management and Engineering Perspectives Kluver Press including chapter Management of Design Information Flows Eastman and Fereshetian Information Models for Use in Product Design Comparison Computer Aided Design July pp Eastman Data Model for Design Knowledge in Architectural Design Carrera and Kalay eds Elsevier Press pp Eastman Life Cycle Requirements for Building Product Models in Management of Information Technoloy for Construction Mathur Betts and Tham eds World Scientific Publications pp Proc Int Conference on the Management Information Technology in Construction Singapore Eastman Conceptual Modeling in Design in Fundamental Development in Aided Geometric Modeling Piegl ed Academic Press Eastman Chase and Assal System Architecture for Computer Integration of Design and Construction Knowledge Automation in Construction pp Eastman Bond and Chase Data Model for Engineering Design Databases International Conf on in Design Edinburgh Scotland June Eastman Bond and Chase Application and Evaluation of an Engineering Product Model Research in Engineering Design August Eastman Bond and Chase Formal Approach to Product Model Information Research in Engineering Design January Eastman The contribution of data modeling to the future development of databases ASME Conf on Computers in Engineering Santa Clara CA August Courses Taught Electronic Design Conception and Development course description example work Geometric and Solid Modeling Software Development course description example work Databases and Models for Engineering and Design course description example work Design of Electronic Design Environments course description example work	faculty	misc
4384	 Date Thu Nov GMT Server Tsai Tsai Professor Software engineering computer systems tsai Education Computer Science University of California Berkeley Computer Science and Engineering Massachusetts Institute of Technology Comments and Questions Help and Software List Department Home Page FTP Server Research Projects System Information Last Modified on Monday October	faculty	misc
4385	 Date Thursday GMT Server Monday GMT Paul Cohen cohen Paul Cohen Principal Investigator Experimental Knowledge Systems Laboratory Department of Computer Science Box University of Massachusetts Amherst Amherst MA Email cohen Phone Fax Paul Cohen is Professor in the Department of Computer Science at the University of Massachusetts and Director of the Experimental Knowledge Systems Laboratory His PhD is from Stanford University in Computer Science and Psychology in and his MS and BA degrees in Psychology are from UCLA and UC San Diego respectively At Stanford Cohen edited the Handbook of Artificial Intelligence Volume III with Edward Feigenbaum and Avron Barr and later edited Volume IV with them He recently published textbook entitled Empirical Methods for Artificial Intelligence He served on the Program Committee for the Fifth International Workshop on Artificial Intelligence and Statistics and is currently serving on Program Committees for the Sixth International Workshop on Artificial Intelligence and Statistics and the Third International Workshop on Agent Theories Architectures and Languages He is the program of the Second International Conference on Intelligent Data Analysis He recently coedited with Bruce Porter special issue on empirical methods for AI of the Artificial Intelligence Journal He served as Councillor of the American Association for Artificial Intelligence and was elected in as Fellow of the AAAI Recent Publications What Professors Do EKSL Home Page cohen Last Update	faculty	misc
4386	 Date Mon Nov GMT Server Wed Aug GMT Xudong He NDSU Faculty Xudong He Associate Professor Address Department of Computer Science IACC NDSU Fargo ND Tel Email Hex Education Computer Science Virginia Polytechnic Inst State Univ Computer Science Nanjing University China Computer Science Nanjing University China Recent Teaching Responsibilities Discrete Mathematics Fall semester Software Testing Maintenance Spring semester Software Engineering Fall semester Software Engineering II Spring semester Automated Theorem Proving Spring semester Design Patterns and Software Architecture Spring Research Interests Software engineering Formal specification verification methods Software testing Formal semantics Recent Publications Journals and Book Chapters He with Kan Method for Constructing Algebraic Petri Nets Journal of Systems and Software in press He with Kan Deriving Algebraic Petri Net Specifications from Structured Analysis Case Study Information and Software Technology He with Kan High Level Algebraic Petri Nets Information and Software Technology Information and Software Technology He Temporal Predicate Transition Nets New Formalism for Specifying and Verifying Concurrent Systems International Journal of Computer Mathematics He and Ding Temporal Logic Approach for Analyzing Safety Properties of Predicate Transition Nets Information Processing Elsevier Science Publisher He and Lee Methodology for Constructing Predicate Transition Net Specifications Software Practice Experience vol He with Lee Methodology for Test Selection Journal of Systems and Software November He and Lee Integrating Predicate Transition Nets with First Order Temporal Logic in the Specification and Verification of Concurrent Systems Formal Aspects of Computing Refereed Conference Proceedings He Formal Definition of Hierarchical Predicate Transition Nets Lecture Notes in Computer Science He and Ding Specification Using Hierarchical Predicate Transition Nets Proceedings of the Workshop on Programming and Models of Concurrency Osaka Japan He with Yao Mapping Petri Nets to Parallel Programs in Proceedings of the Annual International Computer Software and Application Conference Seoul Korea He PZ Nets Formal Method Integrating Petri Nets with Proceedings of the International Conference on Software Engineering and Knowledge Engineering Rockville MD June He Method for Analyzing Properties of Hierarchical Predicate Transition Nets Proceedings of the Annual International Computer Software and Applications Conference Dallas TX August He with Kan Algebraic Petri Nets and Their Applications Proc of the ACM Annual Computing Science Conference Phoenix Arizona He and Yang Structured Analysis Using Hierarchical Predicate Transition Nets Proc of the Int Computer Software and Applications Conference Chicago He Specifying and Verifying Systems Using Time Petri Nets and Temporal Logic Proc of the Annual Conference on Computer Assurance Gaithersburg He Temporal Predicate Transition Nets and Their Applications Proc of the Int Computer Software and Applications Conference Chicago Recent Grants NSF Research Initiation Award NSF EPSCoR Honors Who Who among Young American Professionals Who Who in Science and Engineering Completed Graduate Advisees Kan May Thesis Title Specification Method Combining Petri Nets and Algebraic Specification Employment Industrial Technology Research Institute Computer and Communication Research Lab Taiwan Venkatram Krishnan December Thesis Title Software Environment for Short Line Railroad Database System Employment Financial Data Planning Co Miami FL Shie June Thesis Title FOT Testing Tool for Data Flow Testing Employment EDS Taiwan System Analyst Syed Rizwan December Thesis Title High Level Petri Nets Based Testing Techniques Employment Systems Migration Burnsville MN System Analyst Soumen Barua December Thesis Title Integration of with Predicate Transition Nets Employment Oracle Financials Stamford CT System Analyst Seshasai Jayaraman April Thesis Title Information Abstractor Tool for Static Analysis of Programs Employment American Airline TX System Analyst Mohan November Thesis Title Information Abstraction System Employment Clear Systems Dallas TX System Analyst Qinghui Wang December Thesis Title Some Equivalence Transformation Rules for Hierarchical Predicate Transition Nets Employment United HealthCare MN System Analyst Sujatha Bhaskara December Thesis Title Case Study of Translating Structured Analysis Specification into Hierarchical Predicate Transition Net Specification Employment AT NJ System Analyst Hermes Winands May Thesis Title CTT Tool for Determining Testing Order of Programs Xiaoming Ma August Thesis Title Graphical Editor for Hierarchical Predicate Transition Nets	faculty	misc
4387	 Date Thu Nov GMT Server Thu Nov GMT Home page for Rod Howell Rodney Howell Associate Professor Department of Computing and Information Sciences Nichols Hall Kansas State University Manhattan KS Phone Fax Email howell Course Materials CIS Fall CIS Spring CIS Fall CIS Fall Local items of professional interest My resume Research in systems and algorithms at KSU Graduate studies at KSU currently the head of the graduate studies committee but please direct questions regarding graduate study to office Anything that needs my attention will then be forwarded to me Other items of professional interest The Technical Committee on Systems Information and Computation Journal of the ACM National Science Foundation Computer Science Bibliography Glimpse Server Elsevier Science Home Page Items of personal interest Let Start Talking Cats for Christ Dickens Church of Christ Some of my thoughts on religion WWW Bible Gateway James Morrill homepage We are members of the same church and the same softball team Check out the summary of our team plus lot of other stuff on this page Walnut Creek CDROM huge archive of freeware shareware and texts available via both FTP and purchase Includes freeware from the Free Software Foundation and texts from Project Gutenberg NOTE Much of the software is shareware which usually implies that registration fee must be paid in order to obtain full functionality however they do publish the registration fees at this site and in some cases do make it clear which software packages are shareware ESPNET SportsZone Last updated August Rod Howell howell	faculty	misc
4388	 Date Thu Nov GMT Server Fri Aug GMT Ramamoorthy Ramamoorthy Harvard University Professor Emeritus ram Distinquished Scholar Award Society for Design Process Science IEEE Richard Merwin Award IEEE Computer Society Meritorious Service Award Keynote Speaker IEEE International Conference on Distributed Computing Systems IEEE Computer Society Taylor Booth Award Keynote Speaker IEEE International Conference on Data Engineering Keynote Speaker Silver Jubilee Anniversary Conference of the Computer Society of India IEEE Computer Society Outstanding Paper Award Keynote Speaker International Computer Symposium Taiwan and IEEE Centennial Medal Fellow IEEE IEEE Computer Society Special Education Award IEEE Computer Society Honor Roll Award Admiral Grace Hopper Chair Naval Postgraduate School Committees Int Software Engineering and Artificial Intelligence IEEE Trans Software Engineering IEEE Trans Knowledge and Data Engineering Member Editorial Board Int Information and Computer Systems Member Editorial Board Programming Languages Member Editorial Board Computer IEEE Computer Society Selected Publications Evolution Support Environment System with Usuda et al IEEE Trans Software Engineering Issues in the Development of Reliable Large Distributed Software Systems with Prakash et al Advances in Computers Vol Academic Press pp Pipeline Architectures with Li Computing Surveys March pp Testing Large Software with Automated Software Evaluation Systems with Ho IEEE Trans Software Engineering April pp Optimal Scheduling Strategies in Environment with Chandy and Gonzalez IEEE Trans on Computers pp Optimization of Memory Hierarchies in Multiprogrammed Systems ACM July pp Left to right Joo Seok Song currently Professor and Chair of the Computer Science and Engineering Department Yongsei University Seoul Korea Chen currently at AT amp Bell Labs Murray Hill and Professor Ramamoorthy	faculty	misc
4389	 Date Mon Nov GMT Server Tue Nov GMT Homepage of Kerstin Voigt CSUSB Kerstin Voigt Assistant Professor Department of Computer Science California State University San Bernardino University Parkway San Bernardino CA email voigt phone fax Information Since September am faculty member in the Department of Computer Science at CSUSB California State University San Bernardino received in Computer Science from Rutgers University New Jersey in My specialization was and still is in the area of Artificial Intelligence in particular Knowledge Based Systems Knowledge Based Design Knowledge Compilation and Knowledge Anything Else My additional and more recent research interests are geared towards Taming the Web In particular am exploring the potential of AI methods in customizing knowledge navigation tools browsers to suit the informational needs of each individual user prototype system SKIPPER is currently under development For more details see Education Dissertation abstract Industrial Experience Publications Current Research Teaching and Research Teaching Fall Quarter This quarter am teaching the following two courses Automated Reasoning Syllabus What to do in week of October Project Project Project Integration II Software Syllabus code for selection sort What to do in week of October Project Project Project Office Hours Tuesday and Thursday from and by arrangement Research Interest and Activities My rsearch interests are in the areas of Artificial Intelligence Systems in particular algorithm design see my dissertation abstract Knowledge Compilation Temporal Reasoning Reasoning Uncertainty AI and Knowledge Navigation in particular personalization of knowledge navigation tools browsers for current project see SKIPPER For experimentation with for SKIPPER click Miscellaneous Not So Dry Stuff how about The manuscript in the drawer either rots or ripens Maria von voigt Kerstin Voigt	faculty	misc
4390	 Date Thu Nov GMT Server Thu Nov GMT Kamin Samuel Samuel Kamin Areas of research interest Programming Languages Functional Logic Compilers Formal Semantics Software Engineering Specifications Prototyping Program Verification Research group Programming Languages Group Personal home page Administrative help Digital Computer Laboratory West Springfield Avenue Urbana IL fax kamin Go back to Faculty Index	faculty	misc
4391	 Date Thu Nov GMT Server Sun Nov GMT Home Page of Nachum Dershowitz Dershowitz Nachum Business address Digital Computer Laboratory Department of Computer Science College of Engineering University of Illinois at West Springfield Avenue Urbana Illinois USA Tel Fax nachum Send email On leave at Hebrew University Geneology Areas of research Rewrite Systems Artificial Intelligence Automatic Programming Automated Reasoning Programming Languages Functional Equational Software Engineering Calendar Algorithms Program Verification Program Transformation Theoretical Computing Analysis of Algorithms Data Structures Theorem Proving Logic Administrative help Marla Brownfield Of interest Calendar Book Rewriting Page Papers Bibliographic files My family Go to UI Faculty Index	faculty	misc
4392	 Date Mon Nov GMT Server Tue Nov GMT Barbara Ryder Barbara Ryder Department of Computer Science Hill Center Busch Campus Rutgers University Piscataway NJ Office CoRE Phone Fax Email ryder Office Hours Wednesdays and by appointment Hi am Professor of Computer Science at Rutgers The State University of New Jersey having joined the faculty in My current research interests include program analyses and software tools for programming environments In July was elected Chair of and have been quite active in the SIGPLAN community having served on the SIGPLAN Executive Committee for years Currently also serve on the Editorial Board of the Journal of Programming Languages and on the Advisory Board of the Douglass Project for Rutgers Women in Science Math and Engineering My research group is informally referred to as PROLANGS the PROgramming LANGuageS research group We have weekly lunch and weekly reading group meeting on Thursday afternoons from pm in CoRE Conference Room to present and discuss interesting conference and journal papers and sometimes to practice our research talks We are the sole Rutgers DCS group with our own logo on and sweatshirts and lots of esprit My current major NSF grant involves collaborative research with Bill Landi of Siemens Corporate Research We are investigating how to scale analyses to programs of lines of code The home page for this fall which am teaching with Armin Haken and Phil Stocks will list all information and assignments distributed in the course We may list homework answers etc here as well am team teaching new version of our Programming Languages and Compilers II course with Prof Uli Kremer next semester We are changing the course to emphasize the building of an optimizing compiler for an imperative programming language with lecture exploration of paradigms as well Syllabi for courses taught in Principles of Programming Languages Programming Languages and Compilers Programming Languages and Compilers II recently participated in the ACM Workshop on Strategic Directions in Computing Research in the Programming Languages Program Analysis subgroup My position paper poses some important questions about the future of program analysis For more personal look you can see my family as of May or explore my son be advised that this page is from college an environment which he remembers fondly now that he has joined the US workforce in Seattle WA	faculty	misc
4393	 Date Wed Nov GMT Server Thu May GMT Henry Leitner Home Page Henry Leitner Students Joev Dubach Latanya Sweeney	faculty	misc
4394	 Date Wed Nov GMT Server Sun Mar GMT Amarnath Mukherjee Information Page Amarnath Mukherjee Assistant Professor Networking and Telecommunications Group College of Computing Georgia Institute of Technology Teaching On working on team Everyone has need to be right and right to be wrong source unknown Academic year CS Computer Systems Performance Fall CS Control and Concurrency Spring CS Introduction to Computer Networks Spring Research Description get payed lot of money The least can do is get it right Peter Jennings ABC News We are developing performance analysis tools and effective control strategies for and protocols in computer networks In the initial phase of this research we studied the fundamental properties of distributed algorithms for congestion control and the impact of system parameters on performance We had some success with Brownian motion model for system with adaptive con trol With the experience and insight gained over the last several years the study has evolved into platform that encompasses statistically accurate workload models which are essential to effective and algorithms for and that are developed and evaluated using these workload models Selected results include models for Internet traffic method for generating synthetic traffic traces The described inventions are covered by provisional patent application in the United States entitled Trace Sampling and bearing Serial Number Properties of NSFNET traffic Analysis of dynamic congestion control protocols using approximation extended version guarantees for dependent traffic proof of of sliding window flow control and error recovery under independent packet errors Principles for designing optical network combined mechanism for congestion control of data traffic in high speed wide area networks and Properties of Internet delays Note online versions of some of the older papers are not available For hardcopy please send me an email at amarnath Abstracts are described in the detailed project description Biography Mukherjee received the degree in Computer Science from the University of Wisconsin at Madison in and Bachelor in Technology degree in Computer Science and Engineering from the Indian Institute of Technology at Kharagpur in Mukherjee research is in the area of network performance analysis He works in traffic signature analysis and workload modeling for services and experimental and theoretical studies of network dynamics and control Earlier he has worked on performance of error recovery protocols and media access protocols Contact information College of Computing Atlantic Drive Georgia Institute of Technology Atlanta Georgia Email amarnath preferred mode of communication Tel FAX	faculty	misc
4395	 Date Mon Nov GMT Server Tue May GMT Sang Wook Lee Homepage Sang Wook Lee Assistant Professor Department of Electrical Engineering and Computer Science University of Michigan Office Address ATL Building Beal Avenue Ann Arbor MI Email swlee Phone FAX received my from the University of Pennsylvania in My thesis advisor was Ruzena Bajcsy Before joining the faculty at the University of Michigan was member of research staff in the GRASP Laboratory at the Univeristy of Pennsylvania from to am now member of the University of Michigan Artificial Intelligence Laboratory Research Activities Teaching Activities Last Updated	faculty	misc
4396	 Date Mon Nov GMT Server Fri Nov GMT Daniel Lewis and his wife Hannah Daniel Lewis Associate Professor and Chair Georgia Institute of Technology and Syracuse University Research Interests Systems Programming User Interfaces Software Engineering Go back to Faculty page dlewis	faculty	misc
4397	 Date Thu Nov GMT Server Tue May GMT Rajesh Rajesh Gupta Areas of research interest Design of Digital Systems Synthesis and Optimization Techniques Sythesis for Embedded Systems Combinatorics Computer Architecture Systems Multiprocessor Analysis and Design Heterogeneous Systems Microprocessor Organization and Tradeoffs for Integrated Implementations Computing Systems Constraint Modeling Analysis Scheduling VLSI and Systems Design Circuit Structures for Computer and Communication Systems Integration of Computer and Communication Systems Designs for Low Power Applications Communication and Signal Processing DSP Algorithms and Implementations Broadband Communication Research Group Administrative help Bonnie Howard More Info Personal Home page Digital Computer Laboratory West Springfield Avenue Urbana IL fax rgupta Go back to Faculty Index	faculty	misc
4398	 Date Mon Nov GMT Server Tue Oct GMT Richard Brown Disclaimer Next About this document Dick Brown Assistant Professor of Mathematics Coordinator Computer Science Concentration rab Office OMH Office Hours MWF TTh Department of Mathematics Olaf Olaf Avenue Northfield MN Press here for daily schedule Projects Computer Science home page Computer Science catalog entry Trainset software for teaching and research in distributed software development Formal methods in programming Graphics syllabus Other people demos About this document rab October	faculty	misc
4399	 Date Monday GMT Server Judy Goldsmith Home Page am in the Department of Computer Science at the University of Kentucky My research interests are structural complexity and logical complexity of computational complexity classes have been learning about Markov decision processes DNA computing and logic programming am currently teaching CS Discrete Math and CS Design and Analysis of Algorithms Next semester will be teaching CS Computability and Complexity The time and place for CS have been changed to am MWF in If you want to find me here is my schedule My email address is goldsmit and office phone number is In addition to my academic interests dance with Squash Beetle Morris bicycle and also try to find time for contra dancing ballroom dancing and swing Recent Papers Goldsmith Christopher Lusena and Martin Mundhenk The complexity of deterministically observable Markov decision processes UK CS Department Technical Report Judy Goldsmith Matthew Levy and Martin Mundhenk Limited Nondeterminism survey for the June complexity theory news column in SIGACT News Here is the Tech Report version UK CS Department Technical Report with an appendix on limited nondeterminism in automata theory and on LogNP and LogSNP Lance Fortnow Judy Goldsmith Matthew Levy and Steve Mahaney Sets in Proc IEEE Conference on Computational Complexity Journal version To appear in SIAM Computation Stephen Bloch Jonathan Buss and Judy Goldsmith Sharply Bounded Alternation within Submitted Also available as from the Electronic Colloquium on Computational Complexity Conference version to appear in Proc Discrete Math and Theoretical Computer Science New Zealand Richard Beigel and Judy Goldsmith Downward Separation Fails Catastrophically for Limited Nondeterminism Classes To appear sometime in the next years really in SIAM Computation Conference version Structures Judy Goldsmith and Steve Homer Scalability and the isomorphism problem appeared in IPL in Judy Goldsmith and Andy Klapper Public key cryptography with partial secrecy Submitted THE TEAM Students Matthew Levy Christopher Lusena Amy Levy John Pickens Postdoc Martin Mundhenk Links WEB pages for Discrete Mathematics and Theoretical Computer Science Great Theory Database at Universitaet Dortmund Parametrized Complexity Graduate School Information Kit for Women in Computer Science WITS Dane McGregor Accesses since May Comics Dilbert Robotman	faculty	misc
4400	 Date Thu Nov GMT Server Mon Sep GMT Christopher Johnson Christopher Johnson Associate Professor of Computer Science Research Assistant Professor of Physics Adjunct Assistant Professor of Mathematics Adjunct Assistant Professor of Bioengineering Director Center for Scientific Computing and Imaging SCI Associate Chairman Department of Computer Science Computational Engineering and Science CES Program Autumn Quarter Teaching Assignment CS Introduction to Scientific Computing Professor Johnson research interests are in the area of scientific computing Particular interests include inverse and imaging problems adaptive methods for partial differential equations automatic mesh generation numerical analysis large scale computational problems in medicine and scientific visualization Professor Johnson was awarded Young Investigator FIRST Award from the NIH in the NSF National Young Investigator NYI Award in and the NSF Presidential Faculty Fellow PFF award in He directs the Center for Scientific Computing and Imaging brief overview of current SCI research projects is given below Current Research Projects Scientific Computing Inverse and Imaging Problems Scientific Visualization Computational Medicine Numerical Analysis Simplified Wrapper and Interface Generator Human Computer Interaction Upcoming Invited Talks International Workshop on Modern Software Tools for Scientific Computing SCIRun Computational Steering Environment Oslo Norway Septmember Fourth National Congress on Computational Mechanics Computational Steering and Interactive Visualization San Francisco August Images Publications Software Research Support Facilities Quotes To see if am click here crj For additional information about the SCI Research Group contact Chris Johnson at Merrill Engineering Building Department of Computer Science University of Utah Salt Lake City Utah Email crj Phone Fax Last modified Mon Sep MDT	faculty	misc
4401	 Date Monday GMT Server Saturday GMT Home Page for Sven Dickinson Sven Dickinson Assistant Professor Computer Science Department of Computer Science Rutgers University CoRE Building Busch Campus New Brunswick NJ USA Office Rm CoRE Building Phone or FAX or Email sven WWW http Joint Appointment with Cognitive Science Center for Cognitive Science RuCCS Rutgers University Psychology Annex Busch Campus New Brunswick NJ USA office Rm Psychology Annex Building phone or FAX Email sven WWW http Research Interests Dickinson research focuses on computational vision He is primarily interested in the problems of object modeling object recognition both and attention shape recovery and tracking and how they may be unified under single representational framework In addition his research explores the use of representations in landmark recognition and planning for mobile robot navigation In the domain of visual information management his research addresses the problem of image retrieval Other Useful Links Find out more about the Department of Computer Science Find out more about the Rutgers Center for Cognitive Science RuCCS run the Rutgers University Series on Human and Computer Vision multidisciplinary talk series featuring distinguished speakers spanning both human and computer vision also run the Department of Computer Science Colloquium Series	faculty	misc
4402	 Date Mon Nov GMT Server Tue Apr GMT Faculty Profile Springsteel Frederick Springsteel Professor and Director of Graduate Studies PhD Mathematics University of Washington office Math Science Bldg phone email csfreds Research interests Databases Design Theory Parallel Algorithms Teaching CS CS Return to Faculty	faculty	misc
4403	 Date Mon Nov GMT Server Mon Nov GMT John Laird Homepage John Laird Associate Professor Department of Electrical Engineering and Computer Science University of Michigan Office Address ATL Building Beal Avenue Ann Arbor MI Email laird Phone FAX John Laird received his from the University of Michigan in and his in Computer Science from Carnegie Mellon University in The title of his thesis was Universal Subgoaling and his thesis advisor was Allen Newell Before joining the faculty at the University of Michigan Laird was member of research staff at Xerox Palo Alto Research Center from to Laird is currently the director of the University of Michigan Artificial Intelligence Laboratory Research Activities Laird primary research interests are in the nature of the architecture underlying artificial and natural intelligence Since his work has centered on the development and use of Soar general cognitive architecture Over the years this has led to research in both AI and cognitive science Within AI his work has included research in general problem solving the genesis of the weak methods the origins of subgoals general learning mechanism interacting with external environments learning by experience and by instruction and integrating reactivity planning and learning all in the service of constructing complete autonomous intelligent agents Within cognitive science his research has concentrated on detailed modeling of human behavior reaction times and error rates in visual attention and concept acquisition Laird is currently working on the construction of intelligent agents that interact with dynamic environments This work is currently being pursued within the context of the component of the project funded by The goal of is the development of autonomous computer agents whose behavior is tactically indistinguishable from humans These synthetic agents must not only be lifelike they must be humanlike with many of the capabilities we commonly associate with intelligent human behavior reactivity problem solving and planning large bodies of knowledge adaptation to changing situations and interaction and coordination with other intelligent entities The consortium involving the University of Michigan University of Southern California Information Sciences Institute and Carnegie Mellon University is developing such agents for air missions air to air combat air to ground attacks helicopter missions long term goal of this research is to extend this technology to education training and entertainment where humans can interact with humanlike intelligent agents in variety of synthetic environments Teaching Activities EECS Foundations of Artificial Intelligence EECS Machine Learning EECS Cognitive Architecture EECS Advanced Artificial Intelligence Professional Activities Laird has been actively involved in national activities in artificial intelligence He has been general chair of the Machine Learning Conference and has served on the program committees of AAAI and IJCAI In he was area chair of AAAI in Agents and Architectures as well as being video He is member of AAAI the Cognitive Science Society and the American Psychological Society Last Updated	faculty	misc
4404	 Date Mon Nov GMT Server Thu Sep GMT Chee Yap Homepage Chee Yap Full Professor CONTACT Mail Address Email yap Voice Fax Location Room Warren Weaver Hall Research Interests Active Visualization Project Exact Geometric Computation Project My ftp pickup site Including preliminary versions of my algebraic computing book Princeton Press to appear and complexity book to be published by Oxford Press Some Recent Papers more complete list of papers Other Links Sabbatical at National University of Singapore Nov June FCRC Applied Computational Geometry Workshop Nina CG Software List CS Projects CS Tech Reports CS Dept Math Dept CIMS CIMS Library NYU NYC Downtown Subway Map Finger Me	faculty	misc
4405	 Date Monday GMT Server Thursday GMT Personal Page of Estie Arkin Esther Arkin Research Interests Operations Research Computational Geometry Algorithms and Data Structures Address snail mail Department of Applied Mathematics and Statistics Room State University of New York at Stony Brook Stony Brook NY USA estie phone fax Publications Interested in my work Check out selected list of my publications last modification of this page Thu Aug EDT Estie Arkin estie	faculty	misc
4406	 Date Mon Nov GMT Server Mon Nov GMT Brian Slator Brian SlatorAssociate Professor Computer Science and Operations Research North Dakota State University IACC Building Rm Fargo ND phone slator photo by Heidi Levin Professional Documents Professional History Research Statement Electric Words Project Work Curriculum Vitae Technical Experience NDSU Class Materials Computer Science Problem Solving NDSU Research Projects NDSU Computer Science Research Project List	faculty	misc
4407	 Date Mon Nov GMT Server Mon Apr GMT FASTOOK James Fastook Home Page Physics Glaciers Computer Science FORTRAN Parallel Programming Scientific Visualization the Finite Element Method and more CLICK HERE for jumpoff spots for glaciers computer science vrmls pictures and other stuff HERE for similar stuff different format or HERE for long list of lots of things that am interested in Contact Info James Fastook Neville Hall Computer Institute University of Maine Orono ME USA fastook FAX Phone	faculty	misc
4408	 Date Mon Nov GMT Server Pramod Khargonekar Pramod Khargonekar University of Michigan Arthur Thurnau Professor and Associate Chair Dept of Electrical Engineering and Computer Science Chair Systems Division of EECS NSF Young Investigator IEEE Fellow pramod Mail Department of EECS University of Michigan Beal Avenue Ann Arbor MI USA Tel Secretary Tel Fax Curriculum Vitae Research Activities My major research interests cover broad range of topics in the general area of systems and contro Given the rapidly changing scenario in research believe that healthy mix of theory and applications is perhaps the most appropriate strategy Currently with my students and am most actively working on the following topics Applications of Control Technology to Microelectronics Manufacturing Processes Robust Control Theory Control Oriented Identification and Modeling Applications of Control to Automotive Xerography and Electromechanical systems In major interdisciplinary research thrust group of faculty from the control systems laboratory and the solid state electronics laboratory has started new research program on applications of control technology to semiconductor and display manufacturing processes We have several projects in this area am the Center Director for the MURI Center on Intelligent Electronics Manufacturing The main research thrusts of this center include modeling sensing and control of plasma etching and deposition processes am also Thrust Group Leader in the Center for Display Technology and Manufacturing and participating faculty member in the SRC Center of Excellence on Automated Semiconductor Manufacturing These activities are also focused on applications of modern control and systems theory to plasma based microelectronics manufacturing processes In our initial work we have focused on real time and control of plasma reactive ion etching process which is major unit process step Starting from conceptual control strategy we have designed and implemented real time control system for this process on an Applied Hexode reactor Experimental results have shown that real time feedback control could have major impact on the performance characteristics of the reactive ion etchers More recently we have developed nonlinear estimators for calculating etch rate from wavelegth laser inteferometers We have also developed combined and controller for the RIE process In control theory our research is analysis and synthesis of control systems that give optimal performance given an approximate model of the physical system to be controlled This is an extremely important problem since in practice one rarely has an exact model for the physical system Modeling uncertainty arises due to incomplete and inexact experimental data simplifying approximations neglected high frequency dynamics etc Our research has focused on the problem of robust stabilization for variety of possible modeling uncertainties Our results have yielded necessary and sufficient conditions for the solvability of robust stabilization problems and constructive algorithms for solving these problems This research is also closely connected to our work on optimal control new development in our research on robust control is the analysis and synthesis of robust control systems Here we have focused on developing analytical tools for robustness analysis and synthesis of systems in and norm Models are the basis for much of control systems analysis and design In new major effort we have begun research in empirical model building system identification We are exploring frequency domain techniques for building system models which are suitable for robust control analysis and design We have applied some of this recent work to the reactive ion etching problem as well as to the JPL example More recent work has focused structured nonlinear models such as Hammerstein systems from empirical data We are also actively pursuing applications of modern control and systems techniques to automotive systems Our initial work focused on an idle speed fluctuation reduction problem where novel nonlinear control strategy has given promising results on nonlinear simulations More recently we have focused on modeling and control of single and double transition shift transmissions This work is being done in collaboration with engineers from General Motors In collaboration with engineers at Xerox and Professor Dan Koditschek we have started new project on control of the color xerography process For more details you are invited to read our publications on these topics Selected Publications Research Groups Controls Group Center for Display Technology Manufacturing Updated April by Beth Olsen	faculty	misc
4409	 Date Thu Nov GMT Server Fri Apr GMT Robert Skeel Robert Skeel Profile Robert Skeel received his from the University of Alberta in He is professor in the Department of Computer Science at UIUC and Beckman Institute faculty member in the Theoretical Biophysics Group His fields of professional interest are scientific computing and numerical analysis computational methods for biomolecular modeling Honors and awards Profesor Visitante Iberdrola Valladolid Member Editorial Board SIAM Journal on Scientific Computing since Recent Representative Publications With Nelson Humphrey Gursoy Dalke Kale Schulten and Kufrin Visual Computing Environment for Structural Biology Comput Phys pp With Okunbor Canonical Numerical Methods for Molecular Dynamics Simulations Comput pp With Biesiadecki Dangers of Methods Comput pp Beckman Institute Research KEY WORDS Molecular dynamics macromolecular modeling computational structural biology numerical analysis parallel algorithms Robert Skeel is interested in computational methods for biomolecular modeling which is of great importance in structural biology and drug design and require the use of computers The goal is to find faster ways to do the computations especially through the application of advanced numerical techniques and parallel algorithms Current work centers on further development of parallel molecular dynamics program which is part of computational environment for structural biology This work is done in collaboration with Kale Klaus Schulten and other members of the Theoretical Biophysics Group In particular this work involves classical mechanics model of atomic interactions In order to effect massive reductions in the computation requirements it is necessary to find ways to take much larger time steps and ways to compute electrostatic interactions more quickly In the future it is also hoped that systematic way can be found to reduce the degrees of freedom Skeel sources of research funding include NSF and NIH Contact Information Beckman Institute University of Illinois Mathews Urbana IL Tel or Department of Computer Science Digital Computer Laboratory University of Illinois Springfield Urbana IL Tel email skeel Robert Skeel Department of Computer Science homepage contains additional information This page was last updated on For further information regarding the Beckman Institute please contact the webmaster Return to the Beckman Institute Home Page	faculty	misc
4410	 Date Mon Nov GMT Server Thu Nov GMT Daniel Atkins Daniel Atkins Dean and Professor School of Information SI Professor Electrical Engineering and Computer Science Office Address School of Information The University of Michigan West Hall East University Ann Arbor Michigan Voice atkins Fax For additional information about Atkins please explore the documents listed below An invitation to explore SI from Dean Atkins Biographical Sketch Professional Experience Consulting Publications Refereed Professional Organizations and Activities Recent Presentations Sponsored Research Examples of Major University Service Activities	faculty	misc
4411	 Date Thu Nov GMT Server Sun Sep GMT Brian Howard Home Page Brian Howard Assistant Professor Department of Mathematics and Computer Science Bridgewater College Office McKinney Center for Science and Mathematics Box Bridgewater College Bridgewater Virginia Home Weeping Willow Lane Apt Bridgewater Virginia New Home Page http Old Course Home Pages CIS Logical Foundations of Programming Spring CIS Set Theory and Logic for Computer Science Fall CIS Translator Design Summer CIS Formal Language Theory Spring Some of my Papers abstracts My Number Programming Language Semantics Group Research and Members Programming Language References Other Institutions My Netscape Bookmarks What time is it Let Go Boating Brian Howard bhoward	faculty	misc
4412	 Date Mon Nov GMT Server Wed Jan GMT Ellie LonskeHome Page Name Ellie Lonske Title Director of Information Technology Services and Lecturer in Computer Science Office Science Center Extension Responsibilities Director of Information Technology Services which provides computing services to the Wellesley campus Additionally teaches Computers and Programming Introduction to Computer Science and Data Structures Education Boston College Worcester State College Worcester Polytechnic Institute Back to the CS Home Page Ellie Lonske elonske Computer Science Date Created January Last Modified January Expires January	faculty	misc
4413	 Server Date Thursday GMT Friday GMT Matthew Bishop Field of Interest UC Davis Department of Computer Science Matthew Bishop Assistant Professor Professor main research area is computer security in which he has been active since He is especially interested in analyzing and improving the security of existing systems especially techniques for detecting and preventing security flaws in design and implementation network security formal models of access control user authentication and cryptography He has also worked extensively on the security of the UNIX operating system Professor Bishop is member of the Privacy and Security Research Group and chaired the first two UNIX Security Workshops Click here to see Bishop personal home page Office Engineering II Phone bishop Last modified August	faculty	misc
4414	 Date Wed Nov GMT Server Tue Nov GMT Peter Freeman Home Page Peter Freeman is founding dean of the College of Computing at Georgia Tech Further background can be found in my biographical sketch Contact Information Dean Peter Freeman College of Computing Atlantic Avenue Room Georgia Institute of Technology Atlanta GA USA Tel Fax freeman Assistant Marie Little marie The Dean Office Home Page contains variety of information about the College of Computing including history mission statement strategic plans reports and pointers to other information relevant to the overall College Items of interest links books events and other information personally think you might find interesting Personal information family activities interests Last Modified by Peter Freeman November freeman	faculty	misc
4415	 Date Thu Nov GMT Server Fri Jan GMT Krithi Ramamritham krithi Krithi Ramamritham Computer Science Department University of Massachusetts Amherst Mass office fax krithi Ramamritham received the in Computer Science from the University of Utah in Since then he has been with the Department of Computer Science at the University of Massachusetts where he is currently Professor He has held visiting positions at the Technical University of Vienna Austria and at the Indian Institute of Technology Madras and was Science and Engineering Research Council visiting fellow at the University of Newcastle upon Tyne Ramamritham interests span the areas of systems transaction processing in database systems and databases systems In the arena he has contributed to the development of scheduling algorithms specification and programming languages operating system support architectural support and design strategies for distributed applications In database transaction processing his interests lie in supporting the needs of emerging applications such as design workflow systems and massive digital databases whose data and transaction characteristics as well as correctness and performance requirements make traditional transaction processing approaches unsuitable To this end his work exploits semantic information about the objects operations transaction model and the application Combining aspects from and active databases along with concepts and mechanisms from systems he is also developing transaction processing support for applications that utilize databases Ramamritham has served on numerous program committees of conferences and workshops devoted to databases as well as systems He served as Program Chair for the Systems Symposium in and as General Chair in Also he was for the Conference on Data Engineering in He is an editor of the Systems Journal and the Distributed Systems Engineering Journal He has three IEEE tutorial texts two on hard systems and forthcoming text on advances in database transaction processing He is consultant to AT Bell laboratories You can browse through some of Ramamritham publications in the area of systems and database systems During Ramamritham spent year in India Based on his visits to Indian CS institutions and laboratories he has written summary report as well as detailed report on the research and development activities in India To Database Systems To Real Time Systems	faculty	misc
4416	 Date Thu Nov GMT Server Mon Aug GMT Saied Faisal Faisal Saied Areas of research interest Numerical Scientific Computing PD Es Parallel Algorithms Mathematical Software Parallel Computing Algorithms Home Page Faisal Saied home page Administrative help Kathy Johnson Digital Computer Laboratory West Springfield Avenue Urbana IL fax saied Go back to Faculty Index	faculty	misc
4417	 Gregory Dudek Beginning of JavaScript Applet Original code Web Integration Systems DBA Websys All Rights Reserved This code can be or modified if credit is given in the source code Chris Skinner January Modified by RD CNNfn Modified by Kurt Koller MTVOnline Feb MModified by Gregory Dudek Disclaimer We will not be held responsible for any unwanted effects due to the usage of this applet or any derivative No warrantees for usability for any specific application are given or implied function seed var Check out the mobile robotics page More neat stuff on the graphics page var The CIM pages discuss related research groups Mobile robotics ahead var Yes know the picture is awful var var out var var rate if seed seed var seed else if seed seed for seed seed var seed else if seed if seed var seed else End of JavaScript code Professor Dudek Electronic mail dudek School of Computer Science and Centre for Intelligent Machines CIM Research areas navigation shape mobile robotics vision visualization recognition Runs the Autonomous Mobile Robotics Lab at CIM Address Centre for Intelligent Machines McGill University McConnell Engineering Building Room University Street Montreal Que Canada Telephone FAX Home Secretary CIM Secretary CS Mobile Robot Lab have some information on visiting us Teaching Fundamentals of Computer Graphics Mobile Robotics and Spatial Representation lecturer coordinator Principles of Assembly Language Programming Alarm clock	faculty	misc
4418	 Date Thu Nov GMT Server Mon Aug GMT Masaaki Mizuno Home Page Masaaki Mizuno Associate Professor Department of Computing and Information Sciences Kansas State University Research Interests Operating Systems Distributed Systems Some of my papers Other local pages SueSue home page Dave Shmidt home page lot of useful information CIS department tour Department home page Masaaki Mizuno masaaki Department of Computing and Information Sciences Kansas State University Nichols Hall Manhattan KS office fax Treesmill Manhattan KS	faculty	misc
4419	 Date Thu Nov GMT Server Mon Aug GMT Andrew Chien Home Page Andrew Chien Home Page Andrew Chien Associate Professor Department of Computer Science University of Illinois at With joint appointments in the Department of Electrical and Computer Engineering and the National Center for Supercomputing Applications in Computer Science from the Massachusetts Institute of Technology in Computer Science from the Massachusetts Institute of Technology in Electrical Engineering from the Massachusetts Institute of Technology Andrew Chien leads the Concurrent Systems Architecture Group Office Hours other times by appointment Research Projects Illinois Concert Project Efficient concurrent programs Scalable Clusters Communication coordination external networking High Performance Communication software messaging layers and networks Parallel Characterization PPFS Courses CS Theory of High Speed Parallel Computation CS Hardware and Software Architecture for Parallel Servers CS Computer System Organization Fall CS Computer Architecture Laboratory HDL and FPGA Andrew is involved with the organization of the following Conferences Architectural Support for Programming Languages and Operating Systems October Boston Massachusetts International Parallel Processing Symposium April Geneva Switzerland SIGPLAN Symposium on Programming Language Design and Implementation June Las Vegas Nevada Contact Information Professor Andrew Chien Digital Computer Laboratory MC Springfield Avenue Urbana IL Email achien Phone FAX Secretary Marla Brownfield Digital Computer Laboratory Springfield Avenue Urbana IL Email brownfld Phone Concurrent Systems Architecture Group Overheads from Talks NASA Highlight Figure landscape or portrait Back to CSAG home page achien	faculty	misc
4420	 Date Mon Nov GMT Server Fri Nov GMT Miles Murdocca Home Page About Miles Murdocca am an assistant professor in the Computer Science Department at Rutgers University Click on the speaker for an audio greeting Please feel free to correspond Miles Murdocca Department of Computer Science Rutgers University Hill Center New Brunswick NJ murdocca http phone fax This page has been visited times since December as recorded by the web counter Teaching Interests Introduction to Computer Architecture Internet Technology Graduate and Undergraduate Independent Studies What am Working on These Days Internet based distributed archiving system The DISTANCE Project Multimedia computer architecture courseware The MARC Project Networking projects Other Topics Summer Undergraduate Research Internship book project Principles of Computer Architecture is full textbook that created for our introduction to computer architecture course CS am in the process of putting it up with hypertext links and images All of this takes time there are over illustrations and lots of equations and other details that need to be reworked but you can have look at how far the project has progressed Some of my Favorite Web Sites Yahoo You name it it here This site has links to all of the cool Internet stuff you been hearing about Netscape home page From the creators of the original Mosaic Web browser The Web Museum Famous creative works The Vatican library digitized art collection brought to you by IBM Internet Underground Music Archive Music from unaffiliated artists Index to the whole world Explore the Web geographically CNN Cable Network News PBS Public broadcasting system The Discovery channel From the makers of the cable TV Discovery channel IN Jersey Online newspaper provided by New Jersey Asbury Park Press Targum Online The Rutgers University daily newspaper This project was enabled in part by one of my undergraduates Ryan Kriger Here is what he has to say about the project The Astrophysical Journal refereed version of the scientific journal Send an electronic postcard to somebody Walt Disney Company Promotional movie clips kid games Disneyland and other fun stuff Paramount Pictures Promotional clips from the movie giant MCA Universal Promotional clips from another movie giant Video camera at Niagara Falls You need an MPEG player for the second video Interesting devices connected to the Internet Stuff Mostly Reference Info for Power Users Links to HTML tutorials Compiled by Anna Shukhina http Learn HTML by Mary Going HTML is the language of Web Pages Internet Information Tools HTML Tutorial Jiaotong University About HTML HTML references HTML Tutorial HTML Documents Hypertext Tutorial FastNet HTML User Web Page Tutorial HTML Tutorial Authoring methods for the WWW Brief HTML Tuturial by Damon Muller For more information on HTML you can do Net Search for HTML or HTML Tutorial Other Links World Wide Web Frequently Asked Questions WWW FAQ NCSA server Lots of good free software for networking multimedia and other things The Web Masters page Expert tips on designing Web pages Where did he get that background pattern Thinking of starting an Internet or Web service Here is an example of what one service charges Guide to HTML HyperText Markup Language KB This is compressed PostScript file that will be downloaded to your machine using ftp After it is downloaded you should use the uncompress utility to uncompress it At Rutgers University you can print it out using the lpr command from Unix machine lpr If you ca do it this way then you can find an hypertext version at the URL http Click here for version How do download and view file in format Click here CGI Common Gateway Interface FAQ CGI Common Gateway Interface standard you may have to browse bit to find it here Click here to see simple CGI action All this does is execute program on in and print simple message Note this do anything interesting so do click it keep it here to remind myself of how to do it Miles Murdocca Rutgers University murdocca Computer Science Department Home Page	faculty	misc
4842	 Server Date Wednesday GMT Wednesday GMT Cornell Modeling and Simulation Project Home Page Cornell Modeling and Simulation Project Enormous effort is currently expended in creating scientific software particularly for simulating physical systems defined on complex geometries and when using advanced computing hardware The goal of the SimLab project is to reduce this effort by bringing together technologies such as geometric modeling symbolic mathematics numerical analysis generation and formal methods to create tools that raise the semantic level at which it is possible to create scientific software Overview of the Project The SimLab Software Package Selected Research Activities Collaborative Mathematics Environments research proposal postscript version Mesh Generation Microstorage Architecture The Weyl computer algebra substrate SPL programming language for synthesizing scientific software The Chains Programming Language Selected Presentations The SimLab Component of the MADEFAST Collaborative Design and Manufacturing Exercise longer version New Directions in Systems Research Richard Zippel presentation on some new ideas on how systems research should proceed Includes brief discussions of communications microstorage architecture and the use of program transformations The Chains Programming Language language for computing with complex topological systems such as engineering models numerical algorithms etc Rick Palmer People Selected Publications and Reports Paul Chew chew	project	cornell
4843	 Server Date Sunday GMT Monday GMT SEQ Home Page The SEQ Project Querying Sequence Data Document under construction Time to put Order in the Database Order Time put in the Database Time to put the Database in Order Document Contents Project Objectives Current Status Motivating Example SEQ Data Model Sequin Query Language Optimization Techniques SEQ System Development Publications Related Work Contact Information Project Objectives number of important database applications require the processing of large amounts of ordered sequence data The domains of these applications include financial management historical analysis economic and social sciences metereology medical sciences and biological sciences Existing relational databases are inadequate in this regard data collections are treated as sets not sequences Consequently expressing sequence queries is tedious and evaluating them is inefficient Databases should model the data using the abstraction of sequences allow data sequences to be queried in declarative manner utilizing the ordered semantics take advantage of the unique opportunities available for query optimization and evaluation integrate sequence data with relational data so that users can store and query combination of relation and sequences These requirements serve as the goals of the SEQ project Various kinds of sequences need to be supported temporal sequences being the most important kind Queries should be expressible using notions like next and previous which are natural when considering sequences These queries should be optimized so that they can be evaluated efficiently These issues need to be studied in theory and then database system needs to be built that demonstrates the feasibility of the theoretical ideas Project Status The current status of the project is We have defined the SEQ data model that can support most important kinds of sequence data We have also defined algebraic query operators that can be composed to form sequence queries analogous to the composition of relational algebra operators to form relation queries We have described how sequence queries can be efficiently processed and have identified various optimization techniques We use sequence query language Sequin that can declaratively express queries over sequences Sequin query can include embedded expressions in relational query language like SQL or We are building database system to demonstrate the feasibility of our proposals The system implements the SEQ model using nested complex object architecture It is built over the SHORE storage manager and can process several megabytes of data Relations and sequences are supported in an integrated and extensible manner Motivating Example of Sequence Query weather monitoring system records information about various meteorological phenomena There is sequentiality in the occurrence of these phenomena the various meteorological events are sequenced by the time at which they are recorded scientist asks the query For which volcano eruptions did the most recent earthquake have strength greater than on the Richter scale If this query is to be expressed in relational query language like SQL complex features like groupby clauses correlated subqueries and aggregate functions are required Further conventional relational query optimizer would not find an efficient query execution plan even given the knowledge that the Earthquakes and Volcano relations are sorted by time However very efficient plan exists if one models the data as sequences ordered by time The two sequences can be scanned in lock step similar to sort merge join The most recent earthquake record scanned can be stored in temporary buffer Whenever volcano record is processed the value of the most recent earthquake record stored in the buffer is checked to see if its strength was greater than possibly generating an answer This query can therefore be processed with single scan of the two sequences and using very little memory The key to such optimization is the sequentiality of the data and the query Data Model The details of the SEQ data model are described in published paper click here for postscript version Here we present the gist of it The basic model of sequence is set of records mapped to an ordered domain of positions This relationship between records and positions can be viewed in two dual but distinct ways as set of records mapped to each position or as set of positions mapped to each record These two views are called Positional and respectively and each gives rise to set of query operators based on that view Queries on sequences could require operators of either or both flavors The operators are similar to relational operators and include various kinds of joins overlap containment etc and aggregates Such operators have been extensively explored by researchers in the temporal database community The Positional operators include Next Previous Offset Moving Aggregates etc Further operators allow zooming operations on sequences by means of collapsing and expanding the ordering domains associated with the sequence For instance daily sequence could be zoomed out to weekly sequence or zoomed in expanded to an hourly sequence The last part of the model deals with operations on groups sets of sequences The advantage is that this makes it easy to model queries involving sequence collections which is the case in many situations All the sequence operators are extended to work with groups of similar sequences instead of with single sequences This extension of the SEQ model indicates that practical implementation of SEQ would probably involve nested complex object system Sequin Query Language We have devised query language called Sequin using which declarative sequence queries can be specified The language is similar in flavor to SQL except that the inputs to queries as well as the results of queries are sequences Click here for description of the Sequin language with examples Optimization Techniques We have proposed new optimization techniques for sequence queries involving Positional operators There are existing techniques that have been proposed for queries with operators Our optimizations use query transformations meta data and caching of intermediate results to efficiently evaluate query An optimal query evaluation plan can be generated using an algorithm that relies on cost estimates One of the important observations is that accessing sequence data in single stream is probably very efficient and evaluation strategies should take this into account The details of the optimization techniques are described in published paper click here for postscript version System Development The SEQ database system has architecture supporting multiple clients via server The server is built on top of the SHORE storage manager Both Sequin and subset of SQL are supported as query languages which can be embedded inside each other The data model is nested complex object model that allows arbitrary levels of nesting of relations inside sequences and vice versa The system is also extensible providing support for new data types new ordering domains functions new storage implementations and new query languages For more details on the SEQ system click here Publications Sequence Query Processing Praveen Seshadri Miron Livny and Raghu Ramakrishnan Proceedings of the ACM SIGMOD Conference on Data Management May SEQ Framework for Sequence Data Praveen Seshadri Miron Livny and Raghu Ramakrishnan Proceedings of the IEEE Conference on Data Engineering March The Design and Implementation of Sequence Database System Praveen Seshadri Miron Livny and Raghu Ramakrishnan Submitted to VLDB What Next Sequence Queries Raghu Ramakrishnan Michael Cheng Miron Livny and Praveen Seshadri In Proceedings of the International Conference on the Management of Data COMAD December Related Work The DEVise project is complementary to SEQ It provides visualization environment that can be used to explore sequence data DEVise can act as through which queries can be posed against SEQ database server and the answers can be examined graphically Also see SHORE Project Storage Manager used for SEQ People working on SEQ and related projects Database Research Group CS Department Server Contact Information For more information contact Praveen Seshadri praveen Raghu Ramakrishnan raghu Miron Livny miron Computer Sciences Department University of Wisconsin Street Madison WI Last modified Fri Sep by Praveen Seshadri Praveen Seshadri praveen	project	cornell
4844	 Server Date Sunday GMT Friday GMT WELCOME TO PREMA PARALLEL RUNTIME SUPPORT SYSTEM PREMA Portable Runtime Environment for Multicomputer Architectures PREMA Portable Runtime Environment for Multicomputer Architectures Advanced Computing Research Institute Cornell Theory Center Cornell University Overview Prema is runtime support system for parallel compilers and problem solving environments that target scientific computing applications Prema is build on top of PORTS Cornell implementation and is designed to run on variety of MPP and SMP computers PREMA suppots global address space memory model data and task parallel programming models style of execution automatic mechanism dynamic load balancing Papers Multithreaded model for dynamic load balancing parallel adaptive PDE computations Nikos Chrisochoides Journal of Applied Numerical Mathematics pp Related Research PORTS Portable Runtime Systems Group PCRC Parallel Compiler Runtime Consortium Copyright copy Nikos Chrisochoides nikosc	project	cornell
4845	 Server Date Wednesday GMT Friday GMT Mathematics For Computer Generated Spoken Documents Title in audio ASTER Demonstration is dedicated to my AsTeR Audio System For Technical Readings is computing system for rendering technical documents in audio AsTeR was developed by me for my PhD pages An audio formatted version of the thesis approximately hours produced by AsTeR is being made available by RFB Recordings For the Blind as the first computer generated talking book Here is the abstract in print and here is an audio formatted version This hypertext document demonstrates the audio renderings generated by AsTeR Here is an enhanced demo using inline images Each example is made up of three components The original LaTeX input The audio formatted output produced by AsTeR The speech is produced by Dectalk and has been digitized at mulaw AsTeR uses stereo to render tables an effect that is not conveyed by the mono encoding The visually formatted version produced by LaTeX and DVIPS How to use this demo The examples in this demonstration get progressively difficult suggest you go through the initial sections sequentially For short demos typically show people the first three sections and round it off with the continuous fraction in section and quick overview of Faa De Bruno formula Here is the Postscript file containing all the examples in case you want to look over them first am not placing single file containing all of the audio examples since this would be about Section simple fractions and expressions This set of examples demonstrates the use of voice inflection and pauses to convey grouping of succinctly audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Audio state varied along dimension in audio space before rendering Section superscripts and subscripts To convey subscripts superscripts and other visual attributes vary audio state along dimension that is orthogonal to independent of the dimension used to convey This will allow the nesting of these mutually independent concepts audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Knuth examples of fractions and exponents These examples are taken verbatim from the TeX Book by Donald Knuth They are used in the TeX Book to demonstrate the power of the TeX layout operators Notice that all of these examples comprise of the same symbols but are very different AsTeR can render these as unambiguously as TeX can audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section continued fraction Moving along dimension in audio space defines perceptibly monotonic change This notion of perceptible monotonicity is vital in conveying nesting audio LaTeX Postscript Section Simple School algebra audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section square roots Notice the choice of unambiguous renderings for the following expressions audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Trigonometric identities Written mathematical notation can be ambiguous and hard to recognize Notice the complete absence of parenthesis in some of the examples below AsTeR uses several heuristics to construct the correct tree structure for these expressions audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Logarithms Notice the rendering when speaking the base of the logarithm The renderings are chosen to reduce cognitive load log base of as opposed to log of to the base audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Series rendering rules allow AsTeR to interpret the superscripts as exponents Such interpretation is not into the renderings it is fully customizable by the user audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Integrals The first of these examples probably the most innocuous is also the most difficult to recognize it is impossible to determine the variable of integration Notice that AsTeR interprets triple integrals as the nested application of the integral operator user can browse the triple integral and listen to its The integrals shown in examples and can trick the most experienced of human readers into an error audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Summations Notice that the same expression can be written in more than one way audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Limits audio LaTeX Postscript audio LaTeX Postscript Section Cross referenced equations The following section is meant to illustrate AsTeR rendering of and is most effective when AsTeR is used interactively AsTeR enables the listener to give meaningful names to objects and uses these names when referring to such objects in later audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Distance formula Notice that AsTeR produces good intonational structure when speaking text that is intermixed with mathematics audio LaTeX Postscript Section Quantified expression The quantifiers present an interesting challenge to AsTeR recognizer audio LaTeX Postscript Section Exponentiation Once again perceptible monotonicity allows AsTeR to convey the following deeply nested expressions succinctly These examples were produced with the Emacs Calculator symbolic algebra system AsTeR interfaces directly with this calculator and renders the output just as well as it can render any document audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section generic matrix AsTeR uses stereo effects to convey the structure of the matrix Rendering commences on the left and moves progressively right as each element of any row is spoken audio LaTeX Postscript Section Faa de Bruno formula This section presents Faa De Bruno formula taken from Knuth Art Of Computer Programming Vol first heard it spoken by RFB reader on talking book it took seconds to speak Since the renderings produced by AsTeR utilize features of the audio space not available to human reader still have not met reader who can change the size and shape of her head as she talks the rendering takes under seconds As you will hear soon even this is too long you forget the beginning by the time you hear the end Later we present rendering using variable substitution powerful technique for conveying structure of complex expressions Notice the proper intonational structure produced for text intermixed with mathematics audio LaTeX Postscript audio LaTeX Postscript Here is Faa De Bruno formula in all its glory Audio seconds LaTeX Postscript AsTeR can process complex expressions like the above and upon request replace complex with meaningful identifiers Such renderings convey structure the listener can then listen to the separately Since this substitution process is performed by AsTeR there is no LaTeX or Postscript equivalent for the audio output in this case The formula audio seconds Lower constraint audio seconds Numerator audio seconds Denominator audio seconds Raman raman Last modified Fri Aug	project	cornell
4846	 Server Date Wednesday GMT Friday GMT Information Capture and Access project Information Capture and Access The information capture and access research group works on ways that computers can locate information in the ever increasing volume of online data determine its structure and extract the information for human users The group was founded by John Hopcroft and Jim Davis in Current areas of research Extracting structured material from online documents when the structure is not explicit in the document extracting information presented in tabular form into relational database Constructing summaries and overviews of collections of texts Construction of nationwide library of computer science technical reports We have begun digitizing the Cornell Computer Science technical report collection in order to make the work more accessible on the Internet The collection is available through WWW server In addition to its utility to the general CS research community We use this document collection as test material for our research in information access The group consists of Cornell researchers Dean Krafft and visiting scientist Jim Davis as well as number of graduate and undergraduate students Fall The project is not active any longer JRD Publications James Allan et al Information Agents for Building Hyperlinks Proceedings of the Conference on Information and Knowledge Management	project	cornell
4847	 Server Date Wednesday GMT Wednesday GMT HORUS DISTRIBUTED COMPUTING ENVIRONMENT HORUS DISTRIBUTED COMPUTING ENVIRONMENT Kenneth Birman ken Robbert van Renesse rvr Horus effort has developed programming environment for reliable distributed computing During the last year Horus was used to demonstrate groupware and over high performance networks and was found to offer higher performance than other similar systems Novel features of Horus are its flexible software architecture in which applications pay only for features that they use and support for virtually synchronous process groups technology that we developed in our prior work on the Isis Toolkit which has become significant commercial success Horus also offers security and privacy technology which we view as an important research advance During we will be extending Horus to provide extremely low latency high performance capabilities Our approach combines elements of communication technology called Active Messages with playback system called Continuous Media By the end of the year we expect to demonstrate high speed interactive applications with remote multimedia servers such as might be used in remote telemedicine applications or video on demand systems All of this will retain the existing and security options of Horus and its virtual synchrony programming model Prior work on Isis has created substantial user base and we expect rapid uptake of Horus within this community as it matures Isis users span wide range of industries including telecommunications systems financial trading systems stock market automation process control for discrete electronic component manufacture air traffic control and communications system management and control Applications of Isis are being explored in several branches of the military as well as the NSA and other government branches Among the more visible military efforts is the Naval project which is exploring the use of Isis in new system that prototypes technologies for future enhancements of the AEGIS battle radar system The more demanding applications in this user base would benefit from access to Horus and our initial plan is to make it possible to migrate Isis applications to Horus with few changes thus benefiting this community in direct way Technology transition has occured through licensing agreements with Isis Distributed Systems subsidiary of Stratus Computers However all of our Cornell work is also available to researchers at no fee and is described through detailed publications and programming manuals Looking to the future we hope that mixture of Isis and Horus technologies will permit us to develop some of the very demanding applications that will be seen in groupware and planning systems The illustration below shows such an application military mission control and planning system that integrates data from variety of space air and ground resources and uses this to coordinate actions of various theatre assets Systems of this sort will demand the utmost in performance reliability and security while also tolerating failures and rapidly reconfiguring to respond to changing demands Success in our project will thus impact wide range of both civilian and military technology efforts Dept of Computer Science Cornell University ken	project	cornell
4848	 Server Date Sunday GMT Sunday GMT Cachet Related Project Efficient Incremental Computation Deriving Incremental Programs general systematic transformational approach to improving the efficiency of computation Theme Program analysis and transformations for incrementalization Cachet An interactive system that uses systematic program analysis and transformation techniques to derive incremental programs written in functional language Selected Publications Liu and Teitelbaum Systematic derivation of incremental programs Science of Computer Programming February Liu and Teitelbaum Caching intermediate results for program improvement In Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Program Manipulation pages La Jolla California June Liu Stoller and Teitelbaum Discovering auxiliary information for incremental computation In Proceedings of the Annual ACM Symposium on Principles of Programming Languages Petersburg Beach Florida January Liu CACHET An interactive program transformation system for deriving incremental programs In Proceedings of the Software Engineering Conference Boston Massachusetts November IEEE Computer Society Press Liu Principled strength reduction July People Annie Liu Tim Teitelbaum Keywords incremental computation incremental programs efficiency improvement optimization program analysis program transformation Cachet Annie Liu yanhong Last updated	project	cornell
4849	 Server Date Wednesday GMT Tuesday GMT Cornell Nuprl Automated Reasoning Project Nuprl Project Introduction to Nuprl Nuprl Browser Designed and written by Rob Vaughn Nuprl theories and articles Some of Nuprl theories and articles Nuprl User Documentation Related Publications and WWW Links class notes How to run Nuprl under Linux and GCL Announcements Suggestions and Feedback Help with Browser Main Index Nuprl Project nuprl Curious how many links to this page are out there Just ask AltaVista	project	cornell
4850	 Server Date Wednesday GMT Friday GMT Zeno Research Group Zeno Cornell Multimedia Research Group The People The Mission The Projects The Papers The Software Multimedia Curricula Development Potpourri Directions	project	cornell
4851	 Server Date Wednesday GMT Monday GMT QMG project QMG mesh generation and related software The QMG package does finite element mesh generation in two and three dimensions The package includes geometric modeling software the mesh generator itself and finite element solver It is free software downloadable from the Web runs under Unix and Windows NT There are now two releases of QMG released May and released November Other useful websites for mesh generation and geometric software are Robert Schneiders mesh generation home page Ian McPhedran page of finite element resources on the Web The University of Minnesota Geometry Center list of software for computational geometry Jonathan Shewchuk Triangle package Back to Vavasis home page Stephen Vavasis Computer Science Department Cornell University Ithaca NY vavasis	project	cornell
4852	 Server Date Wednesday GMT Thursday GMT Tom Henzinger HyTech HyTech The HYbrid TECHnology Tool We have moved	project	cornell
4853	 Server Date Wednesday GMT Friday GMT Cornell CSRVL Cornell Robotics and Vision Laboratory Welcome to the Web niche of the Cornell Robotics and Vision Laboratory cp No match match rrently under development please don your hard hat Questions and comments should be directed to mdw Thanks About the CSRVL The Cornell Computer Science Robotics and Vision Laboratory is located at Cornell University in Ithaca We have three main areas of research Computer vision Daniel Huttenlocher Multimedia applications of computer vision Ramin Zabih Robotics including distributed manipulation and mechanical systems MEMS Bruce Donald Here is pictoral tour of the CSRVL Current Projects The following projects are active at the CSRVL They are supervised by Ramin Zabih Automatic Detection and Classification of Scene Breaks in Digital Video MPEG Browser allowing scene break and global queries ATM Video Source transmission of video over ATM for parallel computation on platforms such as the ATM Cluster number of projects involving imaging applications These include parallel implementations in for and symmetric multiprocessors We have list of potential projects maintained by Justin Miller Most of our work has been done under Unix but we are currently considering move to WindowsNT There is discussion of some of the issues here We are hopeful that this move will be supported by Microsoft Selected Publications The following is list of selected papers of research done at the CSRVL Many of these papers are available via anonymous FTP Many publications from the Cornell Robotics and Vision Laboratory are available from the Cornell CS server See below Only those papers not available from the server are listed here Program Mobile Robots in Scheme Donald and Rees Proc IEEE International Conference on Robotics and Automation Nice France May pp On the Complexity of Computing the Homology Type of Triangulation Donald and Chang Revised MS based on the paper IEEE Symposium on the Foundations of Computer Science San Juan October pp Information Invariants for Distributed Manipulation Donald Jennings and Rus in The First Workshop on the Algorithmic Foundations of Robotics Peters Boston MA ed Wilson and Information Invariants in Robotics Donald Revised MS based on paper submitted to Artificial Intelligence Automatic Sensor Configuration for Planning Donald Briggs Proceedings IEEE International Conference on Robotics and Automation San Diego CA May Sensorless Manipulation Using Massively Parallel Microfabricated Actuator Arrays Donald Mihailovich and MacDonald Proc IEEE International Conference on Robotics and Automation San Diego CA May Theory of Manipulation and Control for Microfabricated Actuator Arrays Donald Mihailovich and MacDonald Proceedings of the IEEE Workshop on Micro Electro Mechanical Systems Oiso Japan January Computational Approach to the Design of Micromechanical Hinged Structures extended abstract Proceedings of the Symposium on Solid Modeling and Applications Canada May Some other papers are listed here Technical Reports by Author These lists are generated dynamically by the Cornell Server Here is the server index where you can search for technical reports by author title and keyword Karl Briggs Amy Brown Russell Donald Bruce Huttenlocher Daniel Jennings Jim Leventon Michael Rucklidge William Rus Daniela People at the CSRVL Karl Scott Cytacki Bruce Donald associate professor Pedro Felzenszwalb Daniel Huttenlocher associate professor Ryan Lilien Michel Maharbiz Justin Miller Greg Pass Daniel Scharstein Aaron Stump Rob Szewczyk Fernando Joe Viton Justin Voskuhl Ed Wayt Matt Welsh Greg Whelan Ramin Zabih assistant professor	project	cornell
4854	 Server Date Tuesday GMT Tuesday GMT Computational Geometry Lab at McGill The Computational Geometry Lab at McGill Welcome to the slightly refurbished web page of the computational geometry lab at McGill We are part of the School of Computer Science here at McGill Some things you might be looking for How to reach us Faculty Visitors and Postdoctoral Researchers Students and alumni Some information about our research The computational geometry bibliography Cryptography related files How reach us By mail or courier Computational Geometry Laboratory School of Computer Science McGill University University Street Suite Montreal Quebec CANADA By Electronic Mail By phone Faculty Professor David Avis Professor Luc Devroye Professor Godfried Toussaint Professor Sue Whitesides Visitors and Postdoctoral Researchers Sylvain Lazard Naixun Pei Suneeta Ramaswami Stephen Wismath Students and Alumni David Bremner Min Kong Alain Turki	project	misc
4855	 Date Mon Nov GMT Server Fri Nov GMT Memoria The Memoria Project Principal Investigators Steve Carr Philip Sweany Current Graduate Students Raelyn Crowell Chen Ding Qunyan Wu Current Undergraduate Students Don Darling Denise Wieber Description The goals of the Memoria project are to use analysis to improve the memory performance of advanced microprocessors Current research efforts include algorithms for combining software prefetching and automatic optimization of linear algebra codes optimizing loop order for cache performance and using analysis in code generation This project is intimately entwined with the Rocket project Publications Carr Combining Optimization for Cache and Parallelism To appear in PACT Boston MA Michigan Technological University Department of Computer Science Technical Report McKinley Carr and Tseng Improving Data Locality with Loop Transformations To appear in ACM Transaction on Programming Languages and Systems Michigan Technological University Department of Computer Science Technical Report Carr Ding and Sweany Improving Software Pipelining with In Proceedings of the Annual Hawaii International Conference on System Sciences Carr and Lehoucq Compiler Blockable Algorithm for QR Decomposition Proceedings of the Seventh SIAM Conference on Parallel Processing for Scientific Computing Carr McKinley and Tseng Compiler Optimizations for Improving Data Locality Proceedings of the Sixth International Conference on Architectural Support for Programming Languages and Operating Systems Carr and Kennedy Improving the Ratio of Memory Operations to Operations in Loops ACM Transactions on Programming Languages and Systems November Carr and Kennedy Scalar Replacement in the Presence of Conditional Control Flow Software Practice Experience January Carr and Kennedy Compiler Blockability of Numerical Algorithms Proceedings of Supercomputing Callahan Carr and Kennedy Improving Register Allocation for Subscripted for Subscripted Proceedings of the SIGPLAN Conference on Programming Language Design and Implementation Invited Publications Carr and Kennedy Compiling Scientific Code for Complex Memory Hierarchies Proceedings of Hawaii International Conference on System Sciences Carr and Kennedy Blocking Linear Algebra Codes for Memory Hierarchies Proceedings of SIAM Conference on Parallel Processing for Scientific Computing Technical Reports Carr and Wu Scalar Replacment and the Law of Diminishing Returns Michigan Technological University Department of Computer Science Technical Report Submitted to the Journal of Programming Languages Carr and Lehoucq Compiler Blockability of Dense Matrix Factorizations Michigan Technological University Department of Computer Science Technical Report Submitted to ACM Transactions on Mathematical Software Carr and Wu An Analysis of on the HP Michigan Technological University Department of Computer Science Technical Report Carr and Wu An Analysis of Loop Permutation on the HP Michigan Technological University Department of Computer Science Technical Report Carr and Wu The Performance of Scalar Replacement on the HP Michigan Technological University Department of Computer Science Technical Report Research Grants Hiding the Latency Between and Cache on the Alpha Digital Equipment Corporation Improving the Cache Performance of Scientific Applications NSF with in matching funds Improving the Memory Performance of the HP Company Loop Unrollilng Company PhD Dissertations Carr Memory Hierarchy Management Rice University Department of Computer Science September Masters Theses Guan Guided by Model Michigan Technological University Department of Computer Science December Ding Improving Software Pipelining with and Analysis Michigan Technological University Department of Computer Science June	project	misc
4856	 Date Tue Nov GMT Server Wed Sep GMT Sound Probabilistic Reasoning Project SPR Primary Investigator Eric Neufeld The SPR project considers probabilistic approaches to variety of AI problems traditionally handled by logics grammars or heuristics Students in the past have look at approximate reasoning natural language reasoning about time and classification of data Logic programming Working jointly with Tony Kusalik some students are investigating problems in logic programming including abstract interpretation and visual unification	project	misc
4857	 Date Tue Nov GMT Server Thu Mar GMT SFU Programming Languages Group SFU Programming Languages Group Computer Languages and Software Systems CLASS Lab The faculty is widely involved in research into programming language design and implementation Design interests include language features to support functional logic programming styles as well as facilities for parallelism distributed computing and Implementation interests include language processors support program manipulation tools and software engineering environments Faculty Stella Atkins Warren Burton Robert Cameron Veronica Dahl James Weinkam To the top Visit Computing Science or Simon Fraser University	project	misc
4858	 Date Wednesday GMT Server Thursday GMT ANDS Home Page Advanced Networking and Distributed Systems ANDS Principal Investigator Leonard Kleinrock This project investigates the architecture and the fundamental behavior of distributed computer communication systems from an analytical as well as from simulation point of view the emphasis being on analytical In addition this project implements the understanding of these systems Areas of Research Gigabit Networks Fast Packet Switching Using Multistage Interconnection Networks Analysis of Competing Lightwave Networks Performance of Boolean Interconnection Networks Distributed Simulation New Model of Load Sharing Genetic Algorithms Shared Memory Cache Behavior Fast Packet Switching Using ATM Distributed Control Using Simple Automata Collective Behavior of Mobile Robots Related Links ANDS Status Report ANDS People and their pictures The Tradeoff presentation by Leonard Kleinrock Page Manager Webmaster jshort	project	misc
4859	 Date Wed Nov GMT Server Mon Nov GMT Collaboration Bus Collaboration Bus Sponsors DARPA Information Technology Office Faculty Prasun Dewan Hussein Siddhartha Chatterjee Kevin Jeffay John McHugh Lars Nyland Jan Prins John Smith Dave Stotts Students Michele Clark Mike Meehan Emad Eldin Mohamed Jon Munson Peter Nee Vassil Roussev Anshu Sharma Description In this project we will address the problem of composing new collaborative systems from existing and collaborative systems We propose to develop new software abstraction called the collaboration bus that makes it easy to compose collaborative systems The collaboration bus will be an extensible infrastructure that provides general definitions of collaboration services default implementations of these services rules for interconnecting these services and mechanisms for extending the set of supported services The set of generic services supported by the bus will include data model for defining shared workspaces consisting of structured objects user interface model that allows shared objects to be manipulated using user interfaces that support text graphics audio video and virtual reality coupling model that enables users in joint session to share data and objects and controls their interactions to ensure security and consistency contraints are not violated migration and replication mechanisms that ensure that the bus does not become bottleneck and services consisting of scheduling algorithms and network protocols for ensuring coupling among the collaborators collaborative session and making users in session aware of the Previous work has addressed the heterogeneity problem in other domains such as software engineering operating systems and database systems Our project will extend this research by providing an interconnection technology for the collaboration domain It will offer two forms of interoperability interoperability which will allow existing implementations of different collaboration services such as and services to be combined in new collaborative systems and interoperability which will resolve inconsistencies among different competing instances of the same service such as explicit and implicit schemes for creating joint sessions provided by different existing systems that need to interoperate with each other The following diagram illustrates the capabilities of the collaboration bus Click on the picture to see bigger version The concept of collaboration bus requires general abstraction that covers the functionality of existing collaborative systems In particular the bus must define reference model that captures similarities and differences among multiple solutions to problem In addition it must provide when possible semantic translation to allow dissimilar solutions to the same problem to coexist It must also define composition functions that allow service to be composed with other collaboration services Finally the bus must not become bottleneck that significantly increases the response times of users The following approach will be used in designing implementing and evaluating the bus Identify the services that collaborative application requires Identify reference model for each of these services Identify semantics translations and composition functions for each of these services Incorporate into the bus default implementation of the service and the associated semantic translations and composition functions Develop mechanisms and policies for replicating and migrating parts of the bus Develop mechanisms for protecting the operations on the bus Carry out interoperability experiments involving each of these services using existing software Our plans for the next year are to Identify potential clients of the collaboration bus and scenarios of how these clients would interoperate with each other Characterize requirements of collaborative virtual environments based on initial experiments Design version of the collaboration bus which will include reference models semantic translations and composition functions for session management coupling and virtual environments Start implementation of version of the bus Other Project Information IC Meeting Talk Postscript one slide per page works with gv IC Meeting Talk Postscript slides on one page does not work with gv use gs or print it Quad Chart Postscript Project Summary Related Links UNC Collaboration Projects DARPA Intelligent Visualization and Collaboration IC Projects Last revised Mon Nov EST by dewan	project	misc
4860	 Date Wed Nov GMT Server Tue Aug GMT Numerical Computation Research Group Computer Science Department University of Colorado at Boulder Academic Year Numerical Computation Research Group Faculty Liz Bradley Richard Byrd Cai Liz Jessup Oliver McBryan Bobby Schnabel Research Interests The numerical computation research group is concerned with developing analyzing implementing and testing methods for solving mathematical problems on computers It is also concerned with applications of numerical methods to scientific and engineering applications and with languages and tools for numerical computation There is considerable emphasis on the development of methods for parallel computers Specific areas of emphasis within the group include optimization and nonlinear equations Byrd Schnabel partial differential equations Cai McBryan eigenvalue problems Jessup and languages and tools for parallel computation Jessup Schnabel Currently there is also considerable emphasis on applications from molecular chemistry Byrd Schnabel astrophysics McBryan space structures McBryan and combustion and chaotic systems Bradley Courses and textbook in	project	misc
4861	 Date Wednesday GMT Server Friday GMT Performance Prediction Measurement and Prediction of Parallel Program Performance NSF CISE grant Faculty Tom LeBlanc leblanc in collaboration with Mark Crovella crovella Graduate Students Wagner Meira meira Alex Poulos poulos Nikolaos Hardavellas nikolaos Project Summary Carnival is tool designed to automate the process of understanding the performance of parallel programs It supports performance measurement modeling tuning and visualization Carnival measurements are based on predicate profiling which quantifies the time spent in each category of overhead during execution Our first implementation of predicate profiling was implemented on the We now have implementations for the SGI Challenge multiprocessor the IBM network of SUN workstations running PVM and cluster of Alpha workstations Carnival is novel attempt to automate the inference process for performance phenomena In particular Carnival currently supports waiting time analysis an automatic inference process that explains each source of waiting time in terms of the underlying causes instead of simply identifying where it occurs We are now developing similar technique to explain the causes of communication Our ultimate goal is to combine the accuracy of empirical performance measurement with the predictive power of analytic performance modeling Towards that end Carnival supports lost cycles analysis which uses priori knowledge of the sources and characteristics of the overhead categories in parallel systems to guide and constrain the modeling process The Lost Cycles Toolkit which we are integrating within Carnival combines empirical techniques from statistics with measurement and modeling techniques for parallel programs Carnival is also visualization tool that provides link between performance measurements and the source code The interface presents the original source code in window Along the left hand side of the source is scroll bar that indicates the amount of time spent in each portion of the source code summed across all processors Along the right hand side of the source code are color bars that indicate the percent of time spent in each overhead category by that section of source code again summed across all processors windows are used during modeling and waiting time analysis The Carnival implementation comprises about lines of and source code It has been installed at the Cornell Theory Center and we plan to make it more widely available soon We are currently porting the instrumentation library the only portion of the tool to clusters of DEC Alphas connected by the DEC Memory Channel Related Publications Crovella Bianchini LeBlanc Markatos and Wisniewski Using Ratio in Parallel Program Design and Performance Prediction In Proc IEEE Symposium on Parallel and Distributed Processing Dallas Texas December pp Crovella and LeBlanc Performance Debugging Using Parallel Performance Predicates In Workshop on Parallel and Distributed Debugging pp May Crovella and LeBlanc The Search for Lost Cycles New Approach to Performance Tuning of Parallel Programs In Proc Supercomputing Washington November pp Also available as Technical Report Computer Science Univ of Rochester December Crowl Crovella LeBlanc and Scott The Advantages of Multiple Parallelizations in Combinatorial Search of Parallel and Distributed Computing April pp Also available as Technical Report Computer Science Univ of Rochester April Crovella Performance Prediction and Tuning of Parallel Programs Dissertation TR Computer Science Department University of Rochester August Mark Crovella Thomas LeBlanc Wagner Meira Parallel Performance Prediction Using the Lost Cycles Toolkit TR Computer Science Department University of Rochester May Wagner Meira Modeling Performance of Parallel Programs TR Computer Science Department University of Rochester June Wagner Meira Thomas LeBlanc and Alexandros Poulos Performance Visualization and Tuning with Carnival ACM SIGMETRICS Symp on Parallel and Distributed Tools May pp Related Projects AIMS NASA Ames Pablo University of Illinois Paradyn University of Wisconsin Poirot University of Oregon TASS Georgia Tech TAU University of Oregon Other Information There is new symposium on parallel and distributed tools sponsored by ACM SIGMETRICS The symposium has home page and was held May as part of the ACM Federated Conference in Philadelphia See the proceedings of that symposium for papers on the latest work in this area The Parallel Tools Consortium was formed to help coordinate tool development in the parallel processing community See their home page for list of projects approved by the consortium as well as comprehensive list of research projects on parallel tools The Cornell Theory Center maintains list of parallel tools including Forge ParaGraph ParaScope and upshot and associated documentation For an introduction to parallel computing and discussion of related performance issues see Ian Foster text Designing and Building Parallel Programs last modified June Tom LeBlanc leblanc	project	misc
4862	 Date Wed Nov GMT Server Fri Nov GMT Flux Project Home Page The Flux Operating System Project The Fluke Nested Process Architecture The Flux Project objectives are to provide infrastructure the flux for highly efficient systems with flexible degrees of trust initially oriented to protection ii to provide transparent and flexible control of all the resources used by arbitrary subsystems and iii to distribute free and usable versions of the developed software We have recently developed an entirely new kernel and OS structure on which future work will be based new paper Microkernels Meet Recursive Virtual Machines describes how this system efficiently supports recursive virtual machines That paper as well as paper on CPU Inheritance Scheduling appeared at OSDI The draft API for Fluke the new kernel is available in html format postscript and postscript Beware it currently pages long but mostly white space design and rationale document will be forthcoming later this year One of the design features which should provide large performance gains is safely storing portions of normal kernel objects in user space as outlined in these slides from talk at December SOSP This avoids kernel in many common cases Artist renditions of the Fluke Nested Process Architecture and of the Fluke OS providing encapsulated environments for untrusted applications Project Members Papers Core papers Module papers papers Available Software Flux OS Toolkit toolkit to provide infrastructure for constructing operating systems Mach kernel major component of the overall project is an improved kernel Kernel development has moved to Fluke major work on the Mach kernel has stopped Lites Unix server we distribute version of the Lites server PA system snapshot of freely distributable source and binaries in the form of bootable Lites and system for the Quarks an Alpha release of portable and reasonably efficient distributed shared memory system MOSS highly functional DOS extender based on part of the Flux OS toolkit before it was completely modularized Goofie developed by the Mach Shared Objects project goofie creates portable object descriptions from class declarations In the future Goofie may be used by the Flux project to enable polymorphic functions GNU tools we used to maintain the GNU language tools for HP architecture and still provide recent versions in both source and binary forms Related Utah Projects Computing Resources Support The group research in operating systems and related language work is sponsored by grants from ARPA NSF and IBM The Center for Software Science is Utah State Center for Excellence Job Openings Research staff Student fellowships and research assistantships Directions and Hotel Information Directions from the Salt Lake Airport to the Computer Science Department at the University and information on Salt Lake Hotels University of Utah Department of Computer Science home page lepreau Last modified on Fri Nov	project	misc
4863	 Date Wed Nov GMT Server Wed Nov GMT Minimalist Robotics Minimalist Robotics Description Minimalist robotics uses large numbers of simple inexpensive robots to study emergent computation in systems of interacting agents At Indiana University we are using the hexapod Stiquito robot that was invented here in to create Stiquito colony new project involves large numbers of robot bacteria called Robozoa to study field computation with physical agents Associated Faculty Jonathan Mills Gregory Rawlins Associated Graduate Students David Braun Jay Kasberger Gary Parker Students who want to do research in this area should send mail to Jonathan Mills Affiliated Projects NitleMite James Conrad North Carolina State University Scorpio John Estelle University of Toledo Support NSF Graduate Research Traineeship Program Award NSF Incubator Laboratory Grant For more information Minimalist Robotics Related Projects Analog VLSI and Robotics Laboratory Return to Computer Science Research Page	project	misc
4864	 Date Wed Nov GMT Server Fri Mar GMT Communications Research Group Department of Computer Science Michigan State University The Communications Research Group CRG at Michigan State University addresses efficient communication for parallel and distributed computing Specific research topics include communication architectures protocols network interface software communication libraries and the communication aspects of parallel and distributed applications The members of the group include Philip McKinley and approximately graduate and undergraduate students CRG research and equipment is presently funded by the National Science Foundation the Department of Energy HPCC program Ameritech Corporation and the AT Foundation Department of Computer Science Michigan State University Description People Papers Research Projects and Associated Publications CRG Public Domain Software Packages Laboratory Facilities CRG ftp site Michigan State University MSU Department of Computer Science For further information contact Philip McKinley Dept of Computer Science Wells Hall Michigan State University East Lansing MI Telephone FAX Email mckinley	project	misc
4865	 Date Wed Nov GMT Server Mon Dec GMT Computing Theory Computing Theory Description am interested in the logical foundations of computing theory and of constructive mathematics My recent work has been in relations of logic to computational complexity These relations are manifested in proof principles computation principles data structures and programming language types characterizations of computational complexity lend credence to the importance of the classes considered provide insight into their nature relate them to programming methodology suggest new tools for separating them and offer generalizations to computing over arbitrary structures and to computing in higher types also have ongoing interests in reasoning about programs My work in this area has mainly been about logics of programs and their relations to reasoning about programs using higher order methods Associated faculty Dirk Van Gucht Associated Graduate Students Normal Danner Research Support NSF Return to Computer Science Research Page	project	misc
4866	 Date Tue Jan GMT Server Wed Dec GMT The Sundance Sentence Analyzer of CS University of Utah Department of Computer Science Sundance Faculty Ellen Riloff Project Description Sundance Sentence UNDerstanding ANd Concept Extraction is our new conceptual sentence analyzer that is currently under construction Stay tuned for more information here as it develops Mail riloff for more information Last modified Wed Nov	project	misc
4867	 Date Tue Jan GMT Server Mon May GMT SNeRG Ontological Mediation Ontological Mediation This page is under construction Abstract An ontological mediator is an intelligent agent capable of facilitating communication between other agents who use the same communication protocols but use their common language in different ways Different knowlege agents employ different ontologies or ways of taxonomizing and constraining their domains When two agents are using different ontologies communication can not occur unless the agents can agree on the meaning of words and phrases Often they can not or they do not have the capability to hold such conversation mediator is actively involved in understanding the content of the messages sent between communicating agents and will use knowledge in its domain of mediation to determine where conflicts arise learn the meanings of new words translate expressions appropriately and expand the ontologies of both communicating agents Our research project is exploring various issues in ontologies knowledge sharing vocabulary acquisition and distributed databases and we are building an ontological mediator Ontological Mediation is new project in the SNePS Research Group in the Department of Computer Science at the State University of New York at Buffalo It is supported in part by Rome Laboratory and the Defense Advanced Research Projects Agency under USAF contract The views and conclusions are the and should not be interpreted as the official opinion or conclusions of the US Government the USAF Rome Laboratory or ARPA Click here for postscript copy of the latest draft version of our paper Ontological Mediation An Analysis unpublished Personnel Stuart Shapiro Alistair Campbell Some Relevant Web Pages Knowledge Sharing Effort public library Agents and Mediators KQML Knowledge Query Manipulation Language Knowledge Sharing Stanford Logic Group KIF Knowledge Interchange Format Stanford KSL Network Services Go back to the SNeRG Home Page Alistair Campbell aec	project	misc
4868	 Date Wed Nov GMT Server Thu Oct GMT HTML Avalanche Scalable Parallel Processor Project University of Utah Department of Computer Science The goal of the Avalanche project is to enable the construction of usable and truly scalable parallel computing platforms that are not exorbitantly expensive yet are still capable of achieving performance levels Low communication latency is the key to achieving performance scalability for both of the common parallel computation models namely Message Passing and Distributed Shared Memory Toward this end we are developing memory architecture that tightly integrates the processor the entire memory hierarchy and the interconnect fabric The core of the effort is the development of new Cache and Communication Controller Unit CCCU for the PA CPU and the Myrinet network fabric from Myricom Inc The CCCU will inject incoming data traffic into the appropriate level of the memory hierarchy to minimize message latency and cache miss penalties Furthermore it supports flexible suite of cache coherence protocols for DSM applications In order to achieve reasonable cost it is necessary to adopt an approach that takes advantage of the significant performance advantages and momentum already provided by commercial microprocessor and interconnect fabric development efforts The target for the project is processing element prototype which will be constructed in the final year of the ARPA CSTO SPAWAR supported project duration Status Reports Publications Personnel Facilities Related Sites Feedback to avalanche Last modified around November This work was sponsored by the Space and Naval Warfare Systems Command SPAWAR and Advanced Research Projects Agency ARPA Communication and Memory Architectures for Scalable Parallel Computing ARPA order under SPAWAR contract	project	misc
4869	 Date Wednesday GMT Server Wednesday GMT TRAINS Project Home Page The TRAINS Project Natural Spoken Dialogue and Interactive Planning The TRAINS project at the University of Rochester Department of Computer Science is effort to develop an intelligent planning assistant that is conversationally proficient in natural language The goal is fully integrated system involving online spoken and typed natural language together with graphical displays and interaction The primary application has been planning and scheduling domain involving railroad freight system where the human manager and the system must cooperate to develop and execute plans Research in the TRAINS project has been along two tracks First the project has supported thesis research in natural language processing speech interpretation discourse processing planning and reasoning under uncertainty Complete references are available from the resources given below Second over the course of the project we have periodically pulled the research threads together and produced limited but working demonstration systems based on the theories The hope is that this incremental development is converging towards the ultimate goal of fully conversant system Details of these systems are also available from many of the references given below and in particular in the JETAI paper Current research in the TRAINS project centers on an interactive assistant dubbed Details are available in paper presented at the ARPA Spoken Language Technology workshop and in paper to appear in Work in progress involves more realistic domain and more complicated planning problems We still hope to have version of the TRAINS system running over the WWW in the near future Current Research Recent TRAINS Presentations local access only An Interactive Planning Assistant ARPA Spoken Language Technology Workshop Approach to Plan Management Labs Planning Initiative Tactical Picture Agent ONR TRAINS Project Promo Video mins MB flat QuickTime gzipped or in action mins MB flat QuickTime gzipped or Dialog Annotation For more information Researchers in the TRAINS Project Publications relating to TRAINS Towards Planning Assistant To appear in Postscript version Planning Position Paper ARPI Workshop The TRAINS Project case study in building conversational planning agent Overview of from JETAI Postscript version TRAINS Dialogue Corpus Also of interest URCS Speech Research Knowledge Representation Tools Episodic Logic Speech Corpora Holdings Last change July by ringger URCS Research Projects URCS Home Page	project	misc
4870	 Date Wed Nov GMT Server Wed Oct GMT Natural Language Processing and Information Retrieval of CS University of Utah Department of Computer Science Natural Language Processingand Information Retrieval Calvin like to verb words Hobbes What Calvin take nouns and adjectives and use them as verbs Remember when access was thing Now it something you do It got verbed Calvin Verbing weirds language Hobbes Maybe we can eventually make language complete impediment to understanding Calvin Hobbes by Bill Watterson Current Research Projects Information Extraction Our natural language processing research focuses on information extraction which involves recognizing and extracting specific types of information from text We are currently building new conceptual sentence analyzer called Sundance Sentence UNDerstanding ANd Concept Extraction Automated Dictionary Construction We have developed the AutoSlog dictionary construction system that generates dictionaries of extraction patterns automatically using an annotated corpus We are currently working with new version that does not require text annotations but simply preclassified texts instead Text Categorization Our approach to text classification an underlying information extraction system to recognize linguisic context in order to achieve high precision We have developed several algorithms for text classification including the relevancy signatures algorithm the augmented relevency signatures algorithm and classification algorithm Information Retrieval The URSA Utah Retrieval System Architecture Project has been ongoing at Utah for many years and involves building retrieval engines and text browsers Cast of Characters Faculty Ellen Riloff The Queen of Slog Lee Hollaar Washington Correspondent Staff Robert Elens Pif God Students David Bean Chief Parrothead Jeff Crash Lorenzen Kem Kareem Mason Paul Nielson Newlywed Mark Salem Virtual Student Jessica Shepherd Kiri Wagstaff About SLC and Utah Mail riloff for more information Last modified Thu Nov	project	misc
4871	 Date Tue Nov GMT Server Tue Nov GMT NERO demonstration project Oregon State System of Higher Education NERO Distance Learning Project Home Page Introduction The NERO distance learning project is an attempt to bring together students and faculty from the different campuses in the Oregon State System of Higher Education in geographically dispersed collaborative learning exercise Students situated at the University of Oregon Eugene Oregon State University Corvallis Portland State University Portland OR and the Oregon Graduate Institute Beaverton OR will work together during Summer on software engineering projects Course Related Pages ORCS Summer Course Registration Prototype Evaluation System Demo Interview Transcripts Sample elaboration of schedule rationale Demonstration Course rough outline Ken Maupin slide show Pages Information on Mosaic Mosaic Tests HTML Documentation Tutorial akm ted	project	misc
4872	 Date Wed Nov GMT Server Tue May GMT SPACE SPACE SPACE is an approach to operating systems which uses multiple protection domains rather than single kernel to provide operating system services Eliminating the monolithic kernel allows the operating system to be written as set of cooperating application programs This has great impact on the extensibility and flexibility of the system Multiple instances of fundamental paradigms such as threads and virtual memory can coexist since they are implemented as applications code All that is left in what was the operating system kernel is set of mechanisms to implement the protection domains In SPACE these mechanisms can be replaced as needed by the application to provide fundamental level of extensibility not available in other adaptive operating systems Faculty John Bruno bruno Urs urs Martin Rinard martin Grad Students Dave Probert probert Mitch Ferguson ferguson Last modified by Dave Probert probert	project	misc
4873	 Date Tue Nov GMT Server Tue Nov GMT Linguistic String Project LINGUISTIC STRING PROJECT Since the Linguistic String Project LSP at New York University has engaged in Natural Language Processing research Since the Project had developed methods of sublanguage analysis in particular as applied to medical documents Applications include extracting selected types of information from free text hospital discharge summaries and clinic visit reports and automatic coding of patient information in the terms of controlled medical vocabulary Major results include parser and programming language for natural language grammars on selected bibliography comprehensive computer grammar of English sublanguage methodology Medical Language Processor to convert narrative clinical documents to semantic representation operative for English French and German system of lexical categories now realized in the COMLEX dictionary and medical lexicons primarily in English and French People Naomi Sager Margaret Lyman MD New York University Medical Center Leo Tick New York University Medical Center Ng ocirc Thanh Nh agraven Topics Selected LSP Publications LSP Publications String Program Reports Current Works Glasgow Royal Infirmary Massachussetts General Hospital Epilepsy Clinic	project	misc
4874	 Date Wednesday GMT Server Friday GMT Episodic Logic Episodic Logic Episodic Logic was developed for use as semantic theory for natural language understanding It was designed to meet the following requirements expressive adequacy the language should be powerful enough to allow us to represent various kinds of constructs found in English as well as the nuances in naturally occurring sentences derivational adequacy the language should support simple systematic derivation of meaning from English surface structures semantic adequacy the meaning of the language itself should be precisely defined it should have denotational semantics The most distinctive aspect of EL is its use of episodes which are similar to situations in situation semantics Like situation an episode characterizes partial state of affairs over some period of time at some location It subsumes the notion of events that is used in many representations based on Davidson because an event is particular kind of episode Episodic Logic readily lends itself to inference contrary to widespread myth rich syntax is no impediment to effective inference Though only very limited set of EL inference capabilities had been used in EL has been separately implemented in the EPILOG system EPILOG is powerful knowledge management and inference system allowing inference inference and featuring integration with about dozen specialist modules for accelerating temporal taxonomic partonomic numeric and other special types of inference Publications Hwang and Schubert Tense trees as the structure of discourse Proceedings of the Annual Meeting of the Association for Computational Linguistics pages June Hwang Logical Approach to Narrative Understanding of Alberta Edmonton Canada Hwang and Schubert Episodic Logic Situational Logic for Natural Language Processing Situation Theory and its Applications Volume ed Aczel and Israel and Katagiri and Peters pages CSLI Stanford CA Hwang and Schubert Representation That Lets You Say It All Proceedings of the International Workshop on Formal Ontology in Conceptual Analysis and Knowledge Representation ed Guarino and Poli pages Italy March Hwang and Schubert Formal Yet Natural Comprehensive Knowledge Representation in Proc July Washington DC pp Hwang and Schubert Meeting the Interlocking Needs of Logical Form Computation Deindexing and Inference An Organic Approach to General NLU in Proc IJCAI August Chambery France pp Hwang and Schubert Episodic Logic Comprehensive Natural Representation for Language Understanding MM Volume Special Issue on Knowledge Representation for Natural Language Processing pages Hwang and Schubert Interpreting Tense Aspect and Time Adverbials Compositional Unified Approach Proceedings of the International Conference on Temporal Logic ICTL pages Bonn Germany July Andrew Simchik	project	misc
4875	 Date Wed Nov GMT Server Fri Dec GMT Algorithms for Quadtree Representation of Matrices Algorithms for Quadtree Representation of Matrices Description Rather than decomposing matrices into rows columns or tiny blocks we decompose them recursively into quadrants The array becomes tree which still might be stored sequentially and decompostion of the problem for multiprocessing follows the subtrees We explore this structure as an exercise of the thesis that functional programming is ideal for multiprocessing the resulting algorithms are expressed in for better performance Opportunites for new algorithms abound Sparse matrices have many empty subtrees and simple algebra there so uniform algorithms can be applied to both sparse and nonsparse problems Search problems pivoting steer by summary information that decorates interior nodes of the tree Under Gaussian elimination nonsingular subtree of any order can be eliminated at any step the resulting undulant pivoting has been developed for both exact and decomposition Associated Faculty David Wise dswise Randall Bramley bramley Associated Graduate Students Jeremy Frens jfrens Support Supported in part by the National Science Foundation under grant numbered Return to IU Computer Science Research	project	misc
4876	 Server Date Tuesday GMT Tuesday GMT Home document for the Computer Science Image Processing Laboratory Computer Science Image Processing Laboratory Welcome to the homepage of the Computer Science Image Processing Lab IPLAB The group works with Michael Fitzpatrick in the field of Medical Imaging and Image Processing Current research interests of the lab include algorithms and validation methods for registration of medical images correction of geometric distortion in Magnetic Resonance Imaging localization of fiducial markers in brain images and image guided neurosurgery This lab is part of Stereotactic Image Processing Society SIPS involving faculty and students from the Departments of Computer Science Electrical and Computer Engineering Biomedical Engineering Neurosurgery Psychiatry and Radiology and Radiological Sciences Faculty Michael Fitzpatrick Derek Hill visiting scholar Current Students Calvin Maurer Srikanth Gadamsetty Matt Wang Jay West Past Students Shane Chang Shan Dong Venkat Mandava Yaorong Ge Publications Journal Articles Book Chapters Conference Proceedings Abstracts Theses Patents Technical Reports Projects Neurosurgical Navigation Validation of Medical Image Registration Accuracy MRI Geometrical Distortion Correction ACUSTAR is trademark of Johnson Johnson Professional Matthew Wang yangwang	project	misc
4877	 Server Date Tuesday GMT Thursday GMT CONCURRENT VLSI ARCHITECTURE GROUP William Dally Associate Professor of Computer Science and Engineering Much of the work of the Concurrent VLSI Architecture group is experimental in nature We build working chips machines and programs to test new concepts and gain insight in applying VLSI technology to information processing As illustrated by the following examples our projects address parallel computer architecture and software interconnection networks processor design and VLSI design The is multicomputer that will test new concepts for controlling multiple function units on single chip efficient and flexible communication primitives protection and global memory systems The project seeks out methods for exploiting parallelism within task and among tasks on the same node and between multiple nodes The consists of up to nodes connected by mesh network Each node includes processor MAP chip and external memory MAP chip contains arithmetic units memory management hardware and network interface The chip target performance is megaFLOPS Atomic SEND instructions provide efficient communication by transmitting message out of registers Messages are removed from the network and dispatched by programmable software handlers The architecture provides global virtual address space in which addresses may be translated into local or remote physical locations Synchronization is provided via tags on memory words The address spaces of individual threads are separated and protected using segments and privileged access pointers Our software research seeks to advance the state of the art in transforming sequential application to an efficient parallel version Such transformations which are now very should be smooth and painless Our compiler will employ both user directives and automatic analyses to provide users with precisely the control that is needed at each stage of the transformation This combination will allow users to focus first on algorithmic concerns leaving optimization to the compiler Users may then specify directives to improve performance for the few critical aspects of the program possibly using information not available to the compiler The Reliable Router is mesh router VLSI chip for use in massively parallel processors we plan to use the router in parallel computers and in network switching hubs Features include network fault tolerance via retry plesiochronous timing to avoid the need for global clock adaptive routing for fault and congestion avoidance virtual channels for performance under heavy load support for protocols and arbitration schemes for livelock avoidance Electrical interconnect between routers uses simultaneous bidirectional signaling Bandwidth per port is at chip clock rate of	project	misc
4878	 Date Wed Nov GMT Server Wed Nov GMT Mobile Computing at Duke Mobile Computing Carla Ellis Specific Projects Masters degree students Nasrin Azarbayejani Gaffaney and John MacDonald have been working together on SMARDI system to provide an interface into mobile file system such as CODA for very limited mobile devices PDA This was collaboration with the CODA group at CMU student Surendar Chandra is working on Jello framework for building mobile applications that can adapt to the kinds of changing environmental characteristics that mobility encourages applications that will experience varying power connectivity bandwidth etc Last Updated Carla Ellis Homepage	project	misc
4879	 Date Wed Nov GMT Server Sun Jun GMT MCML The Mobile Computing and Multimedia Laboratory at the University of Maryland This page is under construction Bear with us Objective The goal of this laboratory is to investigate issues in mobile computing and multimedia and to find solutions to the technical problems in these areas The future integration of these two technologies will also require solutions to the specific problems that arise with these combined Currently we are looking at wireless and mobility problems such as routing protocols and algorithms resource and service location protocols performance evaluation of NFS and TCP and mechanism to improve throughput over wireless links On multimedia and ATM networks we are concerned with video data encoding and compression resource allocation traffic characterization and shaping and multimedia teleconferencing We are also working on designing new class of operating system especially suitable for multimedia applications The People Faculty Members Satish Tripathi Marwan Krunz Graduate Students George Apostolopoulos Rohit Dube Hyeonsang Eom Ibrahim Korpeoglu Frank Miller Cynthia Rais Alexander Sarris Wang Wei Zhao Alumni Pravin Bhagwat Debanjan Saha Rajeev Ved Papers Publications Theses Technical Reports The RoadRunner MultiMedia Operating System Device Drivers and other Fun Stuff Photographs and Testbed Resources On The Net Other sites related to Mobile Computing Other sites related to Multimedia Other sites related to ATM networking Last Update Sat Mar EST Maintained by Rohit Dube and George Apostolopoulos For updates suggestions comments send mail to rohit or georgeap	project	misc
4880	 Date Wed Nov GMT Server Distributed Computing Group Department of Computer Science Washington University in Louis Faculty Kenneth Goldman Roman Douglas Schmidt George Varghese Research Areas Distributed algorithms fault tolerance formal design methods software development tools and environments visualization systems and techniques Participating Laboratories and Projects Computer and Communications Research Center Computer Visualization Laboratory Distributed Programming Environments The Programmers Playground Concurrent Systems Group	project	misc
4881	 Date Wed Nov GMT Server Sun Mar GMT Acquisition of Words Acquisition of Words Description How do children learn natural language and how could one get machine to do this One popular view is that the task is so daunting that the child and the computer must come with considerable knowledge wired in But it is not clear how this wiring could be implemented in developing nervous system or even what the appropriate knowledge would be An alternative is an approach which starts with particular architecture and then acquires the necessary knowledge in response to input from and interaction with the world This project explores the acquisition of words within this second sort of framework focusing on their form how words are composed out of constituent morphemes morphology and how the primitive sounds of language combine with one another phonology The goal is general neural network architecture with the capacity to learn words in any language This topic is tied to number of general issues in cognitive science the origin of modularity the nature of temporal memory the relation between perception and action the development of apparently hierarchical knowledge Associated Faculty Michael Gasser For more information click here Return to Computer Science Research Page	project	misc
4882	 Date Tue Nov GMT Server Fri Aug GMT The Massively Scalar Compiler Group Rice UniversityHouston Texas USA The Massively Scalar Compiler Group at Rice University Purpose The Massively Scalar Compiler Project is designing and building laboratory compiler to explore new techniques for systems Our focus is on uniprocessor systems Mission The goals of the Massively Scalar Compiler Project are to develop new techniques in code optimization and code generation that represent real improvements over existing methods to transfer this knowledge to industrial compiler groups in way that enables them to quickly evaluate and deploy new methods and to implement and distribute laboratory compiler that can serve as testbed for evaluating new techniques in code optimization and code generation We view industrial compiler groups as our primary customers with academic researchers as our second priority Our primary focus is on problems that arise for uniprocessor systems We try to ensure that our techniques work equally well in multiprocessor systems This work is supported by both ARPA and the State of Texas Problems that we attack In general we investigate problems that arise in compiling code for uniprocessor systems Our particular areas of interest are code improvement techniques often misnamed optimization and code generation issues common misconception is that these problems were all solved in Methodology As group we have strong belief in the development of new algorithms coupled with experimental evaluation We view research and development as two halves of whole effort Each of our research activities is directly coupled to development activity It is our intent to build reference implementation for each new technique that proves its worth these are written in nuweb literate programming tool The implementation is intended to serve as reference guide for reimplementation in commercial setting For the truly interested longer discussion is available Personnel The group scaling massive object The Massively Scalar Compiler Project is led by four researchers Keith Cooper Ken Kennedy Taylor Simpson Linda Torczon The prime reason that these people are productive is because they have supporting cast of staff and graduate students Software One of the prime work products of the project is software As phase of the compiler achieves semblance of stability and maturity we place it into the pool of released software The code is available in nuweb form via anonymous ftp The compiler uses intermediate language named ILOC We have gathered together in one place the complete ILOC archives including unpublished papers and newsletters We hope that someone learns from our experience Accomplishments This project produces several kinds of results The first of course is students Preston Briggs of Tera Computers and Cliff Click of are both recent graduates We publish papers on our work in several different venues We write software and make it available via the web For more information we have brief summary of results available online More information Our most recent annual report can be found in the ARPA archives Overhead transparencies and poster materials from the Spring ARPA PI meeting are also archived online This page has been accessed times since we started counting in September	project	misc
4883	 Date Wed Nov GMT Server Tue Oct GMT Frameworks and Algorithms for the Analysis and Transformation of Scientific Programs The Omega Project Frameworks and Algorithms for the Analysis and Transformation of Scientific Programs Part of the High Performance Software Systems Laboratory at the Computer Science Department of the Univ of Maryland College Park Release of Petit the Omega Library and Omega calculator William Pugh and the entire Omega Project Team Omega Project Technical Reports The Omega project has two major components One component is the Omega test system for manipulating sets of affine constraints over integer variables When we started work on the Omega test for dependence testing it was designed as decision test for the existence of integer solutions to affine constraints we found that by having the Omega test return symbolic answers rather than answers we could perform standard data dependence analysis quicker As we have explored more difficult issues in analysis and transformation of scientific programs we have extended the Omega test to the point where it is complete system for simplifying and verifying Presburger formulas Presburger formulas contain affine constraints the usual logical connectives and and quantifiers Of course the Omega test can not simplify all Presburger formulas efficiently there is nondeterministic lower bound and deterministic upper bound on the time required to verify Presburger formulas However in practice the Omega test is reasonably efficient for the tasks for which we currently use it The other component of my research is developing frameworks for analyzing and transforming programs we have utilized the Omega test in research on asking more sophisticated questions than are usually asked when analyzing programs on using this information to pinpoint parallelism unexploited by conventional techniques and on developing unified framework for reordering transformations These methods are described using simple cases of Presburger formulas The descriptions and implementations of these techniques can be simple and clear since they need not be concerned with the techniques used by the Omega test to simplify the formulas As general philosophy we tried to develop exact methods and frameworks that are efficient enough to be practical as opposed to developing inexact methods that may be faster and accurate enough for practical use we find that studying exact methods gives me better insight into the problems we study that it is easier to extend exact methods to make them faster than it is to extend inexact methods to make them more exact and that exact methods can more easily be applied to new problems My research group has done only very limited studies of the efficiency and effectiveness of our methods on real FORTRAN codes While these are important doing such studies well requires robust optimizing FORTRAN compiler which we do not have access to and substantial effort Also applying our techniques to real codes requires extensions still under development for procedure calls and arbitrary control flow As number of other research groups incorporate the Omega test into their software we hope to get feedback from them and pursue collaborative research Array Data Dependence Analysis Dependence Analysis Static Analysis of Upper and Lower Bounds on Dependences and Parallelism The Omega Test Eliminate Existentially Quantified Variables Verify the Existence of Solutions Remove Redundant Constraints Verify Implications Simplify Formulas Involving Negation Related Work Framework for Unifying Reordering Transformations Code generation Related work Implementation and Users Future Directions References About this document Next Array Data Dependence Where to get Omega project software Omega project software is available for anonymous FTP Version of Petit the Omega Calculator and Library binaries and sources Array dataflow benchmark programs in either FORTRAN or tiny omega	project	misc
4884	 Server Date Tue Nov GMT Thu Oct GMT Computational Intelligence Research Laboratory The Computational Intelligence Research Laboratory CIRL of the University of Oregon has research focus on basic questions in artificial intelligence including search knowledge representation and reasoning Emphasis is on planning constraint satisfaction and reasoning about action and physical devices Laboratory faculty members participate in some Computer and Information Sciences Department activities and shared recreational activities The laboratory provides financial support for students and fosters an intimate relationship among small group of researchers working in areas and the graduate students they supervise The Computational Intelligence Research Laboratory is committed to having no more than twice as many students as faculty members Faculty David Etherington Director Matthew Ginsberg David Joslin Graduate Students Tania Ari Bart Massey Andrew Parkes Alumni Andrew Baker James Crawford Will Harvey Joe Pemberton Research Comprehensive Overview An introduction to each of the exiting areas of research CIRL members are contributing in Software Some software packages developed at CIRL are available You can view demo that allows you to test number of satisfiability solvers on problems of your choice you can download the sources or binaries of some of these solvers or if you prefer you can download MVL Matt Ginsberg inference engine Documents Some documents are available You find many interesting links ranging from research papers by CIRL members to list of publicly available AI systems Constraints Archive This archive is part of the archive and FAQ and is currently maintained by David Joslin You find wide range of topics from current job openings to tutorials publications people systems etc If you are looking for something in particular you may want to use our search engine Contacts CIRL is located in the Riverfront Research Park in Eugene Oregon USA More information on Eugene can be found by clicking here or here CIRL University of Oregon Eugene OR USA CIRL faculty can also be contacted if you have questions about research agendas etc Additional information about the University of Oregon computer science department including application materials for potential graduate students can be obtained from Betty Lockwood betty Last Modified Tania tania	project	misc
4885	 Date Tue Nov GMT Server Fri Oct GMT The Hypercomputing and Design Project The Hypercomputing and Design Project The Web pages for HPCD are under construction OVERVIEW The broad objective of HPCD is to build on top of advances in massively parallel computing hypercomputing in computational science in AI and in technology and to develop new generation of engineering automation technology that can bring about dramatic gains in productivity of the national industrial base The goal is to develop hypercomputing methods for attaining speedups in the time required for transition from an innovative design concept scientific advance to useful product The focus of the effort is on design of complex engineering systems such as computers ships jet engines where the design process is strongly dependent upon the use of knowledge from several scientific disciplines The main technical goals of the project are as follows To develop methods that use hypercomputing power in conjunction with scientific knowledge in domain AI and Visiometric techniques in order to build computational models and related simulations in the domain that range from the highly accurate but costly models needed for scientific discovery and design verification to the greatly reduced and approximate but cheap models needed to explore large spaces of design alternatives To develop methods and tools based on AI and other related areas of computer and computational science to help in the setup and control of complex simulations and the automatic analysis and interpretation of massive datasets produced from simulation runs To develop methods and tools that use computational models efficiently to the formulation and solution of complex design problems HPCD is an sponsored project Within the framework of the national HPCC program the project is intended as major step towards building comprehensive national resource for computational methods and facilities that can address the challenge of design The project is organized as large scale multidisciplinary consortium involving researchers from academia and industry Participating universities include Rutgers USC and Princeton At present industrial participants include SAIC Cambridge Hydrodynamics CHI GE Lockheed AeroHydro IBM AMD Sematech Bellcore UTRC Boeing Schlumberger and INTEL Other research collaborations have been established with researchers from several government and industrial labs The Principal Investigator and are Saul Amarel Rutgers PI amp Project Director Louis Steinberg Rutgers amp Assoc Proj Dir Alvin Despain USC amp Proj Steven Orszag Princeton amp Proj Eytan Barouch CHI James Flanagan Rutgers Apostolos Gerasoulis Rutgers Doyle Knight Rutgers Norman Zabusky Rutgers The component efforts of HPCD are designed to address the three main technical goals of the project by proceeding via exploration of selected concrete design problems and by developing methodologies and tools in manner which is strongly influenced by the of these problems To achieve cohesion in the overall effort the component efforts are organized in two main clusters Cluster concentrating on design and manufacturing of computers and of related microstructures and Cluster II concentrating on design tasks that are critically dependent on Computational Fluid Dynamics CFD There is also third supporting cluster of core work Cluster III whose emphasis is on science foundations and methodologies that are related to work in the two main clusters Each cluster includes efforts in two or three research areas Collaboration among researchers and synergy among component efforts are an integral part of the approach in the project RESEARCH AREAS Cluster Hypercomputing in Computer System Design and Manufacturing Area Tools for design of microlithographic processes in micron electronic chip manufacturing Area Design of Computers Cluster II Hypercomputing in Design Tasks Supported by Computational Fluid Dynamics CFD Area Design of Propulsion systems for aerospace vehicles Area Innovative Ship Design Area Design of speech generation systems Area Conceptual Design of Air Vehicles Cluster III Core Research in Hypercomputing and Design Area Artificial Intelligence AI methods and systems in design Area Visiometrics and modeling for ship design and vortex flows Area Software Tools and algorithms for HPCD Personnel HPCD Reports Links to Web pages of our collaborators and other related organizations Access Statistics Maintained by armhold This page last updated Fri Oct EDT	project	misc
4886	 Date Wed Nov GMT Server Thu Aug GMT TimeWare Project Dali Persistence of Memory The TimeWare Project The TimeWare Project is devoted to building tools for the design and implementation of concurrent systems Within the project we are currently carrying out research in specification static analysis programming languages and scheduling technologies Sponsors Office of Naval Research National Science Foundatation Current Areas of Research Specification and Automated Analysis Programming Languages and Compilers Scheduling Design Multimedia Systems Faculty Richard Gerber Graduate Students Tevfik Bultan Ladan Gharai Kang Recent Alumni Jeffrey Fischer Rational Software Corporation Seongsoo Hong School of Electrical Engineering Seoul National University Korea Manas Saksena Assistant Professor Concordia University Selected Publications Papers Pointers to related information Technical Committee on Systems Systems at the University of Maryland ACM SIGPLAN Workshop on Languages Compiler and Tools for Systems	project	misc
4887	 Server Date Wednesday GMT Monday GMT The Visualization Lab The Computer Visualization Lab Projects Roman Visualization of Parallel and Distributed Systems and Computational Biology Computational Geometry Computing for Interactive Graphics Applications People Roman Professor and Director Eileen Kraemer Assistant Professor Subhash Suri Associate Professor Philip Hubbard Assistant Professor James Hu System Manager Delbert Hart Pete McCann Amy Murphy John Wallis Pictures SGI Workstations Macintosh Workstations Purpose The goal of the Computer Visualization Laboratory CVL is to investigate methodologies for integrating computing and visual communication to explore technologies that make feasible the fusion between the two and to provide video production and multimedia publication capabilties for use in research and instruction The laboratory acquires promotes and disseminates video and visualization technology and within the University and provides research environment for the activities of the Concurrent Systems Group Equipment The Computer Visualization Laboratory has unique video production facilities They include sophisticated video camera and Panasonic video editing station which is capable of recording images from the various computer displays and provides extensive video tape editing capabilities Three SGI workstations offer high performance graphic rendering capabilities and mey be accessed via the network in order to transfer images to video tape for editing Two Macintosh computers form the core of an expanding multimedia publication capability which includes scanners and color printer Equipment List Services growing number of researchers are taking advantage of the unique facilities existing in the laboratory and of the Pavane system which offers sophisticated visualizations without the burden of costly software development Recent outside collaborations involve chemical engineering electrical engineering physics and medicine Projects Pavane declarative visualization system Query Based Visualization Related Work Our schedules Last modified Mon Jul CDT	project	misc
4888	 Date Wed Nov GMT Server Thu Nov GMT CU Boulder Artificial Intelligence Group Artificial Intelligence Group CU Boulder Format is Picture Name Position Email name Office phone All email names should be qualified with Faculty Liz Bradley Asst Professor lizb Mike Eisenberg Asst Professor duck Gerhard Fischer Professor gerhard Clayton Lewis Professor clayton James Martin Assoc Professor martin Cathleen Wharton Asst Professor Adjunct cwharton See separate pages for Connectionist Systems Group Lifelong Learning and Design Group Graduate Students Casey Boyd cboyd Catherine Brand brand Michael Jones mjones Bill Myers wmyers Reinhard Stolle stolle Stephen Wehrend wehrend Recent Graduates Roland Hubscher rolandh Christopher Joslyn joslyn Patrick Juola juola John Rieman rieman Nick Wilde wilde Up to CU Boulder Computer Science Department Home Page cboyd	project	misc
4889	 Date Wed Nov GMT Server Fri Oct GMT UMCP Computer Science The PLUS Group Parallel Understanding Systems Group Welcome to the PLUS Group WWW Homepage The PLUS group is an Artificial Intelligence research group in the Dept of Computer Science at the University of Maryland at College Park It is also part of the High Performance Systems Software Lab The PLUS group lab is room of the Williams Building Research Some Current Research Areas Parallel Knowledge Representation The PARKA system High Performance Planning Hierarchical Task Network Planning Formalization Analysis and Implementation Systems Autonomous Mobile Robots Intelligent Tutoring System for Arabic and Spanish Hybrid Systems Knowledge Representation on the Web SHOE People Faculty James Hendler Director Lee Spector Affiliated Faculty Bonnie Dorr Dana Nau Joel Saltz Subrahmanian Postdocs Kilian Stoffel Research Programmer David Rager Graduate Students William Andersen Robert Kohout Sean Luke Carlos Lopes Vikram Manikonda Oliver Seeliger Merwyn Taylor Reiko Tsuneto PLUS Alumni Kutluhan Erol Matthew Evett Subbarao Kambhampati Brian Kettler Barrie Migdalof David Musliner Postdoc Eduardo Ostertag David Rager Kathryn Sanders Postdoc Lee Spector Anne Wilson Software Available for Public Use Software for FTP UM Nonlin Planning System Common Lisp version of Tate Nonlin planner UM Translog Planning Domain transport logistics planning domain for developing and benchmarking planning systems from Inside Computer Understanding and Inside Reasoning by Schank and Riesbeck The PLUS group WWW pages are maintained by Dave Rager and Oliver Seeliger Send comments etc to rager	project	misc
4890	 Date Tue Nov GMT Server Thu Nov GMT The Proteus Project The Proteus Project Department of Computer Science New York University Office Broadway floor New York NY USA Phone Fax No Research Goals The Proteus Project is project of research and development in natural language processing conducted in the Department of Computer Science New York University under the direction of Ralph Grishman The basic research is focussed on the automated acquisition of linguistic knowledge from large corpora We are developing methods for the acquisition of probabilistic grammars semantic relations between words and selectional patterns This research is tied to applications in four areas information retrieval the retrieval of documents from large collections information extraction extracting information about particular types of events from free text machine translation language modeling for speech recognition Projects Comlex Syntax creation of syntactic lexicon of English Tipster architecture standard architecture for information retrieval and extraction evaluation metrics for natural language systems Information Extraction Language Modeling for Speech Recognition Machine Translation Domain Project TREC Members Ralph Grishman Leader Professor John Sterling Assistant Research Scientist Catherine Macleod Associate Research Scientist Adam Meyers Assistant Research Scientist PhD in linguistics Satoshi Sekine Assistant Research Scientist Jussi Karlgren Visiting Researcher Troy Straszheim Assistant Research Scientist Roman Yangarber PhD student Andrew Borthwick PhD student Slava Katz works on the project as consultant Publications Technical Reports There are Technical Reports in this project as of Febrary Acknowledgements The project is supported by grants and contracts from the Advanced Research Projects Agency ARPA the National Science Foundation and the Linguistic Data Consortium Useful Links ACL The Association for Computational Linguistics Homepage ACM SIGIR Special Interest Group on Information Retrieval home page Nordic Computational Linguistics Linguistic Data Consortium Resources on Statistical computational linguistics servers The Computation and Language Archive UCREL References and Publications Any comments or questions on this page please send to sekine	project	misc
4891	 Date Wednesday GMT Server Tuesday GMT OSL and SAA Home Page Object Systems Laboratory and Systems for Advanced Architectures The Systems for Advanced Architecture and the Object Systems Laboratories are part of the Computer Science Department at the University of Massachusetts Amherst The principal investigators are Kathryn McKinley Eliot Moss Papers Our primary research areas are Compiler architectures Compiler optimizations in particular for enhancing parallelism and memory system performance Memory management both compiler and runtime issues Memory system performance Persistent programming languages design and implementation Persistent object stores Information retrieval Transactional memory Research Projects Scale Mneme Optimizing languages Garbage collection Analytical models for object allocation and deallocation behavior Loop optimizations Distributed support for information retrieval Graduate Students Brendan Cahoon John Cavazos Jim Doyle Jim Havlicek Karsten Jung Sharad Singhai Darko Stefanovic Cindy Stein Glen Weaver Eric Wright Recent Graduates Eric Brown Amer Diwan Tony Hosking Memoranda The OSL and SAA memoranda are collection of reports describing work in progress This page is frequently updated Please visit again Maintained by Sharad Singhai singhai Last updated	project	misc
4892	 Date Tue Nov GMT Server Thu Mar GMT SFU Database Systems Group SFU Database Systems Group Research in the area of database systems ranges from relational databases to distributed intelligent and heterogeneous and and their applications Faculty interests include the design and implementation of and deductive database systems query processing and query optimization concurrency control recovery and transaction management in traditional distributed databases and heterogeneous distributed databases spatial databases knowledge discovery in databases multimedia databases natural language interfaces to database systems and database applications in engineering and geographic information systems The Database Systems Group is actively involved in placing more information about their current activities Faculty Veronica Dahl Han Tiko Kameda Luk Peter Triantafillou To the top Visit Computing Science or Simon Fraser University	project	misc
4893	 Date Wed Nov GMT Server Mon Mar GMT Autonomous Mobile Robotics Lab Autonomous Mobile Robotics Lab Welcome to the AMRL Homepage Robots Projects Robot Vacuuming Airborne Imaging Robotic System AIRS homebuilt Frictionless Navigation homebuilt homebuilt Object Tracking System running on SCAMP sonar ring for the board Path Planning and Obstacle Avoidance with Nonholonomic Robots For further information consult the postscript description of the projects in the AMRL The Autonomous Mobile Robotics Lab also helps to run Educational Activities in Robotics held at the University of Maryland at College Park This spring we are holding the The Third Annual Lego Robot Contest In addition the Autonomous Mobile Robotics Lab is affiliated with the Parallel Understanding Systems Group People Faculty James Hendler Director Graduate Students Robert Kohout Vikram Manikonda Oliver Seeliger Undergraduate Students Eylon Caspi Brooke Wallace Other Labs of Interest Space Systems Laboratory Visit number The AMRL web pages are maintained by Oliver Seeliger Send comments etc to seeliger	project	misc
