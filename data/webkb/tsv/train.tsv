Unnamed: 0	sentence	label	university
0	 Server Date Wednesday GMT Sunday GMT Kenneth Li Home Page Kenneth Li The road of success is always under construction MENG from the Electrical Engineering Department Since working for Zabih of the CS Department have place in the CS Student Page This is where came from Engineering University of skl skl sli	student	cornell
1	 Server Date Wednesday GMT Monday GMT Lai Lai kuen kuen Master of Engineering Computer Science Department Cornell University Address Grove Street Apt Newton MA Telephone Welcome to visit my place This is my Project of Multimedia Systems course Would you like to read daily news of Taiwan my home country Enjoy it This page is still under construction	student	cornell
2	 Server Date Wednesday GMT Tuesday GMT Ankit Patel homepage ANKIT PATEL EAST STATE STREET ITHACA apatel Personal Photo Galleria Chronologia Curriculum Vitae Cornell University Resume Department of Computer Science and Courses Enrolled Graduate Research Assistant for Brian Smith in the Multimedia Group Project Zeno toolkit for interactive development of graphics in multimedia and virtual reality applications Virtual Reality Video Conferencing Multimedia Systems Readings Project and Assignments Project Kernel Endpoint for An Annotated Bibliography on Common Object Request Broker Architecture CORBA Critique on Understanding the limitations of Causally and Totally Ordered Communication by David Cheriton and Dale Skeen Summer School of Computer Science Web Technologies Course Link OS Support for Multimedia Maharaja Sayajirao University Academics Friends from Techo Reliance Industries Limited Job Profile Life at Reliance	student	cornell
3	 Server Date Wednesday GMT Monday GMT Pavel Naumov Welcome to my Home Page invite you to learn more about me and my location in the cyberspace and the real world Look at my work for Nuprl project and if you are tired take rest at my Art Gallery or visit my Cinema look at some of my photos or play game on Java that have written one Sunday Or just send me and go to some other place	student	cornell
4	 Server Date Wednesday GMT Tuesday GMT Lidong Zhou Homepage Welcome to Lidong Zhou Homepage Department of Computer Science Cornell University Ithaca NY Tel Fall Courses CS System Concepts only locally accessible CS Multimedia System Research Related Materials SIGOPS Papers OASIS from Cambridge DEC SRC Research Reports Adage Authorization for Distributed Applications and Groups The ARA Project Low Level Security in Java Safe Internet Programming Legion Project Sirac The Kerberos Network Authentication Service Massively Distributed Systems from IBM Ocaml Homepage Advanced materials on Internet and WWW Standard for Robot Exclusion Computer and Network Security Career WWW Documents Cornell Career Opportunities JobTrak College Grad Job Hunter Job opening in CS For Career Center Services CareerMosaic Page JobWeb Home Page Career Mag XJOBS Page My Friends Homepages Yingjun Yu Fudan classmates Friends at Cornell Information Resourses Tutorials on Computer languages and Tools Big Yellow Book Cornell ISSO Homepage CND SUNRISE Chinese Soccer World Edmund Automobile Buyer Guides AutoSite The Ultimate Auto Buyers Guide Auto insurance Basics Legal Survival Guide Other Links Travel Agencies Rank of CS departments How to Succeed in Graduate School Fudan Homepage Back to Index Last updated on This homepage is under construction	student	cornell
5	 Server Date Wednesday GMT Saturday GMT Todd Peskin Web Page Todd Peskin Web Page Here is picture of me Contents Who am Where am Where worked as Some of my favorite sites My resume Courses taken Who am am student in the program at Cornell University This joint degree program is offered jointly through the College of Engineering and the Johnson Graduate School of Management In May of will receive Master of Engineering in Computer Science The following year will receive Master of Business Administration am also currently the President of the Cornell Chapter of Acacia Fraternity If you are brother of the Cornell Chapter or any other chapter of Acacia and you would like to become part of our mailing list then please contact me through at and will add you as soon as can If you supply me with your chapter and your roll number then will be able to complete your request more quickly Where am Well the best way to reach me is through at check my mail year round so can always be contacted this way Since am an MEng student can also be found many times logged on to the CS department computers Where worked as The Fall semester of my Junior year and the following two semesters worked as intern with BDM International through the Engineering Cooperative Program at Cornell This program enables Cornell Undergraduate students in the College of Engineering to supplement their classroom knowledge with practical experience working for company in their field of experience At BDM worked on the development and enhancement of two national level database systems The server software is run on Sun Microsystem computers and the client software is run on PC running Windows Some of my favorite sites on the Web ESPN NHL Web Page Stock Quotes Online Sun Java page My final project for CS large mpeg file The Client Computers Web Page created for NBA have had visitors since February This page is still under construction hope to add some more content to this page possibly including some useful Java applets Oh in case you were wondering created the Ticker Tape applet at the top The construction applet was borrowed with permission from Sun Java Developer Kit Todd Peskin	student	cornell
6	 Server Date Wednesday GMT Friday GMT Ravi Kumar Ravi Kumar Department of Computer Science Cornell University Ithaca NY ravi Program Checking Approximate checking of polynomials and functional equations IEEE Foundations of Computer Science October Funda Erg uumln Ronitt Rubinfeld Efficient of linear recurrences IEEE Foundations of Computer Science October Sivakumar On without the generator bottleneck Foundations of Software Technology and Theoretical Computer Science LNCS pp December Sivakumar Learning Theory On learning branching programs ACM Conference on Computational Learning Theory pp July Funda Erg uumln Ronitt Rubinfeld Combinatorics Approximating latin square extensions Conference on Computation and Combinatorics LNCS pp June Alexander Russell Ravi Sundaram Parallel Processing Scalability study of the International Conference on Parallel Processing pp August Jeyakumar Muthukumarasamy Umakishore Ramachandran Gautam Shah	student	cornell
7	 Server Date Wednesday GMT Wednesday GMT Kaz Homepage Kazushi Ota kota kazushi currently Master of Engineering student in Computer Science at Cornell University received my BS in EE at the University of Tokyo way back in March work for Mitusbishi Electric Corporation in Japan and this is where return after get my degree For what it worth this page is under construction but then again so am This homepage started as an assignment to get acquainted with html for CS the Cornell CS department Information Superhighway course This homepage will get more interesting as try to get some PICTURES and MUSIC in it Moving Sale coming your way be taking off to Japan in February There are lot of things want to sell so think advertize them HERE Up to the Cornell Computer Science People Page	student	cornell
8	 Server Date Wednesday GMT Thursday GMT Dan Cyber Abode Dan Cyber Abode Greetings Ye travelers through digital space Welcome to mine humble home Prithee gentles all Surf no further than this shore Instead blink thy teary eyes Rest thy weary keys and borne hands And make thyselves home in mine abode About Myself Brief Autobiography Resume Project Deidre modeling of facial expressions Project Deidre II modeling six universal emotions Project SimNET game Faith They say that hardly is Faith prize in this age For sayings of wise men we scorn bending instead our ears to lawyer tones and scientists words What needs have we then of God unseen unheard and untouchable Yet in the silence of night how we dread the unknown how we question the uncertain how we yearn for true Faith Directions In the field of the Lord Love Warm Friendships Ah Mindless Infatuations Huh Sensual Romances Hmm Burning Passions Oh Love Love Love soft sigh Beloved Poetry Hope Myth favored not beauteous Pandora and ever did men place her at fault for her all too human role which released the dreaded demon Hope Many are those who were led astray by few pretty glimmers of false Hope They treaded the torturous broken roads amidst thorns darkness and filthy souls Disease pain and horrors they suffered only to reach feared end in tears Yet say that Pandora can not be blamed for ever as her deeds were told burning hope in our hearts take hold and the world would never be as of old ever frozen in sad sad Misery cold To that which springs eternal	student	cornell
9	 Server Date Wednesday GMT Tuesday GMT Karl Crary home page Karl Crary crary Office Address Upson Hall Office Phone Research Broadly speaking my primary research interests are in type theory and the design implementation and semantics of programming languages My recent emphasis has been in the areas of subtyping programming and modularity am implementing practical programming language KML which combines these features in functional programming language and formulating for it semantics An interesting view of programming languages is as tractable approximation to the intractably rich world of foundational type theories in which the whole of mathematics can be performed New programming language developments often result from mapping constructions through an approximation into programming language setting and conversely new paradigms in programming languages are often not well understood until they have been formulated am interested in deepening our understanding of this relationship between type theory and programming languages particularly the issues of tractability and approximation and how they can be mitigated am also interested in model of compilation that views it as series of translations into lower intermediate calculi where each intermediate calculus can be embedded into type theory and the corresponding interpretation of program is invariant under each translation Such model allows us to relate each stage of compilation to an original semantics which allows the use of standard compilation techniques and optimizations while guaranteeing safety and correctness Also careful formulation of such intermediate calculi make possible additional optimizations that are unavailable in other compilation strategies My work forms part of the Nuprl project here at Cornell The project name comes from the Nuprl system of formal mathematics and logic type theory based on the type theories of that is also implemented in an automated reasoning system My committee consists of Robert Constable Greg Morrisett and Dexter Kozen also work closely with Jason Hickey Selected papers Other Links Mark Leone maintains collection of programming language research resources You can search computer science technical reports online Cornell Grad Life Bible Studies home page The Lurker Guide to Babylon Of all the commandments which is the most important The most important one answered Jesus is this Israel the Lord our God the Lord is one Love the Lord your God with all your heart and with all your soul and with all your mind and with all your strength The second is this your neighbor as yourself There is no commandment greater than these Mark Cornell University home page Department of Computer Science home page	student	cornell
10	 Server Date Wednesday GMT Sunday GMT Deepak Balakrishna Deepak Balakrishna Master of Engineering Department of Computer Science Cornell University Resume Education Courses Personal Deepak Balakrishna gbd Resume HTML Postscript Back to the main page Education Undergraduate completed my undergraduate in June at Karnataka Regional Engineering College Surathkal India majored in Computer Science My major interest was in Multimedia Other courses related to Computer Science were Operating Systems Artificial Intelligence Compiler Construction Data Communications and Computer Graphics Graduate am presently at Cornell University pursuing Master of Engineering degree in Computer Science am specialising in Multimedia and after graduation want to be involved in projects dealing with multimedia and web server programming Back to the main page Courses The following courses listed are those have taken for the Fall semester CS Multimedia Systems Smith CS Advanced Database Systems Praveen Seshadri CS Engineering Computer Networks Srinivasan Keshav CS Software Engineering Michael Godfrey Back to the main page Personal Well Let see Where do start OK Here goes Once upon time long long ago actually on November in land they call Bharat India for the outside world at precise was born cute chubby little baby weighing approximately four pounds He took on the name Deepak meaning light and went on actually he still in the process to change the world Incidentally or probably out of divine interference Aishwarya Rai Miss World was born on the same day My Is she lucky to be born on the same day as me Leaving out the miniscule details of my earlier life let dive straight into high school Well lucky to have been to National Public School Bangalore for greater part of my schooling Now that the place for someone to be And college Nothings better than KREC Thats where majored in Computer Science wonder how long it will be before get another four year holiday To have been part of the Class of was joy never to be matched And here am at Cornell University pursuing masters degree in Computer Science Well just hope it gets me somewhere And finally heres link to my friends Ashish Aastha Indira Ankit Vineet Back to the main page	student	cornell
11	 Date Sunday GMT Server Tuesday GMT Jeff Baggett Jeff Baggett Center for Applied Mathematics Frank Rhodes Hall Cornell University Ithaca NY baggett Who am am sixth year graduate student in the Department of Mathematics at Cornell University under the supervision of Nick Trefethen expect to finish my thesis titled dynamics and applications in hydrodynamic stability by the summer of would like to continue my research so am seeking research position Here is detailed outline postscript pages of my thesis My curriculum vitae postscript pages Interests and Activities My interests and background are an unusual blend of scientific computing dynamical systems and fluid mechanics Here is research proposal postscript pages for some work would like to do in the next couple of years Papers mostly linear model of transition to turbulence postscript with Driscoll and Trefethen Physics of Fluids April Exponential type versus spectral abscissa the Hille and Phillips example postscript submitted to Integral Equations and Operator Theory Low dimensional models of subcritical transition to turbulence postscript with Trefethen submitted to Physics of Fluids Misc Links Satish	student	cornell
12	 Server Date Wednesday GMT Tuesday GMT Sugata Mukhopadhyay home page Sugata Mukhopadhyay Welcome to my home page am graduate student in the Department of Computer Science at Cornell University am working on Multimedia Systems with Brian Smith am married to the most wonderful person on earth Ritu Spring am taking CS High Performance Computer Systems and CS Compiler Design for High Performance Architectures am also taking NBA Advanced Option Pricing Theory am the czar of the Work in Progress Seminar Previous Semesters How to contact me Home phone Work phone sugata Address Hichory Estates Owego NY sugata	student	cornell
13	 Server Date Wednesday GMT Tuesday GMT Roderick Moten Home Page	student	cornell
14	 Server Date Wednesday GMT Tuesday GMT Bilth Gater and the Galactic Empire Bilth Gater and the Galactic Empire Written and Illustrated by Sumedh Kanetkar Email kanetkar This is series of weekly comic strips that drew while interning at Microsoft in the summer of The strips were posted weekly to the intern social alias and were read regularly by over people As the summer progressed noticed that my artwork had begun leaking to the employees as well Whether his highness Lord Gater Himself read them never found out Episode The First Day This was the first strip drew up within week of arriving in Redmond tried to persuade the Microsoft newsletter to print it but they perceived it as PR problem and declined They did want Microsoft to be portrayed as the evil empire can understand their viewpoint but as told them the comic strip was an attempt to show how the company is viewed by many in the outside world and personally had no bitter feelings towards either Bill Gates or his corporation Heck have really enjoyed my two summers of work there and strongly recommend the internship program to anyone interested in working in the industry This first strip makes fun of the New Employee Orientation NEO that every employee has to suffer through During this session they show you videos and fill you up with all kinds of MS trivia They also make you sign the agreeement NDA It would be fitting if they made everyone stand at the end of the day place their hands over their hearts and say the Microsoft Pledge of Alleigance computer on every desk in every home running Microsoft software but they do Anyway Episode The Space Rooster Episode The Rebel Threat Episode Flame On Episode Lord Gater Party Part Episode The Imperial Insignia Episode Lord Gater Party Part II Episode Lord Gater Party Part III	student	cornell
15	 Server Date Wednesday GMT Friday GMT Mishaal Home Page Mishaal Home Page Hi Kuwaiti student at Cornell University in the Master of Engineering in Computer Science program MEng CS graduated with double major in Electrical Engineering and Computer Science from Worcester Polytechnic Institute in Worcester MA The coolest place on Earth Here list of stuff involved or interested in Temporary Link to Cornell Services BearAccess Menu Links to courses taking Machine Vision Newgroup High Capacity Networks Newgroup Database Management Newgroup Optimal Video Transmission MEng Project CMT Extension Kuwait Home Page My Resume Check stock quotes Cooler Links My Public WWW Server hope to offer CoNote soon Weather in Ithaca CNN for the latest news Cannes International Film Festival Everything is wrong The reason why want to be kid again Ever been accused of being nerd Well now you can be sure Home Interests Cool Links CS Home Page Mishaal Almashan mishaal Cornell University	student	cornell
16	 Server Date Wednesday GMT Saturday GMT William Lee You Are Visitor No William Lee Hi am from New Jersey Exit minutes away from Princeton am Master student in Computer Science at Cornell University have BS degree in Computer Engineering and Science from Carneige Mellon University where did research projects for Engineering Design Research Center and Robotics Institue Then spent year writing an operating system XSROS on HPUX for Motorola at Lauderdale Florida Besides sleeping and school work on projects like Optimal Parallel MPEG Encoder CORNELLopoly Network Computer and Database Sector Analysis with my research partners at the Systems Lab compete in USTA tennis tournments in South Florida but could never win Somehow it is the parties that enjoy after weekly matches There are many very beautiful places to play tennis in South Florida Here are some of my faviorite ones Boca Raton Key West Gets very hot Coral Springs Where lived have collection of piano concertos from Beethoven Chopin Gershwin Liszt Mendelssohn Mozart Rachmaninoff Ravel Tchaikovsky also collect violin concertos As you can probably guess by now am concerto type of guy even wrote my graduate school application essay based on piano concerto That probably one of the reasons why got rejected by my own school Fall Classes Software Engineering Formal Methods Multimedia Systems Computer Science Colloquium Cool Software Tools Seminar Presentation Optimal Parallel MPEG Encoding Research Spring Classes Practical Distributed Computing Practicum in Distributed Computing and CORNELLopoly High Performance Systems and Network Computer Optimal Parallel MPEG Encoding Research Thriving on the Information Revolution and Database Sector Cool Links to copy frog Ski Server Identity Crisis Test Weather Underground Inktomi Search Engine Question Of The Week Archives Last Updated Nov Campus Address Maple Ave Apt Ithaca New York wwlee	student	cornell
17	 Date Sunday GMT Server Friday GMT Patty Hough Patty Hough Sandia National Laboratories Box MS Livermore CA ph Who am was student in the Center for Applied Mathematics which is housed in Frank Rhodes Hall at Cornell University My thesis advisor was Steve Vavasis Other members of my committee were Nick Trefethen and Al Schatz My research interests fall in the areas of numerical linear algebra scientific computing optimization am currently working as postdoc with Juan Meza in the Scientific Computing Department at Sandia National Laboratories in Livermore CA Here is my resume and statement of research goals Tech Reports Complete orthogonal decomposition for weighted least squares with Vavasis to appear in SIAM Matrix Anal App Stable and efficient solution of weighted problems with applications in interior point methods Thesis	student	cornell
18	 Server Date Wednesday GMT Monday GMT coming into the clearing stepping out of the forest what around the clearing looking around you you realize you must have walked much further than you planned to there wide variety of trees surrounding you on all sides but especially oak trees the weather seems fairly overcast but you somehow ca figure out if it going to rain or snow perhaps it will do both off in the distance you can see large mountain where it quite clear that it is snowing no question about it you hear birds chirping quite near to where you are of course they may be responding to the sounds inside the clearing but the much much louder sounds are coming from nearby waterfall you ca see it but it got ta be big you could follow the sound if you wanted there seems to be path leaving that direction there are two other paths leaving the clearing one is labeled with sign that says the hill school the other is labeled with the sign the hell school there also small wormhole which seems to connect to nearby house presumably there lot of traffic between the two places what inside the clearing inside the clearing are couple of structures there shack with door that falling off and completely modern glass house with no stones in front of it there pile of books scores magazines and random papers scattered all throughout the clearing as well it seems like there some vague rhyme and reason to it but glancing at the topics there seem to be few on all sorts of topics you figure that if you look at the most recently read books you probably have better idea of what makes the person in the clearing tick there also resume that you see it seems somewhat off in the corner presumably he has more important things to worry about he seems kind of strange the guy in the clearing he smiles over at you and says hello he about and is often described as being way too thin especially by his mother his most distinctive feature is his hair which is bright golden red and quite long he looks vaguely elfin but you seen more people before warning links in next paragraphs not yet written get there soon more obvious is that he always doing things at once he starts telling you story but then stops and hums tune then he starts telling you why nicholas negroponte is moron but if you never heard of him he starts talking to you about gay politics in late america then he pauses and starts talking about some obscure theorem from theoretical computer science it obvious that he rather well read from listening to him but he tends to go on bit much so you start looking at his appearance instead he wearing mostly two colors purple and dark turquoise everything he wearing seems to be either silk or linen and contrasts nicely with his hair he has on glasses as well there gold ring with an image of beaver on his right ring finger the beaver is pointing away from him on his left ring finger is silver ring with an ocean wave pattern on it he also wearing pewter pentacle around his neck and looks altogether more like than someone who as classically as he sounds like he is other people who visit the clearing dan starts talking about the people who occasionally visit and whom he has spent time with brian is an old friend from mit whom used to live with when was an undergrad nowadays he works for pointcast which is an internet news provider anca mosoiu pronounced schwa sh oi is my best friend from back when we were at mit used to eat with her many times week for two and half years and we went to europe together the summer after we graduated in oh and her inner child by the way she just quit working at one wave do blame her for that dreadful name actually it used to be business web and before that it was object power feh daniel is someone gotten to know quite bit better over the last several months think we met probably sometime last november but we became much better friends over the summer he switched out of the ee department quite wisely and is having much more fun as multimedia student in the dept of communications for some reason that in the ag school he also has small internet business he with friend of his there used to be link to perry finley page here but there not anymore instead brian has some pictures of perry on his pictures page my dad works for steelcase which is the largest manufacturer of office furniture in the world the server that they have on the web is kinda cheesy it used to just have the picture of the pyramid but it is still neat pic of the building dad works in tim is guy used to sing with here at cornell he just left for japan for program called jet which hired him to teach english to high school students there in an ideal world visit him next winter or so hani graduated from mit this june and it could have happened to someone who more needed to get out of that place ack but he great guy even so nick is good guy who met about year and half ago he lot cuter than the somewhat blurry picture on his web page would indicate we are the music makers and we are the dreamers of dreams aphex twin dan brown snowman last updated oct	student	cornell
19	 Server Date Wednesday GMT Thursday GMT Julia home page Julia Komissarchik juliak To be continued	student	cornell
20	 Server Date Wednesday GMT Tuesday GMT Divakar Home Page Divakar Viswanath divakar Address Upson Hall Cornell University Ithaca NY Off Res am graduate student in Computer Science My area of interest is Numerical Analysis My adviser home page is good place to find out about Numerical Analysis Cornell CS	student	cornell
21	 Server Date Wednesday GMT Wednesday GMT Indira Vidyaprakash Indira Vidyaprakash Master of Engineering Class of Dept of Computer Science Cornell University Welcome to my homepage Currently am student at the Computer Science Department at Cornell University in Ithaca NY have my degree in Computer Science and Engineering from PSG College of Technology Coimbatore INDIA Some information about the courses that have taken at Cornell University Fall Operating System Practicum in Operating System Project specification HOCA Operating System Software Engineering Multimedia Systems Project Audio Processing Toolkit Management Information Systems Policy Spring Computer Graphics Practicum in Computer Graphics Project Animation The Magic Carpet Computer Science Colloqium NCC Managerial Finance Summer Independent Research Ray Tracing in Computer Graphics Project Camera and Perspective Transforms in Java Click here to see postscript version of my Resume Click here to see the JAVA Applet for Camera and Perspective Transforms Some interesting WEB sites Some cool applets from Gamelan Directory Calvin and Hobbes Gallery GIFS Indian Recipes Chickering Wood Drive Nashville Tennessee indira Last Update August	student	cornell
22	 Server Date Wednesday GMT Wednesday GMT Tibor Tibor Welcome to my WWW Home Page Permanently Under Construction Office Upson Hall Cornell University Ithaca NY USA Office Phone Interesting Sites Project Zeno Tibor janosi	student	cornell
23	 Server Date Wednesday GMT Monday GMT Hani Home Page	student	cornell
24	 Server Date Wednesday GMT Wednesday GMT Sunil Srivastava Home Page Welcome to the Home Page of Sunil Srivastava Master of Engineering Student Computer Science Department Cornell University Academic Classes TA Classes Project Personal Information Useful Links Comments or questions about this web page Send mail to sxsrivas	student	cornell
25	 Server Date Wednesday GMT Thursday GMT Nobuhiko Mukai Nobuhiko Mukai This is home page of Nobuhiko Mukai Now it under construction We researched an effective JPEG compression on Multimedia systems last fall semester made an animation titled magic on Computer Graphics spring semester	student	cornell
26	 Server Date Wednesday GMT Friday GMT Huang Huang Defender of Truth Champion of Justice and Nice Guy all me Steven Some years ago nevermind how long exactly arrived as second son to set of proud parents If this sounds like Moby Dick to you then let me assure you have no intention of finding ship to hunt whale But digress Brought up in Taiwan until the tender age of seven my whole family migrated south to the tropical islands of the Philippines There we made our home and lived some fifteen years picture of Mom and me when was around six years old thus became quite fluently bilingual As love to read the poetry of the Tang Dynasty the Arabian Nights quite naturally the children version and host of other stories somewhat fulfilled the Wen in my name which means class in grade seven was to set the course of my life dove right into the marvel that was computer Four years later entered the University of the Philippines with that as my major and very likely my career had found talent in me that draws me to the art and science of computing and unabashedly knew was quite good at it Was also in College when met her and she met In whirlwind of happiness and peace three years and running woman has become the most important part of my life effortlessly defeating my hobbies of old with her love eeking career more ideal and higher paying to be blunt enrolled in the Cornell University graduate program Thus far have been rewarded with almost everything have ever wanted and worked for am lucky man September Welcome to my home page To segregate myself from your everyday geek like to think man of many interests Aside from actually writing program here what happily do in my spare time Read anything from Calvin and Hobbes to Unix Network Programming Internet Relay Chat can generally be found as steven on LinuxNet Building things Of course just practicing design Building plastic models of weapons of war Watching films Listening to the music of Sting and many others Watch Sesame or the Discovery Channel and Railroad models when get rich enough In the field of computers also have rather broad spectrum of interests though my studies have concentrated in the areas of computer graphics and networking If you wish to be offended by some blatant you may want to check out my also highly interested in Linux operating system for the Intel or compatible computer My Master of Engineering project is Modeler for Blobby Models or Metaballs under the supervision of Bruce Land am currently involved in another course project involving survey of techniques in modeling human faces and and portable audio effects editor Last Modified October Huang	student	cornell
27	 Server Date Wednesday GMT Thursday GMT Francis Chu Home Page Francis Chu CS Graduate Student University of California at Berkeley Mathematics Department Computer Science Department Cornell University Computer Science Department Humor fcc	student	cornell
28	 Server Date Wednesday GMT Monday GMT Vineets Home Page Vineet Ahuja Department of Computer Science Cornell University Ithaca NY Address Hasbrouck Ithaca NY ahuja Academics an Eng student in the department of Computer Science at Cornell University My main areas of interest lie in Parallel Processing Advanced Architectures Operating Systems and Object Oriented Programming Coursework at Cornell Fall Automata and Computability CS Engineering Computer CS Spring High Performance CS Final Project Report Software Design for High Performance CS Final Project Report Fall High Capacity Information EE Multimedia CS Resume PostScript the Postscript is more recent HTML This page has been accessed times since Feb	student	cornell
29	 Server Date Wednesday GMT Saturday GMT Min Stanley Huang Home Page Min Stanley Huang Master of Engineering Student mhuang Sheldon Court Cornell University Ithaca NY Tel Master of Engineering Computer Science Cornell University class of Bachelor of Science Computer Science University of Kentucky Kentucky Areas of Interests Operating Systems Distributed Systems Database Systems Information Retrieval Graphical User Interfaces Other Interests Movie Tennis Riding Travel Reading am working on my Project Distributed Computing in with my advisors Werner Vogels and Robbert van Renesse Objective of the Project is to integrate Horus into Here are few links related to the Project distribution Update FAQ Horus Final Exam Paper Collection Distributed Shared Memory Distributed Shared Memory Some Technical Papers am interested in Group and Communication Snapshot Network Interface Architecture JOBS Career Path Bay Area Jobs CybeRezumes Career Opportunities Useful stuff Technical Paper Fielded Search Bell Labs Java RFC Last Modified Fri Oct Min Stanley Huang mhuang	student	cornell
30	 Server Date Wednesday GMT Friday GMT Rosen Sharma Office Upson Hall Email sharma TA for came to Cornell from Stanford where spent couple of years as PhD student My work and research at Stanford was about streaming live media like audio and video over the internet As part of this modified IGMP one of the multicast protocols developed protocols for multicasting layered video and developed the Virtual Classroom system The initial prototype was deployed in the Spring and Fall quarters and used as an alternative to the Stanford Instructional Television Network SITN program which uses microwave links Students at remote sites used the software to asynchronously access class lectures and notes over the internet We also stumbled upon the fact that other media like text slides etc linked with portions of video enhanced its usefulness greatly This lead to the formation of company Vxtreme Palo Alto CA Vxtreme is new Silicon Valley start up develop client sever applications for streaming multimedia delivery over the internet Papers Signalling and Operating System Support for ATM Applications Rosen Sharma and Keshav Sigcomm Text Segmentation of Mixed Mode Images Navin Chaddha Rosen Sharma Avneesh Agarwal and Anoop Gupta Asilomar IGMP Internet Group Membership protocol designed by Rosen Sharma and Steve Deering release as part of IP multicast Internet draft written by Bill Fenner Optical Character Recognition Using statistical and structural methods Rosen Sharma and Niten Malhan Bachelors thesis Dept of Computer Science Indian Institute of Technology Delhi Unpublished Stuff Characterizing Variable bit Rate Sources Rosen Sharma term paper Preformance of Software Video Conferencing System Rosen Sharma Internal Report Cool Stuff Image and Video Manipulation Language This is language with video and images as first class data types It allows operators on images and sequences like blur speckle transforms like affine dct subband motion estmation It also makes manipulation of image and video data fast and efficient The implementation is writen in and currently has been tested on SGI machines it supports bit and display To give you flavour of what the language looks like set image image imageFrame if iframe if filename image putImageInCanvas imageFrame image if There is predecessor to this implementation if you hate which uses motif and has language interpreter written in yacc with limited shell like scripting Here is cool shell script that will generate TK widgets It generates all the files given the name of the widget The files compile and give you dummy widget snooper recorder and player consider this one of the coolest things ever did It does something similar to what from Microsoft does for Windows they just released it It doesnt have scripting language but just replays what is recorded with lots of kludges to fool the Some Postscript Fractals Creates file called in your directory This used to be hole but postscript viewers fixed it by dissalowing write calls Semantics of my Name Rosen not being an Indian name this question was often asked People gave the name their own interpretations Here are some of them Some of my chinese friends makes me wonder claim that it means small horse not smart In hindi my native tongue Sharm mean shyness Sharmila means shy And there is an actress called Sharmila Tagore So was nicknamed Sharmila Frozen Sharmila or Stupid Horse Some people claim that it is from one of the ealry Jewish leaders What is in name	student	cornell
31	 Server Date Wednesday GMT Thursday GMT Janeen homepage Janeen Reich Welcome to my home page Currently am at Cornell University where am completing the in Computer Science in August In September will join the Systems Group of Texas Instruments in Dallas Texas To send me email jreich My resume is currently being added to this page My Most Favorite Things	student	cornell
32	 Server Date Wednesday GMT Friday GMT David Pearson David Pearson Research Interests My thesis investigates highly scalable parallel computers consisting of very simple processors connected in mesh The guiding vision of this work is of time perhaps years hence in which materials science has taken the place of computer architecture and computers are crystals with each processor molecule in the lattice Long before this goal can be realized we can and should prepare for the ubiquitous parallelism it will offer Our algorithms must heed the laws of physics and pay attention as chip designers do now to spatial layout and the currently hidden cost of communication This can be accomplished by designing our algorithms for mesh To pursue this vision requires both theoretical and practical work So far my work could be characterized as feasibility study have produced cellular architecture which could be efficiently realized with current hardware simulator for this architecture algorithms programs and an operating system design for computing believe that computers not problems like protein structure are the grand challenge of parallel architecture Parallel computational power will not really succeed until it becomes commodity and is sold for desktop machines or video games Directions for future research include VLSI implementation of this architecture and the design of programming language Most languages hide the details of the machine instruction set but reflect the underlying Von Neumann architecture believe that this connection to the architecture has been good thing for algorithm design and to really exploit parallel machines we need language for which the costs of operations are as easy to estimate as they are for on Von Neumann machine Publications Dunten Pearson and Arms The Kiewit Network Campus Network In IEEE Computer Society International Conference IEEE COMPCON pp Fall Pearson Pillai and Lee An Algorithm for Placement of Sensor Elements IEEE Transactions on Information Theory pp Pearson and Vazirani Fast Parallel Algorithm for Finding Maximal Bipartite Set In Foundations of Software Technology and Theoretical Computer Science FST TCS pp Published as Lecture Notes in Computer Science Pearson and Vazirani Efficient Sequential and Parallel Algorithms for Maximal Bipartite Sets Journal of Algorithms pp Johnson Pearson and Pingali Finding Regions Fast Single Entry Single Exit and Control Regions in Linear Time Cornell CS Tech Report Johnson Pearson and Pingali The program structure tree Computing control regions in linear time In Proceedings of the Sigplan Conference on Programming Language Design and Implementation PLDI pp Published as ACM SIGPLAN Notices Pearson Algorithm for the Problem Cornell CS Tech Report Hao and Pearson Instruction Scheduling and Global Register Allocation for SIMD Multiprocessors In International Workshop on Parallel Algorithms for Irregularly Structured Problems Irregular pp Published as Lecture Notes in Computer Science Hao Pearson and Zippel Global Register Allocation for SIMD Multiprocessors Journal of Computer Science and Technology Allerton Press Pearson Parallel Implementation of RSA in Selected Areas in Cryptography SAC to appear Computer Science Department Upson Hall Cornell University Ithaca New York USA Email pearson Tel Fax	student	cornell
33	 Server Date Wednesday GMT Sunday GMT KOLLAs Home Ground Copyright No Rights Reserved will not be held responsible for any unwanted effects due to the usage of this applet or any derivative No warrantees for usability for any specific application are given or implied function scrollit seed var You have reached the page of Vivek The page that is viewed by millions and zillions var Wondering how var can be reached var var You can call me at var or send me mail at kolla var But dont expect me to get back to you var var out var if seed seed var scrollit seed else if seed seed for seed seed var scrollit seed else if seed if seed var scrollit seed else scrollit Hi there You are the visitor number to my home page Are you not happy with that My contact info to transmit your thoughts Friends Foes LINKS small collection of URL of relevance to my life used to maintain large list of my favorite links but now think that was waste of time If you are searching for something specific you might try Alta Vista Yahoo or the Inktomi RESUME In HTML In Postscript In Word Perfect In ASCII The current time here is Go get good browser Your browser does not know java Dont you have clock to see your time or do you wan na know what time it is around the world You will need Java capable browser to view the animation This Site is Under Construction Wondering why have so many images and heavy files Go get like me Note This home page uses both JAVA and animations No promises are made with regards to the quality of your visit using browser which does not fully support these technologies	student	cornell
34	 Server Date Wednesday GMT Tuesday GMT David Karr David Karr PhD Student Department of Computer Science Cornell University Upson Hall Ithaca NY Tel Fax karr am student in the Department of Computer Science at Cornell University am working on the Horus project layered architecture for reliable distributed systems with Professor Kenneth Birman and Robbert van Renesse My minor field is mathematics concentrating in statistics Research Interests Engineering layered communication protocols Weak consistency Performance Engineering layered communication protocols My research interests include the problems of specifying implementing and verifying applications to run on distributed computer systems My dissertation work has concentrated on the formal specification and verification of the properties of Horus protocol layers Using the Temporal Logic of Actions one can specify various interesting fundamental properties of the protocol layers used in Horus protocol stacks furthermore one can write formula in the style for each layer specifying the properties it might provide at its interfaces depending on the properties of the layers above and below it in the stack One can then employ straightforward techniques to verify that given stack provides certain desired properties at the top of the stack under specified conditions even for unusual combinations of layers or layers stacked in an atypical stacking order Ultimately users of Horus and other layered communications systems should be able to call on these verification techniques to help construct customized stacks that omit unnecessary layers avoiding their associated costs with the confidence that the included layers and their stacking order are sufficient to provide the desired guarantees This work is intended to be part of the basis for the Securing and Hardening Horus project have developed Java applet that gives rough demonstration of my proposed method of verifying the properties of Horus protocol stacks My initial interest in the Horus project stems from the promise of the Horus protocol suite to provide various guarantees of consistency to programmers in environments where hosts may crash and messages may be delayed or lost As software development engineer who has worked on distributed applications whose components were prone to failure feel the features of Horus offer considerable promise to application developers Weak consistency While at Cornell have become interested in the problems of distribution of computing over networks and have looked into the problems of revision control of files in environment and in general in distributed environment whose network is prone to be partitioned into disconnected portions More generally am interested in notions of weak consistency that would allow multiple temporarily disconnected sites to make progress concurrently Performance My research at Cornell has concentrated on correctness of protocols but other measures such as high availability low response time and efficient use of resources are clearly equally important large part of the problem is the apparently randomized timing of system loads and activity in distributed applications with the notable exception of those that run on dedicated parallel machines This behavior also should be susceptible to some mathematical analysis though of different kind which encouraged my interest in statistics HTML and Java The World Wide Web itself is an interesting distributed application with many possibilities to explore experimented with simple ways to use hypertext to navigate information most of these appear in my Web site about LEGO toys and been hacking Java applets executable code that Netscape browser can download and run for example birthday puzzle calculator and tool for verifying properties of Horus protocol stacks Professional Affiliations am member of IEEE ACM and MAA Other Information See my WWW links for other topics find interesting or useful Last updated June David Karr karr	student	cornell
35	 Server Date Wednesday GMT Tuesday GMT Seena Cherangara Seena Cherangara Master of Engineering Class of Dept of Computer Science Cornell University Welcome to my homepage Currently am an student at the Computer Science Department at Cornell University in Ithaca NY have my degree in Computer Science and Engineering from the College of Engineering Trivandrum Kerala INDIA Some information about the courses that have taken at Cornell University Fall Operating System Practicum in Operating System Project specification HOCA Operating System Software Engineering Multimedia Systems Project Algorithms for JPEG Artifact Reduction Spring Computer Graphics Practicum in Computer Graphics Project Animation The Magic Carpet Distributed Systems Computer Science Colloqium Summer Project Graphics Modeling in Java Parametric Equation Viewer Click here to see postscript version of my Resume Maple Ave Apt Ithaca New York seena Last Update June	student	cornell
36	 Server Date Wednesday GMT Tuesday GMT Home Page of Huang Huang Upson Hall Department of Computer Science Cornell University Ithaca NY Tel Fax Email ychuang am graduate student in the Department of Computer Science at Cornell University Favorite Links Online Documents Courses Project Accessed by Visitors Last modified Tue Nov Huang ychuang	student	cornell
37	 Server Date Wednesday GMT Wednesday GMT Mike Page This is my page Yeah Hi For more version of this page please use more recent browser Some stuff here may be quite out of date Would you like to sign my Guestbook That would be cool Here chance to make your opinion count bet it dark in Stockholm right now Take look and VOTE Or you can look at poll results Here are couple of links to some people know Cat guess she pretty cool Ryan But we call him Beavis Vitya That better be under construction Amy Dancing frogs and stuff Maria No no please do cry Mark Korby do really know him But he got my last name Andrew Corbett He may suck at cards but he got cool nickname Kevin This guy got dog that has my last name Complete with lovely picture Say Hi to Eryn She craves attention Want to see my movie We had to make it for graphics class Golf An amazing animation of guy playing golf MB MPEG Here are some links to other places Has the Universe stopped expanding Click here to find out What this world really needs is Beavis you can click This is my personal pick for Cool Site of the Day Look Mom made Online Top Ten Student Homepages list My lame list of Guttermouth links This page is now being brought to you by Just kidding member of the Internet Link Exchange This page is now connected to whole bunch of others on this line thing So like come on let all join hands now and sing together in the spirit of harmony Uh or something You visitor number these things keep resetting Or check out complete statistics for my page through this thing It pretty cool but not very accuarate And stuff Mike Korby Please send me mail at Basically this page is pretty much over but here couple of random images that do really relate to anything Thanks to everybody who web page ideas used to make this	student	cornell
38	 Server Date Wednesday GMT Tuesday GMT Simple Homepage Ben Hao Graduate Student bhao Cornell University Dept of Computer Science Upson Hall Ithaca NY Tel Fax From inside Cornell try the Net Flea student in Computer Science at Cornell working on code synthesis for massively parallel processors My advisor is Richard Zippel whom first heard from George Taylor when was at Sun Microsystems My family is in the San Francisco Bay Area You can find more information about the area by reading its local newspapers Do forget to check out its gorgeous weather Life at Cornell What to do at Cornell Where to eat Check Ithaca weather Go see movie Study in library CS dept home page Check these out Generally Neat Stuff MIT Stocks MIT Weather UT Maps Interactive Frog Dissection Magazines on the Net InterText magazine Wired Magazine Peek into the Galaxy Views of the Solar System Shoemaker Levy Art and Music Le WebLouvre Xmorphia Gallery of Interactive Geometry Kaleidospace Internet Underground Music Archive Network Navigation Global Network Navigator WWW Wanderers and Spiders The Web Edge Library Library of Congress Martial Art Scientific Computing info Tutorials Internet info NIH Internet course The InterNIC Info Guide CERN Web Seminar Last Modified Tue Mar EST Ben Hao bhao	student	cornell
39	 Server Date Wednesday GMT Monday GMT My Home Page Indira Malik Department of Computer Science Master of Engineering imalik Resume Post Script Courses Programming Engineering Advanced Database Systems Engineering Computer Networks Multimedia Systems Visit my High School TAPS This page is under construction	student	cornell
40	 Server Date Wednesday GMT Friday GMT Yoo Sun Chung Home Page Welcome Everybody My name is Yoo Sun Chung You are the th visitor since April What am doing now am studying Computer Science for Master degree at Cornell University now Please check my school Master of Engineering Computer Science Cornell University Where am from Originally came from Seoul Korea After graduated from high school in Korea came to America for studying The schools went in Korea Kindergarten Elementary School Mar Feb Junior High School Mar Jul Junior High School Aug Feb Women High School Mar Feb After came to America got degree for Computer Science at George Mason University in Virginia on May The happiest thing in my life married on April My wonderful husband Sok Hwa Chang works for SAIC in Virginia as computer programmer Here is my husband picture Would you like to see my beautiful moment Only if you have JAVA available browser Click Here What do do when am free play the keyboard Actually like to play the piano better than keyboard but my piano is in Korea not here listen to the music What kind of music like Korean pop music love Shin and Lee like classical music too And so on and so forth browse the World Wide Web Some Useful Links Are you interested in JAVA You can search what you want using this search engine Korean Online Newpaper Hangook Ilbo Chosun Ilbo Joongang Ilbo Would you like to hire me Here is my resume Resume for Word Perfect Version This is my MENG project am still working on it Title Image Processing Java Applet Yoosun Personal Infomation Rd Ithaca NY Phone Fax Emergency Sok Hwa Chang Email ychung This email is forwarded to and yooschung automatically This is under construction last modified on November	student	cornell
41	 Server Date Wednesday GMT Tuesday GMT Dan home page has moved Dan home page is now at http Please visit it by the millions	student	cornell
42	 Server Date Wednesday GMT Wednesday GMT Felix World	student	cornell
43	 Server Date Wednesday GMT Tuesday GMT Nikos Home Page Research Nikos Pitsianis Upson Hall Dept of Computer Science Cornell University Ithaca NY work fax home nikos Publications Lectures Teaching Java Vita Pointers Since May You are visitor number	student	cornell
44	 Server Date Wednesday GMT Friday GMT Jose Luis Fernandez Home Page Jose Luis Fernandez Jose Luis Fernandez Master of Engineering Department of Computer Science Cornell University Ithaca NY Home Address Maple Avenue Apt Ithaca NY joseluis If you were using browser you would see an animated scrolling text sign Resume Curriculum Vitae Interests My current interests are Distributed Systems Multimedia and Computer Graphics Projects Project Image and Video Transition FX for Rivl Examples Page Presentation Project Pyramania Game Spaceship battle Project Report Project Hoca Design and coding of Operating System implementing Multitasking and Virtual Memory MENG Project Project Distributed Vehicle Simulation Hobbies Photography Click to view some of my pictures Music Computers Writing and directing crazy movies with my Video and some actors recruited from my friends Current Time If you were using browser you would see an animated clock here Clock courtesy of Bill Giel You are visitor number This page is better if viewed with Browser	student	cornell
45	 Server Date Wednesday GMT Monday GMT Homepage of Nicholas Howe Nicholas Howe Click on photo for image Graduate Student Department of Computer Science Cornell University Ithaca NY email nihowe office Upson Hall phone Resume references Personal Info	student	cornell
46	 Server Date Wednesday GMT Tuesday GMT Fred Hsu the Software Engineer Fred Hsu The Software Engineer in current version only feet are shown my RESUME Some of my projects others will appear soon Distributed HTTP Server SCRAMO Animation Model postscript VPLA Visual Programming Language for Animation Links to current affiliations HP Massachusetts Language Lab HP Computer Languages Hewlett Packard Links to previous affiliations Cornell Computer Science Cornell Theory Center Visualization Group Cornell University Binghamton University Lawrence Berkeley Laboratory Interests and Hobbies this section will be developed soon maybe next year Photography Cello Guitar Aquarium Cornell Computer Science Cornell Theory Center home Burling MA work Chelmsford MA fax email fredhsu snail Apollo Drive MS Chelmsford MA http	student	cornell
47	 Server Date Wednesday GMT Saturday GMT Takako Hickey Homepage Takako Hickey Email takako Office Upson Hall Phone Fax am student in the Department of Computer Science at Cornell University am by Robbert van Renesse and Fred Schneider Research Interests Distributed Systems Programming Environment Resource Management The Horus Project Previous Life Other Interests Social Psychology Backcountry Hockey Quotes Last Modified Wed Nov	student	cornell
48	 Server Date Wednesday GMT Thursday GMT Ashvin Dsouza Ashvin Dsouza dsouza graduate student working with Bard Bloom The focus of my thesis research is the development of tools to support process algebraic methods for the specification and verification of concurrent systems By designing these tools with respect to metatheory of process algebras they become immediately available to wide class of process algebras This alleviates the problem of duplicated effort inherent in custom tools For example have designed and prototyped model checker for simple GSOS process algebras The semantics of the process algebra forms part of the input making this tool applicable to many commonly used process algebras including CCS CSP and basic LOTOS In addition am investigating the expressive power of process algebras in order to better understand and compare them Finally am exploring applications of these techniques Here some work on generating BDDs for process algebra terms in full postscipt and lite postscript versions also written up some expressiveness results for CCS postscript have presented the former at Computer Aided Verification LNCS and the latter at Foundations of Software Technology and Theoretical Computer Science LNCS This June will be presenting work on verifying SOS specifications at COMPASS	student	cornell
49	 Server Date Wednesday GMT Tuesday GMT Lin Hsian Wang This Page Is Under Major Construction Lin Hsian Wang am Master of Eng student in Computer Science at Cornell University have BS degree in Computer and Information Science at The University was born in Fangliao small village on the southern coast of Taiwan in Still constructing	student	cornell
633	 Server Date Monday GMT Tuesday GMT Course Material Course Material Introduction to operating systems Processes IPC Scheduling Bounded buffer example critical section Solution for two process critical solution problem Assignment due Solution Solutions for process critical section problem hardware support for solutions Semaphores Deadlocks Introduction and detection Deadlocks Prevention and Avoidance the Banker algorithm Assignment due Solution Classic problems in Synchronization higher level constructs Assignment due Solution Project File Systems Introduction directories system and physical organization File Systems Free space management Directory implementation disk scheduling RAID Introduction to Memory Management Issues Memory management Segmentation Paging and combined approaches Assignment Solution Page Replacement Algorithms Locality Working Set Protection and Security Mach an overview	other	cornell
634	 Server Date Monday GMT Wednesday GMT Questions and Answers Phase Question We having difficulty understanding the abstraction for process queues which we asked to implement for phase one of the project for We do understand what removeProc is supposed to do The specification says Remove the first element from the process queue whose not tail is pointed to by tp Are we to scan down procTable for the first element which has by which we assume you mean the element of some structure of type identical to Answer Function RemoveProc should do precisely what the spec says Consider queue queue is FIFO list with head element and tail element Consider pointer to the tail element of Let that pointer be Consider now pointer to Let call it tp RemoveProc assumes that you know tp Your goal is to remove from the head element of How you do it namely how you devise smart and efficient implementation of the queue data structure that makes this task easy it is up to you Question can not read files and In particular if try to access directory get back Permission Denied What should do Answer Do try to cd to the directory you wo be able to do that Instead just use the UNIX cp command to copy the files from to your directory The following will work as have just tried it on dahlia in the SunLab dahlia cd dahlia cp dahlia cp Question believe the function on pg should be outBlocked semAdd NOT outBlocked as listed Answer No outBlocked really takes only as parameter As you point out however you do need to know the address of the semaphore if any on which is blocked Maybe this is an instance in which adding fields to the given data structures is good idea Question The assignment says that we can add to the fields of to make them more efficient But since we are abstracting them in our module how close to this implementation to we have to have ask this because the queue implementation only has pointer to the tail not both the head and tail as usual Thus removeProc will involve search along the whole list Does the tail pointer have to point to something of type or can it point to an intermediate type which points to the head and tail of the queue Answer Yes you can add fields to the and structures However you should try to resist the temptation to add fields without having first thought if simpler and more efficient solution exists that will not require you to do so Implementing the queue abstraction and taking care of function removeProc happens to be an instance in which adding fields to the structures would probably only serve to make things more complex and less efficient To be specific removeProc be efficiently implemented with the structure fields that you have already without involving search along the whole list as you suggest Also the tail pointer which by the way must point to the last element in the queue does have to point to an element of type Question Is the that pcc compiles for the What does it expect for function declarations in export files pcc keeps giving core dump when we try to compile our export file Answer Indeed pcc uses the old syntax As far as how to set up extern declarations in file you can refer to the example in Appendix of the HOCA documentation file Question Hi We compiled our modules with gcc first along with our own tester module so that we could use the awesome debugging power of gdb before moving on to the graphically pleasing but somewhat less powerful CHIP simulator We just thought others might benefit from this strategy and we wonder Question ed if you might pass it on via the Web Answer Using gcc to compile and debug your modules is good idea if you know how to use gdb However keep in mind that The executable compiled with gcc will not run in CHIP Gcc produces executable for your SPARC not for CHIP Because of the above point you will have to eventually compile your files using pcc Remember that pcc is not If you used ANSI in your gcc code you will have to change it back to notation Beginning with the next phase gcc will probably be less useful since you will need to look closely at what happens in CHIP registers and memory Your friendly CHIP interface will be glad to help PHASE Question Is there an instruction called STIT in CHIP If not does that mean that we ca read the value stored in IT Answer No there is no instruction named STIT You can infer what the value of IT is by comparing the current time of day with the time of day of the last time you loaded IT Question Does return total CPU time used by the process or the currently used that is Process process Answer returns Question Interrupt priority is higher or lower than priority Answer believe is higher But why do you care Question To set the initial running area for the nucleus we use STST at some point How do we guarantee the processor will be in kernel mode before that Answer Your program runs by default in kernel mode So you can use STST with no problems Question Could you please tell me how to get the value in the status register and that in the length register for an IO device There is table on page of the CHIP documentation but that does seem to help much Actually when does the value in the length register need to be retrieved Furthermore how am supposed to pass those two values to the appropriate process when necessary Do just save them in the corresponding entry in the process table Answer First of all when device completes the values for the status and length register are returned in the device registers for that device The device registers are located in CHIP memory just below the interrupt area As far as accessing that area if you look in you will find the following definition define BEGINDEVREG beginning of device registers that should be what you are looking for The value in the lenght register need to be retrieved for the Terminal and Printer devices see sections and You are going to pass these values as follows if there is process waiting on the semaphore for the device that returned the values then you can simply copy the values in the registers and of the process that is waiting you should also unblock the process if there is no process waiting you should copy the returned value in the buffer dedicated to the device the one that you declared at initialization time The process which initiated will eventually retrieve the values from there Question Why do we need to distinguish between caller and running inside trap handler What does really mean passing up trap And what is doing anyway Answer Let me answer the question is reverse order What is doing anyway is called to initialize the old and new trap areas that are kept by each process as opposed to the trap areas kept by the nucleus in the low memory addresses It is not your job at least for now to decide to initialize those areas you can just assume that they are initialized through the values passed in registers and You can look at an example of initialization browsing through the test program What does really mean to pass up trap Passing up trap really means invoking trap handler that is not located in the nucleus but rather in higher layer of the operating system Before trap can be passed up the appropriate old and new trap areas for the calling process must be initialized calling If an attempt to pass up trap is made before for the invoked trap type has been executed the calling process must be terminated Passing up the trap involves copying the state of the calling process into the old area and copying the state contained in the new trap area in the calling process state as it is maintained in the process table possible implementation of the passing up mechanism would call MOVBLK twice The first time to copy in the old trap area The second time to copy the state stored in the new trap area into As you can see to load the new state we are not using LDST Rather we just modify the state of the running process in the proc table With this implementation when the nucleus trap handler finishes and the calling process gets to run again it will actually run the higher level trap handler Why do we need to distinguish between caller and running process You may or may not depending on your implementation In mine the reason why the caller may be different from the running process is easy to see if we consider the SYS trap handler and we concentrate on As result of the operation the calling process may be blocked and new process elected to be the next to run Using the caller vs running trick one can figure out withn the SYS trap handler if such an event has taken place and load the IT for the new running process with an appropriate value It is less clear why the trick may be useful for prog MM or even SYS traps for SYS instructions greater than After all these traps are passed up new state is loaded and any instruction after call to passup will never be executed this was the question that Nesheet asked today in class In my implementation the check that the trap areas have been initialized the right has been executed is done within the call to passup If the caller process has not executed the caller will be terminated and new process will be designated as the next to run In this case control will indeed reach the code after passup and the caller check will allow to correctly reload the interval timer	other	cornell
635	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
636	 Server Date Sunday GMT Friday GMT Java Example HelloWorld example Object Transformation Button example	other	cornell
637	 Server Date Monday GMT Sunday GMT David Koster Bookmarks LINKS None of these links are guaranteed to still exist but hey nothing works all the time in the REAL world Just bug Jon about it As starter you might want to try all these links about the Web and how to write HTML pages If you want to put your own home page up just ask me or mail me your HTML page and post it All about the Web WWW Web Communications Publishing on the Web Guide to Cyberspace Contents Beginner Guide to URLs Best of the Best All about writing an HTML page NCSA Beginner Guide to HTML The Bare Bones Guide to HTML The Home Page Web Cookbook Duke Directory of Hypertext Resources HTML Overview HTML Quick Reference An Information Provider Guide To HTML Guides to Writing Style HTML Documents Your Own Home Course Page UNIVERSITIES Columbia University in the City of New York Cornell Department of Computer Science Cornell University in Ithaca BUSINESSES Morgan Co Incorporated Northern Telecom SunWorld Online September Doing business on the web Sun Microsystems Sybase Home Page Welcome to Netscape NEW TOOLS Java Home Page Netscape Navigator Navigator Gold page Project At Sun Microsystems Laboratories And Java JOB STUFF Child Abuse Prevention Network Cornell Theory Center Home Page Jonathan Alferness Science Home REFERENCES Clay Shirky Home Page HTML STUFF Extensions to HTML HyperText Markup Language Specification Version Mosaic for version Form Support IMAGEMAPS NCSA Imagemap Tutorial NCSA HTTPD NCSA HTTPd Overview NCSA HTTPd Tutorials PARALLEL COMPUTING Cornell PERL AND CGI STUFF An Exploration of Dynamic Documents CGI Library PERL Perl and MacPerl Resources TCL WWW Info UNIX AND SHELL PROGRAMMING Creating commands and programs using the shell UNIXhelp for users UNIXhelp for users II UNIX Reference Desk PM ZONE OWNERS MANUAL Yahoo Computers and Internet Software Data Formats COURSES Home Page CS Home Page CS Home Page Cornell COMPUTER GRAPHICS FAQ Computer Graphics Fractal Explorer IBM Almaden Research Center Visualization Lab IBM High Performance Integration IBM Visualization Data Explorer DX COMICS Clyde Caldwell Images Index of DC Images Index of DragonLance Images Index of Fantasy Artists Card Images Index of Jeff Easley Images Index of Keith Parkinson Images Page Marvel Images Wolverine ART ANIMA HomePage ArtMap HomePage Art on the Net Artworld ArtMap Online Links and Listings ESCHER Escher patterns Index of Directory Index of Directory The Web Virtual Library Art ANIMATION MTV Animation MTV Animation Aeon Flux MTV Oddities The Maxx LIBRARIES Internet Movie Database MPEG Movie Archive PLANET EARTH HOME PAGE MOVIES AND VIDEO INFORMATION JUST PLAIN WIERD Alex Bennett World Brian Digital Mayhem Hell The Online Guide to Satanism Laurence Simon Weirdland SPORTS CBS Sports Home Page NBC Sports CARTOONS The Dilbert Zone Today Computer Cartoon Tool User Comics World Wide Web Comics Project United Media GAMES Games Domain Games related information site Zarf List of Interactive Games on the Web OUTDOOR RECREATION GORP Great Outdoor Recreation Pages MISCELLANEOUS Beautiful Women Elvis Home Page Fellowbug Laboratory Rocket Science Home Page Channel The Dominion The Keepers of Lists What Hot and Cool SEARCH STUFF InfoSeek Home Page Lycos Search Form TradeWave Galaxy WebCrawler Searching Yahoo MPEG AUDIO MPEG Facts and Info INP MPEG Audio FAQ MTV Music Kitchen Web Wide World of Music World of Audio Worldwide Internet Live Music Archive MAIL MESSAGES The Electric Postcard Back to Index	other	cornell
638	 Server Date Sunday GMT Thursday GMT Optimal Parallel MPEG Encoding Parallel MPEG Encoder in Rivl Optimal Parallel MPEG Encoding And just what is this madness In the beginning in lab deep in the heart of Upson Hall there were video tapes of classroom lectures These tapes were on the shelf collecting dust bunnies What were we to do about this Well Brian Smith decided that he wanted his lectures put online for his students to view and thus began using RIVL to compress his videos He soon realized that compressing every lecture would take an inordinate amount of time He calculated that if we could use every machine in the computer science department it would not take nearly as long to perform this task We decided it would be fun to help Brian out with his problem so we came up with an abstract to solve his problem We all agreed that it was good place to start After some time and lot of labor we came up with some code and paper based on our work which more closely resembles collection of notes than coherent piece of work So we kept working We have now arrived at another version of our code This version works much better than before it is better stronger and faster And to this end we have written another technical paper to describe exactly what we did and why we did it and what do we learn from this Lots We now know the intimate details of how TCL DP and RIVL work and why performance suffers when certain things are done Mastering the black art of TCL programming actually took the smallest amount of time in comparison to the rest of code Squeezing the most performance out of environment given distributed architecture turned out to be the most time consuming and difficult part of the project RPC facilities built into DP allowed us to easily perform necessary communication between machines to distribute work requests The combination of the above scripting environments helped us to acheive our goals of delivering reliable portable high performance MPEG encoding and how does it tie in with Multimedia Systems Very well The ability to rapidly compress video using all available machines makes many new types of video processing possible It allows animators and movie editors to view their videos more often thus shortening development time Because our version of parallel MPEG encoding is an integral part of RIVL it is extremely easy to use and how do we measure success If we are able to compress large video without becoming old and gray we will have succeeded and finally how are we progressing We are finished with the coding state of the project Currently we are working writing technical report for the project Hopefully we can pull the main ideas together better than we did earlier Some of things that could be done to make this project better are Make the worker process into daemon process Add in support for IP People Working on Optimal Parallel MPEG Encoder Faculty Brian Smith Students Scott Dawson William Lee Jeff Moore Visitors since April	other	cornell
639	 Server Date Monday GMT Tuesday GMT Homework Homework Handed out Tue Jan Due Tue Jan Upson This assignment must be done in groups of two Hand in one solution per group printed not manuscript You are as so often sitting on an Xterm and remotely logged into some random slow machine You wonder how fast this turtle really is As so often the system files only give cryptic model numbers So you decide to run few experiments yourself The main goal of this homework is to get you familiar with taking precise measurements Measure processor speed Write program that measures the instruction execution rate of your processor On SunOS use gettimeofday to take measurements Hints You probably want to write very tight loop You probably also want to count the instructions in the loop using the compiler disassembly You probably also want to make sure you time enough iterations to dwarf measurement overheads and few enough to avoid problems Run your benchmark on two different sparcstations and on one other interesting machine Hand in your program evidence that you are counting instructions correctly and the results in MIPS Total one page max Measure cache characteristics Let assume you want to run large simulations and therefore you are particularly interested in the memory hierarchy on the machines you found Write program that allows you to determine the following cache characteristics number of levels of cache size of each cache associativity of each cache and block size of each cache Hints do write program that prints the answers instead allocate large array use malloc and stomp all over it in various patterns Time how long it takes per array access again using many iterations Graph the results and draw conclusions Run your benchmark on two different sparcstations at least one of which should have two levels of cache Hand in your program one page of enscript max the and an explanation of the results one page of explanations max	other	cornell
640	 Server Date Sunday GMT Tuesday GMT The FUN Transformation System The FUN Transformation System demo Papers and Publications The Equational Logic Transformation System Liang CS Masters of Engineering Project CS MEng December Department of Computer Science Cornell University Ithaca New York Attribute Grammar Based Transformation Systems van den Berg Master Thesis Utrecht University The Netherlands June Rapid development of program transformation system with attribute grammars and dynamic transformations Vogt and Van den Berg and Freije Proceedings of the International Workshop on Attribute Grammars and their Applications Lecture Notes in Computer Science page September Paris France	other	cornell
641	 Server Date Monday GMT Sunday GMT Notes on moving to NT Notes on Moving the CSRVL to Windows NT Justin Voskuhl voskuhl Last Updated October CSRVL projects and Windows NT For number of CSRVL research projects supervised by Ramin Zabih will be moving to WindowsNT We are hopeful that this move will be supported by Microsoft About Windows NT What is Windows NT Windows NT is Microsoft highly portable Windows operating system Even with its radically different architecture Windows NT provides backward compatibility with Windows and POSIX applications even on processors Windows NT is designed to be as extensible as possible Borrowing from the design of Mach Windows NT consists of priviledged executive and set of servers called protected subsystems NT design is unique in that protected subsystems execute in user mode like applications do This structure allows protected subsystems to be modified or added without affecting the integrity of the executive In addition to protected subsystems NT provides modular executive that can be easily extended NT represents system resources as objects that can only be modified through APIs New system objects can be added without undermining existing objects NT supports drivers that can be changed while the system is running and NT can support new file systems devices networks or transport protocols simply by writing new driver RPC is built into NT so that an application can call remote services without regard to their location on the network New services can be added to any machine on the network and be made available immediately Windows NT is designed to be as portable as possible It is written primarily in with small portions written in The only parts that are written in assembler are those that must directly talk to the hardware and are carefully isolated from the rest of the system This means there are variety of CPUs that can run NT including Intel MIPS PowerPC and Alpha chips NT can run on systems with one or more processors Windows NT provides several machanisms to increase reliability NT responds predictably to error conditions even those caused by hardware failures Structured exception handling is used to catch software errors Whenever an abnormal event occurs exception handling code which exists throughout the system is automatically invoked in response to the condition ensuring no undetected error wreaks havoc on user programs or the system itself In addition NT implements new file system called NTFS which can recover from all kinds of disk errors including those in critical disk sectors It uses redundancy and transaction based scheme for storing data to ensure recoverability NT security measures are class government certified Finally Windows NT is designed to be fast Each component was written with an eye towards performance with each protected subsystem optimized to maximize the speed of frequently used system calls To increase speed of communication between protected subsystems Local Procedure Call facilities are provided as an integral part of the OS Finally networking is built into Windows NT to achieve the best possible performance In summary Windows NT is thoroughly modern highly compatible operating system for and beyond Mostly Taken from Section of Helen Custer Inside Windows NT Microsoft Press Why Windows NT The gap between the performance of the typical PC and the SPARC machines has grown smaller and smaller At the same time operating systems for the PC have grown more and more advanced There are number of reasons for moving to NT from current environment They include having the results of CSRVL work being immediately usable by the large and growing user base outside of Cornell Also basic hardware to run NT has higher ratio than many of the SPARC machines available Another advantage is using the same OS from our Pentium PCs all the way up to SMP RISC machines Moving to NT Notes on moving to NT There are number of issues involved in moving some of the research in the CSRVL to Windows NT There are both software and hardware hurdles we need to leap before researchers can do productive work under NT Note we do want to make anyone use NT who is more familiar with UNIX or has reasons for doing work in UNIX This will just be another option for doing work in the CSRVL Interoperability with the existing UNIX investment is important Hardware Right now the CSRVL is populated mostly with SPARC systems with few machines and PC clones Soon we have dual processor Micron Pentium system as well None of the SPARC systems will run NT and as far as aware wo run NT in the near future We will therefore need number of NT workstations which will probably be PC clones and also interested in system which may be Intel or RISC Microsoft maintains list of the SMP hardware NT will run on Software Microsoft is going to provide software to completely outfit ten NT machines initially We get to determine what complete means To this end put together list of software of interest to the CSRVL You can find descriptions of most of these products at the Microsoft web site Visual recently released to manufacturing at MS Windows NT Workstation Windows NT Resource Kit Visual Basic Pro Fortran PowerStation Office Pro Productivity Suite Subscription to MSDN Level Two for each researcher UNIX Interoperability tools emulator NFS software Projects to Move to NT The following are brief descriptions of projects that are ongoing in the CSRVL and could benefit from Windows NT Spatial Energy Histograms In many applications color histograms are used to compare images Their advantages are their efficiency and their insensitivity to small changes in camera viewpoint Their chief drawback is their lack of spatial information which can lead images with very different appearances to have similar histograms We describe method for comparing images that incorporates spatial information MPEG Browser and Scene Break Detector Until now we could view mpegs just like we could watch movies Unfortunately we were unable to take the advantage of digital format have not seen mpeg players allowing user to skip to arbitrary frame fast forward rewind etc Even more importantly the video was basically sequence of frames with no structure But it is obvious that video higher structure than frames we can partition video into shots scenes and larger chunks like movies tv shows etc We can also partition the video accoding to the content for example we might want to select segment of video in which particular actor appears provides an interface for browsing video User can play video stop at arbitrary point fast forward What is the advantage of MPEG Browse over other video players MPEG Browse adds very limited yet useful structure to the video it partitions the video into shots Based on these information the browser can skip to the next shot much like CD player can skip to the next song The scene break algorithm was developed by Ramin Zabih Justin Miller and Kevin Mai For more details about the algorithm see the web page ATM Camera Matt Welsh is designing realtime video source for the ATM Cluster which will allow machines on the cluster to capture and process images at high speeds The video source employs framegrabber and ATM interface card both over PCI am implementing kernel drivers for both cards as well as some form of Active Messages and for this machine The video source should be compatible with the Cornell IBM as well voskuhl	other	cornell
642	 Server Date Sunday GMT Monday GMT Bilth Gater and the Galactic Empire Episode The Space Rooster There is little pond on the Microsoft campus fondly termed Lake Bill by the employees Near the lake lived wild rooster and his mate They fed on the tidbits the employees gave them The rooster disappeared one day and it was later discovered that an unleashed dog had killed him There was big in the newsletter about this with people writing heartfelt eulogies to the gentle rooster This strip was my reaction to that Episode The First Day Episode The Rebel Threat Episode Flame On Episode Lord Gater Party Part Episode The Imperial Insignia Episode Lord Gater Party Part II Episode Lord Gater Party Part III	other	cornell
643	 Server Date Monday GMT Tuesday GMT General Information on the Cornell Computer Science Department General Information The Department The Department of Computer Science at Cornell University which was organized in is one of the oldest departments of its kind in the country It has faculty of approximately resident graduate students students and graduates about undergraduate majors each year The department is typically ranked as one of the top five in the country Cornell University is located in Ithaca New York city of about people in the heart of the Finger Lakes region Both Cornell and Ithaca offer wide range of cultural activities sports and outdoor activities with the pleasures of both city and country close at hand Academic Programs Doctorate Masters of Engineering Undergraduate Program During the academic year the department conferred in wide variety of areas of Computer Science The department admits about candidates each year typical program will take about five years to complete For more information on the program please send email to phd Program This is program designed to enhance the professional skills of computer scientists It provides flexible curriculum that includes six courses and design project student can specialize in number of areas including software development programming languages operating systems for networked environments robotics and computer vision scientific computing and artificial intelligence For more information on the program please visit the program home page or send email to meng You can browse the Web pages of past and proposed projects Undergraduate Programs The Computer Science department is in both the College of Arts and Sciences and the College of Engineering at Cornell University It offers both and degrees with major in Computer Science In the department graduated and To receive an information packet on applying to Cornell University you should call or write to Cornell University Admissions Thurston Ithaca NY For more information about the Undergraduate program at Cornell please visit the Undergraduate Program Home Page or send email to ugrad Contact List General Department Department of Computer Science Upson Hall Cornell University Ithaca NY Graduate Programs Graduate Office Department of Computer Science Upson Hall Cornell University Ithaca NY	other	cornell
644	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
645	 Server Date Sunday GMT Thursday GMT Incremental Compuation Incremental Compuation Incremental Evaluation Attribute Grammars Relational Calculus Lambda Calculus Functional Programs Derivation of Incremental Programs	other	cornell
646	 Date Mon Dec GMT Server Fri Mar GMT Lab CS Laboratory Transformations and Modeling Introduction This exercise introduces the processes of geometrically transforming an object in size orientation and location then combining objects to make complex scene There are several example programs given below to show you how to combine objects and animate them Based on these examples you will be asked to construct short animation Procedure First you may want to download several example files To do this click on each of the filenames shown below When the text window opens use the save as option to put the file in your own directory Name each file with the same name as shown below If you decide not to look at all of them you may load them in pairs of and The program reads data file You will need to change the path name in the Import module in the program to reflect the directory in which you copy The programs and also require the data file The first program is an example which shows how to scale rotate and translate an object Open the program and it control panel and execute it while changing the rotation translation and scaling of the simple object see Image The program also allows you to select whether the translate control transforms the object before the scaling and rotation or after them Note that as you rotate the object that positive angle of rotation corresponds to counterclockwise rotation if you are looking down the positive axis of rotation toward The object is defined to have the base of the arrows at so that the scale operation magnifies the objects but does not move the base Likewise the rotate operation which rotates around the origin leaves the base at the origin if translation is performed last Investigate the effects of changing the order of the rotate translate and scaling operations by using the operation order control and by modifying the program module order Image The second program is an example of hierarchically modelled animated object see Image The object is windmill constructed from propellor and tower The propellor in turn is make up of two blades hub and shaft Open the sequencer and run the program The QuadricSurface module gererates spheres cylinders and other shapes The shape is set by an integer The shape list may be found by clicking the QuadricSurface module then clicking on the Description button The import module reads the vertex list of cube from Edit the file to see what else is there Rotation of the whole tower is controlled by compute module with conditional in it to delay rotation Image The third example program combines polyhedra to make an interesting object see Image Open the control panel and run the program using the sequencer Note how multiple copies of objects are positioned Image Other Lab demonstration nets see Image see Image Image Image Assignment Using the three example programs as background construct one of the objects described below Use the various modules in the macros category which produce shapes such as NewQuadricSurface Also use the shapes defined in the file Animate the resulting objects as specified The animation should be to frames in length small Image window size perhaps will speed execution Construct one of helicopter with fuselage tail skids main rotor and tail rotor The tail rotor should rotate twice as fast as the main rotor The helicopter should sit on the ground until the blades are spinning then fly straight up propellor airplane on which the propellors rotate at the same rate The plane should have wings tail engines and cockpit canopy The plane should sit on the ground until the blades are spinning then roll forward and up flowering plant with stem leaves and flower The plant should grow and bloom The flower should be constructed from several petals There must be at least two leaves on the plant robot with head body arm and at least two wheels The robot must roll forward stop grasp an object and move it The head must have eyes or cameras which move together bird landing on tree The bird must have wings head eyes beak and feet The wings must flap and the feet must move as the bird lands Some examples from Some examples from Be prepared to demo your animation during section for maximum of minutes You will be graded on the correctness of the animation and the readability of the program You may want to MPEG compress your animation for rapid playback or if you wish to submit it to the course web pages You must document your code Layout small groups of modules which fit on one screen and connect them to other groups with transmitters You should use macros and comments in the Notation field of each module so that you and the grader can understand the program Control panels if any should be well organized labeled and with the appropriate numeric ranges The Lab grading guide will be filled out by consultant during section to evaluate your work Back to Main Page Go to Lab Last modified Land Copyright Statement	other	cornell
647	 Server Date Sunday GMT Sunday GMT Narcissism Central Attention This document contains frames and is meant to be viewed using browser which supports frames read Netscape If you want it GET IT	other	cornell
648	 Server Date Monday GMT Thursday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
649	 Date Mon Dec GMT Server Mon Apr GMT Lab CS Laboratory Design Project Introduction In this exercise you will use all of the techniques you have learned this semester to produce an animated scene The scene may include heirarchically modeled objects lights and camera control Assignment Produce scene which has several objects which move There should be at least one example of rotory or periodic motion and at least one example of linear motion You may want to mix animation with kinematic animation Some of the objects should have hierarchical structure and you should demonstrate use of polyhedra and parametric surfaces Lighting should be appropriate to your scene Surface properties should be controlled to simulate appropriate materials CA or reaction based texture maps may be appropriate for some objects The animation must start with title frame which includes title author and copyright notice The following program is one example of title page generator The the DX fonts look too thin in MPEG compressed animations or on videotape We have defined some better fonts To use them on the HP systems add the line below to your file setenv DXFONTS Then source your file To use them on the IBM systems add the line below to your file setenv DXFONTS Then source your file The fonts which are available once you modify the file in DX are named FutMath DutBld FutHvy LatNov SwiBld and SwiBlk FutMath looks good in MPEG compressed files The following are possible ideas but you are not limited to these tree growing robot spacecraft battle city street castle with waving flags and gate over moat sailboat on Cayuga Lake at sunset human or animal Be prepared to demo your animation in section You must hand in one page written description of your animation including both author names the title and brief summary of the plot and the techniques you used This document must be printed from Web page with no links that you design To demonstrate your animation you must mpeg compress it Directions for compression are here The mpeg file may not be longer than You may need to trade off frame size animation length and mpeg compression quality to achieve maximum file size of Grading will be based on several factors Amount of time spent on the project This is three week project implying approximately hours of lab work split between two people Variety of techniques used Did you exploit the information from the earlier exercises Clarity of the program You should be able to explain your program You should use macros and comments in the Notation field of each module so that you and the grader can understand the program Control panels if any should be well organized labeled and with the appropriate numeric ranges Be sure to see past year Lab animation results Back to Main Page Last modified Land Copyright Statement	other	cornell
650	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
651	 Server Date Sunday GMT Saturday GMT CS Course Staff Course staff Please induce you email address in your signature when you send email using the Web Instructor Eva Tardos Upson Hall email eva Teaching Assistants Heng Upson email heng Frederick Smith Upson Hall email fms Support Staff Linda Mardel Upson email mardel Office Hours Fall Office Hours DayTimeRoomInstructor Heng UpsonEva Tardos UpsonEva Tardos UpsonFred Smith Heng In addition you can schedule office hours by appoitment Send email to eva or to heng for an appointment	other	cornell
652	 Server Date Sunday GMT Sunday GMT Ooi Name Ooi Pronounced Office Upson Hall Office Hour am noon Office Tel Add weitsang TA for Advance Database System Taking Course My Home Page My Page	other	cornell
653	 Cornell Vision and Robotics Lab Some People in the Cornell Vision and Robotics Lab Here are some of the people working in the lab Jim Jennings Daniela Rus and Bruce Donald Click here to see Jim Daniela and Bruce in an altered state of consciousness Amy Briggs Russell Brown Kevin Newman Greg Whelan Camel Tommy Rosemary and Lily	other	cornell
654	 Server Date Sunday GMT Friday GMT Program Solution Program Solution decided to implement my bigint as define DIGITS typedef struct unsigned short array DIGITS int digits bigint will keep the least significant digit in index and the most significant digit in The implementation of my bigint library The Sterling approximation code Many programs saw used two loops to determine This was very inefficient you only need one loop	other	cornell
655	 Server Date Sunday GMT Monday GMT Project Report Kernel Endpoint HIGH PERFORMANCE COMPUTER ARCHITECTURE Final Project Kernel Endpoint for March May Ankit Patel and Gerry Toll apatel gtoll Project Description Kernel Endpoint for One drawback of is that it allow existing applications and kernel facilities to easily share the underlying network hardware with based applications There are at least two ways that this problem can be solved One idea is to implement the required services through library of user level functions that use as the transport mechanism Another approach is to actually construct an endpoint inside of the kernel and allow it to access the network hardware via the device driver We decided on the latter because in the long run it should provide more flexibility than the implementation Once the kernel endpoint is in place any type of data can be transmitted across the network regardless of protocol Additionally we may even be able to communicate with hosts if careful about using compatible header formats Our idea is to take advantage of the virtual network interface provided by the driver and to treat it as real network card inside of the kernel While any communication using the kernel endpoint will no doubt be slower than endpoints the idea is to allow many applications to multiplex on one kernel endpoint and for existing apps to at least idea is not to implement IP or other protocols but essentially to replace the kernel functions for sending data to an ATM or Ethernet card with routines which to the kernel endpoint Project milestones March Project Proposal We have met with Matt Welsh to get better idea of what this project will involve We believe that the best platform for this project will be on PC running Linux using Fast Ethernet hardware Ideally the abstraction provided by should allow our code to also work across the ATM hardware but whether this proves to be true remains to be seen and is beyond the scope of this project If time permits this would be natural extension to our work It is our understanding that the basic idea of this project is to provide the ability for the kernel to access the interface via the already written driver We will therefore be writing code to bridge the gap between IP and the device driver Our understanding through diagrams look at the Network Architectures April Checkpoint Meeting Setup of hardware Two pentium PCs are interconnected through Fast Ethernet using null modem Setup of software Linux as well as software is loaded on the machines the Kernel code has been compiled The pingpong application has been tested to run properly however sometimes CRC errors are received which are possibly due to absence of Fast Ethernet Hub and also the expected latency is not obtained With this basic setup we have divided the project into two basic parts so that each of us can concentrate on one of them implementation of devtulip and libunet driver that is implemented using Major issues decided to be solved Issue To create endpoint driver that can accept IP ICMP etc datagrams and passes them to the driver which then handles their transmission and receipt Issue To make one of the endpoints behave as the this requires changes to be made in the code to force the to the kernel issue requires thorough understanding of the architecture and driver code Issue To solve the problem of does the receive the packets from and hand it to the IP at the receiving end The kernel code needs to be scanned to find the right place for this changes Also an efficient method other needs to be implemented Issue requires that channel be created between two communicating hosts before they can exchange data We need to devise an efficient mechanism for activating and deactivating channels as needed Additionally we need to be able to map these channels to their corresponding IP addresses On large network we ca maintain channel per host but the overhead of activating channel is probably too substantial for us to activate and deactivate once for every transmitted packet Solutions for the above issues April Getting into the code hackers Here is the kernel code and the code go man hack it Issue The kernel uses generic device structure to represent all network devices We can construct new device struct and trick the kernel into believing that it talking to real network card We need large portion of the functionality provided by libunet but since we in the kernel we ca use it in its current form We have to rewrite what we need so that it will work inside of the kernel and add it to the module In order to get at all of the stuff we need and will have to be made global inside the kernel Issue April process while in kernel mode can still access memory through macros and is used if write protection is allowed in kernel mode for checking if the area is safe to write The works only in the kernel space and hence the above functions are not called while creating and deleting endpoints and channels Issue April uses polling at the receiving end From we need to pick up the packets and pass it on to the IP April We considered polling as time wasting and signals are not useful in kernels The IPC methods are useful only for communication between two processes the problem still remains April So we tried implementing an upcall function to pass the buffer and April However it turned out that mechanism is also not required Simply upcall when packet is received Almost no time waste Efficiency Increase April But stuck on problem again devtulip uses its own device structure Oh have to look through the higher level code no we think that the layers above IP need not worry about network devices so no more problems April Hey there can still be further increase in efficiency Can we pick up the incoming packets directly from the into the IP instead of passing them to the endpoints bypass the endpoint and handover the data directly to the IP So we consulted Matt Welsh who wishes to use our modified code later on for further extensions of Sure we can But we need our code to be portable for the ATM plus later on Matt plans to provide an interface which would let user processes multiplex via the kernel endpoint without the IP so its more flexible if the interface looks just like Conclusion use the endpoint Thus the only extra overhead involved is of copying the buffer once Issue Hey we need to leave something for the next class to do May Poster Presentation Project Status Well the semester is over with so whether we done or not the project is over with Unfortunately we ran into too many difficulties and we never finished The majority of the code is written and all of the major issues seem to be resolved Expected Overhead and Future Extensions Thanks lot to our Instructor Thorsten von Eicken for providing us with the opportunity and hardware to work on this project and Matt Welsh for maintaining his patience while explaining and the driver internals as well as providing us with guidance throughout this project Additional thanks go out to Alan Cox Michael Johnson and the mailing list for their assistance in solving our Linux namei problems Related Links For information on Home Page For information on Linux Linux Documentation Project All information related to is maintained at Ohio State in their online list of Internet RFC	other	cornell
656	 Server Date Sunday GMT Friday GMT KREC Class of hyperlinks KREC Class Of This page is maintained by Deepak Balakrishna If you have any comments or suggestions or if you belong to the Class of and you want your name added write to gbd If you have link to your own home page then send the URL over too Click on any of them and send mail directly Deepak GB His home page Krishna Chaitanya KC His home page Arun Kumar Shetty Deepak Shenoy Shenoy Vinod BC His Home Page Gayatri Raghavendra Gaga Harikiran Ganti Kuldeep Upadhyay KD Rajesh Narayanan Nadu Srinivas Nivarty Pondy Ravuri Rakesh His home page Anup Pai Santosh Wombu Himanshu Khurana khurana Ashok Karanth Ajja Prashanth Patti Karthik Shankarmani Mani Prashant Aprameyan Ravindra Rajnish Shukla Sudarshan suddi Nitesh Trikha Fartu Jasdeep Kaler Naveen Panchagatti panchi Sunil Shanbagh Sharath Chandra Keshava Pithi Minal Santosh Prahlad Athreya Ravi Nayak Vinay Chandra Father Simha Jayant Prabhu His Home Page Upendra Mody Anil Rai Chirinjeev Singh Cherry Somesh Nagthan Myna Raman Rachan Rao Shankey Yashawantha Rod Raghuraj Rao Sundar Sundari His home Page Also visit the KREC home page maintained by Arun Dattaram Sharma	other	cornell
657	 Server Date Sunday GMT Tuesday GMT Internet and WWW Advanced materials on Internet and WWW The Web Developer Virtual Library Advanced Topics HTML CGI HTTP etc The Webmaster Encyclopedia More on HTTP	other	cornell
658	 Date Mon Dec GMT Server Wed Feb GMT dynamics Using forces to animate objects Introduction There are several good reasons why you may want to compute motion of objects based on forces rather than attempt kinematic description of object motion It is often easier to write an expression for the forces on an object differential equation than it is to directly describe the motion Dynamic systems based on forces evolve automatically so than the motion is physically correct given the correct equations This automatic behavior relieves the animator of attention to lots of boring detail For chaotic systems it is impossible to write kinematic description Background The basis of many particle systems is description of the acceleration of the particles If the accelerations are given then the system is called second order because two integrations must be done to get the positions As an example consider mass on the end of spring sliding on frictionless horizontal table the force on the mass is given by where is the force is the spring constant and is the length of the spring The negative sign appears because the force from spring pulls in the opposite direction to the spring extension Since where is the acceleration Now given the acceleration and if we know an initial velocity and position we can find the position of the mass at any later time In the case of this linear spring we can integrate the acceleration directly to find that the position is sinusoidal function of time The constant will determine the frequency of the sinusoidal function while the initial position and velocity will determine the amplitude and phase The position is given by In this simple case the solution is available so one could code kinematic solution that is just plug time into the sin function but notice that the description of the system in differential form is more compact and straightforward Also if we changed the force to more realistic stiff spring model such as we could not directly integrate it but would be forced to use numerical methods The next section will consider how to perform the integration Numerical integration Solving dynamic system means figuring out how to move the system forward in time from some set of initial conditions to compute the positions as function of time For instance you might want of trace the trajectory of ball after it is fired from cannon In general direct analytical solutions of the differential equations governing system are hard or impossible We will outline some techniques for solving system by simple but perhaps not optimal numerical methods As disclaimer it is difficult to construct general numerical schemes that work for various physical systems What follows is specific approach which works for some systems Consider it the barest introduction to the topic of numerical introduction Much more detail may be obtained in or or many other books We will consider three specific second order systems gravitation Water waves Billards impact system For each system we will first introduce the physics the force law then the scheme to integrate the force law to produce the positions We will start with integration scheme which will be used only for intrducing the notion of numerical integration While useful to look at it should almost never be used for actual work The Euler integration algorithm Let me state again that this algorithm while easy to understand is so inefficient that it should only be used whem programming effort dominates throughput We want to start with differential equation and show how to integrate in numerically Start with the differential equation We want to solve this equation by stepping time discretely forward in small steps small still needs to be defined One discrete approximation of this equation is where the and refer to two time steps sufficiently close together that the differences approximate the derivitive Rearranging this equation yields which gives explicit form for stepping the system from time to time This form is thus way to step dynamic system forward in time given an initial state The inefficiency of this method occurs because of the assumption of constant across the entire time step To be accurate the time step has to be very short compared to the natural time constants of the system The Verlet integration algorithm much better alogrithm can be derived by averaging slopes across the small time interval of integration One such formulation is called the velocity form of the Verlet algorithm This algorithm is most useful for second order systems where the force on an object is specified and the position is desired as function of time Since the accelerations are specified one integration must be done to calculate the velocity and second done to calculate the position The Verlet scheme is first updates the position then use the old and new position information to update the velocity Where are the accelerations calculated from force law describing the system and which are usually function of position Note that an is calculated from the calculation for xn Evaluating both of these equations advances the system one time step To start the solution velocity and position have to be known at Choosing delta requires some care Generally you can start with time step which is around of the fastest in the system The two Verlet equations can be vector equations if the motion is or dimensional Now we are ready to consider some specific physical systems Gravitation and the problem The accleration due to gravitating mass is where is strength contant is the mass of the object pulling on you and is the distance between you and Since and are actually vectors we must derive form of this equation which is useful in or dimensions We will use here so we need equations for the and components of the acceleration Assuming body one is located at and body two is located at and that we want the acceleration of body one Where theta is the angle measured from the of the vector pointing toward body one from body two Converting to Cartesian form the acceleration of body one is where the vectors The calculation procedure for each time step is to compute the acceleration based on the positions at time new set of positions using the Verlet method the acceleration at time based on the newly computed positions new velocity from the Verlet method using the acclerations at times and For the gravitational animation given at the beginning of this page three masses were simulated The accleration of each mass was determined as the vector sum of the accelerations caused by each of the other two bodies Water Waves The water wave solver presented here is based on the derivation in Kass and Miller for the case of shallow water low amplitude waves The form of the resulting equation of motion for the waves looks like the classical linear wave equation with propagation velocity proportional to the depth of the water where is the height of the water surface and is the depth that is where is the vertical position of the containing vessel or ocean bottom at The costant is poroportional to the force of gravity This partial differential equation can be discretized in many ways We will use method which is stable enough to be acceptable for computer graphics First note that the partial with respect to time is the acceleration of small surface element of water so that if the right side of the equation can be put in discrete form we can apply the Verlet method to grid of bodies each representing small chunk of water To solve this equation numerically we need to discretize it both in space on two dimensional grid and in time The discrete spatial approximation is that the second derivitives at time are were and are the grid indices in the and directions and is the time index Note that at the edges of the array the discrete partial derivitives depend on values outside the array These boundary conditions need to be specified for solution One easy boundary condition corresponding to no transport across the coundary is to copy the value at the edge of the array whenever value outside the array is needed It seems that the solution is more stable if the minimum depth of the water is limited to about of the average value rather than letting it go to zero So the depth at time is given by To get the surface motion first assign an initial height and vertical velocity to each grid point then at each time step compute the acceleration based on the water heights at time new set of positions using the Verlet method for each the acceleration at time based on the newly computed heights new velocity from the Verlet method for each Ensure conservation of volume of the total volume by adjusting the average water height to constant That is sum all the heights over the whole grid then correct the sum to equal the initial sum by adding small increment to each grid location These steps are repeated to generate moving waves Disclaimer While this integration method seems to give visually reasonable results it should not be used for analytical simulations without careful validation The wave equation is notoriously hard to integrate using explicit techniques like the one described here Billards billards hard ball system is different than the other two systems just described because the forces between balls are zero until they touch and become very large if the balls try to pass through each other This means that there is large impulsive force just when the balls meet and at no other times The Verlet integration scheme will fail badly on this system because the accelerations are large for short time and thus not smooth enough to average What we will do to step the billards system forward in time is to calculate the total change in velocity from collision without worrying exactly how forces change the velocity The method described here is less exact version of that described in The method described in the paper steps time at uneven intervals and is thus unsuitable for animation My modification steps time uniformly at the expense of exact collision dynamics The change in velocity during impact can be derived for frictionless balls of equal mass by noting that the the impact force must act in direction parallel to the line connecting the centers of the two impacting balls The change in velocity must be parallel to the connecting line also with the velocity component parallel to the line having its sign reversed by the collision and the velocity component perpendicular to the line unchanged Projecting the initial velocity onto the line connecting the centers negating the result and resolving it back into and velocity components gives the velocity change If and are the indices of the colliding balls define then delta for ball is given by the following where the term represents the projection of the velocity onto the line and the other term converts the projection back to coordinates The calculation procedure for each time step is to compute the delta based on the positions of the balls new set of positions using if walls are present detect collisions and modify velocities The time step needs to be small enough so that the balls do not penetrate each other too much during one time step References An Introduction to Computer Simulation Methods Part by Harvey Gould and Jan Tobochnik Rapid Stable Fluid dynamics for Computer Graphics by Micheal Kass and Gavin Miller Computer Graphics Vol Aug pp Numerical Recipes by William Press Saul Teukolsky William Vetterling and Brian Flannery Cambrige edition Studies in Molecular Dynamics General Method by Alder and Wainwright Journal of Chemical Physics Vol Aug pp Physics for students of science and engineering Part by Robert Resnick and David Halliday Wiley Comments about Theory Center online documents are welcome and may be sent to Last modified Land Copyright Statement	other	cornell
659	 Server Date Sunday GMT Thursday GMT JPEG Encoding Using Perceptual Quality Multimedia SystemsJPEG Encoding using Perceptual Quality Nobuhiko Mukai mukai Lucy Wu yuwu Mikio Sakurai msakurai Abstract The key point of image compression is to achieve low bit rate in the digital representation of an input image or video signal with minimum perceived loss of picture quality Over the past several years there have been many attempts to incorporate perceptual masking models into image compression system Based on the we developed two new models Compared to JPEG default setting both of our models significantly lower the and keep the almost same image quality Introduction The key point of image compression is to achieve low bit rate in the digital representation of an input image or video signal with minimum perceived loss of picture quality Since the ultimate criterion of quality is judged or measured by the human receiver it is important that the compression or coding algorithm minimizes perceptually meaningful measures of signal distortion JPEG default quantization tables QT are based on psychovisual thresholding and are derived empirically But because only one QT is available for every image the default QT is image independent and can not be used to achieve the optimized compression result for each specific image Some perceptual models have been developed to calculate the image dependent QT But because every block in the image contributes different properties to the total image one QT that is best for the whole image is not always best for every block If we can quantize every block using different QT specifically suitable for that block we can get the most optimized compression result for every block Because JPEG allows only one QT for each image is proposed by Johnston and Safranek For every block one specific masking threshold is calculated and used to zero out the perceptual irrelevant coefficients while the other coefficients passed unchanged Then one base QT will be finally used to quantize for all the remaining coefficients in each block Despite the benefits of simple implementation the model has the disadvantage of computing single masking elevation for each input block This means that there is no information about the distribution of energy within the problem can be overcome by applying the contrast masking model for each DCT coefficient The computation for is somewhat complex This led us to design second one based on the luminance ratio of block to total image to replace the model This second model has the same single masking elevation problem but the calculation is more simple Our test result shows compared to the JPEG default setting both of our models reduced the bit rate with little or no perceived loss in quality The rest of this paper is organized as follows Section describes algorithms to prequantize JPEG image Section describes two perceptual models designed by us Section describes the detailed evaluation of our models and section reviews related work and future extensions Prequantization Quantization The Baseline JPEG encoder consists of three major components Forward DCT Quantization and Entropy Coding The step of the quantization is to take the raw output of the DCT and quantize the coefficients by dividing it coefficient by coefficient by QT and rounding to the nearest integer The purpose of quantization is to achieve compression by representing DCT coefficients with no greater precision than is necessary to achieve the desired image quality In other words the goal of this processing step is to discard information which is not visually significant Perceptual Model Many studies have attempted to derive computational model of this visual masking level For each block in the input image the model attempts to determine to what degree the features present in that block inhibit the visual system from the distortion introduced by the process From these points it is possible to determine masking threshold for each DCT coefficient model Johnston and Safranek have developed framework for computing locally adaptive masking model based on an engineering framework They assume that the total masking level for any block of the input can be represented as base masking level and other multiplicative elevation factors that represent the contribution of input dependent properties of the visual system to the total mask This model may be expressed as Global Local where is the masking level for frequency of the input block Global is the base masking level which depends only on global properties and Local handles the image specific local variation in the masking threshold The adaptation is derived as function of the block standard deviation using the following formula Figure model This applies to all of the AC coefficients The masking elevation for the DC coefficient is always set to unity This model has the advantage of simple implementation and works well in practice It has the disadvantage of computing single masking elevation for each input block Figure illustrates the structure of such an encoder The forward transformation is identical to the one in baseline JPEG At this point the DCT coefficients are input to the perceptual model which generates the data dependent quantization table for that block This table and the raw DCT coefficients are now input to The purpose of this module is to zero out the coefficients that have magnitude less than the corresponding entry in the quantization table for that block and pass the other coefficients through unchanged Finally these prequantized coefficients are quantized and entropy coded as in standard JPEG In the dequantization step only the base QT is used Figure structure of an encoder with prequantization Our Models Our models intends to take advantage of the above prequantization method The model uses the perceptual model but does not consider the distribution of the energy within the block when calculating the masking threshold To overcome this problem we employ visual masking that has been widely used in vision models based on work by Legge and Foley Given DCT coefficient and luminance threshold the masked threshold is MAX is constant that lies between and When no masking occurs and when we have Weber Law behavior For our experiment an empirical value of was used In our implementation to calculate the masking threshold we did not calculate the luminance threshold by using Peterson model as suggested by Watson In addition as indicated in JPEG standard JPEG default quantization tables are based on psychovisual thresholding and are derived empirically If it is divided by the almost indistinguishable image can be reconstructed That means the default QT can be treated as general luminance threshold So we replaced the in equation by JPEG default QT value As Global masking level we used default JPEG QT The masking threshold computation for is rather complex This led us to design the second model based on the luminance ratio of block to total image This model has the same single masking elevation problem but the calculation is more simple Basically follows the masking model equation But for the calculation of multiplicative elevation factors Local we use the luminance ratio of each block to the total image Well known Weber Law is expressed as df constant is luminance and df is the just noticeable difference This equation means our perception is sensitive to luminance contrast rather than the absolute luminance values themselves At given luminance if the block luminance is only little bit differ from luminance then the block is less visible and we can drop lot of perceptually unimportant information The adaptation is derived as function of the ratio of the block average luminance to the luminance average of the total image using the following formula Figure model masking model based on luminance ratio Maximum threshold elevation and Minimum Threshold Minimum luminance ratio are the parameters we need to experiment for As Global masking level we used default JPEG QT Image Quality and Bitrate We compared the bitrate and Image quality of our and with those of the Baseline JPEG For first we need to optimize the parameter We worked on several images and found that these two parameters are not strongly sensitive to SNR To the different value of luminance ratio parameter SNR is almost elevation parameter has weak relation with SNR and if it gets bigger SNR becomes worse This feature is common to all images Table shows result we got on image Lena Table Parameter dependence of SNR For the following experiment we choose the preferable value and for each parameter of Five images were used in this experiment photo of human face Lena flower scene flowers photo of animal face baboon two photo of airplane and Pitts Bitrate is calculated after compressing the image file using the pack huffman coding program For the evaluation of the image quality we used two evaluation method The first is SNR signal to noise ratio In order to provide further insight into the subjective quality of the models we used DCON metric This algorithm takes as input two images reference and test compare the difference of luminance pixel by pixel The formula is as follows DCON sum This method is simple but very competitive with other complicated human eye model metric Table summarize the results of these experiments Table Image quality SNR DCON vs Bitrate Both our and compress better than the Baseline JPEG with almost no perceptual loss in quality Figure shows one example flowers of output image of our models in comparison with original image and that of Baseline JPEG original image Baseline JPEG model model Figure sample image comparison Related work and Conclusions There have been many attempts to incorporate perceptual masking model into image compression systems model and Watson model are perhaps the most well known perceptual model model has investigated locally optimized prequantization table Watson model has investigated image dependent masking model which incorporates not only global conditions but also accounts for local contrast masking Klein of optometry school has reported techniques for improving the quality of JPEG with high compression rate in viewpoint of vision community He suggests that with improved human vision models the quantization step could be made more effective by considering effects such as mean luminance color bandpass filters in frequency and orientation contrast masking and human contrast sensitivity The primary contribution of our work is that it details prequantization algorithms that compress images at high compression rate with minimal artifact Our future work will include extending this work to include other human eye related factors such as frequency and orientation References Johnston and Safranek Perceptually Tuned Image Coder With Image Dependent Quantization and Data Compression Proc ICASSP Glasgow Scotland May pp and Contrast masking in human vision Journal of the Optical Society of America and DCT quantization for color image compression SPIE Human Vision Visual Processing and Digital Display III Watson DCT quantization matrices visually optimized for individual images SPIE Human Vision Visual Processing and Digital Display IV Vol Daniel Fuhrmann John Baro and Jerome Cox Experimental evaluation of psychophysical distortion metrics for images SPIE Human Vision Visual Processing and Digital Display The visible difference predictor an algorithm for the assessment of image fidelity SPIE Human Vision Visual Processing and Digital Display III and The effects of visual fidelity criterion on the encoding of images IEEE Transaction on Information Theory Stanley Klein Amnon Silverstein and Thom Carney Relevance of human vision to compression SPIE Human Vision Visual Processing and Digital Display III postscript file File last modified December	other	cornell
660	 Server Date Sunday GMT Monday GMT Summary of Nuprl Theories Summary of Theories Each link below leads to formatted presentation of Nuprl theory description of the organization of these presentations and of the meaning of the triples after each link name can be found here Display forms for primitive terms of Abstractions for correspondence Parenthesization control definitions and theorems predicate Rank induction lemmas and tactics Integer inequalities subtypes and induction lemmas for subtypes Definitions theorems and tactics for the boolean type and expressions Polymorphic identity and composition functions Lemmas covering properties suchas injectivity and surjectivity Defines mod floor max and min functions over the integers Lemmas concern basic properties of arithmetic functions over integers and induction principles Properties of order and equivalence relations and of algebraic functions commutativity associativity Family of classes for types with computable equality and inequality relations Family of classes for monoids and groups Summations with indices from integer subranges Exponential functions Introduces the binary relations on lists is permutation of is permutation of up to and is equivalent up to Introduces variety of standard functions that assume that list elements come from type or monoid with decidable equality Family of classes for rings integral domains and fields Ideals and quotient rings Sums and products mset Finite multisets and finite sets Summation with indices drawn from multisets Defines ADT for free abelian monoids and demonstrates an instance of this ADT using multisets Divisibility theory for monoids with cancellation Develops theorems characterizing when factorizations are unique and derives from these the fundamental theorem of arithmetic Last modified February Paul Jackson jackson	other	cornell
661	 Server Date Monday GMT Thursday GMT Zeno People The Few The Proud the really really cool Faculty Brian Smith PHD Students Soam Acharya Sugata Mukhopadhyay Jonathan Swartz Ioi Lam Tibor MEng Students Scott Dawson David Koster Will Lee Jeff Moore Jody Shapiro Eric Shim Ankit Patel Undergraduate Students Alex Castro Leong Kian Fai David Koster Mike Perham Eric Scharff Sherrie Wu	other	cornell
662	 Some Papers With Geometric Flavor Some Papers With Geometric Flavor publisher CORNELLCS series any number any author Donald title any abstract any CORNELLCS Simplified Voronoi Diagrams John Canny and Bruce Donald CORNELLCS The Complexity of Planar Compliant Motion Planning Under Uncertainty Bruce Donald CORNELLCS Planning Error Detection and Recovery Strategies Bruce Donald CORNELLCS Geometric Approach to Error Detection and Recovery for Robot Motion Planning With Uncertainty Bruce Donald CORNELLCS On the Complexity of Kinodynamic Planning John Canny Bruce Donald John Reif and Patrick Xavier CORNELLCS Provably Good Approximation Algorithm for Trajectory Planning Bruce Donald and Patrick Xavier CORNELLCS Planning and Executing Robot Assembly Strategies in the Presence of Uncertainty Bruce Donald CORNELLCS On Computing the Homology Type of Triangulation Bruce Randall Donald and David Renpang Chang CORNELLCS Provably Good Approximation Algorithms for Optimal Kinodynamic Planning for Cartesian Robots and Open Chain Manipulators Bruce Donald and Pat Xavier CORNELLCS Robot Motion Planning Using Rasterizing Computer Graphics Hardware Jed Lengyel Mark Reichert Bruce Donald and Donald Greenberg CORNELLCS Mathematical Questions in Robotics Roger Brockett John Ballieul Bruce Donald Richard Murray Madhusudan Raghavan and Shankar Sastry CORNELLCS Sensor Interpretation and Planning Using Perceptual Equivalence Classes Bruce Donald and Jim Jennings CORNELLCS Rational Rotation Method for Robust Geometric Algorithms Extended Abstract John Canny Bruce Donald and Gene Ressler CORNELLCS The EIGHT Manual System for Geometric Modelling and Graphics on the Lisp Bruce Donald CORNELLCS The Motion of Planar Rigid Bodies in Contact With Applications to Automatic Fastening Bruce Donald and Dinesh Pai CORNELLCS On Information Invariants in Robotics Bruce Randall Donald Some other papers are listed here More papers are avalable through the Cornell CS TR server	other	cornell
663	 Server Date Sunday GMT Tuesday GMT Slide Transitions and Special Effects for Rivl by Jose Luis Fernandez Valerie Ohm Amith Yamasani Next	other	cornell
664	 Server Date Monday GMT Friday GMT Document Listing NCSTRL Documentation Documents to Peruse For more information about NCSTRL Who and what is NCSTRL anyway How do participate in NCSTRL like to know more about the handle service which is used for document naming in NCSTRL Installing and maintaining an site sites run Dienst server which manages their document collection allows searches on it and provides user interface gateway to the entire NCSTRL collection How do download and install the Dienst software Once am up and running how do keep my document database and Dienst server running smoothly How do find out and install new releases When you register your site with NCSTRL you will be added to the NCSTRL mailing list New release announcements will be sent to this list Check out the release notes for history and status of current Dienst releases Check out the releases directory for detailed diff between releases Read the tips for upgrading to new release Installing and maintaining an site sites maintain an FTP archive of their documents and bibliograhic files Dienst central indexing server collects the bibliographic files and allows searching over them How do participate and download the software to become site Using NCSTRL like some more details on searching for documents More technical information An overview of the NCSTRL architecture An article about NCSTRL from Magazine The Dienst protocol upon which this service is based See also the user interface methods The original Dienst technical report Another Dienst technical report describing the Dienst architecture technical report about WATERS the technical foundation for Related Sources of CS Material on the Internet Check this out for other sources of CS material on the Internet Acknowledgements This work was supported in part by the Advanced Research Projects Agency under Grant No with the Corporation for National Research Initiatives CNRI by the National Science Foundation under Grant No and by Xerox Corporation Its content does not necessarily reflect the position or the policy of the Government or CNRI and no official endorsement should be inferred Return to NCSTRL home page NCSTRL Documentation Any comments or questions Contact us at help	other	cornell
665	 Server Date Sunday GMT Verification CAV Verification CAV FLoC and CAV home pages including technical programs and registration information	other	cornell
666	 Server Date Sunday GMT Thursday GMT project report draft User version Report version	other	cornell
667	 Server Date Sunday GMT Saturday GMT Amith Yamasani Bookmarks Amith Yamasani Bookmarks Yama Den Local Yama Den Home Pages Satyaprasad Devireddy Home Page Bruce Land Course Pages Home Page Lab Main Page Yama Den ComputerGraphics DatabaseSystems Multimedia CS Home Page VLSI Cornell Department of Computer Science Yahoo HTML Beginner Guide to HTML Executing Shell Scripts Inside Mosaic An Information Provider Guide To HTML How to write HTML files HTML Quick Reference Changing Your Home Page NewsGroups News Graphics CAVE User Guide OpenGL WWW Center MPEG Movie Archive Daniel Icon Archive Movie Studio MAIN The WWW Graphics Page Fave Links Silicon Graphics Silicon Surf The Web Virtual Library Games and Recreation Star Wars Home Page at UPENN Organizations Quantum Corporation WWW Server Microsoft Corporation Server Job sites CareerMosaic Page Search Jobs Online Career Center Best Bets in Business Career Taxi Home Page Welcome to careerWEB Interactive Employment Network The Advisor Vol No TOC The Advisor Home Page NCSA Mosaic for Documentation Motif The Window System Motif home page Languages Annotations Table of contents for FAQ on Design in References The Programming Language for and OOP The Bookpool Information Programming Languages Resources OpenGL at IBM OpenGL WWW Center Widget Basics Catalog of compilers VHDL TCL WWW Info Music Music FTP Jukebox FTP archive index search form Music FTP Hoyts Movie Schedule Pyramid Mall	other	cornell
668	 Date Sun Dec GMT Server Wed Nov GMT CTC Advanced Computing Research Institute CORNELL UNIVERSITY Advanced Computing Research Institute To learn about the Advanced Computing Research Institute the ACRI click here	other	cornell
669	 Server Date Sunday GMT Monday GMT Parallel CM RIVL Parallel CM RIVL Step Towards Multimedia Processing Jonathan Barber barber Sugata Mukhopadhyay sugata Final Project Professor Thorsten von Eicken Department of Computer Science Cornell University Table of Contents Abstract Introduction RIVL and the Generic Parallel Paradigm The RIVL Graph Parallelizing RIVL Continuous Media Parallel RIVL Implementations Shared Memory Implementation Networked Implementation Implementation Caveats Performance Results Extensions and Robustness Conclusions References Go Back Abstract Any form of multimedia processing is typically computationally expensive An even harder problem is performing some form of multimedia processing on multiple continuous streams of data In such paradigm each frame in sequence of images incurs very large computational expense An obvious yet difficult solution is to divide up the problem and compute the solution in parallel This paper details the nature of the problems and the solutions for dealing with parallel multimedia processing in both shared memory and distributed environments Click here to view presentation of this paper Go Back Introduction The Evolution of RIVL Over the course of the past two years large effort has been mounted to develop applications that can efficiently and reliably process multimedia data The effort manifested itself with the construction of RIVL Resolution Independent Video Language RIVL is multimedia processing package that given set of images or set of sequence of images can efficiently process these multimedia streams and generate an outgoing image or sequence of images RIVL is implemented as tcl extension that is capable of performing common image operations such as overlay smoothing clipping cropping etc The tcl interface simplifies the process of coding an image processing script Recently RIVL has been extended to process continuous streams of multimedia data and generate corresponding output stream of images The extended RIVL package called CM RIVL was made possible by treating RIVL evaluation as midpoint in continuous media object This work was facilitated by using CMT The Continuous Media Toolkit Image processing continuous streams of media in is very hard problem considering today current state of computer technology Performing even simple image ation over single sequence of images and outputting the resultant image in requires on the order of million CPU cycles To approach of frames per second which is the standard for perceiving continuous motion would require one of the following items to be true to be able to perform image processing operations in less than linear time on single processor to be able to utilize technology that does not yet exist to be able to divide up the work and perform the image processing in parallel to achieve less than linear time performance Since we have little or no control over the first two items we have focused our efforts on the third Most image processing routines can be performed in time if the work is divided among an array of parallel processors This is true for RIVL and also for CM RIVL Bearing this in mind we established the project goal to develop an fast and inexpensive multimedia processing application In Section we describe generic method for parallelizing most of the image operations in RIVL by exploiting the way that RIVL processes an inputted set of images In Section we describe two implementations of Parallel CM RIVL PRIVL The first version is designed to run on shared memory machines The second version is designed to run over cluster of Workstations In Section we present an analysis of performance results In Section we describe some improvements to our implementations Finally in Section we draw some conclusions and analyze our progress Go Back RIVL and the Generic Parallel Paradigm Go Back The RIVL Graph We begin our discussion of RIVL by introducing the RIVL Evaluation Graph In order for RIVL to execute it requires set of multimedia input data and control RIVL script The RIVL script is sequence of commands that specify what image processing operations should occur on the input data Once RIVL is invoked the RIVL script is translated into the RIVL graph as pictured above Each node corresponds to some image operator etc and each edge or signal corresponds to the actual image data Those nodes lying inside of the illustrated rectangle above correspond to true image operators Those nodes lying outside of the rectangle are the RIVL nodes The nodes outside and to the left of the rectangle correspond to read nodes one per image or stream and the node to right of the rectangle corresponds to the write node We want to emphasize that construction of the RIVL graph does not compute on any multimedia data The RIVL graph is merely the structure through which each inputted sequence of data must propagate to generate the outputted processed image There are two phases in processing data using the RIVL graph once it has been constructed The first phase manifests itself in graph traversal from This is what makes RIVL an efficient image processing mechanism The first node that is evaluated is the Write node the node By traversing the graph in RIVL decides at each node exactly how much data the output signal requires from the input signal The evaluation is from the write node through the graph and back to every read node Once the completes every node in the graph knows exactly how much data from each input signal is required to compute the node corresponding output signal The multimedia data is then processed on the second traversal which conforms to traversal of the RIVL graph propagating the input data forwards through the graph only operating on data that is relevant to the final output image Go Back Parallelizing RIVL We can summarize the preceding section into the statement that the amount of data that is fetched from each Read node is exactly function of the output of the Write node Combining this notion with the fact that most of the image processing operations in RIVL do not create dependencies from one pixel to another in given input image we can derive simple for mechanism for dividing up the work and parallelizing RIVL Instead of running RIVL on single processor we spawn multiple RIVL processes on different processors and have each process work towards computing different segment of the output data We define the notion of single Master RIVL process and multiple slave RIVL processes Each slave process is started on different processor Once started the slave process sits idle listening for instructions from Master process After the slave processes have been started Master process is created The Master Process determines how many slaves are available for work Once control connection is established between the Master and every Slave the Master assigns each slave logical ID the Master ID is the Slave ID ranges from to slaves After each slave is assigned an ID the Master sends each slave the total number of processes available for work followed by copy of the RIVL script Once each slave and the master receives the RIVL script they each generate copy of the RIVL graph and perform the left traversal independently The difference between the traversal now is that the logical ID for the current processor and the total number of processes becomes factor in determining how much computation gets done for each process According the figure above the amount of data fetched from each read node is no longer function of the output of the write node but is now function of the process Logical ID the total number of processes and is function of the write node output That is each RIVL process is responsible for computing different independent portion of the final output data which is based on the above parameters Hence the term Parallel CM RIVL Our approach is in that each RIVL process performs the same set of computations on different data Actual data computation the graph traversal occurs when the master says go Each slave and the master process computes their appropriated portion of the output image Go Back Continuous Media Parallel RIVL The model of parallelization for RIVL just described maps smoothly to CM RIVL With CM RIVL there is an initial setup phase for each slave process and the master process as previously described the Master process sends each slave its logical ID the total number of processes and copy of the RIVL script Each RIVL process then computes the RIVL graph and makes the traversal The image processing for computing each output frame in continuous media stream occurs as follows There is CMO Continuous Media Object which captures and manages continuous streams of data and resides as part of the Master Process When the CMO has captured all of its input data for single output image it contacts the master Parallel Synchronization Device and tells each RIVL process slaves and the Master that data is ready to be fetched and that computation can begin ASAP Each RIVL process then fetches only the input data it needs to generate its segment of the output data and makes the traversal through the graph The output data from each RIVL process is then written back to buffer within the CMO where the data is into single object Each RIVL process then blocks listening for further instructions from the CMO as to when another image will be ready for processing Using this method for given stream of multimedia data the construction of the RIVL graph and of the graph are performed only once at The actual image processing only requires one traversal of the graph on each RIVL process where the computation area is distributed among all of the RIVL processes Go Back Implementations Based on the generic parallelization scheme described in the preceding section we have developed two implementations of Parallel CM RIVL Each implementation has its own synchronization mechanism for parallelizing the independent RIVL processes and its own mechanism for transferring data Go Back Shared Memory Implementation The implementation is illustrated above Each RIVL process resides on different processor but each processor resides on the same machine which has access to the same shared memory segment This implementation mirrors the generic parallel model described in Section Implementation Details The initial setup is facilitated by using via The Process synchronization is facilitated using UNIX semaphores The Data Transfer is facilitated using reads and writes via The Program was compiled for SparcStation running SunOS This model operates as follows Following the initial setup phase the CMO works at capturing all data necessary to compute single RIVL output frame Once the CMO captures all the necessary data it tells each RIVL process to begin processing by means of an entry semaphore Each RIVL process then reads only the data relevant to its own output via read Once the evaluation of the RIVL graph completes the RIVL process then performs write to the memory region containing the output image that is accessible by the CMO The RIVL process then blocks at an exit semaphore until all of the RIVL processes complete computation for the same frame of data Once every RIVL process blocks the master RIVL process the exit semaphore and each RIVL process waits again at the entry semaphore until the CMO again releases it Go Back Networked Implementation The networked implementation is illustrated above Each RIVL process resides on different processor and each processor resides on different machine This implementation also mirrors the generic parallel model described in Section Implementation Details The initial setup is again facilitated by using via The Data Transfer is facilitated using over The Synchronization Mechanism is implicit via the paradigm The Program was compiled for SparcStation running SunOS This model operates as follows Like its counterpart this model performs the initial setup using IP multicast to establish the Active Message connections from the master to each slave RIVL process The CMO works at capturing all data necessary to compute single RIVL output frame This model differs from the in that the master process knows exactly what portion of the input data each RIVL process needs to evaluate their RIVL graph Once the CMO captures all the necessary data it tells each RIVL process to begin processing by issuing to each RIVL process Once the message is received by each RIVL process handler is invoked which tells the RIVL process that it can begin evaluating its RIVL graph on the transferred data Once the output data is computed the RIVL process then issues to the Master process specifying exactly where the sent data should be stored in the final output image buffer managed by the CMO Eventually handler routine in the Master process will update list Once the Master receives data from each RIVL process the CMO outputs the computed frame and begins processing the next multimedia frame The process synchronization mechanism is implicit with the actual in that RIVL process can not begin evaluating its graph on given frame segment until it receives an from the Master process Similarly the Master process can not move on to the next multimedia image until it receives an from each slave process Another subtle point is that by having the Master determine how much of the input data each RIVL process requires rather than having the RIVL process itself determine this information we reduce the communication rate from master to slave Having each RIVL process compute its own region would require followed by by the Master process Instead the Master decides how much data each RIVL process needs and simply issues single Go Back Implementation Caveats Our actual executables are not SPMD There is separate executable for the Master process and another executable for each Slave process This did cause any problems when developing the implementation However since ver assumes SPMD model we ran into problems when specifying AM handlers in both the Master process and the Slave processes When the Master process received from any slave process the slave process attempted to invoke an AM handler in the Master that existed in the slave but not in the handler The situation was the same when slave process received an Active Message from the Master We overcame this shortcoming in by modifying the source code The modification allows an application to register handler with by calling hid handler handler corresponds to the handler virtual address The process returns an hid which is an integer but stands for handler ID In our implementation since only the Master executable and slave executable are different the Master and each slave must register their handlers with the Message library Now when process sends an Active Message from slave to master and vice versa it no longer ships the processes virtual address of the handler but rather ships logical ID corresponding to the handler to be invoked The library maintains table that is indexed by the logical ID The logical ID corresponds to process handler virtual address which is then invoked from Go Back Performance Results We ran our experiments on SparcStation running SunOS Our Networked Implementation was tested by using SparcStation running SunOS We constructed two different test cases named Test and Test The two tests perform the following image operations Test There are input sequences of images The first image sequence is scaled rotated and copied four times The resulting output is then overlayed onto the second image sequence and then output Test There are input sequences of images is scaled rotated and copied four times is smoothed The output from is then overlayed ontop of the output for Overall Test is more computationally expensive set of operations than Test This fact is illustrated by our experimental results From our graphed results above the implementation performs somewhat better than our Networked implementation Both implementations however perform better than their serial counterparts the green bar graph One observation was that the networked implementation exhibited large spread of timings for different frames and this we attributed to our process getting preempted The behavior was not visible on the shared memory implementation as our process was sleeping waiting for the semaphores to change while the process in the network implementation Hopefully an interrupt driven implementation of active messages would cure this Note In all tests the processor speed is relatively equal Results Shared Memory In both tests and the performance gains exhibited the following patterns From to Processors Performance is nearly doubled From to Processors Again our performance is nearly doubled From to Processors The performance increase is negligble Performance is not increasing either because the communication overhead exceeds the performance gain or because the processors are probably the latter Networked Implementation From to Processors Performance is nearly doubled From to Processors There is small improvement in performance however the shared memory implementation appears to do little better From to Processors The performance increase is again negligble The explanation for this is probably the same as in the shared memory experiment Go Back Extensions Robustness There are number of improvements that can and should be made to improve overall performance and robustness of our parallelization scheme Improve the The largest improvement involves improving the among all of the by using Hungry Puppy Strategy for dividing up the work Our current implementations statically allocate work to each RIVL process The location and the amount of data that is needed for each RIVL process is determined as function of the number of processes and the process ID As indicated from our experimental results there is no significant boost from to RIVL processes using our implementation We can partly attribute this problem to an load balance Modifying the Networked implementation should prove more and while improving the overall will probably increase the communication overhead as more will have to be sent and processed Modifying the version should be easier The current synchronization mechanism is implemented by using UNIX semaphores No RIVL process is allowed to begin executing the next frame until all RIVL processes have completed execution of the current frame The is currently divided up by the number processes available for work We could improve the for this implementation by doing two things by dividing up the work regions into more numerous smaller segments and for current frame allow RIVL processes to complete executing their output segment and grab another segment from the Queue residing on the Master process This implementation will improve by allowing processes to contribute equally to the entire output image while giving busier processors the time they need to compute their data without becoming bottleneck for the entire output image Improve Reliability and In systems it is not uncommon for things to go wrong Specifically what should happen in the even that slave RIVL process crashes Our current implementations do not account for such mishaps If process were to malfunction due to either hardware or communication failure our implementation would fail Port our Implementations over to Fast Ethernet PC In designing any system cost is always an issue The purpose for implementing PRIVL over was to utilize the lower cost of workstations and networks as compared to expensive parallel machines The cost of higher performance PCs is rapidly on the decline Adapting our implementations to Fast Ethernet is natural step in reducing the cost of CM PRIVL The actual transition from to Fast is merely matter of getting to work over Fast Ethernet Go Back Conclusions We were looking for significant speedups in Parallel CM RIVL as we moved from to processors being no more than Our results are definitely encouraging In both our implementation and our networked implementation we obtained good speedups up to four processors In order to process data we need to approach rate of close to frames per second or rougly ms per frame For the operations we have tested we will require upwards of similar processors to achieve the desired frame rate We do not have results for more than four processors However by examining our results we can determine that under the current implementations the processes running Parallel CM RIVL will not be Unfortunately we must conclude that our implemenations as they stand will not scale to upwards of processors to achieve the desired frame rate However further work is under way to address this problem Furthermore algorithm is currently being incorporated into PRIVL The experimental results from this should be available shortly We have however made significant progress in parallelizing CM RIVL CM RIVL is application and our parallelization scheme works for most of the standard RIVL image operations Go Back References Jonathan Swartz Brian Smith Resolution Independent Video Language Proc of the Third ACM International Conference on Multimedia San Francisco CA November Lawrence Rowe Brian Smith Continuous Media Player Third International Workshop on Network and Operating Systems Support for Digital Audio and Video San Diego CA Brian Smith Lawrence Rowe Stephen Yen Tcl Distributed Programming Proc of the Workshop Berkeley CA June von Eicken Culler Goldstein and Schauser Active Messages Mechanism for Integrated Communication and Computation Proceedings of the Int Symp on Computer Architecture May Gold Coast Australia Anindya Basu Vineet Buch Werner Vogels Thorsten von Eicken Network Interface for Parallel and Distributed Computing Proc of the ACM Symposium on Operating Systems Principles Copper Mountain Colorado December Sugata Mukhopadhyay Arun Verma CMRivL Programmable Video Gateway Cornell University Spring	other	cornell
670	 Server Date Sunday GMT Sunday GMT Image Processor Please be patient my applet is loaded	other	cornell
671	 Server Date Monday GMT Monday GMT Program Program Due Tuesday April Program Notes Program Genetics includes custom Macintosh user interface The extra files handed out with the project are part of this interface You need not look at these files the files you are most likely to be interested in are and You may also want to look at the definition of the FacingRC function in The code you are to write should go into the file containing the main program Note that the printf function is not available in this assignment Since we are using the custom user interface window there is no console for output IMPORTANT Since this program uses custom Macintosh interface the project folders may become large when you compile the code Try to use high density HD disk with nothing else on it when you work on the program NOTE If you retrieved the project files before April the Genes dialog box may not work as expected you will have to use the Tab key to move between fields in the dialog box when you type in the numbers or the wrong numbers will be placed in the genes array in the GetGenes genes call The problem has been corrected if you want to retrieve the project files again but using the Tab key will work properly Corrections to Program Handout page the constant should be page typedef int PopulationType kNumKinds Organisms should be typedef int PopulationType kNumKindsOrganisms page kMaxUears should be kMaxYears page in the first paragraph should be same correction for Click only one of these links to retrieve the Program folder If you will be working on Program in the public labs get the Program Folder If you will be working on your own Mac get the Program At Home Folder This folder contains an extra library which we have already installed in the labs but which you will need at home Spring pierce	other	cornell
672	 Server Date Tuesday GMT Saturday GMT Me myself and little about myself Hello am currently helping out at the Cornell Robotics and Vision Lab under the super supervision of Ramin Zabih Well if you read my other page you would know all of that already except for the Ramin part am sophmore at Cornell University Originally from Montreal Quebec Canada Then my family move to Minneapolis Minnesota They are now stationed in Kansas City Kansas Well thats all for now	other	cornell
673	 Server Date Sunday GMT Thursday GMT My Publications Asif Ghias Publications Asif Ghias Jonathan Logan David Chamberlin Brian Smith Query By Humming Large Musical Information Retrieval in An Audio Database Proc of the Third ACM International Conference on Multimedia San Francisco CA November An HTML version is also available	other	cornell
674	 Server Date Sunday GMT Monday GMT and Course Information Fall Foundations of Artificial Intelligence Practicum in Artificial Intelligence Course Information Time and Place Hollister Personnel Instructor Claire Cardie cardie Assistant Professor Office Hours Mon Wed or by appointment Upson Teaching Assistants Scott Hunter Email hunter Office Upson Hall Office Hours Tues Thurs Tugkan Batu Email batu Office Upson Hall Office Hours Tue Upson PC lab Kevin Saunders Email ksaunder Office Hours Upson Tue Thu On weeks when applicable office hours will be held from on the night before programming assignment is due instead of the normal Thursday hours Return to home page	other	cornell
675	 Server Date Sunday GMT Wednesday GMT OLE OpenDoc and Microsoft Foundation Classes Presentation Microsoft It is supposed to take over the world and be the definitive answer to object technology according to Microsoft of course OLE is also the basis for the next version of Windows NT the real OS from MS which is code named Cairo OLE is an open standard depending on who you ask If you ask Microsoft it is open but if you ask anyone else they will probably disagree Microsoft has made information on OLE available through the internet OpenDoc Overview OpenDoc is backed by many companies in the computer industry The standard is controlled by an organization called Labs OpenDoc is positioned as component architecture that exceeds the capabilities of Microsoft OLE OpenDoc Supporters These are the companies that have officially jumped on the OpenDoc bandwagon Each of the companies and organizations have pledged to use it contributed time money helped to implement it Apple IBM Labs Taligent Adobe Borland Microsoft Foundation Classes MFC Overview The Foundation classes are thin wrapper around the Windows API These classes also have utility classes that implement some base functionality that could prove to be useful during project For example linked list is one of the implemented classes In addition to the other features the best part of MFC is the cross platform aspect of the libraries If the libraries are used for application development almost all that is required for Mac OS compliant version is simple recompile of the code Most platform differences are hidden within MFC Foundation Class Supporters MicrosoftThe gatekeeper of the libraries All development is done here It also ships with their Visual product SymantecSymantec has licensed the classes from Microsoft to ship them with their compiler product BorlandBorland has added compiler support for the class libraries to support the extensions Microsoft used Their compiler does not ship with the libraries included Borland ships their own class libraries Object Windows Libraries with their compiler Last updated September jmm	other	cornell
676	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
677	 Date Sun Nov GMT Server Fri Oct GMT Forefronts Teaching Computer Graphics with DX article Cornell Theory Center This article originally appeared in Cornell Theory Forefronts newsletter Teaching Computer Graphics and Scientific Visualization using the Dataflow Block Diagram Language DataExplorer by Bruce Land Visualization Project Leader Cornell Theory Center Abstract The scientific visualization language DataExplorer DX from IBM has been found to be useful in undergraduate education as vehicle for teaching computer graphics at an introductory level Although it is designed for scientific data visualization DX can be used to construct student lab exercises in computer graphics DX has been used for two years as an environment which emphasizes graphics manipulations rotation perspective while not requiring the programming overhead of traditional computer languages Introduction Computer graphics is topic that requires mathematical programming and artistic skills among others The content of the computer graphics fundamentals course at Cornell focuses on mathematical skills but must include programming to illuminate the math The course covers the following topics Construction of surfaces by explicit polygon lists by parametric operations and by hierarchical grouping of simple objects to form complex surfaces Modification of objects by geometric transforms in order to position them in space and animate them Viewing of group of objects including clipping to window and perspective or parallel projection into screen space Rendering of polygonal and parametric surfaces by hidden surface removal by as well as by surface property modifications such as or Use of global illumination models to render interactions between surfaces Modeling of scientific data for scientific visualization The programming aspect of the course attempts to give students practical experience with many of the techniques taught in lecture Lab exercises written in DX cover nine computer graphics topics These exercises include construction of polyhedra from vertex and face descriptions construction of parametric surfaces including quadric surfaces ellipsoids figures of rotation and surfaces bilinear hierarchical modeling and animation of complex objects writing perspective viewing transforms comparing lighting techniques with wire frame flat shaded or Gouraud shaded objects illuminated with ambient and point illumination producing variations on the standard Phong lighting model including spotlights and bump mapping of surfaces image techniques including production of texture mapped surfaces image filtering and visualization of scalar field heights of landscape and vector field flow field and design project to produce animation based on all the techniques learned All exercises have example programs to introduce the concepts and descriptions of the manipulations required of the student The first two exercises deal with construction of objects and are an introduction to DX In the first exercise students are introduced to the notion of polyhedron construction with vertex and face lists They are expected to design couple of polyhedra and perform simple animation of one object They experiment with determining the normals to the surface The second exercise introduces parametric surfaces Students design quadric surfaces figures of rotation and bilinear patches After this lab they can design quite complex single objects Exercise three teaches them how to hierarchically combine objects and how to concatenate transforms to make complex motion They design either wagon that rolls forward stops then turns its front axle and wheels helicopter with main and tail rotors that starts the rotors takes off and flies away or prop aircraft that behaves like the helicopter When done correctly the exercise shows them how to design parts of complicated object props or wheels move them and duplicate them for several times in the final construction In exercise four students turn off perspective in DX and write their own transform for simple scene This introduces the use of homogeneous coordinates and matrix manipulation in DX The calculation is complicated enough to introduce the various structuring aids of DX which make the code more readable Exercises five and six explore lighting Students first design landscape to be lit by two simulated suns white dwarf and red giant in two different orbits Then they turn off the default lighting model in DX Phong illumination with Gouraud shading and design their own lighting They code lighting model based on light positions viewer position and object normals and extend the model to produce spotlight depth cueing based on intensity Exercise seven introduces image manipulation and filtering Students are asked to simple scene using postfiltering and to determine best scheme based on available filters and system resource memory CPU time They then an image Finally they an image onto quadric surface by parametrically modifying the image pixel coordinates In DX an image has extent in world space with each pixel having position Exercise eight introduces scientific visualization by having the students make judgments based on graphical representation of fields The first part of this exercise is to identify the geographic location of landscape height field then to enhance the slope and exposure by modifying the program The second part is to identify the sources and sinks in vector flow field They are shown how to draw flow lines vector arrow icons and isosurfaces of speed They then combine these techniques to find the sources and sinks The final design project is to produce an animation of hierarchically modeled objects Typical projects have included robot that stands up out of an ocean turns and fires projectile at tower on the far shore seagull that flies down and plucks fish from the water castle with waving flags and drawbridge car driving through town with rotating signs and street lights human walking simulation of the deformation of tennis racket strings during ball impact and morphing between faculty face images The complexity and sophistication of many of the projects can be amazing DX as Programming Language At the introductory level lack of programming tools often interferes with learning graphics operations Typically graphical operations are either provided as large library of routines that students must learn or derive from relatively simple programming projects that students must code from scratch The block diagram interface of DX can be customized to make visual subroutine library of graphics routines Students can construct very complex scenes including camera and lighting control in short time They can also open up various visual subroutines and modify or extend them The graphical nature of the user interface and its easy extensibility make it possible for students to rapidly prototype graphics operation see the effects and modify the program The structure of DX that allows such easy interaction is described next DX is block diagram point and click programming language designed for producing high quality images based on data which may represent objects walls stars or fields density electric field DX can easily be extended to construct the objects and perform the operations needed for an introductory graphics class The block diagram program is built up of modules and wires connecting them module is primitive program function that appears on the screen as block with input and output tabs Wires are dragged with the mouse from outputs to inputs group of modules can be hidden inside of another module to form user macro System supplied DX modules include vector and scalar field rendering and geometric operations rotate translate in addition to and plotting There is direct programming support for producing custom MOTIF control panels The Theory Center has added modules to make parametric surfaces texture maps bumpmaps spotlights and variety of other graphically oriented functions Students are expected to design visual programs to perform some particular assigned task They are expected to produce working programs that are readable and documented visual language has different style of organization for readability than code but for programs bigger than one screen wide organization is no less important Any module can have comment field and the Theory Center encourages comment in all but the most obvious modules Programs tend to build an object of some kind house by defining its parts combining them and then moving them to some position Such section of code tends to be small perhaps modules but cryptic unless the designer minimally labels the output of the code block DX supports labeling of wires to document what is flowing through them In many cases small code block can be made into macro which then appears to be another module with name At some point objects have to be combined to make higher order structures Careful arrangement of the hierarchical structure which is all visual helps during program tracing and debugging We have found that as with all programming providing few examples and programming manual is an effective way of introducing students to the subject matter Conclusions DX allows students to concentrate on learning the graphics content of the course rather than investigating the details of programming environment Students can generate code to make images in fraction of the time required of language environment encouraging experimentation At the time of writing course evaluations are not yet available from students but will be when this article appears in Forefronts Preliminary student feedback indicates satisfaction with DX as vehicle for learning graphics The acquired background in computer graphics using DX is already being put to use in scientific visualization as students incorporate their class skills into research projects across campus This year students in the course were mostly upper division computer science and engineering majors It should be possible to construct course using DX which introduces computer graphics and visualization at an appropriate mathematical level and whets their appetites for further instruction downside to DX use in the classroom is that it requires graphics workstation such as an IRIS Indigo SPARC station HP workstation or RISC not Mac or PC which is the hardware most readily available to college and university students Hopefully the trend of cheaper workstations and more powerful personal computers will continue to open new possibilities Designing complex scenes in DX is easy enough that many projects put large demand on the workstations for CPU and memory During the final project many of the students ran out of memory while using MByte machines In most cases scaling down the resolution of texture maps solved the large size but in few cases the objects and motions became too complex The lab exercise software plus student lab instructions are available from an anonymous ftp site at Cornell University Contact Bruce Land bruce for more information	other	cornell
678	 Server Date Sunday GMT Tuesday GMT CoNote small group annotation experiment CoNote Annotation homepage Jim Davis davis Dan Huttenlocher dph The annotation system is an experiment in how people can collaborate when working with set of shared documents It allows group of people to share set of documents and to make comments about the documents which are shared with the other members of the group An annotation to document is comment on or question about the document Annotations can also refer to other annotations For example they can answer questions or refute arguments About annotation an explanation of the project An example An example of CoNote taken from problem set from the Fall course You ca add notes here but you can see realistic example Note that this example is taken from the middle of problem set so you wo see the context that the students did see The names have been changed to protect privacy see demonstration version User Guide Author Guide Administrator Guide Related work bugs and future plans Obtaining the code plan to release the code but there are restrictions you must agree to The first test of annotations is for Cornell course to support annotated course notes and problem sets We now have few measurements of usage Help wanted would also like to have someone it to be faster Jim Davis davis Sept	other	cornell
679	 Server Date Sunday GMT Sunday GMT Scribed Lecture Notes Semantics of Programming Languages These notes are not intended for distribution outside of class Notes on Scribing Each student is responsible for scribing at least two class sessions If your name is on here twice send email to either or me to get it on here twice prefer that you generate postscript file though html is also okay Scribe notes should be emailed to either or me within one week of the class It probably best to only produce one scribe document for each class so coordinate with the other scribe often have informal notes which you can work from Check with me before you start to write up your notes List of Scribes and Scribed Lectures Scribe Wed Sep ZdancewicPatrick WhiteML Fri Sep ValerjevStephanie Weirich ML ver ver Mon Sep OoiLambda ver ver Wed Sep OoiLambda Fri Sep WangZhen XiaoLambda must be printed Mon Sep FlorenceSumedh KanetkarLambda Wed Sep LiLili QuiTyped Lambda Fri Sep WangZhen XiaoTyped Lambda Mon Sep MayrPatrick WhiteChurch Rosser Wed Sep LiLili QuiStrong Normalization Fri Sep cancelled Mon Sep FlorenceSoochon RadeeExtended Typed Lambda Wed Oct ZdancewicStephanie WeirichDenotation for Typed Lambda Fri Oct WhiteRalph BenzingerEquations and Frames Mon Oct Sharma The Term Frame Wed Oct HawbitzelRosen Isomorphism Fri Oct RadeeTugkan BatuSubst Lemma eFall break Wed Oct Brown Intro to Fri Oct WhiteDan BrownMore on Mon Oct HawbitzelDan BrownYet more on Wed Oct of Fri Oct DaleyRalph and ML Mon Oct Tsang OoiChris HawblitzelType Inference Wed Oct White Type Inference Fri Nov KanetkarTugkan BatuPT Thm ML Inference Mon Nov FlorenceRalph BenzingerADTs in Wed Nov BudiuMore ADTs and Fri Nov LiLili QiuAdding Recursion PCF Mon Nov XiaoJia WangPCF Posets and Cpos Wed Nov ZdancewicStephanie WeirichCpos and Continuous Funcs Fri Nov LarkinIlya Thm Mon Nov Larkin JGM Adequacy Wed Nov MayrTugkan BatuIntro to Axiomatic Semantics Fri Nov DaleyIlya German Mon Nov LarkinSoochon Radee Wed Nov Budiu Thanksgiving break Mon Dec Daley Wed Dec MayrIlya German Fri Dec Valerjev Back to the homepage	other	cornell
680	 Server Date Sunday GMT Saturday GMT Sean Landis Sean Landis Waterview Heights Rd Ithaca NY ext landis Objective Be technical contributor developing object oriented distributed software am also very interested in computer graphics image databases and image processing Education Graduate May Cornell University Ithaca NY Masters of Engineering Computer Science GPA December University of Utah Salt Lake City Utah Bachelor of Science Computer Science GPA in major Professional experience March Date Isis Distributed Systems Ithaca NY Software Engineer IV team project leader Responsible for key technical contributions planning resource and vendor management release management and performance evaluations July Isis Distributed Systems Ithaca NY Software Engineer III As member of development team participated in all facets of development for two releases Responsible for port to Windows NT Responsible for documentation and training June June Unisys Corporation Salt Lake City Utah Senior Software Engineer Lead engineer for Manager distributed software management application Responsible for analysis design implementation and documentation Assisted planning and staffing Representative to POSIX Software Administration April June Unisys Corporation Salt Lake City Utah Software Engineer Developed The Unisys UNIX System customizable monitoring and analysis tool Performed all phases of the product including training Developed and taught UNIX Performance Tuning Seminar Achievement Award Group Achievement Award Unit Achievement Award Corporate Achievement Award April Unisys Corporation Salt Lake City Utah Associate Software Engineer Customer support for UNIX on multiprocessor machine Resolved customer problems and Created UNIX support tools package and training class for customer support engineers Achievement Award March Olympus Software Salt Lake City Utah Responsibilities included porting UltraCalc spreadsheet to various UNIX platforms release management and completing graphing package Summers Various Student cooperative work Publications CORBA with fault tolerance with Ruth Stento in Object Magazine Building Reliable Distributed Systems with CORBA with Silvano Maffeis to be printed in Theory and Practice of Object Systems Summary of skills CORBA Orbix Development UNIX development tools Programming Visual and MFC Software Engineering Project Management Perl ClearCase CVS Microsoft Office FrameMaker HTML Graphics Programming Image Processing Machine Vision Current projects Masters Project graphics rendering system Wireframe and solid display modes Phong shading object oriented design data model on Windows CS Topics in Computer Graphics image retrieval system for interior design Database of wallpaper patterns retrievable by color histogram or by pattern Image feature extraction analysis and indexing Object oriented design allowed for easy extensibility CS Machine Perception Use computer vision techniques to measure the quality of children coloring book artwork The system evaluates sample colorings and draws conclusions about the nature of the work CS Advanced Databases Explore indexing methods for image databases Utilize image features to create possibly multidimensional indexing structures This project is planned for the current semester See http for more information References References and salary history available upon request	other	cornell
681	 Server Date Sunday GMT Tuesday GMT Basic Operating Systems projects Projects for basic Operating Systems Research To give students the opportunitycp No match hands dirty on some real operating systems research we are offering number of projects based on the distributed operating system and on the VSTA public micro kernel The main goal of these projects is to get exposure to operating systems that are based on novel research principles in contrast to operating systems that are build using more traditional approach like the BSD derivates Linux or Mach and VSTA were chosen for very specific research reasons which will become clear when your read their individual sections below major organizational reason was that these operating systems are available for your PC at home at where they can peacefully with your other architectures Except for some startup activities for the project there are no other rules to these projects than that they should be systems projects Projects are being determined in cooperation between the faculty involved and the students who want to do this work Examples of projects are distributed file server for process server for VSTA various device drivers for VSTA kernel packet filter for either of the architectures etc The students who want to subscribe to these projects will need to have solid background in programming in the language know how to use development tools like make and have had some exposure to the fundamentals of operating systems networks and distributed systems Affinity with real system work is mandatory Faculty in charge Werner Vogels Robbert van Renesse and Thorsten von Eicken Plan is distributed system In the most general configuration it uses three kinds of components terminals that sit on users desks file servers that store permanent data and CPU servers that provide faster CPUs user authentication and network gateways These components are connected by various kinds of networks including Ethernet Datakit fiber networks ordinary modem connections and ISDN In typical use users interact with applications that run either on their terminals or on CPU servers and the applications get their data from the file servers but it also small enough to run by itself on laptop It is highly configurable it escapes from specific models of networked workstations and central machine service This project will start up with the installation of on file server and to make number of machines PC and Sparc stations in the department capable of booting over the network activities can be in many areas of but will involve building new servers to support remote devices running under Unix connecting your home PC running to the departmental fileserver through services and adding new communication mechanism to the kernel Other projects can be determined in cooperations with the researchers at AT Bell Labs VSTa VSTa is an experimental kernel which attempts to blend the design of microkernel with the system organization of Plan The result is small privileged kernel running tasks to provide system services such as device drivers filesystems and name registry Like Plan each service provides interface VSTa was originally developed by Andrew Valencia and is now placed under GNU copyleft There are many many things still to be developed for VSTa its network servers are very new and could be evaluated and improved device drivers need to be written there is no windowing system and many more Also existing mechanisms could be replaced or improved examples are the now kernel based process management could be split into kernel dispatcher and process server Developing an remote IPC mechanism is another possibility Anything is possible in this OS as it is small fits on floppies binaries and source code easy to understand and very flexible For information about this WWW page contact Werner Vogels	other	cornell
682	 Server Date Sunday GMT Wednesday GMT Home Page of Hrishi at Design Research Institute Ooops Sorry Page has please go	other	cornell
683	 Server Date Monday GMT Monday GMT CS Homework Number Homework Number Date Assigned February Date Due February To submit your answer Send an email message to with the subject assignment answers and the answers to the following questions Label each answer with the problem number and part etc Problem Convert the following decimal numbers into the indicated bases into binary into binary into hexadecimal into binary into octal into octal into binary into octal into hexadecimal into hexadecimal Problem Assume that the computer is initialized using the data given below all values are decimal For each of the following machine instructions indicate what registers change if any and what value they receive what memory locations are changed and what value it receives Each question is independent of the others and starts with the initial values given above If an instruction is illegal say so and indicate why Report all values in decimal Do tell us what happens to the condition code bits Address Value Address Value Register Register Register INSTRUCTION What It Does ANDI FF SR	other	cornell
684	 Server Date Sunday GMT Sunday GMT Trefethen and Bau NUMERICAL LINEAR ALGEBRA NUMERICAL LINEAR ALGEBRA Lloyd Trefethen and David Bau III pages SIAM David Bau currently at Microsoft and have recently completed graduate textbook on numerical linear algebra Our aims in this book are beauty depth of insight and brevity The text is split into forty lectures each about eight pages long It is based on the course have taught repeatedly at MIT and Cornell during the past ten years The book is presently undergoing copy editing by SIAM and it will be published in Table of contents and other front matter Lecture Lecture Lecture Lecture Lecture Notes Return to Trefethen homepage	other	cornell
685	 Server Date Sunday GMT Friday GMT Frank Web Playground The New and Improved Frank Happy Fun Page Presents Answers to All Your Questions of course it goes without saying that this page is in state and that it take little time for the fun bits to work their way into these pages Well my old and bitter Happy Fun Page at Ohio State CIS Department is finally gone la guerre And now some answers to all your questions Who is he Why is he here What does he do Where can he be found How about showing his and research interests What form of madness is this Does he have home page at the CS dept How come there is anything fun on this page What do if the answer to one of my questions is here What sort of flying have you done Recent Additions Frank archives of stuff Quotes jokes and pictures See the How page for description Frank Graduation Highlights of the June Graduation from The Ohio State University The East Hill Flying Club Home Page The official web for the EHFC which had hand in just recently received my Private Pilot Certificate to fly land planes Here few pages on flying And remember kids just more days until Yak Shaving Day Quotes of the Month hold on someone peed on my laptop Steve Romig about his untrained rats was little upset but you ca get much sympathy from pregnant woman Loren Schwiebert after falling off ladder allegedly steadied by his wife and son Frank can be reached at frank Last updated	other	cornell
686	 Server Date Monday GMT Sunday GMT Research Interests of the Faculty and Senior Researchers Research Interests of the Faculty and Senior Researchers The following are the research interests of each of the faculty members of the Computer Science Department at Cornell To find out more about any of the faculty follow the link to Annual Report Personal home pages Kenneth Birman Annual Report Distributed computing high performance communication Claire Cardie Annual Report Personal Natural language processing machine learning artificial intelligence Paul Chew Annual Report Geometric algorithms mesh generation Thomas Coleman Annual Report Personal Numerical optimization parallel computation Robert Constable Annual Report Theory of computation programming logics automated reasoning Bruce Randall Donald Annual Report Personal Robotics artificial intelligence computational geometry systems Donald Greenberg Annual Report Computer graphics design David Gries Annual Report Personal Programming methodology programming languages compiler construction logic Joe Halpern Personal Reasoning about knowledge and uncertainty qualitative reasoning distributing computing belief revision logic game theory Juris Hartmanis Annual Report Theory of computation computational complexity Monika Rauch Henzinger Annual Report Personal Algorithms data structures graph theory Thomas Henzinger Annual Report Personal Theory of concurrent and systems John Hopcroft Annual Report Modeling and simulation algorithms information capture and access Daniel Huttenlocher Annual Report Personal Computer vision computational geometry digital video Jon Kleinberg Personal Algorithms combinatorial optimization computational geometry computational biology Srinivasan Keshav Personal Computer networking telecommunication distributed computing Dexter Kozen Annual Report Personal Theory of computation computational complexity analysis of algorithms program logics and semantics Dean Krafft Annual Report Personal Digital libraries information access Bruce Land Annual Report Personal Computer graphics Yuying Li Annual Report Scientific computation numerical optimization Gregory Morrisett Personal Programming languages distributed systems runtime systems concurrency Keshav Pingali Annual Report Software for parallel systems compilers Robbert van Renesse Annual Report Distributed computing distributed multimedia systems Ronitt Rubinfeld Annual Report Personal Theory of computation randomized algorithms computational complexity Fred Schneider Annual Report Concurrent programming distributed systems systems Praveen Seshadri Personal Database systems Brian Smith Annual Report Personal Distributed multimedia systems image processing user interfaces information technology Eva Tardos Personal Theory of algorithms complexity theory Tim Teitelbaum Annual Report Personal Programming languages systems environments Sam Toueg Annual Report Personal Distributed computing systems Lloyd Trefethen Annual Report Personal Numerical analysis applied mathematics Charles Van Loan Annual Report Scientific computing Stephen Vavasis Annual Report Personal Numerical analysis Thorsten von Eicken Personal Parallel systems computer architecture Catherine Wagner Annual Report Automated reasoning constructive logic Samuel Weber Personal Semantics of programming languages distributed algorithms Ramin Zabih Annual Report Personal Computer vision multimedia information technology robotics Richard Zippel Annual Report Symbolic mathematics scientific software Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified December by Denise Moore denise	other	cornell
687	 Server Date Monday GMT Friday GMT Zeno Projects Zeno Research Projects DVFS distributed video file system distributed programming extension to Tcl Rivl multimedia processing language Lossless JPEG An experimental Lossless JPEG codec Serial Storage Architecture look into serial storage WVW Working Via the Web Optimal Parallel MPEG Encoding parallel MPEG encoder in Rivl	other	cornell
688	 Server Date Sunday GMT Wednesday GMT oh the weather outside is frightful what do you mean blizzards are bad my second favorite kind of weather is really good winter blizzard just never been one of those people who get all hot under the collar when there tons of snow on the ground this may partially be because live of mile from my office in upson but also just really like the silence the softness and the feeling of snow also truly believe that there nothing holier looking than grove of old trees with snow covering each branch it even makes places like mit look beautiful and as for cornell suffice to say that much of my unproductive time last winter was spent playing out in the snow truly wish much more had been spent that way rather than in the unpleasant bits but at least some was we are the music makers and we are the dreamers of dreams aphex twin dan brown snowman last updated oct	other	cornell
689	 Server Date Sunday GMT Thursday GMT PRL Seminar talks PRL Seminars Here are some of the slides for the talks have given in the Nuprl seminar These slides can be pretty technical and assume knowledge of the Nuprl system and type theory In some cases present information at an intuitive level that is technically imprecise All slides are in Portable Document Format PDF You can obtain PDF reader from Adobe for just about any machine you can imagine using prepared these presentations using Adobe Persuasion and Adobe Illustrator Modules February This is my most recent version of formal modules and objects Modules October This is an earlier version of formal modules Horus November We are performing verification of the Horus group communication system These slides give an outline of the verification process Types October These slides cover some new type additions was proposing for Nuprl This includes function types Square Root Verification May This talk is about the verification of hardware square root algorithm by program transformation The slides do contain much explanation The paper we wrote for TPCD Theorem Provers in Circuit Design is better resource Theories March This is very early version of formal theories modules in Nuprl Majority Vote November This is the first formalization did in Nuprl gives some idea of the problems first encountered using Nuprl and it provides motivation for my current work in Nuprl Some other talks Horus talks Horus Verification January This is very overview of the Horus verification effort Horus Verification April Here is slightly more detailed but still version of the Horus verification	other	cornell
690	 Server Date Wednesday GMT Tuesday GMT Silvano Maffeis Home Page This page has moved to http Please update your link Author Silvano Maffeis maffeis	other	cornell
691	 Server Date Sunday GMT Friday GMT Huang Steven Huang Education Master of Engineering in Computer Science expected December Cornell University Ithaca NY Grade Point Average of as of May Bachelor of Computer Science April University of the Philippines at Diliman Grade Point Average of at program completion Experience Instructor in Computer Science June to October Department of Computer Science University of the Philippines Taught course CS Introduction to Operating Systems Administered the College of Engineering LAN Student Assistant June to April Department of Computer Science University of the Philippines Assisted in the construction of the computer science classroom networks Science Research Specialist Trainee April to June Advanced Science and Technology Institute Department of Science and Technology Philippines Implemented embedded software for Electromyogram Designed and implemented software for an Artificial Neural automatic examination scoring system Relevant Skills Database management using SQL and Clipper Computer networking and administration with and software Novell Netware and Novell Netware Lite computer graphics synthesis using IBM DataExplorer and Written and spoken English Mandarin Chinese Filipino and spoken Fujian Chinese and Huang	other	cornell
692	 Date Mon Dec GMT Server Fri Feb GMT Lab CS Laboratory Building simple polygonal object Introduction The exercise is the design of geometric objects by describing their vertices and faces Procedure First you will need to download four files To do this click on each of the filenames shown below When the text window opens use the save as option to put the file in your own directory Name each file with the same name as shown below After downloading the files start DX then open the program and execute it Be sure to open the control panel You should see tetrahedron in the Image window The options menu in the Image window contains view control item which in turn contains Mode menu Experiment with rotating and zooming the tetrahedron Use the control panel to choose cube or octahedron shape Note that the tetrahedron is defined interactively as pair of Vectorlists interactors but that the other two shapes are defined with list modules Note also that any shape you make can be saved in file to be used later in another program which can Import the file It it not necessary to understand the program logic at this point that is you need to know what the Options construct or replace module does but you must be able to modify the defined shapes The control panel has interactors to define the vertices and faces of polyhedron Edit the face list so that one of the faces in inside out Note that the outward face of polygon is defined as the side you see if you traverse the vertices in direction Edit the face list and vertex list to make single triangle Open and execute the Open the control panel and vary the color of one shape or the opacity of the other shape Open the sequencer and click on the arrow to make simple animation Modify the Rotate module to animate around the axis This net serves as very brief introduction to animation The image below shows one view generated by this program Assignment Modify the program MakePolyhedron to make cube with one face that opens to show propellor inside The propeller should be made of four equilateral triangles sharing one edge and oriented degrees apart You will probably want to use the interactive lists to design this object The cube opening should be controlled by sequencer and the opening should be proportional to sinusoidal function of time Each different object you define will need to be connected to its own set of option construct replace modules For instance you might make the propellor cube minus top and the top as three objects which are then collected together In this case you would need three sets of option construct replace modules One of the inputs to the Color module is defined as front colors so that the back and front of objects will look different For your modified program change this parameter to colors so that both sides of objects will be colored single frame might look like the following image Be ready to demo and explain your cube animation program in section You will have minutes to do the demo You should be ready to explain the function of every module in the program Some attention will be paid to program layout very tangled messy program will lose points The Lab grading guide will be filled out by consultant during section to evaluate your work Back to Main Page Go to Lab Last modified Land Copyright Statement	other	cornell
693	 Server Date Monday GMT Thursday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
694	 Server Date Sunday GMT Sunday GMT Trefethen numerical textbook Finite Difference and Spectral Methods for Ordinary and Partial Differential Equations Lloyd Trefethen Cornell University This textbook was written during and used in graduate courses at MIT and Cornell on the numerical solution of partial differential equations The book has not been completed and is on indefinite hold while attend to other projects However the part of it that is written is in quite polished form including many exercises and is suitable for classroom use Copies can be obtained by sending US dollars or pounds sterling this sum includes postal charges to Trefethen Dept of Computer Science Upson Hall Cornell University Ithaca NY USA LNT Because of figures and other complications not all of the book is in PostScript so it would not be possible to make it fully available on the Web Introductory material pages megabytes Excerpts from the text pages megabytes Return to Trefethen homepage	other	cornell
695	 Server Date Sunday GMT Thursday GMT Transaction Server Bart Transaction Server Libby Lin Sunil Srivastava Eric Vitrano Goal The goal of our project is to create fault tolerant Transaction Server for multiple clients using TCPIP as the basis for communication Interfaces We will be providing service to the ECash Application who will be using our function stubs and we will be using the services of Stable Storage Encryption and possibly Private Email Schedule The schedule with appropriate methods for achieving the desired goals is as follows Week Goals Methods Single Client and Single Server Fault Tolerance or Phase Commit TCPIP with encryption layered on top of it Multiple Client and Single Server Forking on the Server side Multiple Client and Multiple Server Randomized load balancing on the client side Clients will randomly choose Transaction Server Preparation for Presentation If time permits we may implement Private Email communication with ECash Design Decisions Communication Protocol TCPIP was chosen to be the communication protocol between our function stubs and transaction servers because SSL is not fully standardized and may have legal problems with RSA Privte Email is our secondary choice because of excessive overhead but may be implemented later to provide higher degree of service References Dale Skeen and Michael Stonebraker Formal Model Crash Recovery in Distributed System IEEE Transaction of Software Engineering May	other	cornell
696	 Server Date Monday GMT Tuesday GMT CS How to Scribe CS How to Scribe This page should provide enough information to get you started Unfortunately LaTeX can be complicated and has many options we are unable to provide reference to the LaTeX system itself What is provided is commented version of the third lecture scribe notes This consists of few parts this is the main LaTeX Document It is similiar to the main file of program it describes the text of the document it can include other files and details how other files should be linked in to make the final postscript output and these are the figures seen in the document EPS stands for ecapsulated postscript Figures can be created in number of ways Most people will create figures for the first homework by converting PGM format pictures to EPS using the pnmtops program xfig is useful program to create drawings the final output postscript file You should first look at the file Comments in the source begin with symbol Typically you will edit this file so that it contains your notes Then you can compile the LaTeX file for example latex This will create few files including and The important file is this is contains the formatted text You can view this file using the xdvi program This file will not include any EPS figures that you might add you will need to run dvips to create the final postscript file Submissions Eventually your going to have to turn the mess in What we need is the final postscript file the LaTeX file and the EPS files for any of the figures you created If you have an account on the cs or sunlab systems you can just email the locations to jmiller otherwise you will have to mail me uuencoded tar file of the files References An Introduction to LaTeX Guide to LaTeX LaTeX Commands	other	cornell
697	 Server Date Sunday GMT Monday GMT Anneke World Wide Web Page Anneke World Wide Web Page moved here	other	cornell
698	 Server Date Monday GMT Monday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
699	 Server Date Tuesday GMT Thursday GMT Human Power Biomechanics and Robotics Laboratory The Human Power Biomechanics and Robotics Laboratory Department of Theoretical and Applied Mechanics Kimball Hall Cornell University Ithaca New York Click here to go to the department homepage Statement of Purpose Our interests are twofold in the first place we are interested in applying engineering principles to understand the mechanics of human and robotic locomotion Secondly we wish to provide an opportunity for undergraduates to collaborate with graduate students and other undergraduates in this research and provide applications for their coursework Ultimately we hope that our work will contribute to advances in medical rehabilitation of the disabled prosthetic development excercise physiology robotic control and simulation and the general quality of undergraduate engineering education Lab Themes Fundamentals Of Human Locomotion Mechanisms Which Are Statically Unstable But Dynamically Stable How Kinematic Constraints Improve Human Power Output Ongoing Research Projects Passive Dynamic Walking Collision Modelling Bicycle Projects Constrained Motion Excercise Machine Rowing Projects Papers We wanted to make drafts of some of our papers accessible over the web in format but have since given up trying to do any sort of successful conversion Suggestions are welcome but have tried several methods already If you would like copy of one of our papers please email one of us and we will send it along Lab Information Advisor Andy Ruina Kimball Hall Cornell University Ithaca NY ruina Graduate Students Michael Coleman coleman Mariano Garcia garcia Anindya Chatterjee is now at Penn State at anindya The undergraduate research groups meet individually about once per week to work together and discuss progress There is also lab meeting every week during which project members make short individual presentation of their recent accomplishments and short term goals Participants receive class credit usually credit hours per semester for their work They are required to make formal presentation at the end of the semester and to submit written report describing their work Comments regarding our home page including places of interest are welcome Please send them to garcia	other	cornell
700	 Date Mon Dec GMT Server Thu May GMT Lab CS Laboratory Procedural Textures Introduction In this lab you will investigate texture generation by Fourier methods cellular automata CA and partial differential equations Procedure Download Fourier Transform Textures The program takes as input an array of points or user defined pixels then computes the Fourier transform of the points Since the output of the FFT is complex the program allows the user to choose either the phase magnitude real part or imaginary part scales the result and displays it Transform texture examples Cellular Automaton Textures The program is CA which simulates the effect of surface tension Areas tend to get smoother rounder and less fragmented An mpeg animation shows typical evolution The rule for this CA is Sum the nearest neighbors of each cell and the cell itself cells are binary valued If the sum is less than or equal to set the cell to zero Otherwise set it to one Textures The program simulates chemical reaction coupled to diffusion There are two reacting chemicals called red and blue You can think of these as chemically reacting inks The inks can also spread across the paper at different rates refered to as their diffusion constants Many different behaviors can be simulated by changing the chemical reactions and specific parameters One specific reaction scheme described below results in this dynamically changing texture Red diffusion constant Blue diffusion constant Red initial concentration is random with maximum of Blue initial concentration is the Letters Test Diff in polygon font To step time NewRed concentration red red NewBlue concentration blue blue Where is the sum of the second partial derivitives of concentration of with respect to and as described in the Water wave section of the dynamics description In DX the second derivitive operators are calculated using the Filter module Another example uses the same reaction kinetics as above but the initial condition is blue dots Assignment Execute the programs to understand their behavior then modify them as follows Modify the program to compute CA version of percolation cluster percolation cluster is set of cells which are connected to an initial group of cells The automaton rule for each time step is Sum the nearest neighbors of each cell cells are binary valued Test to find out if the current cell has ever been visited before Compute random number for the current cell If the sum is greater than zero at least one neighbor and the random number exceeds threshold value and the cell has never been visited before then set the cell to one If the sum is greater than zero at least one neighbor and the random number does not exceed threshold value set the visited flag for the cell Correction Below is an example of percolation cluster using stroke font as an initial condition The threshold probability for each cell was set to for the first three time steps then changed to An mpeg animation of the cluster growth shows its evolution Extend to Now there nearest neighbors You will have to change the thresholds to appropriate values the array may be rendered by connecting it to an isosurface module with it second input set to then to an image module Use this code fragment to map the CA array to the surface of torus The scales to object to lie inside the CA volume The wire entering from the left is floated version of the CA array This mpeg animation shows the CA array on the left isosurface rendered and the array used to control the color of torus Build CA simulator which fills array one row at time Assume neighborhood extending one cell on each side of the current cell You might use the ForEachN module to control the loop which causes the program to visit each row once Assuming that the CA rule is based on summing the cells try several rules This mpeg animation is based on the rule If If If If Modify to include CA component The CA should take as initial conditions the thresholded blue concentration The CA rule should be Conway game of life Life is based on the rule where sum is over the neighborhood If If If sum If sum The CA should be coupled back into the equations as source term for blue or for red with an interactor to control the strength of each source So for each cell there needs to be term in the NewRed and NewBlue equations of the form strength CA Where CA is the value of the automaton cell Use text as initial conditions Make an MPEG animation of your favorite texture resulting from this process One example shows this process with CA source strength of for blue and for red and using text as an initial condition for the CA Another example shows process with CA source strength of for blue and for red and using two strips as an initial condition for the CA For both of these examples the reaction equations were the same as above except that Red diffusion constant Blue diffusion constant Be prepared to demo the modified programs to show The percolation CA The CA The CA The program modified to include CA Some results from You should be able to explain your programs You should use macros and comments in the Notation field of each module so that you and the grader can understand the program Control panels if any should be well organized labeled and with the appropriate numeric ranges The Lab grading guide will be filled out by consultant during section to evaluate your work Back to Main Page Last modified Land Copyright Statement	other	cornell
701	 Server Date Sunday GMT Monday GMT Francis Chu Humor Page History of the World Physics Warning Labels WARNING Read at your own risk capital Punishment the Night Before Beta Smiley Dictionary Mathematician Windows Microsoft The Next Generation Microsoft buys CUCS fcc	other	cornell
702	 Server Date Monday GMT Friday GMT Raman On the Internet no one knows you not dog either Raman PhD Cornell University Phone Internet raman Digital Cambridge Research Lab	other	cornell
703	 Server Date Sunday GMT Wednesday GMT Question Of The Week Question Of The Week It do you know where you are by Jeff Moore What Something Yellow And Dangerous by Heji Kim What in Brian hip pack by Heji Kim How to best establish lab culture by Soam Achery	other	cornell
704	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
705	 Server Date Sunday GMT Tuesday GMT Topics and Schedule Topics and Schedule as of The selection process The end result OLE OpenDoc Foundations classes presented by Moore Jeffrey jmm cs HTML SHTTP SSL Alfred Heji TclDP Wu Smith Java Hot Java Vineet Anindya Python STk Deyu Hu VRML Justin PGP Matt Welsh LotusNotes CoNote Jim Davis MBONE VAT Wang cancelled presented by Lee William wwlee cs Corba ILU Carl Lagoze	other	cornell
706	 Server Date Sunday GMT Sunday GMT Practice Problems Prelim Practice Problems Every Friday post some practice problems and their solutions The problems will be based on what was covered in lecture during the previous week Lectures and Week of Oct Problems and Solutions Lectures and Week of Oct Problems and Solutions Lectures and Week of Nov Problems and Solutions Additional problems posted Nov about recursion Problems and Solutions Lectures and Week of Nov Problems dvi or postscript and Solutions If you do understand the solutions to the problems ask in section If any of the solutions are wrong please me	other	cornell
707	 Server Date Monday GMT Monday GMT CS Homework Number Homework Number Date Assigned February Date Due February To submit your answer Drop by the consulting office Upson during consulting hours to get your homework graded and recorded Problem Convert these numbers into bit two complement form or back into decimal Do all algebraic manipulation in two complement All binary numbers are bits DIVIDE by MULTIPLY by ADD and MUTIPLY by Problem For each of the following parameter passing strategies state in one sentence of the strategy and in another sentence what the procedure can do if anything to compensate for the limitation Passing parameters using registers Passing parameters in fixed global address Problem Give short answer to each of the following questions Excessively verbose answers will result in lost points Name two functions of the procedure prolog Name two functions of the procedure epilog	other	cornell
708	 Server Date Monday GMT Tuesday GMT Projects CS Projects Spring Mulva Report The Real Deal Of Network Computer Jeffrey Moore William Lee Serial Storage Architecture Scott Dawson Leong Kian Fai Kernel endpoint for Linux Ankit Patel Gerry Toll Porting PVM to the Using Active Messages Chris Jaeger George Pang Parallel Object Recognition using Subspace Methods in Jody Shapiro Matt Androski Parallel Metaball Modeler Alex Benton Parallel Ray Tracing in Vineet Ahuja Amith Yamasani Parallel Rendering with Mesa Felix Lung Han Wang and David Wu Video Conferencing over ATM Hani Jamjoom Saleh Mohamed Munshi Parallel RIVL over UNET Sugata Mukhopadhyay Jonathan Barber parallel file system in Libby Lin Gang Gong SplitPOV Parallel Mike Perham Keith Kwok PImP Parallel Package Justin Miller Kevin Mai Implementation of IP over Avinash Gupta Vivekananda Kolla	other	cornell
709	 Server Date Sunday GMT Thursday GMT World Wide Web Homepage Finger WFinger By Posse Software John Belizaire beli Julian Pelenur julian Mauricio Aguilar Alvarez mauri WFinger search form Please fill out one or more of the following WWW Server req Last Name First Name UserId To start your search To clear the form fields Notes Wfinger searches the entire www server It takes time min at It Great Last Revised Thu Nov EST Any comments or suggestions to beli julian mauri	other	cornell
710	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
711	 Server Date Sunday GMT Friday GMT Abstract of Algebra Type Theory Paper Abstract for Paul Jackson Exploring Abstract Algebra in Constructive Type Theory In Bundy editor International Conference on Automated Deduction Lecture Notes in Artifical Intelligence Springer Verlag June describe my implementation of computational abstract algebra in the Nuprl system focus on my development of multivariate polynomials show how use Nuprl expressive type theory to define classes of free abelian monoids and free monoid algebras These classes are combined to create class of all implementations of polynomials discuss the issues of subtyping and computational content that came up in designing the class definitions give examples of relevant theory developments tactics and proofs consider how Nuprl could act as an algebraic oracle for computer algebra system and the relevance of this work for abstract functional programming Last Modified Jan Paul Jackson jackson	other	cornell
712	 Server Date Tuesday GMT Monday GMT PODC home page Fifteenth ACM Symposium on Principles of Distributed Computing PODC PODC is conference that focuses on research in the theory design specification or implementation of distributed systems PODC will be participating in the Federated Computing Research Conference FCRC in Philadelphia PA USA As result the dates for PODC are quite different from the dates for previous PODCs Important dates Nov Paper submission deadline Jan notifications Feb versions of accepted papers due May Conference dates Major changes from previous PODCs This year PODC will be participating in the Federated Computing Research Conference As result the conference dates are quite different from previous years PODC will be accepting paper submissions electronically Further information The call for papers How to submit your paper to PODC The list of accepted papers Temporary notices about PODC room share information The PODC mailing list The PODC and PODC home pages Other related conferences and calls for papers About research in distributed algorithms and systems Ordering proceedings from earlier PODCs Maintained by tushar	other	cornell
713	 Date Sun Dec GMT Server Thu Jun GMT The Virtual Reality RailRoad Project	other	cornell
714	 Server Date Sunday GMT Thursday GMT Adam Florence Other Interests Adam Florence Other Interests Dilbert am member of the DNRC My title is Minister of Hobgoblins of Little Minds This refers to an sent Scott Adams about the and DNRC newsletters pointed out small inconsistency between the newsletters Therefore am in charge of foolish consistency in the DNRC Every day read the new Dilbert cartoon on the Dilbert Zone Babylon Babylon is science fiction television show produced by Warner Brothers They have an official web site though think the unofficial Lurker Guide is the best source for episode information am member of the Babylon Fan Club was also winner in the Babylon Mystery Alien Sweepstakes Back to my home page Last updated Sept me with comments or corrections	other	cornell
715	 Server Date Monday GMT Friday GMT CS Fall Lecture Lecture MaxFlow Preflow Push homepage Page Page Page Page	other	cornell
716	 Server Date Sunday GMT Tuesday GMT Pittsburgh Pittsburgh Etiquette Real Pittsburghers are conscious of two sets of conduct Correct and Reasonable Newcomers to Pittsburgh are probably accustomed to the first set Examples include Waiting until the end of traffic light cycle to make left turn if there is oncoming traffic thus making traffic run smoothly Not honking unnecessarily as it upsets other drivers Never parking in front of driveways Not having claim to the parking space on the street in front of your house Using supermarket cart to take your groceries to your car in the parking lot Not nosing around in your neighbors affairs Using turn signals correctly When Pittsburghers go abroad that is out of Southwestern Pennsylvania they follow the Correct rules of conduct However no matter how sizable the Pittsburgh population it is still small town As result native residents will almost always choose to follow the Reasonable set when they are at home Reasonable rules are similar to those in the Correct set but modified as necessary by taking into account the following Fundamental Axiom Do what others would do if they had close personal relationship with you In the presence of this Axiom the examples above change slightly and could be read Since the first car going in the opposite direction at the intersection is close personal friend of yours he wo mind your saving some time and running through as soon as the light turns green instead of waiting until the end of the traffic cycle Honk to say Hi to the friend you see walking along the sidewalk No one will mind since he is their friend as well Your friend will not mind your blocking his driveway After all you willl only be there few minutes Everyone in town gets parking space so why should you It long walk back to your house so you just borrow the shopping cart from your good friend the manager of the local Giant Eagle You will bring it back next time you go or maybe one of your friendly neighbors will do it for you Since you are close personal friend of your neighbor you should pay special attention to his private affairs so that you can help him out in times of trouble Everybody knows where you going so why should you use turn signals The Reasonable set of conduct does have some results which can be viewed as positive Pittsburghers thank the bus driver when disembarking neighborhoods have festivals every summer and the checkout person is often quite friendly to you Excerpted from Reid Rich Guide to Living in Pittsburgh ed CMU CS July pierce	other	cornell
717	 Server Date Monday GMT Tuesday GMT Lecture Programs Lecture Programs These programs from lecture are available as CodeWarrior projects Lectures Reference Parameters and Craps Game Spring pierce	other	cornell
718	 Server Date Monday GMT Saturday GMT CS Recitation Notes CS Recitation Notes Here is the list of recitation notes available Recitation How to use CVS How to use make and gdb Recitation How to use purify Introduction to TCL TCL Tutorial Slides written by John Ousterhout Recitation Introduction to TK TK Tutorial Slides written by John Ousterhout Recitation TK Demo Program TK Demo Program Explanation TK Demo Program Output Recitation Operator Loading Recitation Templates Last modified Nov	other	cornell
719	 Server Date Sunday GMT Thursday GMT Course Information Course Information http The most up to date version of this document is in the Course Materials found on CoNote People Instructor Thorsten von Eicken Upson tve office hours Tue Teaching Assistants Aaron Thomas Deever Rhodes office hours TBD Zhen Xiao Upson xiao office hours TBD Michael Korby Upson mkorby office hours TBD Consultants Consulting help is available in Upson Course Administrator Laurie Buck Upson office hours pm What When Lectures Kimball Sections Mon pm Hollister Tue pm Comstock Wed pm Hollister Attending sections is required New material will be presented that you will need to know in order to complete the homeworks and the projects Attend one section each week Sections will begin the second week of classes You may attend any of the sections regardless of your registration However it would be helpful if you attended the same section each week Tutoring The course TAs will be available during regular office hours for extended consulting help Schedule an appointment by sending email to the TA at least hours in advance If you do not schedule an appointment you may find the TA busy and thus unable to spend time with you Consulting Consulting help is available in Upson The hours have not yet been finalized Consultants will grade your homeworks as well as answer questions about the computer system programs homework assignments and other things related to the content of the course To help ensure that consulting time is used to best advantage we ask you to observe few ground rules When your program does work try to decipher the error message find the location of the error in your listing and look at the relevant registers and memory before seeing consultant Have current listing of your program written in good style to show to the consultant Consultants will not spend time attempting to trace uncommented code Plan to spend no more than to minutes of the consultant time If you need more time then set up an appointment with the TA Texts and References Most of the information relevant to the course will be handed out in the form of lecture notes You are required to buy one textbook which is actually manual for the PowerPC and is rather cheap We recommend the Patterson Hennessy textbook because it is very good and you will refer to it many years hence to remind you of how processors memories caches disks etc work However that book uses different processor and there is correspondence between lectures and sections of the book For this reason it is not required Some people like to sit down read book in order to learn or in order to find out more and the book works well for that Others like to review the lectures using textbook and this book does work for that It your call Required CS lecture notes Available through the course home page PowerPC RISC Microprocessor User Manual Motorola catalog or IBM catalog in the bookstore should be cheap Optional Patterson and Hennessy Computer Organization and Design Morgan Kaufmann Available in the bookstore expensive but very good Bartee Computer Architecture and Logic Design Book Company if your have difficulties with boolean algebra IBM The PowerPC Architecture Edited by May Silha Simpson and Warren Morgan Kaufmann Expensive luxurious not clearly better than the cheap user manual but little more general MetroWerks CodeWarrior academic development environment Available for at the bookstore in case you have PPC and want to work at home Lecture notes Homeworks Projects Exams and Grades You will have weekly homework assignments and five projects Strong emphasis will be placed on timely completion of the homeworks and projects We will use system see below to encourage this If you can not meet the due date of an assignment because of serious illness or other extraordinary circumstances use the system to catch up If you really really need an exception contact Brian before the assignment deadline for an extraordinary extension Primary source The primary source for lecture notes informational handouts and assignments will be on the web URL http We will update the versions if errors are discovered or assignments need clarification The system will permit you to make annotations to lectures and assignments allowing you to ask questions and see responses In order to be able to reach the course materials you need to sign up with the Web page annotation system called CoNote Signing up with CoNote is what homework is all about you should go back to the course home page and click on the course materials link You will be asked an id and password just click cancel and then fill out the form that pops up Then you get what looks like nasty error message but in fact it page that allows you to request student access level talk about friendly user interface Simply click on the Request Student Access Level button and you almost done Almost because you now get to enter the id you just chose with the password After all this you should get message that indicates that you now have permission to author annotations Hint click on File NewWebBrowser in Netscape now to get new window to follow these instructions this way you do loose the instructions from sight You are responsible for checking the version for changes up to hours before you an assignment If we make change and you did take it into account because you did check it will be your problem You are not responsible for changes to an assignment after you have handed it in should you hand in something early Prerequisites or equivalent Students are expected to have programming experience using If you know another programming language PASCAL you are expected to acquire expertise on your own We will assume familiarity with recursion arrays records pointers linked data structures and stepwise refinement Homeworks Homeworks will be handed out thursdays and be due at the following thursday They will be relatively simple and allow you to check whether you understood the material presented in lecture and section The homeworks will be graded on the spot by the course consultants You will not be allowed to drop homeworks off you have to have them graded on the spot The crunch tends to come around Thursday so if you want to avoid waiting you should turn your homework in early and get extra merits Also be sure not to miss the consulting hours Answer sheets for all homework assignments will be distributed one week after the assignment is due These should be studied and understood Homework questions have been known to reappear on examinations Projects Projects will be handed out tuesdays and be due two tuesdays later The second an third projects will be centered around subset of the PowerPC assembly language called in the first project you will write small assembler program in the second project you will write machine language simulator in in the third project you will build CPU in three phases datapath logic phase datapath implementation control logic final all implemented and working You will work in groups of two on all the projects no exceptions unless there is an odd number of students When working in group submit for grading single printout that includes the names of both students in the group The same grade will be given to both students Both students are expected to be equally able to answer questions about the program or project The projects will be graded on the spot by having you demonstrate them to TA or course consultant Sign up sheets for these demos will be available later Exams There will be two prelims one on at and one either or not determined yet at There is no final exam Grade computation Your course grade will be computed as follows first prelim curve second prelim curve homeworks absolute project asm programming absolute project simulator absolute project hw design parts absolute We designed the system to allow you some flexibility in turning in your assignments Here how it works Homeworks or projects will be accepted up to calendar days late sunday for homeworks but each day will result in one demerit Homeworks or projects will also be accepted up to calendar days early starting monday for homeworks and each day will work off one demerit or give you credit for the future Each demerit left at the end of the course will cost you of your grade almost homework If at any time you reach demerits there goes of your grade you will receive harsh ultimatum By being on average you earn of your grade Extra merits will only affect your grade if you are on the boundary between two grades no guarantees though Merits and demerits are personal group project that is late costs each member Grading and Regrades Grades will be posted indexed by secret ID number you provide on the Web If you believe that we have made grading error please first discuss the matter with one of the course consultants or teaching assistants If after such discussion it appears that mistake has really been made bring the error to our attention but no later than one week after your assignment has been returned To submit problem set program or exam for regrading obtain regrade request form from one of the consultants or from outside Upson Fill out the request form and leave the request along with the assignment in question in Upson regrade request can cause your grade to go up or down Regraded assignments will be returned by the course consultants Academic Integrity The work you submit in CS is expected to be the result of your individual effort You are free to discuss course material approaches to problems and details of the system with your colleagues instructors and Computer Services consultants but you should never misrepresent someone else work as your own Permissible cooperation should never involve student possessing copy of all or part of another student program or other work regardless of whether that copy is on paper or in computer file on hard disk or floppy disk The only exception to these rules is when two students work together to submit joint project It is also the student responsibility to protect work from unauthorized access For example do not discard copies of your programs in public places Violation of the Academic Integrity Code very often results in failure in the course and permanent notations on your Cornell academic records If you have any question as to what constitutes ethical behavior ask the instructor first we will not be sympathetic to claims of ignorance or misunderstanding of the rules	other	cornell
720	 Server Date Sunday GMT Thursday GMT Browsing of CS Technical Reports Browsing of CS Technical Reports Below are OCR versions of couple of existing Cornell CS Technical Reports The documents include just one browsing feature into the documents clicking on individual citations in the document will show you the full reference More to come	other	cornell
721	 Server Date Sunday GMT Monday GMT Education and work experiences of Koichi Kamijo Education and work experiences got degree at the University of Tokyo Electrical Engineering Saito lab currently an MEng student at Computer Science Cornell University also working for IBM Japan Yamato lab My recent work was developing ThinkPad notebook PC such as ThinkPad and ThinkPad was mainly in charge of developing systems such as docking stations and imbedding multimedia functions such as Video Capture function Video Accelerator output and MPEG viewer into notebook PC visited several IBM labs Following are the labs visited so far visiting order IBM NY stayed here for months to fix an electrical problem of IBM console of IBM Poughkeepsie is nice place along Hudson river and with lots of green It is also close to New York City hr and Boston hrs IBM NC stayed here for months as liaison Raleigh is the capital of North Carolina and also nice quiet place Duke and NC state university are close IBM Raleigh is located at RTP Research Triangle Park Wright brothers were born in North Carolina as you can see in the plate of cars here IBM Hursley UK stayed here for weeks to fix an EMI problem of terminal we were developing Hursley is close to London hr and also close to Wimbledon One of the buildings in IBM Hursley used to be castle There is bar inside IBM Boca Raton FL visited here twice and stayed for months all together once to help designing adapter and once as liaison As mentioned in Where lived it summer all the year and close to many cool spots IBM Taiwan ROC stayed for weeks to have meeting with IBM Taiwan and vendors in Taipei and Hshinchu love the foods in Taipei because their tastes are close to ours In Japan often visit Chinese town in Yokohama to visit Aoba one of my favorite restaurants where very good Taiwanese food is served	other	cornell
722	 Server Date Sunday GMT Sunday GMT Course Staff Course staff and office hours Instructor Keshav Pingali Rhodes Hall Office hours Thursday Email pingali Teaching assistants Nawaaz Ahmed Rhodes Hall Office hours Monday AM Rhodes Email nawaaz Tugkan Batu Upson Office Hours Friday PM Upson Email batu Jose Machuca Office hours Wednesday PM Upson Email Oliver Chang Office Hours Monday PM Upson Email Felix Lung Office Hours Friday AM Upson Email flung Sunil Srivastava Office Hours Wednesday PM Upson Email sxsrivas Sections Fall Sections DayTimeRoomInstructor Machuca Ahmed Ahmed Oliver Chang Batu Lung Srivastava Consulting Consultants are available in Upson for help with coursework The consultation hours are posted on the door	other	cornell
723	 Server Date Sunday GMT Wednesday GMT Me	other	cornell
724	 Server Date Sunday GMT Sunday GMT Other Links of Interest Programming Metrowerks home page Cygnus Support Library Yahoo Directory of Programming International Obfuscated Code Contest page Last Updated on Monday September AM Any Comments or Suggestions Email them to dwu	other	cornell
725	 Server Date Monday GMT Thursday GMT Prelim Prelim General Info Tuesday April pm The Prelim review session will be held on Sunday April at pm in Baker Room Assignments Olin Upson Me Thurston Mi Thurston Olin Spring pierce	other	cornell
726	 Server Date Sunday GMT Monday GMT Who am Who Am am student at the Departmant of Computer Science of Cornell University work with Professor Robert Constable In Fall maintained Web page of course in Advanced Programming Languages This semester start my work for Nuprl project graduated from the Department of Mechanics and Mathematics of Moscow State University Moscow Russia Under supervision of Professor made several publications in Mathematical Logic My wife Elena now is graduate students in Economics at the State University of New York at Buffalo We are married more then years and know each other more than years because we graduated the same high school in Moscow By the way the same school one year after us graduated my classmate at Cornell Eugene Ortenberg	other	cornell
727	 Server Date Sunday GMT Tuesday GMT Viewing System Viewing System Master of Engineering Project Eric Shim Computer Science Department Cornell University Advisor Professor Bruce Land Table of Contents Introduction Equations Implementation How this program works Conclusion Acknowledgements References Introduction Although various display devices exist most computer graphics view surfaces are Thus pipeline the jargon term used to describe the various processes in converting from world coordinate space to representation must contain projective transformation and viewing transformation the minimum requirements to convert scene to projection have designed and implemented the Viewing System IV which was carefully explained in the Computer Graphics by Alan Watt using JAVA All the objects are created in the world coordinate system which is conventionally represented as system We can consider transformation Tview from world coordinate system to viewing coordinate system Xv Yv Zv Here in viewing coordinate system vertices are expressed in coordinate system with the origin sometimes known as the view point or view reference point which is represented as the position of viewer eye or the position at which virtual camera is placed Then the second transformation Tpers is applied to project points in view space onto the the screen space Xs Ys Zs Then projected the vertices from screen space onto the projection space which is view plane to simulate the camera transformation full viewing system will also determine view volume truncated view frustum which is the subset of world coordinate space which is to be included in the transformation process As far as general rendering pipeline is concerned needed to define view volume To define this view volume needed to specify near plane far plane and view plane window The specific plane formula will be presented in the Equations section of this report Since it was very hard to create the view frustum in the world coordinate system have created the view frustum in the viewing coordinate space and apply inverse Tview matrix to the view frustum that has created in the viewing coordinate system By doing this was able to create the view frustum in the world coordinate system Also the three dimentional clipping should be performed in the viewing coordinate space Equations We need viewing direction vector and up vector and an optional vector The following equations are showing how to obtain these vectors vector is viewing direction vector and is obtained by calculating camera to position subtract camera from position This vector is used when we calculate the Tview Matrix vector is up vector Because must be perpendicular to we need strategy that can take care of this care where the user entered is not perpendicular to Since the user entered vector is just estimated vector we need to calculate the vector by apply this equation This vector is also used when we calculate the Tview Matrix vector is an optional vector that could be obtained by cross product of and vector resulting in coordinate system Also this vector is used when we calculate the Tview Matrix Tview matrix is obtained simply by calculating this equation This Tview can transform any points in world coordinate system into the viewing coordinate system matrix translates the object and matrix roates the object where and are the followings Now we have to have someway to transform from the viewing coordinate system into the world coordinate system In the case of view frustum which was created in the viewing coordinate system and needed to be transformed to world coordinate system Tview inverse matrix is obtained simply by calculating this equation This Tview inverse can transform any points in viewing coordinate system into the world coordinate system transpose matrix translates the object and matrix roates the object After we have create the object in the world coordinate system and transform the points into the viewing coordinate system we need to transform the points in viewing coordinate system into the screen coordinate system again By doing this we are finally be able to simulate the camera transformation from world coordinate system to screen coordinate system where Tpers matrix is obtained simply by calculating this equation This Tpers matrix is consists of and values that the user has entered from the user interface is the distance from the camera to the near plane Incidently the view plane is the same as the near plane in this viewing system is the distance from the camera to the far plane Finally the value is the half of the height of the view plane window As create the view frustum should be able to specify the six planes There are Xv Yv and two Zv values Xv specifies the two planes of the view frustum Yv specifies the top and the bottom planes of the view frustum And the Zv specifies the front near plane and view plane plane and the far plane Implementation In this project have implemented classes which represents each objects in this Viewing System will introduce all the classes and briefly go over each class class definition in this section Class definitions cameraTransformation The main program This class creates all the buttons canvases text fields And this class contains user input data Tview and Tpers matrixs Also this class initialize all the necessary variables and handle all the events that user entered such as mouse click or enter the value of camera location camera to vector and values This class converts the coordinates into the coordinates to draw on the canvases To show the effect in case this class rotates the object little bit by and axis so that the user can see the object as effected This class is the base class of any other objects that would be displayed on the canvases such as view frustum and cube This class contains all the vertices on all three coordinate systems and the points that would be displayed on the canvases which is called view coordinates in this class ViewFrustum This class contains all the necessary information about the view frustum This is extended class from the class which means that it contains every thing from the and plus whatever view frustum need to have Also this class creates view frustum in the viewing coordinate system according to the value of camera location and camera to value Cube This class contains all the necessary information about the cube This class is extended class from the class Also this class creates cube on the origin of the world coordinate system according to the length of edge Tview This class contains all the necessary information about the Tview Also this class creates the Tview by doing the followings Find vectors Create the matrix Create the matrix Create the Tview matrix by calculating TB Create the Tview inv matrix by calculating BtrnasposeT Tpers This class contains all the necessary information about the Tpers Also this class creates the Tpers according to the and values that the user entered worldCanvas This class contains all the necessary information of the world canvas Paints the objects in the world coordinate system and handle the rotation of the objects by draging the mouse on the world coordinate system viewCanvas This class contains all the necessary information of the view canvas Paints the objects in the viewing coordinate system and handle the rotation of the objects by draging the mouse on the viewing coordinate system screenCanvas This class contains all the necessary information of the screen canvas Paints the objects in the screen coordinate system and handle the rotation of the objects by draging the mouse on the screen coordinate system projectionCanvas This class contains all the necessary information of the projection canvas Paints the objects in the projection canvas in manner This class contains the matrix calculation methods For this class have partially referenced from the code of Awwwesome Webware Vectorf This class contains the general vector calculation methods This class is the base class of or any other Vector classes For this class have partially referenced from the code of Awwwesome Webware This class contains the four element vector calculation methods This class is derived from the Vectorf class For this class have partially referenced from the code of Awwwesome Webware The detailed code of this project can be obtained by clicking on this How this program works If you like to simulate the camera transformation to see how the viewing system works you may press on the viewing system Viewing System You will see four canvases in the viewing system which are the world coordinate canvas viewing coordinate canvas screen coordinate canvas and the projection coordinate canvas As user changes the approximated vector camera location vector camera to vector and values this program redraws the objects according to the values of variables that user entered on all these four canvas appropreately The user needed to press on VIEW button after they have changed the values of variables to simulate the camera transformation Conclusion was able to simulate the camera transformation for viewing system in this project By simulating the Viewing System IV had less restriction when view the object in the world coordinate since could change the camera position and where to look at Also by having the view frustum did have to relying on clipping algorithm to eliminate any information in the view plane that falls outside the view plane window Eventhough this project performs just fine with my initial design could think of some more features that could make this project works even better First adding more objects to view could make it better to understand what is going on while viewing the object Second diminishing the line brightness when draw the object as it gets deeper in axis could help the user lot more to tell which line is in front and which one is in the back Acknowledgements It would have been difficult to finish this project without the greatest guidence of Professor Bruce Land would like to thank him from the deep of my heart would like to thank my mother Shim for helping me and praying for me to survive from the darkest period of my life Thanks to my brother and sister Andy Shim and Julie Shim for supporting me and understanding me by financially and mentally also would like to thank to my friends and in HANA and KIDS Most of all would like to dedicate this work to my father Shim who is in heaven for giving me strength and courage to continue to learn and complete the Masters Degree in Cornell University References Alan Watt Computer Graphics Publishing Company	other	cornell
728	 Server Date Monday GMT Tuesday GMT Synthesis Research Summary Three bottlenecks exist in scientific computing generating the effective software for complicated mathematical problems running the software on machine and interpreting or visualizing the large body of data that is produced by the computation In computational fluid dynamics and especially in turbulence research the time spent developing effective software can dwarf the actual running time by orders of magnitude This research focusses on automating the process of synthesizing scientific software using high level programming language called SPL SPL allows the programmer to indicate continuous objects of interest like differentiable functions distributions etc and manipulate them using operations from arithmetic and calculus as well as to limit their possible values by using constraints such as algebraic and differential equations This specification is then transformed into more concrete executable form via user directed transformations coded in conjunction with the computer algebra substrate Weyl Participants Divakar Visnawath Richard Zippel Publications Berkooz Chew Cremer Palmer and Zippel Generating Spectral method Solvers for Partial Differential Equations Advances in Computer Methods for Partial Differential Equations VII pp Tech Report	other	cornell
729	 Server Date Sunday GMT Wednesday GMT For Sale Things Koichi Kamijo is selling in June Many stuffs are already sold out but still have some If you find something interested in send The price is open to negotiation The more you buy the more discount you get Car Sold out Chevolet Lumina Euro miles sports car type AT ABS cruise control power windows power seat automatic door wine red good shaping With snow shovel car lock and bar Furniture Full size Carpet Plastic drawer Sold out each Stationery set Includes many binders tapes punchers etc whatever you need for studying Garbage bin Large Midium Thompkins county Electrical Appliances Sony CD double deck radio cassette Sold out color TV Canon Japanese Word Processor Brand new value Telephone answering Sold out Telephone compact Sony alarm clock with radio Iron with stand Sold out Floor lamp Sold out each Table study lamp each Fan heater Sold out Small clock Sold out Xmas tree Kitchen Microwave Oven Sold out Zojirushi pot Sold out Sold out Sold out Glasses Source Pan and more Last update June	other	cornell
730	 Date Sun Nov GMT Server Fri Oct GMT CTC Visualization Tools DX Cornell Theory Center Data Explorer DX Examples of DX projects may be found in the Data Explorer Repository Data Explorer DX is block diagram point and click programming language designed for producing high quality images based on data The data may represent objects walls stars or fields density electric field DX design tools include vector and scalar field rendering human controls and geometric operations rotate zoom in addition to and plotting There is direct programming support for producing custom MOTIF control panels The Theory Center has added modules to make parametric surfaces texture maps bumpmaps spotlights and variety of other graphically oriented functions Figure shows the DX network that generated the Mandelbrot set displayed in figure The block diagram program is built up of modules and wires connecting them module is primitive program function that appears on the screen as block with input and output tabs Wires are dragged with the mouse from outputs to inputs group of modules can be hidden inside of another module to form user macro Figure The DX network and user interface Figure The Mandelbrot Set generated by the DX network above DX also provides the facility to animate the images it generates Return to Visualization at the Cornell Theory Center	other	cornell
731	 Server Date Sunday GMT Friday GMT Noel MacDonald Professor Electrical Engineering Director Cornell Nanofabrication Facility Phillips Hall nmacd California at Berkeley Biography After receiving his doctorate in electrical engineering MacDonald remained at Berkeley for year as an acting assistant professor In he became member of the technical staff at the Rockwell International Science Center and in he joined Physical Electronics Industries as an entrepreneur instrumentation engineer and manager In Physical Electronics was acquired by the Corporation and from then until MacDonald held management positions at these included the position of general manager for the Physical Electronics Division In he attended the Harvard Business School Program for Management Development In he came to Cornell as professor of electrical engineering and director of the Program on Microscience and Technology which is sponsored by the Semiconductor Research Corporation In he was appointed director of the School of Electrical Engineering MacDonald has specialized in technology with emphasis on microelectronic applications he was instrumental in combining Auger electron spectroscopy with scanning electron microscopy and in developing the scanning Auger microprobe He received the Victor Macres Memorial Award of the Electron Probe Analysis Society of America and Young Engineer of the Year Award presented by the Institute of Electrical and Electronics Engineers IEEE He serves on the SEMATECH University Advisory Board the International MEMS Steering Committee and the Advisory Board for the International Symposium on Electron Ion and Photon Beams EIPB In he chaired the EIPB symposium He is member of IEEE the American Physical Society the American Vacuum Society the Electrochemical Society and the Materials Research Society Research Interests The theme of our research is nanostructure fabrication and characterization We are interested in the ultimate spatial limits for fabricating probing and modeling electronic and mechanical structures Consequently research projects that address the generation and application of focused electron beams for nanofabrication along with computer simulation and modeling are included in the program Research subjects include fabrication of electron devices and nanomechanical structures for information storage vacuum microelectronics microinstrumentation for lithography and characterization probing of integrated circuits and nanostructures electron scattering and energy dissipation in solids lithography and nanosensors The goal of this research is to better understand the physical limits for fabrication integration characterization and inspection of nanostructures Current Research Projects Nanostructure Fabrication Electromechanical Optical and Electronic Devices Nanosensors and Nanoanalytic Instruments Simulation of Lithography Instrumentation for Nanofabrication Testing ps and Nanometrology Selected Publications Sanford and MacDonald Laser pulsed GaAs cathodes for electron microscopy Journal of Vacuum Science and Technology Sanford and MacDonald Electron emission properties of laser pulsed GaAs negative electron affinity photocathodes Journal of Vacuum Science and Technology Yao Arney and MacDonald Fabrication of high frequency nanoactuators for scanned probe devices Journal of Microelectromechanical Systems Yao and MacDonald scanning electron microscopy analysis of nanodynamical structures Scanning Microscopy Santos and MacDonald Integration of microstructures onto negative cathodes Fabrication and operation of an addressable negative cathode Journal of Vacuum Science and Technology Spallas Das and MacDonald silicon cathode arrays formed by selective lateral thermal oxidation of silicon Journal of Vacuum Science and Technology Last revised	other	cornell
732	 Server Date Monday GMT Tuesday GMT Collaborative Mathematics Environments Next Introduction PROJECT SUMMARY Collaborative Mathematics Environments Paul Chew Robert Constable Keshav Pingali Steve Vavasis Richard Zippel Computational science will be the dominant paradigm for science in the next century This proposal addresses one of the major challenges facing this new kind of science demand for better software support for computational mathematics The task of providing this support is sufficiently central to the national interest and sufficiently comprehensive that it could serve as Grand Challenge problem for computer science strategy for meeting this challenge has evolved from cooperation at Cornell on the elements of scientific computing This proposal represents collaboration among five computer scientists with diverse backgrounds scientific computing computational geometry computer algebra applied logic and programming languages In various combinations these people have worked together and software from their separate projects has been linked Their experience with the difficulty of this linking process has led to the identification and to the prospective solutions of three major problems the connectivity problem the code generation problem and the explanation problem The problems and their solutions are briefly explained below This proposal outlines plan to design and implement an open system architecture that will integrate variety of computational science tools into an environment that supports collaborative activity Many interesting and powerful tools exist to support computational mathematics for example Matlab Lapack Mathematica Axiom Ellpack PLTMG Autocad and LEDA but most of these are focused on one specific area or on one specific style of computation These systems are largely and closed connecting to other software only at very low level of abstraction using for instance communication They do not have common semantic base that would allow one system to collaborate with another This is the connectivity problem To address the connectivity problem common mathematical bus the MathBus will serve as the backbone of the system Its communication protocols will be based on typed formal language which provides the semantics for collaboration major design objective is to raise the level of communication among software tools allowing the communication of mathematical objects instead of being restricted to simple strings Although existing software has contributed substantially to scientific programming productivity the time taken to generate code remains major impediment to progress in computational science This is the code creation problem In part this problem is due to the difficulty of expressing certain mathematical techniques as subroutines The problem of code creation is addressed with method of transformation and refinement allowing the transformation of mathematical expressions into code One of the reasons that sharing code with colleague is difficult is because there is no common language for explaining what program does and for precisely giving the conditions necessary to apply it This is the explanation problem The solution to the connectivity problem also provides an approach to explanation namely to provide formal and semantic standards for communications and linkage on the proposed MathBus The problem solutions outlined here lead to an additional opportunity Once tools can and mathematical models can be shared it becomes possible to create collections of mathematical theorems explanations and examples and counterexamples Such mathematical database could capture an important part of mathematical knowledge that is at best poorly represented by books and journals Collaborative Mathematics Environments Paul Chew Robert Constable Keshav Pingali Steve Vavasis Richard Zippel Introduction The Basic Problems Research Program The Connectivity Problem Mesh Generation Numerical Linear Algebra Mathematical Bus The Code Creation Problem Quadratic Formula Sparse Matrices Ongoing Activities The Explanation Problem Symbolic Computations and the Explanation Problem Geometry and the Explanation Problem Access to Libraries Value of Precise Mathematical Language Conditions on Transformations Geometry Summary The Mathematical Database Opportunity Milestones Year Year Year Year Year Results from Prior NSF Support Constable Pingali Partial List of Publications Development of Human Resources Vavasis References Biographical Sketches Paul Chew Robert Constable Keshav Pingali Stephen Vavasis Richard Zippel Budget Salaries and wages for senior personnel Postdoctoral research associate Equipment Travel Current and Pending Support Facilities Equipment and Other Resources About this document Next Introduction nuprl project Tue Nov EST	other	cornell
733	 Server Date Sunday GMT Thursday GMT Pavel Naumov addresses Office Department of Computer Science CORNELL UNIVERSITY Upson Hall Ithaca NY phone pavel	other	cornell
734	 Server Date Sunday GMT Tuesday GMT CS Course Requirements and Grading Programs There will be six programing assignments Assignments for CS are due on Tuesdays Exception Because there is only one week of classes between Thanksgiving break and the end of classes for the semester the final program will be due on Thursday CS ProgramDue at pm on Programs are due at pm on the day assigned No Late Assignments Will Be Accepted Programs may be handed in by giving them to consultant in the Carpenter Lab You must give the program to consultant personally Do not just leave it on desk or table Programs may also be handed in at the end of lecture on the assigned date Programs should be printed separated into pages with the perforated edges removed and stapled together with the requested output The first comment in each program must contain your name and Cornell ID the day and time you attend section and your section instructor name These can not be written in by hand You must sign the first page of the program Each program will be given two grades one for correctness and one for program organization and style The grade for each part will be or All programs are weighted equally Working with Partners For the programming assignments you may work with one other student we encourage you to do this If you work with partner you should normally submit only one programming assignment between the two of you The program must contain both of your names and ID and information about when you attend sections in the first comment at the beginning of the program The program will be returned in section to the first person named in the comment the other person will receive for their records cover sheet showing the assigned grade Both of you must sign your names on the first page of the program Working with partner can be very helpful both in getting the assignments to work and in clarifying your understanding of the course material But be sure that both you and your partner share in the work equally and that both of you understand it You can not take the exams with partner Exams There will be three hour preliminary examinations and hour final ExamDateTime Prelim Prelim Prelim Review Sessions Will be held at pm on Sundays before each prelim and before the final exam Review sessions are scheduled on Sunday and in Olin Graded Assignments and Exams Will be returned in your section Unclaimed work may be obtained from the consultants in the Carpenter lab Bring your Cornell ID to pick up an exam Regrades If you feel an exam or program has been incorrectly graded fill out regrade request giving your reasons in writing attach the exam or program to it and give it to consultant in the Carpenter lab regrade request can cause your grade to go up or down the paper will be regraded from scratch regrade request must be submitted within one week after the graded work is first returned Posted Grades Grades will be posted outside the Carpenter lab by either student ID or four digit code that you give us It is your responsibility to verify that our records are correct If you find an error please contact the course administrator Laurie Buck during her office hours Course Grades Grades for are computed as follows Final Grades Programs Prelim Prelim Prelim Final Your letter grade will be based on your total score The actual cutoffs between letter grades wo be decided until the end of the course Last Updated on Sunday September PM Any Comments or Suggestions Email them to dwu	other	cornell
735	 Server Date Monday GMT Monday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
736	 Server Date Sunday GMT Tuesday GMT MultiMATLAB MultiMATLAB MATLAB on Multiple Processors Anne Trefethen Cornell Theory Center aet Vijay Menon Computer Science Department Cornell University vsm Chang Computer Science Department Cornell University chichao Grzegorz Czajkowski Computer Science Department Cornell University grzes Chris MyersCornell Theory Center myers Lloyd Trefethen Computer Science Department Cornell University lnt Abstract commercial product of The MathWorks has become one of the principal languages of desktop scientific computing system is described that enables one to run MATLAB conveniently on multiple processors Using short commands like Eval Send Recv Bcast Min and Sum the user operating within one MATLAB session can start MATLAB processes on other machines and then pass commands and data between between these various processes in fashion that maintains MATLAB traditional graphics is also supported The system currently runs under MPICH on an IBM or network of Unix workstations and extensions are planned to networks of PCs MultiMATLAB is potentially useful for education in parallel programming for prototyping parallel algorithms and for fast and convenient execution of easily parallelizable numerical computations on multiple processors Keywords MATLAB MultiMATLAB message passing MPI MPICH Introduction The Popularity of MATLAB is language and environment for mathematical and scientific calculations It originated in the late with an attempt by Cleve Moler to provide interactive access to the Fortran linear algebra software packages EISPACK and LINPACK Soon programming language emerged programs conventionally have the extension and are called containing dozens of commands such as svd singular value decomposition fft fast Fourier transform and roots polynomial zerofinding Graphical commands were built into the language and company called The MathWorks was formed in by Moler and John Little now based in Natick Massachusetts From the beginning MATLAB proved greatly appealing to users The numerical analysis and signal processing communities in the United States took to it quickly followed by other groups of scientists and engineers in the and abroad Roughly speaking the number of MATLAB users has doubled each year since According to The MathWorks there are currently about users in fifty countries and this figure continues to increase rapidly In many scientific and engineering communities MATLAB has become the dominant language for desktop numerical computing At least six reasons for MATLAB success can be identified The first is an exceptionally intuitive syntax favoring brevity and simplicity at all turns without being so compressed as to interfere with intelligibility The second is the very high quality of the underlying numerical programs result of MATLAB intimate ties from the beginning with the numerical analysis research community The third is powerful and graphics The fourth is the high level of the language which often makes it possible to carry out computations in line or two of MATLAB that would require dozens or hundreds of lines in Fortran or The ability to link with Fortran or programs is also provided The fifth is MATLAB easy extensibility via packages of known as Toolboxes Many Toolboxes have been produced over the years both by The MathWorks and by others covering application areas such as optimization signal processing fuzzy logic partial differential equations and mathematical finance Finally perhaps the most interesting reason for MATLAB success may be that from the beginning the whole language has been built around real or complex vectors and matrices including sparse matrices as the fundamental data type To computer scientists not involved with numerical computation such limitation may seem narrow and capricious but it has proved extraordinarily fruitful It is probably fair to say that one of the three or four most important developments in numerical computation in the past decade has been the emergence of MATLAB as the preferred language of tens of thousands of leading scientists and engineers Single vs Multiple Processors Curiously one of the other principal developments of the past decade has been orthogonal to that one This is the move from single to multiple processors new generation of researchers and practitioners have grown up who are accustomed to the principle that computing means computing phenomenon attested to by the success of these Supercomputing conferences But this development and the emergence of MATLAB have been disjoint events as MATLAB remains language tied to single processor Originally MATLAB was conceived as an educational aid and as tool for prototyping algorithms which would then be translated into real language The justifications for this point of view were presumably that MATLAB capabilities were limited and that being interpreted it could not achieve the performance of compiled language Over the years however the force of these arguments has diminished So much MATLAB software is now available that capabilities can hardly be called narrow anymore and as for performance many users find that degradation in speed by factor between and is more than made up for by an improvement of programming ease by factor between and In MATLAB one effortlessly modifies the model plots new variable or reformulates the problem in an interactive fashion Such rapid exploration is rarely feasible in Fortran or Thus increasingly MATLAB has become language for real computing by scientists and engineers But one sense has remained in which MATLAB is only system for education and prototyping If one wants to take advantage of multiple processors then one must switch to other languages Experts such as many of those participating in this conference are in the habit of doing just this Others less familiar with the complexities of computing remain tied to their MATLAB desktops isolated from the trend towards multiprocessors The vision of the MultiMATLAB project has been to bridge this gap Think of user who finds or herself computing happily in MATLAB but frustrated by the time it takes to rerun the program for six different boundary conditions or dozen different parameter choices or hundred different initial guesses Such user problems might be solved by system that makes it convenient to spawn MATLAB processes on multiple processors of parallel computer or network of workstations or PCs In many cases the needs for communication between the processors are rather small Convenience of spreading the problem across machines and collecting the results numerically or graphically is paramount The MultiMATLAB project is exploring one approach for making this kind of computing possible We do not at the outset aim for parallelism or for peak performance of the kind needed for the grand challenge problems of computational science Instead following the philosophy that has made MATLAB so successful we require reasonable efficiency but put the premium on ease of use key principle is that MATLAB itself not facsimile which would have little chance of keeping up with the features of the commercial product must be run on multiple processors Our vision is that user must be able to learn enough in five minutes to become intrigued by the system and begin to use it Using MultiMATLAB Start Nproc Eval ID Each MultiMATLAB command begins with an initial letter We illustrate how the system is used before describing its implementation Suppose the first author is sitting at her workstation in the Theory Center connected to node of the IBM running MATLAB After time she decides to start MATLAB on five new processors She types Start MATLAB is then started on five additional processors taken from predetermined list Or perhaps the second author is sitting at machine connected to Cornell Computer Science Department network He types Start Now MATLAB is started on the five processors with the names indicated Some names could be repeated in which case multiple MATLAB processes would be started on single processor In either case when all the processes are started the message is returned MultiMATLAB processes running This total number of processors can subsequently be accessed by the MultiMATLAB command Nproc The standard MultiMATLAB command for executing commands on one or more processors is Eval If the user now types Eval then the MATLAB command sqrt is executed on all six processors The result is six repetitions of which is not very interesting On the other hand the command Eval calls the MultiMATLAB command ID on each of the processors running This command returns the number of the current process an integer from to Running it on all nodes might give the result ans ans ans ans ans ans The ordering of these numbers is arbitrary since the processors are not synchronized and output is sent to the master process as soon as it is ready It is good idea to type Eval compact at the beginning to keep the output from the various processes as condensed as possible The command Eval might produce ans ans ans ans ans ans In the above examples in keeping with our orientation toward SPMD programming each command passed to Eval was executed on all MATLAB processes Alternatively one can select subset of the processes by passing two arguments to the Eval command the first being vector of process IDs Thus Eval hilb ID might return ans ans the condition numbers of the Hilbert matrices of dimensions and and Eval exp ID might return ans ans ans the integrals of ex from to for and Note how the double quote is used to obtain string within string This calling of the MATLAB command quad gives hint of the power available that is so characteristic of MATLAB In this case adaptive numerical quadrature has been carried out to compute the desired integral MATLAB users are accustomed to treating problems like integration zerofinding minimization and computation of eigenvalues as routine matters to be handled silently by appropriate commands None of these examples were costly enough for the use of multiple processors to serve much purpose but it is easy to devise such examples Suppose we want to find the spectral radii maximum of the absolute values of the eigenvalues of six matrices of dimension The command Eval abs eig randn does not do the trick we get six copies of the number since the random number generators deliver identical results on all processors Preceding the eigenvalue computation by Eval seed ID however leads to the result desired ans ans ans ans ans ans The spectral radius of an by random matrix is approximately the square root of for large In typical experiment this example might run in seconds on six thin nodes of our the elapsed time would be six times greater if one used for loop on single machine Of course Monte Carlo experiments like this one are always the easiest examples of embarrassingly parallel computations For simplicity the examples above call Eval with an explicit MATLAB command as an argument string For most applications however user will want to execute program an rather than single line of text command such as Eval achieves this effect Put Get So far we have not communicated between processes except to send screen output to the master process Of course nontrivial MultiMATLAB system depends on such communication One form of communication we have implemented is puts and gets executable solely by the master MATLAB process For example the command Put sends the matrix from the master process to processes through an optional argument permits the name of to be changed at the destination The command Get gets the matrix back from process to the master Send Recv Probe Barrier More general communication is accomplished by send and receive commands which can be executed on any of the MATLAB processes For example the sequence pi Send Eval passes message containing from the master process to process leading to the output An optional argument can be added in Recv to specify the source Another optional argument may be added in both Send and Recv to specify message tag so as to ensure that sends and receives are properly matched and to aid in error checking The command Probe run on any process again with optional source process number and message tag returns true if message has arrived from the indicated source with the indicated tag otherwise false SPMD programs can be built upon Send and Recv commands Typically the program contains if and else commands that specify different actions for different processes For example suppose the consists of the following program if first process send Send elseif ID last process receive and double else middle processes receive double and send Send end Process creates the variable with value and sends it to process Process receives the message doubles the value of and sends it along to process and so on If there are six processors the command Eval produces the output The processes run asynchronously but since each Send command is only executed after the corresponding Recv has completed the proper sequence of computations and final value are guaranteed so long as all of the nodes are functioning Alternatively MultiMATLAB command is available for explicit synchronization The command Barrier returns only when called on each process Bcast Min Max Sum Although Send takes vector of processor IDs as its destination list the underlying idea is that of communication For more efficient communication between multiple processes as well as greater convenience for the programmer MultiMATLAB also has various commands for collective communication These commands must be evaluated simultaneously on all processes The Bcast command is used to broadcast matrix from one process to all other processes using algorithm For example Eval ID returns the number on all processes Bcast is much more efficient than corresponding Send and Recv The same kind of tree algorithm is used for various computations that reduce data from many processes to one For example the commands Min Max and Sum compute vectors obtained by reducing data over the copies of vector or matrix located on all processors Thus the command Eval ID Nproc executed on six processes will return the vector to process If the first argument is omitted the result is returned broadcast to all processes MultiMATLAB Commands The MultiMATLAB commands described so far represent communication primitives as they are used in the paradigm of programming One of the aims of this project however is to provide also an interface at higher level by building on these routines hiding as much of the message passing as possible We can do this by taking approach in simplistic fashion We have developed number of routines such as Distribute and Collect that allow user to distribute matrix or to collect set of matrices into one large matrix These functions operate using mask that indicates which processors hold which portions of the matrix This allows us also to develop routines such as Shift and Copy that are useful in computing keeping the communication to more abstract level Additional geometry routines such as Grid and Coord have also been constructed that allow the user to create grid of processors in or dimensions These provide powerful tool for more sophisticated parallel coding An optional argument on the communication routines allows communication within given set of nodes for example along column or row of the grid We do not give further details as these facilities are under development Multiprocessor Graphics One of the great strengths of MATLAB is graphics primary goal of the MultiMATLAB project has been to ensure that this strength carries over to multiprocessor computations In many applications the user will find it most convenient to compute on multiple processors but produce plots on the master process after sending data as necessary Equally often however it may be desirable to produce plots in distributed fashion that are then sent to the user screen This can be particularly useful when one wishes to monitor the progress of computations on several processors graphically We have found the following simple method of doing this to be very useful As mentioned above many calculations with geometric flavor divide easily into say four or eight subdomains assigned to corresponding set of processors We set up MATLAB figure window in each process and arrange them in grid on the screen This is easily done using standard MATLAB handle graphics commands and we expect shortly to develop MultiMATLAB commands for this purpose that are integrated with the grid operations mentioned earlier The figure below shows an example of this kind of computing in this case we have by grid of windows In this particular example what has been computed are the pseudospectra of by matrix known as the Grcar matrix This is an easy application for MultiMATLAB since the computation requires very large number of floating point operations singular value decompositions of dimension by but minimal communication just the global minimum and maximum of the data with Min and Max so that all panels can be on the same scale Another kind of application that might benefit from this kind of graphics would be as follows Suppose we wish to solve the wave equation by an explicit finite difference scheme and watch waves bounce around in the computational domain It is straightforward matter to divide the computation into grid of processors as in the figure above communicating just one row or column of boundary data to adjacent processors at each step Waves can then be seen to propagate from one window to another This kind of visualization can be very convenient for interactive experimentation and plots can be produced at selected time steps as necessary by sending data to single processor Our second computed example illustrates the use of multiple figure windows for monitoring process of numerical optimization MATLAB contains powerful programs for minimization of functions of several variables one of the original such programs is fminu Unfortunately such programs generally find local minima not global ones If one requires the global minimum it is customary to run the search multiple times from distinct initial points which in many cases might as well be taken to be random With sufficiently many trials leading to single smallest minimum found over and over again one acquires confidence that the global minimum has been found but the cost of this confidence may be considerable computing time Such problem is easily parallelizable and the next figure shows case in which it has been distributed to four processors function of two variables has been constructed that has many local minima but just one global minimum the value taken at the origin On each of four processors the optimization is carried out from twenty random initial points and the result is displayed in the corresponding figure window as straight line from the initial guess to the converged value The background curves are contours of the objective function Note that in three of the windows the smallest value obtained is whereas the fourth window has found the global minimum In these examples we have set up grid of windows one to each processor As an alternative it might be desirable sometimes to have multiple MATLAB processes all draw to one common window This arrangement is possible within XWindows for example However it is not possible within MultiMATLAB at present because figure window ID is property in the current version of MATLAB which can not be set or reset by the user Implementation of MultiMATLAB MultiMATLAB is built upon MPI Message Passing Interface highly functional and portable message passing standard Here is brief description of how the system is put together The system is written using MPICH popular and freely available implementation of MPI developed at Argonne National Laboratory and Mississippi State University In particular MultiMATLAB uses the communication layer within MPICH allowing it to run over heterogeneous network of workstations In building upon MPICH we believe we have developed portable and extensible system in that anyone can freely get copy of the software and it will run on many systems Versions of MPICH are beginning to become available that run on PCs running Windows and we expect soon to experiment with MultiMATLAB on those platforms The MultiMATLAB Start command builds process group file of remote hosts which are either explicitly specified by the user or taken from default list and then initializes MPICH MATLAB processes are then started on the remote hosts Each process iterates over simple loop waiting for and executing commands received from the user interactive MATLAB process The user may use Quit command to shut down the slaves and exit MultiMATLAB Additionally if the user quits MATLAB during MultiMATLAB session the slaves are automatically shut down One limitation of MPI which was not designed for this particular kind of interactive use is that running program can not spawn additional processes consequence of this limitation is that once MultiMATLAB is running on multiple processors it is not possible to add further processors to the list except by quitting and starting again It is expected that this limitation of MPI will be removed in the extension of MPI under development known as MPI At the user level MultiMATLAB consists of collection of commands such as Send for example Such command is written as file called which is interfaced to MATLAB via the standard MATLAB interface system known as MEX Within MPI many variants on sends and receives are defined MultiMATLAB is currently built upon the standard send and receive variants which employ buffered communication for most messages and synchronous communication for very large ones Our underlying MPI sends and receives are both blocking operations to ensure that no data is overwritten but to the MultiMATLAB programmer the semantics is that Recv is blocking while Send is MultiMATLAB commands are usually built on MPI commands For example Bcast and Min and Max and Sum are built on MPI collective communication routines and Grid and Coord are built on MPI routines that support cartesian topologies It should be stressed that MultiMATLAB allows MPI routines direct access to MATLAB data As result MultiMATLAB does not incur any extra copying costs over MPICH so it is reasonable to expect that its efficiency should be comparable Our experiments show that this is indeed approximately the case Here are the results of typical experiment size of matrix latency of doubles milliseconds MPICH MultiMATLAB The table compares latencies for MultiMATLAB code with those for an equivalent code using MPICH and reveals that MultiMATLAB does add some overhead to that of MPICH The timings were obtained on the IBM not using the switch This occurs because MATLAB performs memory allocation for received matrices It might be possible to alleviate this problem by maintaining list of preallocated buffers but we have not pursued this idea Related Work Many people must have thought about parallelizing MATLAB over the years According to Moler essay Why there parallel MATLAB published in the MathWorks Newsletter in he was involved with one of the earliest such attempts in the on an Intel iPSC Of course great deal has happened in distributed computing since then Our own first experiments were carried out in Trefethen By making use of Fortran wrapper based on IBM message passing environment MPL we ran MATLAB on multiple nodes of an IBM We were impressed with the power of this system for certain fluid mechanics calculations and this experience ultimately led to our persuading The MathWorks to support us in initiating the present project We are aware of seven projects than have been undertaken elsewhere that share some of the goals and capabilities of MultiMATLAB We shall briefly describe them The related project dating to before is the CONLAB CONcurrent LABoratory system of and others at the University of Sweden CONLAB is system with notation that extends the MATLAB language with control structures and functions for explicit parallelism CONLAB programs are compiled into code with message passing library PICL and the node computations are done using LAPACK group at the Center for Supercomputing Research and Development at the University of Illinois has developed FALCON FAst Array Language COmputatioN programming environment that facilitates the translation of MATLAB code into Fortran FALCON employs compile time and run time inference mechanisms to determine variable properties such as type structure and size Although FALCON does not directly generate parallel code the future aim of this project is to annotate the generated Fortran code with directives for parallelization and data distribution parallelizing Fortran compiler such as Polaris may then use these directives to generate parallel code Another project from the Technion in Israel is MATCOM MATCOM consists of translator and an associated matrix class with overloaded operators At present MATCOM translates MATLAB only into serial but one might hope to build distributed matrix class underneath it which would adhere to the same interface as the existing matrix class project known as the Alpha Bridge has been developed by Alpha Data Parallel Systems in Edinburgh Scotland Originally in system known as the this group ran language in parallel on each node of transputer The Alpha Bridge system is an enhancement of this idea in which RISC processors are linked in transputer network reduced interpreter runs on each node of the network under the control of master MATLAB process running on PC fifth project has been undertaken not far from Cornell at Integrated Sensors ISI in Utica NY consulting company with close links to the US Air Force Rome Laboratories Here MATLAB code is translated to code with parallel library routines This project and product aims at executing programs in parallel for control and related applications The final two projects we shall mention though not the most fully developed are the closest to our own in concept One is system built by group at the Universities of Rostock and Wismar in Germany In this system MATLAB is run on various nodes of network of Unix workstations with message passing communication via the authors own system based on Unix sockets Finally the Parallel Toolbox is system developed originally by graduate students Pauca Liu Hollingsworth and Martinez at Wake Forest University in North Carolina This system is based upon the message passing system known as PVM In the Parallel Toolbox there is level of indirection not present in MultiMATLAB between the MATLAB master process and the slaves PVM process known as the PT Engine Daemon Besides handling the spawning of new processes the PT Engine Daemon also filters input and output sending error codes to PT Error Daemon that logs the error messages to file In summarizing these various projects the main thing to be said is that most of them involve original implementations of language rather than the use of the existing MATLAB system itself There are good reasons for this if one aim is high performance and an investigation of what the ideal parallel system might look like The disadvantage is that the existing MATLAB product is at present so widely used and so extensive in its capabilities that it may be unrealistic and inefficient to try to duplicate it Instead our decision has been to build upon MATLAB itself and produce prototype that users can try as an extension to their current work rather than an alternative to it As mentioned this approach has also been followed by the and Wake Forest University projects using PVM or another message passing system rather than MPI Conclusions MultiMATLAB can be summarized in few words We run MATLAB processes on multiple processors with full access to all the usual capabilities such as Toolboxes These processes communicate via simple commands built on MPI with all details hidden as far as possible from the user Both and SPMD paradigms are implemented and attention is paid to multiprocessor graphics All of this happens without any changes in the MATLAB architecture indeed we have not had access to the MATLAB source code It is straightforward matter to install our current software on any network of Unix workstations or system provided that all the nodes are licensed to run MATLAB and there is shared file system We expect that extensions to networks of PCs running Windows based on appropriate implementations of MPI are not far behind We hope to make our research code publicly available in the near future and will announce this event on the electronic distribution list and elsewhere Based on reactions of users so far we think that MultiMATLAB will prove appealing to many people both for enhancing the power of their computations and as an educational device for teaching message passing ideas and parallel algorithms It gives MATLAB users easy access to message passing here and now The parallel efficiency is not always as high as might be achieved but for many applications it is surprisingly good We hope to address questions of performance in more detail in forthcoming technical report MultiMATLAB is by no means in its final form This is an evolving project and various improvements in functionality for example in the areas of collective communications and abstractions are under development The current system also needs improvement in the area of robustness with respect to various kinds of errors and in its documentation We are guided in the development process by several projects underway in which MultiMATLAB is being used by our colleagues for scientific computations As we have mentioned in the text several projects related to MultiMATLAB are being pursued at other institutions including CONLAB FALCON the Parallel Toolbox and others Though the details of what will emerge in the next few years are of course not yet clear we believe that the authors of all of these systems join us in expecting that it is inevitable that the MATLAB world will soon take the step from single to multiple processors References Blume et al Effective Automatic Parallelization with Polaris International Journal of Parallel Programming May De Rose et al FALCON An environment for the development of scientific libraries and applications Proc First Intl Workshop on Systems for the re Use of Program Libraries Sophia Antipolis France November De Rose et al FALCON MATLAB interactive restructuring compiler In Languages and Compilers for Parallel Computing pp August Drakenberg Jacobson and CONLAB compiler for distributed memory multicomputer Sincovec et Proc Sixth SIAM Conf Parallel Proc for Sci pp Geist et al PICL portable instrumented communication library Tech Oak Ridge Natl Gropp Lusk Doss and Skjellum portable implementation of the MPI message passing interface standard Parallel Computing to appear Gropp Lusk and Skjellum Using MPI MIT Press Hollingsworth Liu and Paul Pauca Parallel Toolbox for MATLAB PT Manual and Reference Pages Wake Forest University Integrated Sensors home page http Jacobson and Algorithm development for distributed memory multicomputers using CONLAB Scientific Programming pp Kadlec and Nakhaee Alpha Bridge parallel processing under MATLAB Second MathWorks Conference MATCOM March release http Message Passing Interface Forum MPI interface standard Intl Supercomputer Moler Why there is parallel MATLAB MathWorks Newsletter Spring Pawletta Pawletta and Drewelow Distributed and parallel simulation in an interactive environment Preprint University of Rostock Germany Pawletta Pawletta and Drewelow Comparison of parallel simulation techniques Simulation News Europe pp Trefethen Pseudospectra of matrices In Griffiths and Watson Numerical Analysis Longman pp About the Authors Anne Trefethen is Associate Director for Scientific Computational Support at the Cornell Theory Center From to she worked at Thinking Machines where she was one of the developers of the Connection Machine Scientific Software Library Vijay Menon interested in parallelizing compilers is PhD student of Keshav Pingali in the Computer Science Department at Cornell Chang and Greg Czajkowski interested in runtime systems are PhD students of Thorsten von Eicken in the Computer Science Department at Cornell Chris Myers is Research Scientist at the Cornell Theory Center His research interests are in condensed matter physics and scientific computing Nick Trefethen Professor in the Department of Computer Science at Cornell has been using MATLAB since His research interests are in numerical analysis and applied mathematics Acknowledgments For advice and comments concerning both the MultiMATLAB project and this paper we are grateful to Toby Driscoll Bill Gropp Xiaoming Liu Cleve Moler Barry Smith Steve Vavasis and Thorsten von Eicken This research was supported in part by The MathWorks Inc It was conducted in part using the resources of the Cornell Theory Center which receives major funding from the National Science Foundation NSF and New York State with additional support from the Defence Advanced Research Projects Agency DARPA the National Center for Research Resources at the National Institutes of Health NIH IBM Corporation and other members of the center Corporate Partnership Program Further support has been provided by NSF Grant and DOE Grant Trefethen NSF Grant CCR support of Menon by Pingali ARPA Grant support of Czajkowski by von Eicken and Doctoral Fellowship from the Brazilian Research Council Chang	other	cornell
737	 Server Date Sunday GMT Friday GMT Dynamic Graph Algorithms Monika Henzinger Monika Rauch Dynamic Graph Algorithm Design and Analysis of Efficient Dynamic Graph Algorithms Monika Henzinger Dynamic Graph Algorithms Monika Henzinger Fully Dynamic in Graphs Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS pp Abstract Ftp postscript For applications of in compilers see Richard Johnson David Pearson and Keshav Pingali Finding Regions Fast Single Entry Single Exit and Control Regions in Linear Time Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation pp Robert Tarjan and Jacobo Valdes Prime subprogram parsing of program Conference Record of the seventh Annual ACM Symposium on Principles of Programming Languages POPL pp David Alberts and Monika Henzinger Average Case Analysis of Dynamic Graph Algorithms Proceedings of the Sixth Annual Symposium on Discrete Algorithms SODA pp Abstract Ftp postscript Monika Henzinger Approximating Minimum Cuts under Insertions Proceedings of the International Colloquium on Automata Languages and Programming ICALP Lecture Notes in Computer Science pp Abstract Ftp postscript Monika Henzinger and Valerie King Randomized Dynamic Graph Algorithms with Polylogarithmic Time per Operation Proceedings of the Annual ACM Symposium on Theory of Computing STOC pp Invited to special issue of Journal of Computer and System Sciences on selected papers of STOC Abstract Ftp postscript Implementation by David Alberts Source Code David Alberts Giuseppe Cattaneo and Giuseppe Italiano An Empirical Study of Dynamic Graph Algorithms Proceedings of the Seventh Annual Symposium on Discrete Algorithms SODA Monika Henzinger and Han La Poutre Certificates and Fast Algorithms for Biconnectivity in Graphs Proceedings of the Third Annual European Symposium on Algorithms ESA pp Abstract Ftp postscript Monika Henzinger and Valerie King Fully Dynamic Biconnectivity and Transitive Closure To appear in Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS Abstract Ftp postscript Monika Henzinger and Mikkel Thorup Improved Sampling with Applications to Dynamic Graph Algorithms Proceedings of the International Colloquium on Automata Languages and Programming ICALP Lecture Notes in Computer Science Abstract Ftp postscript Applications of dynamic graph algorithms Monika Henzinger Valerie King and Tandy Warnow Constructing Tree from Homeomorphic Subtrees Proceedings of the Annual Symposium on Discrete Algorithms SODA Abstract Ftp postscript Monika Rauch Henzinger and Jan Arne Telle Faster Algorithms for the Nonemptiness of Streett Automata and for Communication Protocol Pruning Proceedings of the Scandinavian Workshop on Algorithm Theory Abstract Ftp postscript Lower bounds for dynamic graph algorithms Michael Fredman and Monika Henzinger Lower Bounds for Fully Dynamic Connectivity Problems in Graphs to appear in Algorithmica Abstract Ftp postscript Miltersen Subramanian Vitter and Tamassia Complexity Models for Incremental Computation Theoret Comput Science Last updated on June mhr	other	cornell
738	 Server Date Sunday GMT Thursday GMT Announcements Announcements Note The times of the demo sessions have been changed because Upson will be closing early on Monday Demo Sessions introducing the Dylan Interpreter CoNote and Netscape will be held in the Upson CIT Mac Lab Monday and Tuesday September and at and Each session is about hour Problem Set has been handed out on the CoNote server You need CoNote user id and password to get the problem set and to submit your solution If your Web browser has cached parts of an old NOODLLE you may see strange behavior The best thing to do at the beginning of session is to start new Web browser and to clear its disk cache There are number of bugs in the Java implementation that comes with Netscape for PowerPC Macintosh The old Macintosh also called version does not have this same problem The solution is if working on PowerMac to install the version The Netscape installer is in the folder on the Upson Macs Run the installer and install the version and use that instead of the one on the machine by default We in touch with Netscape and have let them know about this problem The due date for Problem Set has been moved to Saturday night Oct at This is really early Sunday morning	other	cornell
739	 Server Date Sunday GMT Thursday GMT Web Browser Caching Web browser cache previously viewed Web pages In general to make sure you have the most recent version of page you can hit RELOAD in your browser you should do this when looking at pages in CoNote in order to see new postings For some reason reloading Java applet does not necessarily get all the files that changed from the server At least under Netscape Navigator this can produce an inconsistent NOODLLE if any of its files have changed In order to make sure this is not happening to you you can clear both the memory and the disk cache Safest is to start fresh Netscape process and then to clear the disk cache which persists across invocations of Netscape In order to clear the caches go to the Options menu and select Network Preferences there is Cache tab in the dialog box This is only necessary when NOODLLE is changed and you see strange behavior of the interpreter	other	cornell
740	 Server Date Sunday GMT Sunday GMT Dan Autobio Dan Autobio Greetings My name is Dan Hung was born in Taipei Taiwan and had spent my childhood there until my family moved to the in the early eighties One of my greatest interest during my childhood is computers Indeed soon after arriving in the States my father bought me as birthday present Computers and hit it off pretty well and ended up spending most of my teenage years adapting to my new homeland and messing with various computers Indeed sometimes like to think that learned how to speak English and how to program in Basic at the same time Until my college years my family and lived in New York City Despite being brought up as hated New York it dirty unfriendly expensive and So when had the chance to go somewhere else took it and ended up in upstate New York at Cornell University Now love Ithaca very much during the seasons The environment is beautiful the air is clean the people are helpful and polite and the are filled with stars The winters here however drives me nuts It always snow sleet rain ice salt dirt etc ARRRGGGGHHHHH had wanted to major in Computer Science when started my Bachelor degree but changed my mind during my freshman year Instead decided to take broader view of the various disciplines by taking the most flexible of the engineering curriculums operations research and industrial engineering ORIE The flexible ORIE curriculum at Cornell enabled me to take large number of courses in things am interested in ranging from computer graphics to economics from history to small business consulting At the same time also had experiences in starting my own company working for large company and serving as consultant to local business Soon after finished my job with Exxon and returned to Cornell fell in love with this young woman To my lasting regret it did work out and was It was perhaps because was emotionally shattered or that was just greedy that took the highest paying job could find ended up working on Wall Street after completing my bachelor degree must admit that made dreadful mistake in working on Wall Street Even though the money is good the environment is bad filled with politics rude people and infighting Eventaully realized that money is not everything and decided to focus on doing something enjoy and at an environment that like So came back to Cornell First to round off my knowledge in computer science then to chill out in Ithaca and see where life takes me next Check out My Photos Dark Walker At Sunset Shades does not Coolness make Dan the Swordsman	other	cornell
741	 Server Date Sunday GMT Friday GMT Yeah Fall Newsletters September Fall News Issue October Fall News Issue II November Fall News Issue III December Fall News Issue IV Spring Newsletters January Spring News Issue February Spring News Issue II March Spring News Issue III April Spring News Issue IV Upcoming Schuyler House Activities April from Reserve your room in Schuyler Housefor next year or notify Graduate Housing of your alternate plans for the upcoming academic year April Softball Game pitting Schuyler House and Hughes Hall residents against one another Game time TBA April Barbeque Remember how much fun we all had at the first barbeque Well triple it add hot fudge and whipped cream and there you have this event April Stressed about finals Come to the Schuyler Lobby for massage sessions from Ithaca own Stress Out small fee will be collected to help subsidize the cost May Cinco de Mayo Party need we say more May Guiseppe will grace Schuyler House once more with his fine cuisine All Grad Links Get ready for the Class of Commencement Information via the Graduate School	other	cornell
742	 Server Date Monday GMT Wednesday GMT Annotated Bibliographies Annotated Bibliographies The annotated bibliographies on this page are the voluntarily submitted finals of the students The files included are all with the exception of the first Corba The Essentials WWW Page by Alfred Hong Common Object Request Broker Architecture CORBA by Carlos Barragan Orbe Object Request Broker CORBA by Ankit Patel Distributed Shared Memory by Hani Jamjoom Failure Detection in Distributed Systems by Wei Chen Failure Detection in Distributed Systems by Justin Miller Failure Detection in Distributed Systems by Janeen Reich Language Support for Agents Mobile Processes by Hrishikesh Dixit The MBONE by Justin McCune The MBONE by Julian Note Ghostview on some systems will not view this file Names Services by Avinash Gupta Protocols in Electronic Commerce by Tibor Janosi Remote Procedure Calls by Xun Wilson Huang Remote Procedure Calls by Kartik Kapadia	other	cornell
743	 Server Date Sunday GMT Sunday GMT Recent Papers Recent Papers Information Retrieval Information Structure and Information Agents ACM Transactions on Information Systems Using for automatic document structurin in Proceedings of Principles of Document Processing Information Agents for Building Hyperlinks in Proceedings of the Workshop on Intelligent Hyperlinks manipulation of objects International Journal of Robotics Research Analyzing teams of cooperative mobile robots in Proceedings of Towards coordinated manipulation in Proceedings of Towards theory on information invariants for cooperative mobile robots in Proceedings of	other	cornell
744	 Server Date Sunday GMT Thursday GMT Adam Florence Work Adam Florence Work Cornell University am one of three TA for hold office hours and teach two sections The MITRE Corporation have worked for The MITRE Corporation of McLean Virginia for three summers Most recently investigated requirements under Free Flight The project was funded by the Federal Aviation Administration Virginia Tech performed research with Bill Curtin of Virginia Tech We investigated the affect of bridging arrangements on the and of brittle ceramics Our paper has been submitted for publication to the Journal of the American Ceramics Society Back to my home page Last updated Sept me with comments or corrections	other	cornell
745	 Server Date Monday GMT Friday GMT Program Program Due Tuesday April Program Notes There is function named fabs that computes the absolute value function on doubles which you will probably want to use There is function called abs as well but this one has an integer argument In the Program folder there is file called tests which describes some additional tests you should run and hand in for Part along with the answers that should be produced Here is link to the program folder Program Folder Spring pierce	other	cornell
746	 Server Date Sunday GMT Wednesday GMT wandering through the back steps been walking through the rain just to get wet on purpose nothing really deep here but just really really love rain when the glee club which is group used to sing with here at cornell went on tour to the southwest over january the unremittingly awful hot and sunny weather did let up until finally we got to laguna beach which also had lot of pride flags in it so danced and sang in gorgeous shower on the pacific and in doing so apparently freaked out the people left in the glee club who did already think was insane but it remains the case the nice spring downpour is by far my favorite weather bar none weather in ithaca is often rainy which is good we are the music makers and we are the dreamers of dreams aphex twin dan brown snowman last updated jun	other	cornell
747	 Server Date Wednesday GMT Friday GMT Cornell CS Course Home Pages Fall Course Home Pages These are links to the home pages for number of CS courses In many cases there are class notes problem sets and other course information available although they may only be available to registered members of the course Computers and Programming Intermediate programming in language and introduction to computer science Topics include program development proofs of program correctness program structure recursion abstract data types data structures and analysis of algorithms Pascal is the principal programming language Structure and Interpretation of Computer Programs challenging introduction to programming languages and computer science Topics include recursive and procedures performance analysis of algorithms proofs of program correctness probabilistic algorithms symbolic hierarchical data abstract data types polymorphic functions programming infinite data types simulation and the interpretation and compilation of programs Taste of and An introduction to Unix operating systems and their programming environments This is six week course divided into two parts In the first three weeks we cover the architecture of Unix operating systems and the language at high level The second three weeks center around programming project that is intended to demonstrate the issues of crafting programs in on Unix Introduction to Digital Systems and Computer Organization Web course material includes course info lecture notes homeworks project info and hopefully even lecture videos Topics covered in the course include representation of information languages in particular PowerPC processor organization interrupts and memory hierarchies combinatorial and sequential circuits data path and control unit design RTL and microprogramming Software Engineering Technology and Techniques This course covers the techniques and technologies used in modern software development It involves good deal of programming and development experience and tries to simulate the life of professional programmers Topics include the language programming software design issues classical software engineering and collaborative programming Data Structures Lists trees graphs arrays and other forms of data structure and their implementation Relationship between language and data structure emphasizing abstract data types Dynamic storage allocation and memory management Detailed study of searching and sorting methods Analysis to determine the more efficient algorithm in given situation Practicum in Operating Systems The practical aspects of operating systems are studied through the design and implementation of an operating system kernel that supports multiprogramming virtual memory and various devices All the programming for the project is in language Foundations of Artificial Intelligence challenging introduction to the major subareas and current research directions in artificial intelligence Topics include knowledge representation search problem solving processing vision robotics logic and deduction planning and machine learning Automata and Computability Theory An introduction to the modern theory of computing automata theory formal languages and effective computability and deeper version of Credit will not be given for both Corrective transfers between and are encouraged during the first few weeks of instruction Advanced Programming Languages The course introduces and relates the operational denotational and axiomatic semantics of model programming languages for imperative applicative algebraic and logic programming Multimedia Systems An investigation of the computer science issues related to multimedia systems Topics include coding and compression storage systems networking processing user interface issues and databases for multimedia Analysis of Algorithms Methodology for developing efficient algorithms primarily for graph theoretic problems Understanding of the inherent complexity of natural problems via algorithms randomized algorithms randomized reducibilities Additional topics such as parallel algorithms and efficient data structures Cool Tools Seminar This course will survey the latest and coolest software and hardware applications systems and tools with an emphasis on practical use of the tools Each seminar will present tutorial style introduction to one of the topics Topics in Computer Graphics Covers advanced topics in computer graphics and applications of computer graphics to scientific computation Seminar in Natural Language Understanding Covers current topics in natural language understanding computational linguistics and relevant areas of machine learning Meets once week for hours to present and discuss recent papers in the field as well as ongoing natural language understanding research in the department Information from previous semesters Information from previous semesters may be retained for while but do be surprised if certain links do work Fall Spring Summer	other	cornell
748	 Server Date Sunday GMT Friday GMT Exams and Solutions Exams and Solutions Prelim Oct Prelim Nov	other	cornell
749	 Server Date Sunday GMT Sunday GMT Viewers Local Time The time is	other	cornell
750	 Server Date Monday GMT Thursday GMT Faculty Research Interests Faculty Research Interests The following are the research interests of each of the faculty members of the Computer Science Department at Cornell To find out more about any of the faculty follow the link to Annual Report Personal home pages Kenneth Birman Annual Report Distributed computing high performance communication Bard Bloom Annual Report Semantics of programming languages distributed algorithms Claire Cardie Annual Report Personal Natural language processing machine learning artificial intelligence Thomas Coleman Annual Report Numerical optimization parallel computation Robert Constable Annual Report Theory of computation programming logics automated reasoning Bruce Randall Donald Annual Report Personal Robotics artificial intelligence computational geometry microelectronmechanical systems Donald Greenberg Annual Report Computer graphics design David Gries Annual Report Personal Programming methodology programming languages compiler construction Juris Hartmanis Annual Report Theory of computation computational complexity Thomas Henzinger Annual Report Personal Theory of concurrent and systems John Hopcroft Annual Report Modeling and simulation algorithms information capture and access Daniel Huttenlocher Annual Report Personal Computer vision computational geometry digital video Dexter Kozen Annual Report Personal Theory of computation computational complexity analysis of algorithms program logics and semantics Paul Pedersen Annual Report Symbolic and algebraic computation and algorithms to UCLA Fall Keshav Pingali Annual Report Software for parallel systems compilers Monika Rauch Annual Report Personal Algorithms data structures graph theory Ronitt Rubinfeld Annual Report Theory of computation randomized algorithms computational complexity Gerard Salton Annual Report Information retrieval language and text processing information technology Fred Schneider Annual Report Concurrent programming distributed systems systems Alberto Segre Annual Report Artificial intelligence machine learning to of Iowa Fall Brian Smith Annual Report Personal Distributed multimedia systems image processing user interfaces information technology Devika Subramanian Annual Report Artificial intelligence machine learning information technology Tim Teitelbaum Annual Report Programming languages systems environments Carlo Tomasi Annual Report Computer vision visual motion interpretation to Stanford Spring Sam Toueg Annual Report Personal Distributed computing Lloyd Trefethen Annual Report Personal Numerical analysis applied mathematics Charles Van Loan Annual Report Scientific computing Stephen Vavasis Annual Report Personal Numerical analysis Thorsten von Eicken Annual Report Personal Parallel systems computer architecture Catherine Wagner Annual Report Automated reasoning constructive logic Ramin Zabih Annual Report Personal Computer vision multimedia information technology robotics Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified March by Denise Moore denise	other	cornell
751	 Server Date Monday GMT Friday GMT CS Fall Lecture Lecture Part homepage Page Page Page Page Page Page Page Page	other	cornell
752	 Server Date Monday GMT Monday GMT Nuprl Theory and Theorem Browser Nuprl Theory and Theorem Browser The Nuprl proof libraries consist of theorems grouped into theories If you want to start at the beginning with list of available theories click the box below You may alter parameter settings for List Nuprl Theories below No display form supression Supress all tagged display rules Supress all concealing display rules Client window width in characters If you know the name of particular theory or theorem you like to examine you can fill out and submit the following form Please specify either Theory or Theorem by clicking the box next to the appropriate choice Object Name Theory Theorem or other Nuprl Object You may alter parameter settings for Named Nuprl Object below No display form supression Supress all tagged display rules Supress all concealing display rules Client window width in characters The Nuprl system provides hypertext interface to prepared documents that use hypertext references to existing Nuprl objects You may begin using the hypertext interface by clicking the box below Information about Browser Parameters Some Helpful Hints and Common User Problems Read User Guide for Browser Return to Main Index Nuprl Project nuprl	other	cornell
753	 Server Date Sunday GMT Wednesday GMT Some interesting links not yet sorted Research Institutions and People Research Groups Cornell University Kestrel Institute MPI DFKI Project Cornell TH Darmstadt FG Intellektik FB Informatik SoGIT Individuals Frank Pfenning USA Darmstadt Gopalan Nadathur Mechanized Reasoning USA In Germany Schwerpunkt Deduktion Logical Frameworks Proof Assistants ELF Isabelle VSE Verifix NuPRL Homepage Recent Publications The Book The system FTP Hardware SunExpress USA Europe SUN USA SUN Germany special offers Hamilton Software USA Sunsite USA GNU USA FTP Mirror Paderborn CAML Job Announcements US Jobs Compulog Jobs Journals Conferences and Publishers Conferences ALL Conferences LICS Springer McGraw Hill Kluwer Journals AI Journal Elsevier CS Journals TCS Electronic IGPL Journal Unified Bibliographies Eiffel SIG Eiffel Public Local DEC Research Reports SEKI Kaiserslautern SEKI Saarbruecken Travel Information Global Travelweb Seatop Germany Tourismus Info Internet of all countries State Info maps New Mexico Utah Arizona Montana Wyoming Rental Cars Thrifty Alamo Airlines Delta United Continental USAir Lufthansa Swissair Quantas Other Airlines Hotels Major Chains Weather Forecast Ithaca Temperatures USA Precipitation USA News CNN USA today New York Times USA Homes Something about home Nachrichten Tagesschau WiSo Verkehr DB Fahrplan Frankfurt Flughafen Deutschlandkarte Miscellaneous Hifi American Buyers AVE Electronics WholeSale All Brands Infinity Audiomap Santander VISA Windham Hill Camera Jeep FTP list FAQ in Math JAVA Security	other	cornell
754	 Server Date Sunday GMT Tuesday GMT The Cornell Dutch Club home thuis nieuws bladen events links fotos music werk tourism travel cultuur taal geography misc De Nederlandse Club van Cornell De Nederlandse Club van Cornell CDC gevestigd in Ithaca NY USA press here for the english version and press here for our newest member Jaarverslag Notulen Analysed requests Reports Bekijk welke pagina het populairst zijn week month months Links Meer dan nederlandse links Cornell Dutch Club Te Koop bij onze Voorzitter Sander Voor kan je een prachtig donkergroen navy blauw of bordeaux rood exemplaar in handen krijgen als je het tijdens het koffieuurtje koopt In witte opdruk staat er dan op de achterkant Let go Dutch en op de voorkant ons logo Om een exemplaar via de post te bestellen stuur includes shipping naar Sander DeWitt Place Ithaca NY CDC Foto Mooie meisjes en jongens kijken Lijst van evenementen in Ithaca elke maandag Nederlands Koffie uurtje CDC Elke maandag avond om uur in Rulloff College Ave Bij mooi weer zitten we op het terras by College Town Bagels op de hoek Kijk uit naar de tulp en de vlag Ontzettend gezellig vrijdag november De zesde Euro Dans Party for printing op vrijdag november van tot uur in Calypso Bay Ithaca Entree Gratis shuttle bus vertrekt elke minuten vanaf Performing Arts Center Collegetown begint uur Mailinglijsten Onze Nederlandse Mailing Lijst op Cornell status Dec Als zich wilt abonneren zend mail naar listproc met deze regel in de inhoud van de message subscribe naam hier De Surinaamse Mailing Lijst Nederlandse Rondzendlijsten Dutch For English is mailing list for those who speak English and are learning the Dutch language an discussion list for people who share an interest in Lowlands languages and cultures Oude Evenementen Adding Information to this Server If you have any comments about the information provided would like to help maintain this server have information you would like to see displayed please send an to me at aswin or telephone USA You can also send typed stuff or pictures by mail to Aswin van den Berg Cornell Dutch Club Home Page Skyacre Drive Ithaca NY USA The Cornell Dutch Club you can add to this page home thuis nieuws bladen events links fotos music werk tourism travel cultuur taal geography misc	other	cornell
755	 Server Date Sunday GMT Saturday GMT Satyaprasad Devireddy Home Page PS Do get scared will be getting new snap done as soon as possible when the SG labs open Srinivas kandala at Chicago Other places of intrest Something for Everyone Electronic Post Cards Miller Beer FUNET One of the biggest file archives in the internet The Virtual Mirror NETCOM Communication Services Welcome to White House Finger Me	other	cornell
756	 Server Date Sunday GMT Saturday GMT Polya Related Project Composing Efficient Programs Composing Efficient Programs Optimization and selection techniques for building effcient programs from components Theme It is trend that software be composed from existing components forming even larger components One of the most challenging issues is the efficiency of the resulting programs which depends largely on optimization across component interfaces and selection of appropriate components given complicated interactions among them How to perform such optimization and selection systematically is one of my particular interests Other People David Gries Tim Teitelbaum Aswin van der Berg Thomas Yan Keywords program specification refinement program optimization selection program analysis program transformation program composition Annie Liu yanhong Last updated	other	cornell
757	 Server Date Monday GMT Tuesday GMT Suggested Robotlab Projects Suggested Robotlab Projects Robotics Wireless Rosemary to communicate with the Sun workstations using the wireless radio modem with wireless video using cheap box which sends an analog video signal over radio like TV Hook this up to the ATM video source and build an application of realtime vision with rosemary as the host Matt Visual Robot extension to Tom project Mapmaking with visual cues Can use ideas from but the robot walks around and using depth and position information produces map of the world uses it to navigate Matt Tom project set of navigational becons were created for the robots Video Processing and Machine Vision Automatic Storyboarding use the dissolve detector code to automate generation of movie storyboards possible outputing html pages that show the story board Justin and Ramin Parallelization of the Mpeg encoder Write or at least very fast Mpeg encoder using the ATM and ATM video source Jon Swartz and Brian Smith were interested in this Matt Port to Windows NT This could prove to be as many aspects of the SMP design rely on UNIX process environment in particular ELF and shared memory Use of NT features such as threads wo work Matt and Justin Parallel RIVL Providing Messages support for RIVL We like RIVL to be the general framework for going image computation display applications building etc It should help productivity lot if we have an easy way for people to experiment and visualize vision algorithms instead of writing crufty programs This project would provide data parallel processing support for the RIVL architecture basically by porting various RIVL primitives to for automatic parallelization and allowing users to write new RIVL primitives in for linking into the system The easiest way to do all of this think Port RIVL itself to should be easy and make existing RIVL behaviour subset of the that is local processing on one machine Matt Effects of Compression What empirical effects do various compression algorithms have on common vision algorithms Justin and Ramin Edge Clustering Develop algorithm for clustering of edges that represent single object Justin and Ramin Adobe Photoshop Nawaaz Algorithms OptimizationCreate an environment for the automatic optimization of highly iterative image transformation algorithms using the macro language and perl scripts Write macros to automatically produce according to some set of parameters like how many times to unroll loop and the write perl script to compile the set of programs and determine which is the fastest by timing the transformation on some set of images This would greatly speed the production of optimized code for given machine have examples started of this idea for the rank transform compilation Modelling compilation as search problem on system with constraints The system will consist of set of processors set of memories an interconnect network set of constraints number of processors size of memory which processor can access which memories in cycle ordering imposed by the operations to be performed etc The code to be parellised will be tight loops and hence small The idea is to search the space of complied code to find the optimal one This is most probably NP complete but speed is not the essence here Nawaaz Performance Simulations The simulation is with respect to the algorithms we are interested in The many aspects that can be simulated are Cache implement and study cache accesses on various algorithms Here we assume single processor Shared Memory Multiprocesssors simulate and study the effect of bus bandwidth memory architecture cache coherence on the system with repect to alogrithms like correlation etc Nawaaz DSPs Implementation Compilation Code generation for DSP chips MPV This is more specific then compilation Just to get an idea of what the chips are really capable of	other	cornell
758	 Server Date Monday GMT Thursday GMT Teaching Assistants Teaching Assistants Wei Chen Upson weichen Open Appt Christine Paradis Upson crp Open Appt David Pierce Upson pierce Open Appt Diana Shea Upson dlshea Open Appt Spring pierce	other	cornell
759	 Server Date Sunday GMT Saturday GMT Quotes Always Wherever there is pool there is always bird Wherever there is school there always be homework Wherever there is beat there is always drum Wherever there is fun there is always us together The sun will always shinning the bird will always sing As long as there is fun there is always real thing The shinning smiling face is always the one Wherever there is fun there is always us There must be the generating force of love behind every effort destined to be If you love it enough anything will talk with you Washington Carver One happiness depends less on what he knows than on what he feels Hyde Bailey Man is not himself only He is all that he sees all that flows to him from thousand sources He is the land the lift of its mountain lines the reach of its valleys Austin Come forth into the light of things Let Nature be your Wordsworth When the bird and the book disagree always believe the proverb The biggest tragedy to people interaction is not caused by the misunderstanding of what have been told It that the words we keep inside our hearts have never been Sometimes we do know what part of us is to be given to those we love or whether what we always be giving to is really needed But the important is we can still love entirely without completely understanding The complete understanding of oneself can not generate the complete love The true meaning of life is never meant to be understood completely it is to love Mclain Always Wherever there is pool there is always bird Wherever there is school there always be homework Wherever there is beat there is always drum Wherever there is fun there is always us together The sun will always shinning the bird will always sing As long as there is fun there is always real thing The shinning smiling face is always the one Wherever there is fun there is always us together	other	cornell
760	 Server Date Monday GMT Monday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
761	 Server Date Sunday GMT Wednesday GMT Kaz Company Kaz Works For Mitsubishi Electric Corporation First of all Mitsubishi is not Matsushita Mitsubishi Motors is not the same company as Mitsubishi Electric Nor are Mitsubishi Bank Mitsubishi Trust Mitsubishi Pencils Mitsubishi what have you Each of the above are individual companies more or less as large as the other They all have the same surname because they originated from the same Mitsubishi Zaibatsu that started back in the early Those of you who want to contact me in Japan see my card still under construction Up to Kaz homepage Jump to Kaz music page	other	cornell
762	 Server Date Sunday GMT Monday GMT Tentative Course Schedule Computer Science Fall Course text Cormen Leiserson and Rivest Introduction to Algorithms McGraw Hill Textbook can be purchased at the Campus Store or Triangle Bookshop The text unfortunately has number of bugs and typos especially older printings You should use the Text Errata large ps file close to pages Tentative Syllabus The following syllabus will be refined as the course progresses Periodic announcements will be made in class on the Web and on the homeworks of required readings We will cover material from Chapters as we need them Aug Intro ADT notation Sept Hashing CLR plus CLR Sept Graphs CLR Sept Spanning tree CLR Sept Heaps CLR and Huffman codes CLR Oct Sorting CLR Oct Prelim Oct Fall break Oct Binary Search Trees CLR Oct Trees CLR Oct Dynamic Data Structures CLR Oct Nov Union Find CLR Nov compression Nov Prelim Nov Shortest paths in Graphs CLR Nov Thanksgiving break Dec Computational Geometry CLR Dec Conclusion Dec final	other	cornell
763	 Server Date Sun Dec GMT bytes Tue Sep GMT Client Computers Home good place to start your journey Provides an overview of our pages Links Company Links Point your browser here for links to client computer related sites Edgar Links Need financials Basic information about the client computer manufacturers The EDGAR database contains tons of SEC filings waiting for News Links This is where you find stock prices links to current news and search engines Other Headlines Industry related headlines clipped for your convenience Feature of the Month monthly column written by our own experts Includes links for further exploration Analyses Analyses of client computer industry and featured companies This page is maintained by Jon Barber barber Vilho and Todd Peskin viewed with Netscape Navigator	other	cornell
764	 Server Date Sunday GMT Monday GMT The US Swing Dance Server home new events styles technique steps literature terms music videos clubs links The US Swing Dance Server The US Swing Dance Server Home Page This server is rated among the top of all Web sites by Point Survey Many people are helping to make this server useful for many people Quick Bar home new events styles technique steps literature terms choreos interesting music videos clubs comp quotes FAQ links access stats what is popular Love All Serve All Sai Baba Latest Changes What is popular here Upcoming Swing Dance Events National events plus links to local events Styles Of Swing Dancing reference guide to many kinds of swing dancing Swing Dance Technique Issues Library of Swing Steps Swing Dance Literature Swing Dance Terminology Swing Dance Choreographies Some Specific Interesting Stuff Margaret Batiuchok Lindy Thesis in nice layout Dance by Mark Balzer Swing Dance Music definition of swing music by Bob Notes Norton Victor list of dance music more dance music Michael Malak list of WCS songs Bands that play Swingable Music Music to buy for Swing Dancing Swing Dance Video Swing Dance Clubs Craig Hutchinson list of Swing Dance Clubs and Societies Links to clubs and other servers People in Swing Dancing The Swing Club List from the Dancers Archive Swing Dance Competitions Competition Results Dance Quotes Funny and deep prose Frequently Asked Questions FAQ from Anything you want to ask about dance and the newsgroup Compiled by Victor Other Dance Links Adding Information to this Dance Server adapted from the European Dance Server If you have any comments about the information provided would like to help maintain this server have information you would like to see displayed please send an to me at aswin or telephone USA You can also send typed stuff or pictures by mail to Aswin van den Berg Swing Dance Server AuroraSt Ithaca NY USA The original call for cooperation was put out November have quite few facilities here for scanning in pictures and text for display but depend upon others to provide that information The most important thing is your ideas of what you want to see and what you can provide If you want to know if your material is being looked at can provide that information since all accesses will be logged some time in the future So get writing The US Swing Dance Server you can add to this page home new events styles technique steps literature terms music videos clubs links	other	cornell
765	 Server Date Sunday GMT Friday GMT Mapping Environment for Unstructured and Structured Numerical Parallel Grid Generation Chrisochoides Fox and Joe Thompson Abstract is problem solving environment PSE for developing parallel algorithms that generate structured and unstructured static and adaptive grids or meshes required for the implementation of scalable parallel partial differential equation PDE solvers based on domain decomposition methods Whereas the first generation PSEs for the numerical solution of PDEs on distributed memory multiprocessor systems are based on the data mapping of sequentially generated grids and support only the data parallel programming model generates and maintains grids on the processors of systems and combines the most valuable aspects of the data parallel programming model with the flexibility of the task parallel programming model assumes machine model that consists of homogeneous and heterogeneous clusters of processors operating in distributed address space implemented on remote memory modules via message passing through interconnection network The major contribution of should be the reduction of the overhead required by the data parallel PDE solvers and the efficient maintenance of the distributed data structures that support and We present preliminary results indicating that the parallel grid generation results in substantial reduction of the overhead needed for the solution of the data mapping problem	other	cornell
766	 Server Date Sunday GMT Wednesday GMT Fall Study Guide Fall Automata and Computability Theory Final Exam Study Guide The final exam will be hours open book and notes All questions are roughly equal weight The exam will be comprehensive covering all material we have covered in the course including material tested on the two prelim exams Roughly equal weight will be devoted to each of the three parts of the course will ask you to do one formal proof and it will probably be an undecidability proof There may also be an essay question The primary source is the online lecture notes Suggested supplementary readings are taken from the text by Hopcroft and Ullman Introduction to Automata Theory Languages and Computation the appropriate sections are indicated beside each topic In addition to these specific topics you will need to have good general understanding of what it means for set to be regular recursive and of the capabilities of finite automata pushdown automata and Turing machines and of how to describe sets using regular expressions and grammars Finite Automata and Regular Expressions finite alphabets strings decision problems operations on strings and sets state transition systems DFAs regular sets closure properties the product construction nondeterminism and NFAs the subset construction patterns and regular expressions converting regular expressions to finite automata and vice versa Pumping Lemma for regular sets formal statement use of Pumping Lemma to show nonregularity the quotient construction DFA state minimization relations finite automata Pushdown Automata and Languages CFGs and CFLs definitions and examples and grammars Chomsky and Greibach normal forms PDAs formal definition examples configurations acceptance by empty stack and final state converting NPDAs to CFGs and vice versa Pumping Lemma for CFLs Parsing algorithm closure properties of CFLs DCFLs Turing Machines and General Computability general computability Turing machines Church Thesis universality configurations and recursive sets Variants of the TM nondeterminism enumeration machines decidable and semidecidable problems universal TMs diagonalization undecidability of halting and membership decidable and undecidable problems reductions Rice Theorem VALCOMPS and undecidable problems for CFLs Other formalisms type grammars Post systems functions while programs lambda calculus combinator logic Goedel incompleteness theorem home page	other	cornell
767	 Server Date Monday GMT Tuesday GMT Abstracts of the Horus Papers Abstracts Software for Reliable Networks Kenneth Birman and Robbert van Renesse Scientific American May The failure of single program on single computer can sometimes crash network of intercommunicating machines causing havoc for stock exchanges telephone systems control and other operations Two software designers explain what can be done to make networks more robust Horus flexible Group Communication System Robbert van Renesse Kenneth Birman and Silvano Maffeis Communications of the ACM April The emergence of environments for distributed computing represents promising step towards robustness for distributed applications Process groups have natural correspondence with data or services that have been replicated for availability or as part of coherent cache They can been used to support highly available security domains And group mechanisms fit well with an emerging generation of intelligent network and collaborative work applications Masking the Overhead of Protocol Layering Robbert van Renesse Proceedings of the ACM SIGCOMM Conference Stanford September Layering of protocols has been advocated as way of dealing with the complexity of computer communication It has also been criticized for its performance overhead In this paper we present some insights in the design of protocols and how these insights can be used to mask the overhead of layering in way similar to client caching in file system With our techniques we achieve an order of magnitude improvement in message latency in the Horus communication framework Over an ATM network we are able to send and deliver messages of varying levels of semantics in about microseconds using protocol stack of four layers that were written in ML functional language World Wide Failures Werner Vogels Proceedings of the ACM SIGOPS European Workshop Connamoran Ireland September The one issue that unites almost all approaches to distributed computing is the need to know whether certain components in the system have failed or are otherwise unavailable When designing and building systems that will need to function at global scale failure management will need to be considered fundamental building block This paper describes the development of failure management servcies which allows systems and applications to incorporate accurate detection of failed processes nodes and networks without the need for making compromises in their particular design Framework for Protocol Composition in Horus Robbert van Renesse Kenneth Birman Roy Friedman Mark Hayden and David Karr August The Horus system supports communication architecture that treats protocols as instances of an abstract data type This approach encourages developers to partition complex protocols into simple microprotocols each of which is implemented by protocol layer Protocol layers can be stacked on top of each other in variety of ways at First we describe the classes of protocols that can be supported this way Next we present the Horus object model that we designed for this technology and the interface between the layers that makes it all work We then present an example layer that implements group membership protocol Next we show how given set of required properties an appropriate stack can be constructed We look at an example stack of protocols which provides totally ordered communication between group of processes The work contributes standard framework for protocol development and experimentation provides high performance implementation of the virtual synchrony model and introduces methodology for increasing the robustness of the protocol development process Trading Consistency for Availability in Distributed Systems Roy Friedman and Ken Birman April This paper shows that two important classes of actions non left commuting and strongly non commuting can not be executed by concurrent partitions in system that provides serializable services This result indicates that there is an inherent limitation to the ability of systems to provide services in consistent manner during network partitions Deciding in Partitionable Networks Roy Friedman Idit Keidar Dalia Malki Ken Birman and Danny Dolev November Motivated by Chandra and Toueg work we study decision protocols in model that closely approximates real distributed systems Our results show how the weakest failure detector and associated consensus algorithm can be adapted to network in which omission failures can occur during periods when processes suspect as faulty For protocols in which majority subset of the participants can reach decisions on behalf of the system as whole we also characterize series of stages that necessarily arise during execution Jointly these findings establish direct relationship between an extended version of the commit protocol which makes progress even when traditional commit would block and the consensus protocol of Chandra and Toueg Although we do not explore the linkage here our results should also be applicable to other agreement protocols for systems of this sort such as leader election and dynamic group membership Strong and Weak Virtual Synchrony in Horus Roy Friedman and Robbert van Renesse August formal definition of strong virtual synchrony capturing the semantics of virtual synchrony as implemented in Horus is presented This definition has the nice property that every message is delivered within the view in which it was sent However it is shown that in order to implement strong virtual synchrony the application program has to block messages during view changes An alternative definition called weak virtual synchrony which can be implemented without blocking messages is then presented This definition still guarantees that messages will be delivered within the view in which they were sent only that it uses slightly weaker notion of what the view in which message was sent is An implementation of weak virtual synchrony that does not block messages during view changes is developed and it is shown how to use system that provides weak virtual synchrony even when strong virtual synchrony is actually needed To capture additional ordering requirements the definition of ordered virtual synchrony is presented Finally it is discussed how to extend the definitions in order to cope with the fact that process can become member of more than one group Packing Messages as Tool for Boosting the Performance of Total Ordering Protocols Roy Friedman and Robbert van Renesse July This paper compares the throughput and latency of four protocols that provide total ordering Two of these protocols are measured with and without message packing We used technique that buffers application messages for short period of time before sending them so more messages are packed together The main conclusion of this comparison is that message packing influences the performance of total ordering protocols under high load overwhelmingly more than any other optimization that was checked in this paper both in terms of throughput and latency This improved performance is attributed to the fact that packing messages reduces the header overhead for messages the contention on the network and the load on the receiving CPUs Using Virtual Synchrony to Develop Efficient Fault Tolerant Distributed Shared Memories Roy Friedman March This paper shows how to define consistency conditions for distributed shared memories in virtually synchronous environments Such definitions allow to develop fault tolerant implementations of distributed shared memories in which during normal execution operations can be performed very efficiently and only those operations which take place during configuration change must be delayed Three well known consistency conditions namely linearizability sequential consistency and causal memory are redefined for virtually synchronous environments It is then shown how to provide efficient fault tolerant implementations for these definitions Protocol Composition in Horus Robbert Van Renesse and Kenneth Birman March Horus is communication architecture that treats protocol as an abstract data type Protocol layers can be stacked on top of each other in variety of ways at This paper starts out with describing the many classes of protocols that can be supported this way Next we describe the Horus object model that we designed for this technology and the interface between the layers that makes it all work We then present an example layer which implements group membership protocol Then we look at example stack of protocols which provides totally ordered communication between group of processes We conclude with presenting some remaining challenges in our project Horus Flexible Group Communications System Robbert Van Renesse Kenneth Birman Bradford Glade Katie Guo Mark Hayden Takako Hickey Dalia Malki Alex Vaysburd and Werner Vogels March The Horus system offers flexible group communication support for distributed applications It is extensively layered and highly reconfigurable allowing applications to only pay for services they use and for groups with different communication needs to coexist in single system The approach encourages experimentation with new communication properties and incremental extension of the system and enables us to support variety of interfaces Achieving Critical Reliability With Unreliable Components and Unreliable Glue Mark Hayden and Kenneth Birman March Even the most aggressive quality assurance procedures yield at best probabilistic confidence in the reliability of complex systems Distributed systems because of their large numbers of components are enormously complex engineering artifacts and hence may appear to be inherently unreliable despite the best efforts of researchers and developers cellular distributed systems architecture offers the hope of drastically improving the reliability of current technologies in settings where reliability is critical The approach combines stateful style of distributed computing within cells with loosely coupled probabilistic computing model based on probabilistic broadcast primitive We give an implementation of this primitive called pbcast and demonstrate how to use it to implement this methodology Our approach is compatible with the use of popular distributed computing and reliability technologies while offering considerable isolation against the spread of failures among cells Preserving Privacy in Network of Mobile Computers David Cooper and Kenneth Birman March Even as wireless networks create the potential for access to information from mobile platforms they pose problem for privacy In order to retrieve messages users must periodically poll the network The information that the user must give to the network could potentially be used to track that user However the movements of the user can also be used to hide the user location if the protocols for sending and retrieving messages are carefully designed We have developed replicated memory service which allows users to read from memory without revealing which memory locations they are reading Unlike previous protocols our protocol is efficient in its use of computation and bandwidth In this paper we will show how this protocol can be used in conjunction with existing privacy preserving protocols to allow user of mobile computer to maintain privacy despite active attacks Incorporating System Resource Information into Flow Control Takako Hickey and Robbert Van Renesse February distributed systems have become widespread in recent years While systems provide some obvious advantages experiences with these systems have exposed unanticipated problems of unpredictability and inefficiency Incorporating system resources information into flow control is essential in solving these problems Variants of flow control suitable for distributed systems are investigated Next message packing which improves network bandwidth usage efficiency and consequently message throughput is presented Finally back pressure mechanism which controls admission of messages into the system by blocking applications at high load is presented The combination of the window mechanism and the back pressure mechanism provides management of system resources The former manages network resources while the latter manages operating system resources The combination maintains good throughput even under high load Design and Performance of Horus Lightweight Group Communications System Robbert van Renesse Takako Hickey and Kenneth Birman december The Horus project seeks to develop communication system addressing the requirements of wide variety of distributed applications Horus implements the group communications model providing among others unreliable or reliable FIFO causal or total group multicasts It is extensively layered and highly reconfigurable allowing applications to only pay for services they use This architecture enables groups with different communication needs to coexist in single system The approach permits experimentation with new communication properties and incremental extension of the system and enables us to support variety of interfaces Our initial experiments show good performance Support for Complex Applications using the Horus system Werner Vogels and Robbert van Renesse December distributed application involves more than just protocols for the dissemination of video and audio data As in any other distributed application protocols are necessary that guarantee the consistency and security of shared data objects The Horus system offers framework for buildin complex distributed systems that involve any number of protocols as well as variety of protocols for the diffe rent aspects of distributed application including some protocols specific to applications We believe that this integrated approach is superior to combining different toolkits and illustrate this with detailed example of an existing application Security Architecture for Systems Michael Reiter Kenneth Birman and Robbert Van Renesse June Process groups are common abstraction for computing in distributed systems We present security architecture that extends the process group into security abstraction Integral parts of this architecture are services that securely and support cryptographic key distribution using novel techniques We detail the design and implementation of these services and the secure process group abstraction they support We also give performance figures for some common group operations Preserving Privacy in Network of Mobile Computers David Cooper and Kenneth Birman October Even as wireless networks create the potential for access to information from mobile platforms they pose problem for privacy In order to retrieve messages users must periodically poll the network The information that the user must give to the network could potentially be used to track that user However the movements of the user can also be used to hide the user location if the protocols for sending and retrieving messages are carefully designed In this paper we will describe set of protocols that we have developed to allow user with mobile computer to communicate without compromising privacy Uniform Actions in Asynchronous Distributed Systems Dalia Malki Kenneth Birman Aleta Ricciardi and Andre Schiper September We develop necessary conditions for the development of asynchronous distributed software that will perform uniform actions events that if performed by any process must be performed at all processes The paper focuses on dynamic uniformity which differs from the classical problems in that processes continually leave and join the ongoing computation Here we first treat static version of the problem lacking joins and then extend the results so obtained to also include joins Our results demonstrate that in contrast to Consensus which can not be solved in asynchronous systems with even single faulty process dynamic uniformity can be solved using failure detection mechanism that makes bounded numbers of mistakes Because dynamic uniformity arises in systems that maintain safety within primary partition of network our paper provides rigorous characterization of the framework upon which several existing distributed programming environments are based Understanding Partitions and the No Partition Assumption Aleta Ricciardi Andre Schiper and Kenneth Birman June The paper discusses partitions in asynchronous systems In such systems slow processes and slow links can lead to virtual partitions that are indistinguishable from real ones This raises the following question what is partition in an asynchronous system To overcome the impossibility of detecting crashed processes in an asynchronous system our system model incorporates failure suspector to detect possibly erroneously process failures Based on failure suspicions we give definition of partitions that acccounts for real partitions as well as virtual ones We show that under certain assumptions about the process behavior any incorrect failure suspicion inevitably partitions the system We then show how to interpret the absence of partition assumption Communication Based on Weak Failure Suspector Andre Schiper and Aleta Ricciardi April Failure detectors or more accurately Failure Suspectors FS appear to be fundamental service upon which to build distributed applications This paper shows that FS with very weak semantics that delivers failure and recovery information in no specific order suffices to implement communication VSC in an asynchronous system subject to process crash failures and network partitions The VSC paradigm is particularly useful in asynchronous systems and greatly simplifies building applications that mask failures by replicating processes We suggest architecture to implement communication at the lowest level the FS component on top of it component that defines new views and component that reliably multicasts messages within view The issues covered in this paper also lead to better understanding of the various membership service semantics proposed in recent literature Process Membership in Asynchronous Environments Aleta Ricciardi and Kenneth Birman February The development of reliable distributed software is simplified by the ability to assume failure model We discuss the emulation of such model in an asynchronous distributed environment The solution we propose called can be supported through highly efficient protocol and has been implemented as part of distributed systems software project at Cornell University Here we focus on the precise definition of the problem the protocol correctness proofs and an analysis of costs Keywords Asynchronous computation Fault detection Process membership Fault tolerance Process group Comments to Werner Vogels	other	cornell
768	 Server Date Sunday GMT Monday GMT David Gries Curriculum Vitae DAVID GRIES William Lewis Professor of Engineering Citizenship United States Stephen Weiss Presidential Fellow Email gries Department of Computer Science Telephone Upson Hall Date of Birth Cornell University Date January Ithaca New York USA Queens College in University of Illinois in Munich Institute of Technology rer nat in Mathematics EXPERIENCE Naval Weapons Lab Assistant Munich Inst of Technology Assistant Professor Stanford University Associate Professor Cornell University Sabbatic Technical University Munich Professor Cornell University Chair Computer Science Department Cornell Sabbatic Oxford University Sabbatic Regents Chair in Computer Science Univ Texas Austin William Lewis Professor of Engineering endowed chair STUDENTS ADVISED Susan Graham Tai Jennifer Widom Levy Gary Levin Jan Prins John Brown John Holm Geoffrey Smith Donald Johnson Robert Melville Raman Narain Gehani Peter Vanderbilt Efremidis Susan Owicki Dean Jacobs Juan Lafuente Van Long Nguyen AWARDS Doctor of Laws Honorary Degree Daniel Webster College Nashua New Hampshire May ACM Karl Karlstrom Outstanding Educator Award Taylor Booth Award Education Award IEEE Computer Society Advisor of Raman whose thesis won the annual ACM Best Dissertation Award March Award for Outstanding Contributions to Computer Science Education Education Award American Federation of Information Processing Societies Computing Research Association Award for Service to the Computing Community ACM Fellow Charter member among the first group to be inducted March Fellow of the AAAS Guggenheim Fellowship ACM Programming Systems and Languages Paper Award with Owicki AWARDS AT CORNELL Weiss Presidential Fellow for contributions to undergraduate education Cornell University Computer Science Department Faculty of the Year Cornell Association for Computer Association of Undergraduates ACSU Clarke Award for Excellence in Undergraduate Teaching College of Arts and Science Cornell University Chosen by Cornell Merrill Presidential Scholar Thomas Yan as the faculty member who had the most positive influence on his education at Cornell COMMUNITY PARTICIPATION AND LEADERSHIP SELECTED Member Computing Research Board Chair Computing Research Board Series Editor Springer Verlag Texts and Monographs in Computer Science Main Editor Acta Informatica Managing Editor Information Processing Letters Editor Programming Languages section of CACM Editorial Board Acta Informatica Information Processing Letters Springer Verlag Lecture Notes in Computer Science Distributed Computing Software and Tools Formal Aspects of Computer Science Advisory Board Conference on Foundations of Software Technology and Theoretical Computer Science India Chair Program Committee IEEE Symp Logics in Computer Science Member of Program Committees Int Symp Programming Int Symp Programming POPL POPL Int Conf Software Engineering IFIP Working Conference on Programming Concepts and Methods National Research Council to Survey International Developments in Computer Science Computer Science Screening Committee Council for International Exchange of Scholars Chair Panel on research directions in Software NSF Advisory Committee Meeting Scientific Director Institute for Encapsulation Modularization and Reuseability Year of Programming University of Texas at Austin Member Committee to Assess the Scope and Direction of Computer Science and Technology Computer Science and Telecommunications Board of the National Research Council ACM Task Force on Computer Science Core Curriculum ACM Strategic Planning Committee Scientific Director Institute for Encapsulation Modularization and Reuseability Year of Programming University of Texas at Austin Chair ACM Award Committee Best Paper in Programming Languages and Systems National ACM Lecturer Member Selection committee for NAS Graduate fellowships Member IFIP Working Group Reviewer for the PROCOS research project the ESPRIT program Review Committee numerous computer science departments PATENTS Method for generating audio renderings of digitized works having highly technical contents Patent applied for Docket No with Raman PUBLICATIONSBooks Logical Approach to Discrete Math Springer Verlag NY pages with Schneider Instructor Manual for Logical Approach to Discrete Math Gries and Schneider Ithaca pages with Schneider Beauty is our Business Editor Springer Verlag New York pages with Feijen van Gasteren and Misra The Science of Programming Springer Verlag New York pages Translated into Russian and Japanese Programming Methodology Collection of Articles by Members of IFIP Editor Springer Verlag New York pages An Introduction to Programming structured approach Winthrop Cambridge Edition pages with Conway The following books are extensive revisions to suit different needs Primer on Structured Programming Using and pages with Conway Primer on Structured Programming using Pascal pages with Conway and Zimmerman An Introduction to Structured Programming using with Conway and Wortman Introduction to Microprocessor Programming using pages with Conway Fay and Bass Compiler Construction for Digital Computers John Wiley and Sons New York pages Translated into Spanish Japanese Chinese Italian and Russian Published Articles and Lectures What education for Address at the Opening Convocation Daniel Webster College September The need for education in useful formal logic IEEE Computer April Avoiding the undefined by underspecification In van Leeuwen Computer Science Today Springer Verlag Lecture Notes in Computer Science October with Fred Schneider Teaching math more effectively through calculational proofs The Mathematical Monthly October with Schneider new approach to teaching discrete mathematics PRIMUS June with Schneider Equational propositional logic IPL February with Fred Schneider Documents mean more than just paper Proc Second International Workshop on the Principles of Document Processing April with Raman Data refinement and the transform In Broy ed Program Design Calculi NATO ASI Series Heidelberg pp Computer Science Academic Encyclopedia of Computer Science Third Edition Ralston and Reilly eds Van Nostrand Reinhold New York with Marsh Loop invariant Encyclopedia of Computer Science Third Edition Ralston and Reilly eds Van Nostrand Reinhold New York network proof systems expressiveness and completeness TOPLAS July with Widom and Schneider new programming language Proc Software Technology Conference Los Angeles California April pp constructive proof of Vizing theorem IPL March with Misra On progress in programming In Broy Informatik und Mathematik Springer Verlag Heidelberg pp Teaching calculation and discrimination more effective curriculum Comm ACM March Binary to decimal one more time In Beauty is our Business Feijen et al eds Springer Verlag New York pp The transform new language construct Structured Programming with Volpano An optimal parallel algorithm for generating combinations IPL November with Akl and Stojmenovic Influences or lack thereof of formalism in teaching programming and software engineering Banquet speech Ibid pp presentation of vote algorithm In Formal development of programs and proofs Dijkstra ed Menlo Park pp Inorder traversal of binary tree and its inversion Ibid pp with van de Snepscheut The problem Ibid pp An algorithm for transitive reduction of an acyclic graph Science of Computer Programming July with Martin van de Snepscheut and Udding Developing linear algorithm for cubing cyclic permutation Science of Computer Programming December with Xue Generating random cyclic permutation BIT with Xue note on Graham convex hull algorithm IPL July with Stojmenovic Horner rule and the computation of linear recurrences IPL June with Pascoletti and Sbriz Programming pearls guest oyster Comm ACM April Mclaren masterpiece Science of Computer Programming April with Prins inversion of cyclic permutation IPL January with Feijen and van Gasteren Completeness and incompleteness of network proof systems Proc Fourteenth Ann ACM Symp Princ Programming Languages January Munich with Widom and Schneider Programming methodology making science out of an art Engineering Cornell Quarterly Fall with Schneider model and temporal proof system for networks of processes Distributed Computing with Nguyen Demers and Owicki new notion of encapsulation Proc SIGPLAN Symp Language Issues in Programming Environments Seattle June with Prins Behavior temporal approach to process modeling Conference on Logics of Programs Brooklyn June LNCS with Nguyen Demers and Owicki model and temporal proof system for networks of processes Twelfth Ann ACM Symp Princ Progr New Orleans January with Nguyen and Owicki General correctness unification of partial and total correctness Acta Informatica with Jacobs The emerging science of programming Keynote Address Australian Computer Science Conference Sydney Australia February Towards practical science of programming Keynote Address Conf Foundations of Software Technology and Theoretical Computer Science Bangalore India December Fast broadcasts Science of Computer Programming April with Schneider and Schlichting note on standard strategy for developing loop invariants and loops Science of Computer Programming Finding repeated elements Science of Computer Programming November with Misra proof technique for communicating sequential processes Acta Informatica with Levin Educating the programmer notation proofs and the development of programs Invited lecture Information Processing Proc IFIP Congress Lavington Ed New York Computing Fibonacci number in log time IPL October with Levin Assignment and procedure call proof rules TOPLAS October with Levin sorting IPL July with Melville Is sometime ever better than alway TOPLAS October Eliminating the chaff In Program Construction Bauer and Broy Eds LNCS Current ideas in programming methodology In Research Directions in Software Technology Wegner Ed MIT Press The graph marking algorithm Acta Informatica linear sieve algorithm for finding prime numbers Comm ACM December with Misra Parallel programming invited lecture Jahrestagung Springer Verlag Informatik Berichte October Berlin Germany The multiple assignment statement IEEE Trans Softw Eng March Language facilities for programming dialogues IBM Research and Development March Reprinted in Edmunds The Separable User Interface Academic Press San Diego pp with LaFuente An exercise in proving parallel programs correct Comm ACM December Some ideas on data types in languages Comm ACM June with Gehani An illustration of current ideas on the derivation of correctness proofs and correct programs IEEE Trans Softw Eng December Compiler Encyclopedia of Computer Science and Technology Belzer Holzman and Kent Eds Markel Dekker New York Error recovery and correction introduction to the literature Compiler Construction Advanced Course Bauer and Eickel Eds LNCS edition Springer Verlag New York Some comments on programming language design invited lecture Programmiersprachen Fachtagung Schneider and Nagl Eds Springer Verlag Heidelberg An axiomatic proof technique for parallel programs Acta Informatica with Owicki Verifying properties of parallel programs an axiomatic approach Comm ACM May with Owicki On structured programming reply to Smoliar Comm ACM November also Comm ACM October and Comm ACM January What should we teach in an introductory programming course SIGCSE Bulletin February Proc Symp Computer Science Education Describing an algorithm by Hopcroft Acta Informatica Programming by induction IPL Program schemes with pushdown stores SIAM Computing with Szymanski and Brown On classes of program schemata SIAM Computing with Constable Automatic compiler writing techniques In Systemprogrammierung Ganzhorn Schieferdecker Endres Ed Oldenbourg Verlag Munich Translator writing systems Comm ACM February with Feldman The use of transition matrices in compiling Comm ACM January The post mortem dump Comm ACM December with Bayer Paul and Wiehle Characterizations of certain classes of norms Numerische Mathematik Some results on fields of value of matrix SIAM Numerical Analysis with Stoer Some techniques used in the Comm ACM August with Paul and Wiehle Published Reports Computer science Cornell Engineering Quarterly Summer Die wissenschaftlichen Nachtkommen von Bauer In Broy Informatik und Mathematik Springer Verlag Heidelberg pp The Taulbee survey Computing Research News January and Comm ACM January with Dorothy Marsh The Taulbee survey Computing Research News January and Comm ACM September with Dorothy Marsh Computer languages In Hopcroft and Kennedy ed Computer Science achievements and opportunities Report of the NSF Advisory Committee for Computer Research SIAM Philadelphia pp with Hoare Kennedy Pereira and Scott The Computer Worm Report from the Commission of Preliminary Enquiry Cornell University Cornell University February with Eisenberg Hartmanis Holcomb Lynn and Santoro The Snowbird Report discipline matures Computer with Walker and Young Computing as Discipline Final report of ACM Task Force on the Core of Computer Science Computer with Denning Comer Mulder Tucker Turner and Young The Taulbee survey Comm ACM October and Computer November with Marsh The Taulbee survey Comm ACM August and Computer August with Dorothy Marsh The Taulbee survey Comm ACM August Meeting the basic research needs of computer science Report of the study group of the Advisory Committee for Computer Research National science Foundation December with Kosaraju and Fischer The Taulbee survey Comm ACM Oct Twenty years of computer science at Cornell Engineering Cornell Quarterly Fall Imbalance between growth and funding in academic computer science two trends colliding Computer September and Comm ACM September with Miller Ritchie and Young Other reports and reviews On presenting monotonicity and on AE Tech Rpt Computer Science Department Cornell University May Teaching math more effectively through the design of calculational proofs Tech Rpt March Accepted for publication in the Mathematical Monthly January new approach to teaching mathematics Tech Computer Science Department Cornell University February Accepted for publication in PRIMUS with Schneider constructive proof of Vizing theorem Tech Computer Science Department Cornell University August with Misra Forward Essays in Computing Science by Hoare and Jones Prentice Hall International London The planarity algorithm presentation and improvements Tech Rpt April with Xue Presenting an algorithm to find the minimum edit distance Tech Rpt March with Burkhart Inorder traversal of binary tree and its inversion Tech Rpt November with Jan van de Snepscheut Complete network proof systems an advisor perspective Tech Rpt Computer Science Department Cornell University September Developing two of Arsac funny algorithms Tech Computer Science Department Cornell University November The Gibbs Programming Environment IEEE International Conference on Computer Design VLSI in Computers ICCD Oct Port Chester NY The problem Tech Computer Science Cornell University September with Pritchard Review of Dromy book How to solve it by computer Science of Computer Programming reply to Susan Gerhart review of Craft and Science May The science of programming answer book Tech Computer Science Cornell University Ithaca New York June The problem Tech Computer Science Cornell University Ithaca New York May with Misra Finding the longest prefix August Notes on Mathematical Induction and Sets November Cand and Cor before and then and or else in ADA Tech Computer Science Cornell University Ithaca New York May Yet another exercise using shared variables in two processes to provide mutual exclusion Tech Computer Science Cornell University Ithaca New York Tutorial on the development of programs COMCON September with Parnas note on iteration Tech Computer Science Cornell University Ithaca New York September proof of correctness of Rem semaphore implementation of the statement Tech Computer Science Cornell University Ithaca New York May The use of comments on programming with Conway compiler Tutorial Software Document DISE Task Force on Software Engineering May Recursion as programming tool Tech Computer Science Cornell University Ithaca New York May note on program development Tech Computer Science Cornell University Ithaca New York March Using recipes to teach programming CIL Compiler Implementation Language SLAC Report March MPL Mathematical Programming Language Computer Science Report Computer Science Department Stanford University with others Ueber einige Klassen von Normen Thesis Technische Hochschule Muenchen ALGOL compiler for the IBM Report Rech der Tech Hochschule Munich with Paul and Wiehle The object program produced by the compiler Report Rech der Tech Hochschule Munich User manual for the ALGOL translator University of Illinois September pages with Bayer and Murphree Jr	other	cornell
769	 Server Date Sunday GMT Friday GMT Jing Huang Course Page This page for Multimedia Systems Jing Huang huang Readings The JPEG Still Picture Compression Standard MPEG Video Compression Standard for Multimedia Applications Methods for Encrypting and Decrypting MPEG Video Data Efficiently Audio Engineering and Psychoacoustics Psychophysics and Modern Digital Audio Technology Algorithms for Manipulating Compressed Images Resolution Independent Video Language Image Metamorphosis Multimedia Storage Servers Tutorial Project Home Page	other	cornell
770	 Server Date Sunday GMT Friday GMT Cornell Center for the Theatre Arts Jason page Cornell Center for the Theatre Arts Jason page help organize group of Computer Science people interested in the theatre specifically the Cornell Center for the Theatre Arts We buy block of season tickets and pass them out during the year If someone ca make it on one of the days bought tickets for then help them sell their old ticket and buy new one We also have few extra tickets this year for friends Each ticket costs the season subscription was If you are known to me or the Cornell Computer Science department and you are interested in the theatre send me mail jyh and include you in further mailings Season events for Power plays Seats are reserved in the main Proscenium theatre and they open in the Flexible theatre The Importance of Being Earnest Oscar Wilde Proscenium theatre In this witty and satirical comedy two young men seek the hands of two young ladies despite numerous obstaces including the fact that the ladies can only love man named Ernest This masterpiece is one of the most delightful comedies of all time complete with manufactured mistaken identity fractured romances and upended social conventions Plays Septermber we have tickets for September and Fires in the Mirror Crown Heights Brooklyn and Other Identites Anna Deveare Smith Flexible theatre searing look at two cultures living in Crown Heights Brooklyn in young black child is killed when Hasidic man car jumps curb An Hasidic Rabbinical student is stabbed and killed in an act of retaliation The ensuing riots wracked community previously praised for its atmosphere of tolerance and diversity Drawing from over interviews with Crown Heights residents politicans activists religious leaders victims and perpetrators Fires in the Mirror acheives compelling and sophisticated view of racial and class conflict Plays October we have tickets for October and Measure for Measure William Shakespeare Proscenium theatre Shakespeare most direct exploration of the uses and abuses of power In bawdy Vienna the young Isabella must plead for the life of her condemned brother whose fate is in the hands of Angelo Though he administers the law with utmost morality Angelo finds he desires Isabella and offers her brother life in echange for possesing her Isabella must choose between her love for her brother and her own honor Plays November we have tickets for November and Oleanna David Mamet Film forum male university professor and his female student meet to discuss her performancs in his class and soon become players in fierce interrogation of political correctness mechanisms of power censorship and abuse From the Pulitzer author of Glenngarry Glen Ross The Verdict and Oleanna is at once direct provocative and incendiary Shakes up the theatre like no play in years Rolling Stone Plays January we have tickets for February and Working from the book by Studs Terkel Flexible theatre Adapted by Stephen Schwarts Nina Faso Songs by Craig Carnelia Micki Grant Mary Rodgers Susan Birkenhead Stephen Schwartz James Taylor This musical look into the everyday lives of many different American workers will ring true for anyone who has ever faced the Monday morning blues or sighed workers from blue collar to executive tell their stories through music and monologues expressing their goals hopes and aspirations glorius show that rethreads the fabric of American life and leaves you cheering Daily News Plays February we have tickets for February and The Seagull Anton Chekhov Proscenium theatre provocative meditation on the seductiveness of power seagull is slaughtered young woman is seduced and then abandoned The innocent and hopefull fall into triangle of love and obsession culminating in futile self destruction Plays April we have tickets for April and May There are also two Dance Concerts you may be interested in We have tickets to the Dance Concert but if people are interested will buy some Dance Concert Proscenium Theatre Exciting original choreography performed by Cornell faculty and students Featuring diverse range of dance from ballet modern and to dance theatre this is event for dance lovers Extravagant lighting costumes and live and original music set the stage for the hottest new dance in the region Plays March Dance Alloy Proscenium Theatre Artistic Director Mark Taylor and Dance Alloy have become the defining force in Pittsburgh contemporary dance scene with dance that is elegant original and daring Brought to life by the strength and grace of the Alloy dancers who explore the limits of human movement these dances are both physically charged and visually complex Thanks to The Alabama Shakespeare Festival for the pictures	other	cornell
771	 Server Date Monday GMT Thursday GMT Department Directory Listing CS Department Directory Listing January The following is directory listing of those in the Computer Science Department and some of those closely associated with the department The entries include name office address and phone number Note that the phone numbers given are local Cornell exchange numbers If you are outside the local Cornell exchange and wish to call someone precede the number shown with For example Ken Birman full phone number is If you have questions or find errors send email to www or call FACULTY Birman Ken ken Cardie Claire cardie Coleman Thomas coleman Constable Bob rc CHAIR Donald Bruce brd LEAVE Godfrey Michael migod Gries David gries Hartmanis Juris jh Huttenlocher Daniel dph Keshav skeshav Kozen Dexter kozen Land Bruce bruce Morrisett Greg jgm Perkins Hal hal Pingali Keshav pingali Rubinfeld Ronitt ronitt Schneider Fred fbs Seshadri Praveen praveen Smith Brian bsmith Tardos Eva eva Teitelbaum Tim tt Toueg Sam sam Trefethen Nick lnt Van Loan Charles cv Vavasis Stephen vavasis LEAVE von Eicken Thorsten tve Wagner Kay kay Zabih Ramin rdz VISITING FACULTY Harkleroad Leon leon SUPPORT Alzo Lisa alzo Ayer Carol ayer Batzer Jan jan Buck Laurie buck Cameron Pauline cameron Competillo Linda lmc Consroe Karla karla Crawford Sue crawford Croft Helene croft Grant Kathe grant Jenkins Dan jenkins Mardel Linda mardel Musa Pat musa Personius Becky becky Ricks Kate kate Robinson Cindy cindy Williams Cindy williams Wojcinski Claudia claudia COMPUTER FACILITIES STAFF adm Alderman Ian ian Finley John finley Flanagan Doug flanagan Johnson Orlando oj Krafft Dean dean Moore Denise denise Parmelee Larry parmelee Wilson Cay wilson RESEARCHERS Adelstein Frank frank Allen Stuart sfa Carroll Jeff carroll dri Chew Paul chew Curtin Meredith curtin Eaton Rich eaton Fielding David fielding Friedman Roy roy Kannapan Srikanth kannapan Krietz Christopher Lagoze Carl lagoze Li Yuying yuying Morgenstern Matt matthew VanRenesse Robbert rvr Vogels Werner vogels Weber Andreas aweber Wilson Todd twilson Zack Greg zack Zippel Richard rz PhD STUDENTS Aaron Eric Rick aaron Aguilera Marcos aguilera Ahmed Nawaaz nawaaz Basu Anindya basu Batu Tugkan batu Benzinger Ralph ralph Brown Daniel snowman Budiu budiu Chang chichao Chen Wei weichen Chu Francis fcc Crary Karl crary Czajkowski Grzegorz grzes Durkin James jwd Ergun Funda ergun Erlingsson Ulfar ulfar Fernandez Sebastian spf Glew Neal glew Guo Katherine kguo Hafizogullari Ozan ozan Hawblitzel Chris hawblitz Hayden Mark hayden Heng heng Hickey Jason jyh Hickey Takako takako Amanda amanda Howe Nicholas howe Hu Deyu hu Huang Jing huang Huang ychuang Janosi Tibor janosi Kanetkar Sumedh kanetkar Kartch Dan kartch Kettnaker Vera kettnaker Kodukula Induprakas prakas Komissarchik Julia juliak Kotlyar Vladimir vladimir Kyparlis Athanasios kyparlis Lam Ioi ioi Li Li lili Liu Xiaoming xliu Mardis Scott mardis Marschner Stephen srm Mateev Nikolay mateev Menon Vijay vsm Millett Lynette millett Minsky Yaron yminsky Mitra Mandar mitra Moran Evan evan Mukhopadhy Sugata sugata Naumov Pavel pavel Ooi Wei Tsang weitsang Pearson David pearson Pierce David pierce Qiu Lili lqiu Ravikumar ravi Sharma Rosen sharma Smith Frederick fms Stodghill Paul stodghil Summers Kristen summers Van den Berg Aswin aswin Vaysburd Alexey alexey Veksler Olga olga Verma Arun verma Viswanath Divakar divakar Walker David walker Walter Bruce walter Wang Jia jiawang Weirich Stephanie sweirich White Patrick white Xiao Zhen xiao Yan Thomas tyan Zdancewic Stephan zdance Zhou ldzhou ACRI Bojanczyk Adam adamb ee Chrisochoides Nikos nikosc Hough Patricia phough Liao Aiping liao Sun Chunguang csun Wagner Mike mwagner Wohlever Chris wohl MISC ACRI ACSU Administrative Office office CFS Office adm CIT Help Desk CCC Computer Services part of CIT Copy Center Phillips Hall Dial Up Line CS Dial Up Line sytek Dept FAX DRI Lois Brown Fields Eric Grad Office ISIS Project Machine Room floor Machine Room floor Robotics Lab Theory Center Kathy Shippos Office ugrad MENG STUDENTS Ahuja Vineet ahuja Anderson Susan anderson Balakrishna Deepak gbd Bhardwaj Aastha bhardwaj Bringle Michael mbringle Camargo Fabian fabian Castro Alexander alcastro Chan Kinkok kchan Chang Oliver ochang Chen jwchen Chew Andrew achew Chiu cchiu Choi Hyunmook choi Chung Yoo ychung Daley Thomas daley Fielding David fielding Hammer Vincent vhammer Hong Jinwood jin Hsu Jerry jhsu Hu chinglan Huang Jin jhuang Huangyutitham Tanasak cjhuang Javeri Ashish ashish Korby Michael mkorby Koster David dkoster Landis Sean scl LEAVE Leong Kian Fai kleong Li jgli Liau ckliau Lin Libby libby Lin weiwei Lung Felix flung Machuca Jose jose Malik Indira lmalik McLean Dexter mclean Mukai Nobuhiko mukai Nguyen Mai mpnguyen Nguyen Olivier nguoli Nicks Brian bnicks Patel Ankit apatel Sachdeva Anil anil Shrikhande Nikhil nikhil Srivastava Sunil sxsrivas Suwantaemee Teerin swantaem Tans Sicco stans Teo Jinqchong teo Tsuchimoto Yuichi Yuichi Valerjev Nikola nikola Vitrano Eric vitrano Wang Jui juiw Wang nwang Wang whwang Wang liwang Wong Amy wwong Wu David dwu Wu Linda lxwu Wu Michael mwu Yan Diyu diyu Department Home Page Annual Report Home Page Department Home Page Annual Report Home Page	other	cornell
772	 Server Date Sunday GMT Wednesday GMT JAVA Applet for Camera and Perspective Transforms	other	cornell
773	 Server Date Sunday GMT Wednesday GMT Camera and Perspective Transforms in JAVA	other	cornell
774	 Server Date Sunday GMT Thursday GMT Teaching Logic as tool An introduction to teaching logic as tool Logic is the glue that binds together methods of reasoning in all domains Gries and Fred Schneider Click on any of the following items for more information text on teaching logic as tool Logical Approach to Discrete Math Instructor Manual for Logical Approach to Discrete Math Brief introduction to equational logic Inference rules of equational logic Axioms of equational logic Precedence rules Useful proof principles and heuristics Grounding informal proof techniques in logic neat solution to word problem short history of equational logic Panel on teaching logic as tool March Articles and lectures on teaching logic as tool Upcoming events regarding teaching logic as tool Glimmer ick of Hope Banquet speech at September in Limerick Ireland so be prepared Trefethen madness thoughts on Gries in limerick form Home pages for Gries and Schneider Cornell CS Department Home Page	other	cornell
775	 Server Date Sunday GMT Thursday GMT Ralph Benzinger Serious The German Tagesschau news The German Zeit magazine The daily junk Less serious My personal pillory The weather in Ithaca The Big Red Cheerleaders Some funny quotes Find the Pope in the Porsche	other	cornell
776	 Server Date Sunday GMT Monday GMT Reasoning About Knowledge Next Reasoning About Uncertainty Up Teaching Experience Reasoning About Knowledge COM Course Description Reasoning about knowledge particularly the knowledge of agents who reason about the world and each other knowledge was once the exclusive province of philosophers and puzzle solvers More recently this type of reasoning has been shown to play key role in surprising number of contexts from understanding conversations to the analysis of distributed computer algorithms This course provides general discussion of approaches to reasoning about knowledge and its applications to distributed systems artificial intelligence and game theory We start by examining the muddy children puzzle which demonstrates the subtleties of reasoning about knowledge of group We then consider simple yet powerful formal semantic model for knowledge and language for reasoning about knowledge whose underlying idea is that of possible worlds The rest of the course develops the model and show how it can be used to ascribe knowledge to agents in systems This allows us to better understand notions such as coordination and agreement The definitions lead naturally to notion of programs tool for designing and analyzing systems The course follows closely the material in the book Reasoning About Knowledge which actually was inspired by early versions of the course	other	cornell
777	 Server Date Sunday GMT Wednesday GMT Tom Henzinger Publications List of Publications Thomas Henzinger Reactive Modules Rajeev Alur and Thomas Henzinger Local liveness for compositional modeling of fair reactive systems Proceedings of the Seventh International Conference on Verification CAV Lecture Notes in Computer Science pp Rajeev Alur and Thomas Henzinger Finitary fairness Proceedings of the Ninth Annual IEEE Symposium on Logic in Computer Science LICS pp Monika Henzinger Thomas Henzinger and Peter Kopke Computing simulations on finite and infinite graphs Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS pp Logics and Timed Transition Systems Rajeev Alur and Thomas Henzinger Time for logic SIGACT News Rajeev Alur and Thomas Henzinger Logics and models of real time survey In Real Time Theory in Practice Lecture Notes in Computer Science pp Abstract Ftp postscript Rajeev Alur and Thomas Henzinger really temporal logic Journal of the ACM preliminary version appeared in the Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS pp Abstract Ftp postscript Rajeev Alur and Thomas Henzinger logics complexity and expressiveness Information and Computation preliminary version appeared in the Proceedings of the Fifth Annual IEEE Symposium on Logic in Computer Science LICS pp Abstract Ftp postscript Thomas Henzinger modal logic how to prove properties Proceedings of the Ninth Annual ACM Symposium on Principles of Distributed Computing PODC pp Abstract Ftp postscript Thomas Henzinger Zohar Manna and Amir Pnueli Temporal proof methodologies for timed transition systems Information and Computation Preliminary versions of the two parts appeared respectively in the Proceedings of the Annual ACM Symposium on Principles of Programming Languages POPL pp and in Real Time Theory in Practice Lecture Notes in Computer Science pp Abstract Ftp postscript Thomas Henzinger Zohar Manna and Amir Pnueli What good are digital clocks Proceedings of the International Colloquium on Automata Languages and Programming ICALP Lecture Notes in Computer Science pp Abstract Ftp postscript Rajeev Alur Tomas Feder and Thomas Henzinger The benefits of relaxing punctuality Proceedings of the Tenth Annual ACM Symposium on Principles of Distributed Computing PODC pp Abstract Ftp postscript Thomas Henzinger Sooner is safer than later Information Processing Letters Abstract Clock Systems and Timed Automata Rajeev Alur and Thomas Henzinger system discrete system clock variables In Theories and Experiences for System Development Rus Rattray eds AMAST Series in Computing World Scientific pp Abstract Ftp postscript Thomas Henzinger and Peter Kopke Verification methods for the divergent runs of clock systems Proceedings of the Third International Symposium on Formal Techniques in and Systems FTRTFT Lecture Notes in Computer Science pp Thomas Henzinger Xavier Nicollin Joseph Sifakis and Sergio Yovine Symbolic model checking for systems Information and Computation preliminary version appeared in the Proceedings of the Seventh Annual IEEE Symposium on Logic in Computer Science LICS pp Abstract Ftp postscript Rajeev Alur Thomas Henzinger and Moshe Vardi Parametric reasoning Proceedings of the Annual ACM Symposium on Theory of Computing STOC pp Abstract Ftp postscript Rajeev Alur Costas Courcoubetis and Thomas Henzinger Computing accumulated delays in systems Proceedings of the Fifth International Conference on Verification CAV Lecture Notes in Computer Science pp Abstract Ftp postscript Thomas Henzinger Peter Kopke and Howard The expressive power of clocks Proceedings of the International Colloquium on Automata Languages and Programming ICALP Lecture Notes in Computer Science pp Rajeev Alur Costas Courcoubetis and Thomas Henzinger The observational power of clocks Proceedings of the Fifth International Conference on Concurrency Theory CONCUR Lecture Notes in Computer Science pp Abstract Ftp postscript Rajeev Alur and Thomas Henzinger Back to the future towards theory of timed regular languages Proceedings of the Annual IEEE Symposium on Foundations of Computer Science FOCS pp Abstract Ftp postscript Rajeev Alur Limor Fix and Thomas Henzinger determinizable class of timed automata Proceedings of the Sixth International Conference on Verification CAV Lecture Notes in Computer Science pp Hybrid Automata Rajeev Alur Costas Courcoubetis Thomas Henzinger and Ho Hybrid automata an algorithmic approach to the specification and verification of hybrid systems In Hybrid Systems Lecture Notes in Computer Science pp Abstract Ftp postscript Rajeev Alur Costas Courcoubetis Thomas Henzinger Nicolas Halbwachs Ho Xavier Nicollin Alfredo Olivero Joseph Sifakis and Sergio Yovine The algorithmic analysis of hybrid systems Theoretical Computer Science preliminary version appeared in the Proceedings of the International Conference on Analysis and Optimization of Systems Systems Lecture Notes in Control and Information Sciences pp Abstract Ftp postscript Rajeev Alur Thomas Henzinger and Ho Automatic symbolic verification of embedded systems Proceedings of the Annual IEEE Systems Symposium RTSS pp Abstract Ftp postscript Thomas Henzinger and Ho note on strategies for hybrid automata In Hybrid Systems II Lecture Notes in Computer Science pp Abstract Ftp postscript Thomas Henzinger and Ho HyTech The Cornell HYbrid TECHnology Tool In Hybrid Systems II Lecture Notes in Computer Science pp Thomas Henzinger Ho and Howard HyTech The Next Generation Proceedings of the Annual IEEE Systems Symposium RTSS pp Thomas Henzinger Ho and Howard user guide to HyTech Proceedings of the First Workshop on Tools and Algorithms for the Construction and Analysis of Systems TACAS Lecture Notes in Computer Science pp Full version available as Cornell Technical Report Thomas Henzinger Peter Kopke Anuj Puri and Pravin Varaiya What decidable about hybrid automata Proceedings of the Annual ACM Symposium on Theory of Computing STOC pp Thomas Henzinger Hybrid automata with finite bisimulations Proceedings of the International Colloquium on Automata Languages and Programming ICALP Lecture Notes in Computer Science pp Thomas Henzinger and Ho Algorithmic analysis of nonlinear hybrid systems Proceedings of the Seventh International Conference on Verification CAV Lecture Notes in Computer Science pp Thomas Henzinger Zohar Manna and Amir Pnueli Towards refining temporal specifications into hybrid systems In Hybrid Systems Lecture Notes in Computer Science pp Abstract Ftp postscript Arjun Kapur Thomas Henzinger Zohar Manna and Amir Pnueli Proving safety properties of hybrid systems Proceedings of the Third International Symposium on Formal Techniques in and Systems FTRTFT Lecture Notes in Computer Science pp Last updated on September tah	other	cornell
778	 Server Date Monday GMT Tuesday GMT Instructors Instructors Kay Wagner Upson Jan Telle Upson Samuel Weber Upson Todd Wilson Upson Spring pierce	other	cornell
779	 Server Date Monday GMT Tuesday GMT Online Documents Cornell CS Modeling and Simulation Project Online Documents By Author By Project	other	cornell
780	 Server Date Sunday GMT Monday GMT Our new house Our new house Click here to see map of the area Information about Mortgages XXXXX XXXXX XXXXX XXXXX	other	cornell
781	 Server Date Sunday GMT Thursday GMT PSSLS Parallel Solution of Sparse Least Squares Problems PSSLS Parallel Solution of Sparse Least Squares Problems is sparse matrix package for solving large sparse linear least squares problems on machines This package is implemented in ANSI using arithmetic The IBM Library MPL is used for communication among processors PSSLS is parallel direct sparse solver To solve sparse linear least squares problem sparse QR decomposition is computed Then sparse triangular system is solved Both the sparse QR factorization and the triangular solution are carried out by parallel multifrontal scheme user guide to PSSLS is available here For further information regarding PSSLS please contact the author csun	other	cornell
782	 Server Date Monday GMT Saturday GMT Homework Homework Handed out Tue Mar Due Thu Mar You are to find one partner for the term project select projet and place proposal of what you want to do on the web The proposal must address the following points title page project description goals plan of attack expected kind of results how to determine critical steps to get done soon Create subdir in and place the proposal there Name the file Here are some ideas that could lead to interesting projects Some of these are projects that could easily be accomplished within the context of Others could eventually expand into publications or Meng project If you pick problem with wider scope you must be sure to isolate piece that can be adequately addressed within the semester You may work in teams of two possibly three but there should be clearly identifiable role for each member of the team especially for three person teams New High bandwidth Couple and Build Ethernet gateway using at IP level at level Implement kernel endpoints and run standard IP over Add IP packet filter to firmware or to Fast Ethernet Implement Active Messages for shared fast ethernet parallel gdb for Splash benchmarks Perfect fast RPC implementation urpc from last year Perfect distributed shared memory from last year USIT Instruction Set Design and Measurement Condition codes or not that is the question Suggested by David Wood Most architectures designed in the and employ condition codes Several of the recent RISC architectures do not yet others do For example the MIPS architecture does not have condition codes yet it has SET instructions that put the result of comparison into general purpose register The has virtual condition code registers which can be set either as of an ALU instruction or explicitly by compare instructions Explore the similarities and differences of these two schemes Is one clearly better than the other Are the differences technology dependent As processors become increasingly integrated which scheme will lead to the best performance Analyze instruction issue strategies Analyze and compare Scoreboarding Tomasulo algorithm and the scheme Where the beef How much of the advantage of dynamic scheduling is achieved by static scheduling and delay slots How do the change with increased speed ratio Are free caches or critical can pull together some good tools that students built at Berkeley years ago they did have much time left to study the results though so you could leverage their work Address spaces beyond bits According to some observers the demand for virtual address space increases at the rate of bit every years Thus while bit architectures were quite acceptable throughout the and they eventually became too constraining and have almost entirely been replaced At this rate we have just few more years before addresses begin to constrain our programs Some architectures have introduced segments to extend the address space Some computer architects suggest that only full machines integers and addresses will solve the problems Explore the cost performance programming and compatibility issues of these approaches Most RISC architectures have already defined But we do have any tools for analyzing the use of large address spaces and several interesting methodology issues arise in doing so Machine independent binaries All RISC instruction sets look almost identical but you sure can not compile one program for all Perhaps there is middle ground generic RISC that could be easily mapped to variety of ISA with reasonable efficiency One such design has been developed pretty far by OSF This raises another interesting question of machine independent pipeline scheduling PowerPC architecture Compare the Intel processor to the or Dig up all the technical information you can and try to come to terms with the real differences The is RISC processor at heart so what all this fuzz about old code Does it really matter The point of this project is to go further than the trade rags which beleive all the marketing hype as long as it boosts their sales Validation of Cache Studies Using tools like spy or spix and piping the trace directly into an optimized cache simulator it is possible to evaluate substantial workloads of billions of instructions Review the literature and see whether the important published results on cache studies really hold up In particular what is the limit of Spec based caching studies At some point all the Spec programs fit into the cache Superscalar Superpipeline Data Cache for Superscalar Architectures What does it take to services several hits per cycle To continue servicing hits while misses are being processes in the next level of the memory hierarchy How much does this buy Try sample design to get feeling for the complexity Build simple simulator and run some memory traces through it to see how much performance improvement is possible Sophisticated Branching for Superscalar Machines Suggested by Steve Krueger In RISC processors pipeline break is relatively costly In superscalar RISC processors that cost is effectively multiplied by the number of instructions that execute simultaneously It is therefore desirable to increase the runs of instructions without branches Some old architectures had SKIP instructions that were used extensively It seems that SKIP instructions possibly with restrictions on what could be skipped could give conditional execution without breaking the pipeline through the use of SQUASH or KILL hardware already in place due to the needs of exception processing Study whether the number of cases where SKIP instructions could be effectively used is great enough to make them useful forms might extend the usefulness by allowing more than one instruction to be skipped Several variants of this idea could be considered including multiway branches conditional moves operators to avoid branching max min abs and conditional operators Register organization for Superscalar Machines Superscalar execution looks very attractive once the multiplier and floating point units fit on chip since at CPI these sit mostly idle However the cost increase comes in the memory system see above and the register file To execute four instructions per cycle do we need register file Many values are forwarded between functional units and never touch the register file Study register usage patterns in superscalar designs and see how the number of ports can be reduced What are the Multiprocessors Multiple processors on Chip If you allow yourself transistor budget of to million transistors on chip you have plenty of room for innovative designs with multiple processors on chip This raises host of interesting questions Should caches be shared or dedicated to individual processors Should floating point units be shared or dedicated What is the between having more simpler processors vs fewer more sophisticated ones In some sense this is trading instruction level parallelism against process level parallelism The most serious bottleneck is going to be pin bandwidth in and out of the chip How can you minimize the bandwidth requirement Are new protocols required There are several ways to frame studies in this context You may want to look at multiple independent processes as in workstation with many open windows or small multiprocessor design or you may want to look at this as component in massively parallel machine Characterizing communication and sharing in multiprocessors In current multiprocessors interprocessor communication takes the form of cache misses Thus several issues get folded into single number the miss rate Some good work has been done to try to characterize sharing in terms of modern cache organization but there remains many unanswered questions Some of these may only be answered by inventing new analysis techniques Certainly it will be hard to get useful data The reference string generated my each of the processors depends on how work is scheduled onto processors This is generally done by allowing the processors to contend for various scheduling data structures Thus the schedule is somewhat dependent on the memory system Exploring design variations relative to fixed trace ignores this feedback thorough study needs to be done on the sensitivity or robustness of multiprocessor address traces few other concerns have been raised such as the number of shared references in available traces Communication with using transfers Several new multiprocessor designs use second processor for the network interface and communicate between the main processor and the using transfers Results indicate this is actually slower than one might at first expect Why What alternatives are there One suggestion is to have the opposite of cache on the network interface processor buffers which push data away into the right place in the memory system large blocks into DRAM and small things into the processor cache What is the minimum cache miss rate due to communication As uniprocessor caches get larger the miss rate approaches the initial load cost compulsory miss rate It would seem that multiprocessor caches should tend toward the compulsory miss rate plus communication factor How would an optimal cache perform Snoopy caches provide communication and replication of data Replication is what causes the coherence headaches How does the miss rate or communication rate decrease with degree of replication Distributed shared memory over ATM distributed shared memory or virtual shared memory has been around for long time but it never caught on To large degree this is due to the fact that ethernet is too slow to make it interesting Does ATM change the picture Design and implement DSM system over the ATM network available in the dept Apparently Willi Zwanepoole at Rice developed nice implementation which could be adapted Networking The following projects make use of the ATM network in the department in particular of the network interface that we developed They all deal with experimental software so you have to be willing to hack around the bugs and gotchas implementation normal implementations of are slow as hell big part of the problem is that normally sits in the kernel but other problems have to do with the algorithms and implementations themselves Implement really fast TCP over ATM and carefully analyze the performance Werner Vogels has already prototype ready It needs some work on the connection an but othewise is already wuite fast He has not done lot of benchmarking and in particular no study of the performance under congestion has been done RCP implementation This is similar to the above Review the literature on fast remote procedure call invocation implementations and implement one for the ATM cluster of workstations ATM multicast The ATM network supports multicast in the switch hardware Figure out how to control that and use it for some interesting application Horus or maybe video broadcasting Applications Optimized application kernel implementation pick your favorite application and beat the hell out of the part For example what is the fastest MPEG you can build The fastest motion detection algorithm for video scene analysis The fastest The key here is not just to arrive at fast implementation but to do the analysis so you can convince others that you arrived at the best possible implementation Truth in SPECmarks Prepare your own small suite of benchmarks and compare the performance on several workstations to that predicted by the SPECmarks It would be particularly interesting to put together an application specific suite for example multimedia benchmark suite Memory system behavior for large systems Study the memory system behavior and maybe other processor performance parameters for application ISIS comes to mind how can you measure the path length from the reception of message all the way through the of lines of code til reply is sent back Or some other large system	other	cornell
783	 Server Date Sunday GMT Tuesday GMT Lidong Zhou friends at Cornell My Friends at Cornell Huang Ioi Lam Xiaoming Liu Tibor Janosi Jun Xu Nikolay Mateev	other	cornell
784	 Server Date Sunday GMT Wednesday GMT Scott Dawson Personal Information Scott Dawson Cornell University Master of Engineering Student am most likely found doing the following things Working with this group of guys in the Systems Lab Debating the latest industry trends with Jeff and Will my research partners Playing racquetball and inline skating like have the time Preparing to make the move to NYC As the ball drops in Times Square the roar of the crowd becomes deafening Wait until you hear all of us when this ticker hits ground zero Sometimes as one is confined to such small area for such an extended period of time the mind wanders This picture is the result of such phenomena Early one morning AM Jeff Will and decided to put all of the multimedia equipment that we surrounded with on daily basis to good use The result much to our pleasure was both inventive and exciting Not to mention that we now had some customized pixs to put on the net to show just how interesting we could be as individuals graduated in May from the State University of New York at Geneseo with BA from their CS department Geneseo was really great school to go to met some really great friends there Past employers have been Databook Incorporated summer of in Ithaca has since relocated to Boston and Pathlight Technology which is also located in Ithaca NY be moving to New York City after graduating from Cornell University to work for Citibank My resume is still online for those who are curious about what been up to Currently working for the Campus Life department as Graduate Residence Assistant in Schuyler House which is conveniently located on the Southern outskirts of campus also very involved in Alpha Phi Omega Coed National Service Fraternity pledged during the spring of with PC of Alpha Beta Xi Chapter in Geneseo and transferred membership in the fall of to Gamma Chapter at Cornell University where maintain an active position on the pledge team spdawson	other	cornell
785	 Server Date Monday GMT Thursday GMT WWW Course Material Retrieving Files from the World Wide Web To retrieve the folder for programming assignment from the Web page To start Netscape use Bear Access from the Apple menu on lab machine In Bear Access click on the World Wide Web button This will start Netscape Use Netscape to find the WWW link labeled Program Folder for the programming assignment that you want Note WWW link is connection to another page in the Web In Netscape links are indicated by blue or purple shaded letters such as shown below An Example Link This link does do anything but real link might have the capability of switching to another page or retrieving your programming assignment folder To follow link click on the blue text with the mouse For example to retrieve Program follow the Program link from the Home Page On the Program page you will see the Program Folder link Click this link Netscape will retrieve the folder On the desktop should appear new folder named Program Note If other new files appear or you may throw them away They are used to get the folder from the Web and are not needed once you have the folder Move the Program folder onto your floppy disk Note Netscape might pop up dialog box asking you where to put the folder If this happens select your floppy disk in the dialog box and click the button to expand the folder into your disk Spring pierce	other	cornell
786	 Server Date Sunday GMT Wednesday GMT Papers on failure detection Papers on failure detection This page contains WWW pointers to research on failure detection Unreliable failure detectors for Reliable Distributed Systems introduces failure detectors for message passing systems To appear in JACM By Tushar Deepak Chandra and Sam Toueg The weakest failure detector for solving consensus determines what information about failures is necessary and sufficient to solve Consensus in asynchronous distributed systems message passing subject to crash failures preliminary version of this paper appeared in By Tushar Deepak Chandra Vassos Hadzilacos and Sam Toueg Tushar Deepak thesis combines the results in Unreliable failure detectors for Reliable Distributed Systems and the weakest failure detector for solving consensus Using Failure Detectors to Solve Consensus in Asynchronous Systems extends the work mentioned above to systems with registers This paper also contains results on resource complexity that have no analogue in the work mentioned above preliminary version of this paper appeared in By Wai Kao Lo and Vassos Hadzilacos Failure Detectors and the hierarchy extends the work on systems with registers to systems with arbitrary objects preliminary version of this paper appeared in By Gil Neiger Simulating in Asynchronous Distributed Systems shows that it is possible to specify and implement failure model that is indistinguishable from the model from the point of view of any process within an asynchronous system By Laura Sabel and Keith Marzullo Election Vs Consensus in Asynchronous Systems By Laura Sabel and Keith Marzullo Revisiting the relationship between Non Blocking Atomic Commitment and Consensus problems By Guerraoui Atomic Commitment with an Unreliable Failure Detector By Guerraoui Miquel Larrea and Schiper failure detectors By Guerraoui and Schiper The Decentralized Non Blocking Atomic Commitment Protocol By Guerraoui and Schiper The Transaction Model vs The Virtual Synchrony Model Bridging the gap By Guerraoui and Schiper Maintained by tushar	other	cornell
787	 Server Date Sunday GMT Thursday GMT NOODLLE	other	cornell
788	 Server Date Monday GMT Tuesday GMT Required Readings Readings from Silberschatz and Galvin Date Read Chapters to Chapter except Chapter through page Chapter skip Readings emphasized on Prelim Chapters Chapters Readings emphasized on Prelim II Chapters Chapter But somewhat more readable discussion of Mach from text by Tannenbaum has been copied and is on reserve in Carpenter Library Chapters Chapters and but you may skip sections and	other	cornell
789	 Server Date Sunday GMT Thursday GMT Information sources collected by Jim Davis Main Topics hotlist Information Capture and Access Annotation for Small Groups Publishing on the net World Wide Web User Interface Software Agents browse my public files browse my Notes dir private DRI Info resources Other CAMIS Gopher Center for Advanced Medical Informatics at Stanford NJIT Computerized Conferencing and Communications Center Natural Language Software Registry AI Repository cool fun stuff	other	cornell
790	 Server Date Sunday GMT Thursday GMT Previous Semesters Fall took CS Introduction to Multimedia Systems and CS Topics in the Theory of Distributed Systems was TA for CS Introduction to Digital Systems and Computer Organization Spring took CS Information Retrieval and CS Theory of Computing	other	cornell
791	 Server Date Monday GMT Saturday GMT Suggested Projects for Suggested Projects for Robotics Edge Clustering Develop algorithm for clustering of edges that represent single object Performance Simulations Investigate how vision and image processing applications perform on modern architectures vision applications tend to use large data structures images that can exhibit both good and bad spatial locality Ideally one would have processor simulator that would be configureable cache size cache associativity memory size processor speed instruction set etc The simulator should be able to generate statistics such as cache ratio Hopefully the simulator could be extended to simulate Shared Memory Multiprocessor SMMP Starting from scratch will be very hard it may be better to adapt an existing program to our needs Starting points UW Image Databases There is currently project here at Cornell to develop general purpose image database that will allow intelligent searching for images based on large number of image features We need people to implement different measures for basics such as texture pattern matching to face recognition Starting points the competitors Camera Gaze Control Create or adapt an existing object tracking algorithm so that the output can be used to control the positions of desktop camera The robotics lab is developing hardware for standard CCD camera We would like the user to be able to click on portion of the image and have the camera to keep the object centered in focus Find Cool Use for Stereo Vision Existing programs allow us to generate good depth maps at time speeds FPS We would like someone to create cute application using the robots or some other platform that would use the depth maps to perform some task such as navigation or collision avoidance these are not actually the same currently the easiest way for the robot to navigate is for it to go until it crashes into something back up little then turn Stereo Camera Calibration Develop robust reliable procedure for calibrating pair of stereo cameras using feedback loop between the output of the cameras as they view test pattern and their next adjusted view Text Segmentation Develop system that can detect text in an image or series of images This is not the same as OCR where one tries to take an image of printed text and recover the text rather you should concentrate on how to find text in an image Typical examples of texts that one might want to identify from video signal include the bylines on network news and scores and player stats from sports games Human Face Segmentation Basically find the objects in scene that look like human faces How many people are there How certain is this answer Starting point Univ Maryland also work at CMU by Kanade group	other	cornell
792	 Date Mon Dec GMT Server Mon Feb GMT Lab CS Laboratory Implicit Surfaces Introduction In this lab you will investigate implicit surface generation Implicit surfaces are generated by finding level surfaces in field That is by placing polygons in all of the voxels which have scalar data of certain value The surface descriptions often take forms familar from analytical geometry For instance unit sphere at the origin is described by when surface is fit to the points in which have value of zero Procedure Download Put the following in so than when DX starts up it will find these macros Note the programs in this exercise will not run without these macros The program takes as input an implicit function of and forms an surface The function is calculated at grid points then polygonalized by isosurface rendering assuming an isosurface value of zero For example the formula creates object Different functions of will produce different shapes Note that for different functions you may have to modify the range limits of the space defined by the Construct module As an example the following image was made by defining an implicit sphere in separate module from the heart then morphing between them by linearly intropolating between the two fields In this case mixing of the heart field with of the sphere field The sphere used was The program shows how to combine two implicit surfaces to simulate the union operation as used in constructive solid geometry see page of Watt Three new macros are used in this program InitCSG UnionCSG and MakeCSGsurface You can inspect or modify the macros using the Open Selected Macro option in the Windows menu of the visual program editor The two cylinder surfaces are combined in the UnionCSG macro using min function so that the voxels which are in the interior of either cylinder are interior to the result Remember that an implicit function changes sign as the surface is crossed and that for the surfaces used here that points inside have negative value The image below is the result of the union of two cylinders The program computes an implicit surface based on spherical fields of influence which can add together See one of last year student projects for more information on blobby functions The spherical fields can have positive and negative field strengths An example from shows four positive spheres transparent red and two negative spheres blue which when summed together then passed thorough an isosurface module produce the object shown to the right Assignment Execute the programs to understand their behavior then modify them as follows Modify to generate torus from an implicit function of You will need to construct function which is negative if the position is within certain distance of circle and positive otherwise Include interactors to set the radius of the torus and the radius of its Extend to perform the CSG operations of intersection and subtraction by writing two new macros called IntersectCSG and SubCSG Provide interactors for choosing any combination of two spheres cylinders tori or cones Provide interactors for performing union intersection or subtraction of the two selected shapes That is your program should be able to for example select sphere and cone and form the subtraction of or or union the sphere and the cone or intersect the sphere and the cone Shown below are the intersection of two cylinders and one cylinder minus the other The image below is formed as superquadric minus torus union cylinder but with about white noise added to the field Use the interactors in to make human head with recognizable but not necessarily artistic eyes nose mouth and ears Modify to produce two separate groups of blobs with separate interactor inputs which can be combined using your CSG modules You will need to modify to output field rather than surface Show one example of to separate blob groups combined with CSG operations Be prepared to demo the programs to show the torus generator the CSG operations the head you designed and the grouped blobby program The grader will exercise all interactors You should be able to explain your programs You should use macros and comments in the Notation field of each module so that you and the grader can understand the program Control panels if any should be well organized labeled and with the appropriate numeric ranges The Lab grading guide will be filled out by consultant during section to evaluate your work Back to Main Page Last modified Land Copyright Statement	other	cornell
793	 Server Date Sunday GMT Wednesday GMT Kristen Summers Cues Using Cues for Electronic Document Browsing In Digital Libraries Current Issues Nabil Adam Bharat Bhargava and Yelena Yesha editors Chapter pp Lecture Notes in Computer Science series with Daniela Rus Abstract We present and analyze effficient algorithms for the automated recognition and interpretation of layout structures in electronic documents The key idea is to use the patterns in the distribution of white space in document to recognize and interpret its components The recognition algorithm divides the document into hierarchy of logical elements the interpretation algorithms classify these divisions as tables indented lists polygonal drawings and graphs We present experimental data and discuss an information access application Our methodology allows the automatic markup of documents and the creation of indices and browsing tools for electronic libraries You can view the technical report version of this paper or return to my home page	other	cornell
794	 Server Date Sunday GMT Thursday GMT Jason Hickey Papers at Cornell Some Cornell Papers Jason Hickey Semantics of Objects in Type Theory Forthcoming Tech Report also submitted to POPL PostScript file Here are some formal definitions and theorems for the semantics presented in the paper These are just the bare formalizations plan to provide guide that makes it easier to walk the proofs Abstract We present semantics of object calculi in type theory This interpretation serves to provide solid mathematical foundation for programming The calculi we consider support method selection functional method update and subtyping with method subsumption Our interpretation provides this support without the need for recursive types to represent Self and it provides new analysis of objects where the requirements for subsumption are expressed directly in the method types Jason Hickey Formal Objects in Type Theory Using Very Dependent Types PostScript file Abstract In this paper we present an extension to basic type theory to allow uniform construction of abstract data types ADTs having many of the properties of objects including abstraction subtyping and inheritance The extension relies on allowing type dependencies for function types to range over domain Using the correspondence abstract data types can be identified with logical theories and proofs of the theories are the objects that inhabit the corresponding ADT also have the slides from my talk PDF slides are better but if you have Acrobat here are PostScript slides John Miriam Leeser Mark Aagard and Jason Hickey Integer Square Root Case Study in Design by Pricipled Optimization PostScript file Abstract Theorem proving techniques are particularly well suited for reasoning about arithmetic above the bit level and for relating different levels of abstraction In this paper we show how integer square root algorithm can be transformed to very efficient hardware implementation The top level is Standard ML function that operates on unbounded integers The bottom level is structural description of the hardware consisting of an simple combinational logic and some registers Looking at the hardware it is not at all obvious what function the circuit implements At the top level we prove that the algorithm correctly implements the square root function We then show series of optimizing transformations that refine the top level algorithm into the hardware implementation Each transformation can be verified and in places the transformations are motivated by knowledge about the operands that we can guarantee through verification By decomposing the verification effort into these transformations we can show that the hardware design implements square root We have implemented the algorithm in hardware both as an Altera programmable device and in CMOS Jason Hickey Formal Abstract Data Types PostScript file Abstract Current constructive type theories are powerful systems for describing mathematical objects with complex dependencies between types and computational values making them expressive enough to encompass large ares of mathematics and programming However as the body of formal knowledge in the type theory expands the problem of managing mathematical domains and their proofs becomes increasingly significant Though the objects of the theory are formal the domains are not In this paper we show how to apply the methods of formal data abstraction to the organization of the mathematical domains In the process we expand the tools of data abstraction to include reusability and namespace organization providing an environment that can be used for defining objects within domain for organizing domains within type theory and for organizing theories within system This environment will require extending the expressivness of inductive definitions within the type theory to include the dependent characteristics of type theoretical domains Note This also contains summary of the NuPRL type theory as an Appendix	other	cornell
795	 Server Date Sunday GMT Friday GMT Personal Info of Nicholas Howe All About Nick Howe at least more than you ever really wanted to know Home address Schuyler Place Ithaca NY The Brief Story Of My Life was born in Port Jefferson Long Island on December or so am told When was three years old my family moved to Hamden Connecticut where grew up went to college at Princeton University where majored in physics Graduating in joined the Teach for America program and spent two years teaching at small rural public high school in Arkansas am now in my second year of the computer science PhD program at Cornell Click here for pictures Links to Other Family Members and Friends Both of my parents are employed at Yale University My mother works at the medical school My father is professor in the math department My sister is junior at Columbia University My aunt and uncle work at EDC Jim Couture works at ON Technology Send them resume if you like what you see Matt Leary does have page but his fiancee Hillary does Alex Reutter has very cool page Check out Car Bomb Others if you have links please mail them to me and will add to this list Links to my Princeton past At Princeton was member of the Princeton Mime Company am former director of PrinceCon production of the Simulation Games Union Although try to deny it was occasionally seen with that monstrosity the Band also had lots of friends in the Wildcats cool capella group Other Web sites found interesting Fantasy Pictures just what it says Tarot well the graphics look neat anyway Personality Test an INTJ What your sign Earthwatch looking for different sort of vacation SPAM Haikus etc just what you been looking for Funny Pages lots more jokes The Zipper find out how to bug your representative in Congress Voters Telecom Watch Internet group Inktomi fast search engine Named after Native American myth Last updated Back to my home page	other	cornell
796	 Server Date Sunday GMT Saturday GMT Unreliable Failure Detectors for Reliable Distributed Systems Unreliable Failure Detectors for Reliable Distributed Systems by Tushar Deepak Chandra and Sam Toueg This paper has pages To get postscript copy of this paper click here or here to get it from the mirror site To appear in JACM Abstract We introduce the concept of unreliable failure detectors and study how they can be used to solve Consensus in asynchronous systems with crash failures We characterise unreliable failure detectors in terms of two properties completeness and accuracy We show that Consensus can be solved even with unreliable failure detectors that make an infinite number of mistakes and determine which ones can be used to solve Consensus despite any number of crashes and which ones require majority of correct processes We prove that Consensus and Atomic Broadcast are reducible to each other in asynchronous systems with crash failures thus the above results also apply to Atomic Broadcast companion paper shows that one of the failure detectors introduced here is the weakest failure detector for solving Consensus Research supported by an IBM graduate fellowship NSF grants and Ames Grant and in part by Grants from IBM and Siemens Corp Maintained by tushar	other	cornell
797	 Server Date Monday GMT Tuesday GMT Program Program Due Thursday February Click this link to retrieve the Program folder Program Folder Spring pierce	other	cornell
798	 Server Date Sunday GMT Sunday GMT Picture of Koichi	other	cornell
799	 Server Date Sunday GMT Friday GMT Abstract of Nuprl and Circuit Design Paper Abstract for Paul Jackson Nuprl and its use in circuit Design In Boute Stavridou editors Proceedings of the Interational Conference on Theorem Provers in Circuit Design IFIP Transactions Nuprl is an interactive theorem proving system in the LCF tradition It has higher order logic and very expressive type theory the type theory includes dependent function types Pi types dependent product types Sigma types and set types Nuprl also has well developed user interface and allows for the use of clear and concise notations close to ones used in print Proofs are objects which can be viewed and serve as readable explanations of theorems Tactics provide extendible toolkit for proof development while the soundness of the system relies only fixed set of rules We give an overview of the Nuprl system focusing in particular on the advantages that the type theory brings to formal methods for circuit design We also discuss ongoing projects in verifying circuits verifying the correctness of hardware synthesis systems and synthesizing circuits by exploiting the constructivity of Nuprl logic Last Modified Jan Paul Jackson jackson	other	cornell
800	 Server Date Sunday GMT Friday GMT Cornell CS Course Home Pages Fall Course Home Pages Fall These are links to the home pages for number of CS courses for Fall In many cases there are class notes problem sets and other course information available although they may be available only to registered members of the course Course Home Pages for some courses taught during previous semesters can be found using the links at the bottom of this page Introduction to Computer Programming An introduction to elementary computer programming concepts Emphasis is on techniques of problem analysis and the development of algorithms and programs The subject of the course is programming not particular programming language The principal programming language is The course does not presume previous programming experience Programming assignments are tested and run on interactive microcomputers Standard version of COM No mathematics is assumed Introduction to Computer Programming An introduction to elementary computer programming concepts Emphasis is on techniques of problem analysis and the development of algorithms and programs The subject of the course is programming not particular programming language The principal programming language is The course does not presume previous programming experience Programming assignments are tested and run on interactive microcomputers Alternative version of COM emphasizing examples and applications involving continuous mathematics including trigonometry and calculus Computers and Programming Intermediate programming in language and introduction to computer science Topics include program development proofs of program correctness program structure recursion abstract data types oriented programming data structures and analysis of algorithms Java and Gofer are the principal programming languages Structure and Interpretation of Computer Programs An introduction to programming languages and computer science Topics covered include functional programming including recursive and functions programming analysis and understanding of algorithms and correctness of programs Several substantial sized programming projects are done using Dylan dynamic programming language The aim of the course is to expose students to wide range of interesting and challenging concepts in computing using programming as tool Discrete Structures Covers mathematical aspects of programming and computing Topics will be chosen from the following mathematical induction logical proof propositional and predicate calculus combinatorics and discrete mathematics covering manipulation of sums recurrence relations and techniques basic number theory sets functions and relations partially ordered sets graphs Introduction to Digital Systems and Computer Organization Web course material includes course info lecture notes homeworks project info and hopefully even lecture videos Topics covered in the course include representation of information languages in particular PowerPC processor organization interrupts and memory hierarchies combinatorial and sequential circuits data path and control unit design RTL and microprogramming Programming Languages and Software Engineering An introduction to the programming languages tools and methods used in modern software development Programming methodologies modularity data abstraction programming Programming tools software libraries and interface definition languages General techniques will be complemented with programming experience Data Structures Lists trees graphs arrays and other forms of data structure and their implementation Relationship between language and data structure emphasizing abstract data types Dynamic storage allocation and memory management Detailed study of searching and sorting methods Analysis to determine the more efficient algorithm in given situation Systems Programming and Operating Systems An introduction to the logical design of systems programs with emphasis on multiprogrammed operating systems Topics include process synchronization deadlock memory management methods information sharing protection and security and file systems The impact of network and distributed computing environments on operating systems is also discussed This is subject requiring constant attention Foundations of Artificial Intelligence challenging introduction to the major subareas and current research directions in artificial intelligence Topics include knowledge representation search problem solving processing vision robotics logic and deduction planning and machine learning Automata and Computability Theory An introduction to the modern theory of computing automata theory formal languages and effective computability and deeper version of Credit will not be given for both Corrective transfers between and are encouraged during the first few weeks of instruction Advanced Database Systems CS Advanced Database Systems is intended to give students solid background in the design and development of database management systems DBMS While DBMS is in one sense giant application program there are surprisingly many principles behind its development and use The database research community is also active and there are always new problems to be addressed because of the explosive amounts of data that people wish to access This course forms essential background for anyone who wants to become systems engineer at database development company or become an informed user of database systems or become database systems researcher or develop systems in any domain that manipulate large amounts of data or find out how teller machine really works number of advanced fundamental DBMS concepts will be covered Although this is not intended to be an introductory course the discussion of various topics will begin with quick review of basic material In terms of workload the course involves two exams small survey paper and programming project See http for more details Advanced Programming Languages study of programming paradigms functional imperative concurrent and logic programming Models of programming languages including the lambda calculus Type systems polymorphism modules and other constructs Program transformations programming logic and applications to programming methodology Multimedia Systems Hardware and software issues involved in computer manipulation of audio video and images Topics include media capture representation compression editing processing storage and transportation Special emphasis on the processing of digital video including algorithms for special effects and automatic extraction of content and applications of parallel architectures to video processing Analysis of Algorithms Methodology for developing efficient algorithms primarily for graph theoretic problems Understanding of the inherent complexity of natural problems via algorithms randomized algorithms randomized reducibilities Additional topics such as parallel algorithms and efficient data structures Information from previous semesters Information from previous semesters may be retained for while but do be surprised if certain links do work Fall Spring Summer Fall Spring Summer	other	cornell
801	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
802	 Server Date Monday GMT Thursday GMT Program Program Due Thursday February IMPORTANT Please note the following modifications to the Program handout The project file and source file were not present in the initial Program folder These can be found in the folder Program choose which should be downloaded in the usual way After you get your choose function working properly as explained in Step of Part copy the body of this function over to the template for choose in the file you find comment where this body should go If you added extra code for tracing purposes while developing the function choose make sure you delete this code before copying It is no longer necessary to turn in listing of since the file now contains your choose function Thus in the checklist of What to hand in delete the item beginning listing of the file and in the following item note that will now also contain your definition of choose Note When you try to run Program CodeWarrior may give you warning about Link error or warning You may safely ignore this The warning occurs because we are defining our own function exp which is already defined in one of the libraries CodeWarrior will use our new definition instead of the old one Note You may only use constructs that have been taught in class to write Program expressions functions and recursion Even if you know about loops do use them Click these links to retrieve the Program folders Program Folder Program Choose Folder Spring pierce	other	cornell
803	 Server Date Sunday GMT Tuesday GMT who is that frowning man the variegated wood oak trees were very significant in classical mythology for many religions partially because they do lose their leaves in winter they were seen as sign of longevity and power and oak groves were sites of extreme significance to druids and witches on the british isles especially the image of the foliate mask which is more commonly called the green man is ubiquitous in medieval churches from britain and is also very common image in the modern pagan movement the foliate mask usually appears as man peering through bunch of oak leaves with the leaves also becoming part of his features such as his beard hair or cheeks he can be playful joyous and celebrate the humor of fertility and spring or he can be the somber old man of winter with snow covering his aged face and collecting in the grey leaves of his beard often use the image of the green man as meditation point when considering the masculine aspect of deity witchcraft thealogy tends to view godhead as dual with masculine and feminine aspects either in balance or with the male as the created yet creative consort of the female and while the female half has very established mystery and lore the male tends to have less and tends to be much more tied to the cycle of the year often being symbolized by child born at yule every year and dying at samhain or the fall holiday of your choice another interesting oak tree datum in times of war people have often turned to acorns as foodstuff while they do have some nutrition in them think still leave them to the squirrels we are the music makers and we are the dreamers of dreams aphex twin dan brown snowman last updated aug	other	cornell
804	 Server Date Sunday GMT Wednesday GMT Information sources DRI Information resources Information resources think might be useful to DRI people maintained by Jim Davis About the DRI Libraries Finding more resources High Performance Computing National Information Infrastructure Companies Universities Uncle Sam Other DRI information search DRI public files Full test search of files on our WWW server and archives of DRI mailing lists Or browse through the file system tree Software environments pages The Design Research Institute The home page for our Web server this is our front door to the rest of the world These are the Yellow Pages of the Internet Some of these are lists or collections of good sites which you browse visually and others are search systems you fill in form and it tells you what it has The advantage of the lists are that if they are not too long you can search them by eye and if they are well organized you can search quickly The search systems are usually much larger and often contain information gathered by automatic agents which exhaustively traverse the entire Web Unfortunately no single one of these systems is the best You will certainly want to try at least the first three Searches The first three are all very powerful and comprehensive AltaVista Inktomi fast Web indexer with large database Lycos catalog If this is down see the original site in Switzerland World Wide Web Worm Search WWW Homepages using Harvest ALIWEB Lists YAHOO YAHOO Yet Another Hierarchically insert word Oracle maintained by David Filo and Jerry Yang It become quite popular lately What new historical list of new events on the Web compiled by NCSA This is the same as the What new link on Mosaic Help menu Reference Desk Good list of references on the net All the world servers on map Global Network Navigator This highly polished document is published by Associates is kind of online magazine about the Internet It includes the Whole Internet Catalog very useful index of things on the net You must register to use it but usage is free Libraries Cornell Library Catalog Requires emulator Mann Library gateway This gateway connects to number of useful databases including DIALOG and periodicals index CS TR server Computer Science Technical Reports at Cornell with links to other places Library of Congress See also the Library of Congress gopher server Hytelnet List of online public library catalogs Good when you are searching for book High Performance Computing Simulation Design MetaCenter for Computational Science and Engineering Cornell Theory Center High performance networking and distributed systems archive Loughborough UK NSF HPCC Science Highlights National Coordination Office for HPCC List of High Performance computing sites List of High Performance research groups General Electric CE Toolkit strong set of demos of GE work in Concurrent Engineering Defense Information Systems Agency includes JIEO Joint Interoperability and Engineering Organization Center for Engineering Activities Monthly reports National Software Exchange NSE for the High Performance Computing and Communications community National Information Infrastructure InterNIC Internet Network Databases RFC index See also RFCs at Internet drafts at UNC Chapel Hill Includes National Information Infrastructure National Information Infrastructure Gopher National Information Infrastructure Guide Enterprise Integration Technologies Companies Home pages of various companies Xerox Digital Equipment Corp AT Research McCaw Cellular Communications Cellular Digital Packet Data CDPD is fast efficient digital data transmission system that overlays existing analog cellular networks The system operates at Kbps per channel CDPD provides maximum connectivity by using idle times between cellular voice calls or transmitting in dedicated channel environment Canon Research Centre Europe Natural language processing and audio No photocopiers Hewlett Packard Object Management Group Source of Common Object specifications Thomas Register one of the oldest and most comprehensive sources of information about companies You need to supply password to use it Try username dri and password tr Universities This is just list of those that are related in some way to the DRI For exhaustive lists of university servers consult the Meta server section Cornell CS Center for Coordination Science MIT United States Government FedWorld White House Interactive Citizen Handbook ARPA United States Census Bureau NASA Department of Justice Department of Defense See also United States Navy Patent and Trademark Office Including intellectual property and the NII and reports on software patents Other servers Search all Usenet news Geography server Gateway CIT Gopher Cornell Information Technologies gopher network Include link to CUINFO Usenet FAQ files Frequently Asked Questions from Usenet newsgroups The technical groups are often good sources of information Searchable FAQ index Usenet FAQs list of all FAQs some of which are in HTML FTP archive of FAQs	other	cornell
805	 Server Date Sunday GMT Sunday GMT Ensemble THE ENSEMBLE DISTRIBUTED COMMUNICATION SYSTEM Ensemble is the next generation of the Horus group communication toolkit also developed at Cornell University Visit the Horus page for more information about Horus papers on group communication and pointers to other sites with related information Language support Note that the current distribution primarily provides support for applications developed in the ML programming language However interfaces to several other languages are under developlment and will be made available soon You can check out our roadmap for future development to see what our plans are ML Ensemble is implemented in the Objective Caml programming language dialect of ML The use of ML supports variety of optimizations that enable Ensemble to achieve communication latencies an order of magnitude faster than Horus although the current distribution does not enable these optimizations Ensemble supports an interface to prototype appears in the current distribution This interface is being expanded upon to provide complete support for applications Also under development are two interfaces the Horus Object Tools HOT interface and Electra Corba object request broker interface Java Finally work is being to interface Ensemble to Java and to wrap Ensemble as Netscape Building applications with Ensemble For an application builder Ensemble provides library of protocols that can be used for quickly building complex distributed applications An application registers or so event handlers with Ensemble and then the Ensemble protocols handle the details of reliably sending and receiving messages transferring state implementing security detecting failures and managing reconfigurations in the system research tool For distributed systems researcher Ensemble is highly modular and reconfigurable toolkit The protocols provided to applications are really stacks of tiny protocol layers These protocol layers each implement several simple properties they are composed to provide sets of properties such as total ordering security virtual synchrony etc Individual layers can be modified or rebuilt to experiment with new properties or change the performance characteristics of the system This makes Ensemble very flexible platform on which to do research Other Information General information about Ensemble Find out more about Horus Our roadmap for future development of Ensemble Transfer the distribution after reading the license agreement Peruse the tutorial Stay in touch with us through the mailing list Mark Hayden	other	cornell
806	 Date Mon Dec GMT Server Thu Aug GMT polygons Constructing objects using explicit polygon lists At some level often hidden from the user graphics system based on polygons needs to keep list of the polygons The list must include their location in space vertices and often includes other data The data may consist of face lists normals nearest neighbors or perhaps other items The structure we will use here to represent polygons consists of two lists The first is list of all vertices which make up an object The second is list of polygonal faces Each face in the second list consists of list of the vertices for that partcular polygon An example is shown below The vertex list contains four entries each of which is corresponding to the positions of the vertices The face list contains four entries each of which describes one face of the tetrahedron shown The integers on each line represent the index of the vertex in the vertex list with zero being the first entry corresponding to the corners of each polygonal face The front of polygon is defined as the side you see when you traverse the vertices of that face in direction Each face list entry must have to correct orientation determined by enumerating the vertices order Another example is shown below with vertices but just two triangles Two images are shown The image to the left shows the front of the larger triangle The image to the right shows the back The face which is highlighted in the list corresponds to the smaller triangle which sticks out to the left in both images face list can in general have any number of vertices for each polygonal entry Limiting yourself to triangles has couple of advangages triangle is always planar so its surface normal is well defined Some commerical renderers will only use triangles Java Applet allows you to design and view polyhedra Comments about Theory Center online documents are welcome and may be sent to Last modified Land Copyright Statement	other	cornell
807	 Server Date Monday GMT Monday GMT Handouts CS Advanced Language Implementation Handouts Handouts Course Overview dvi file Introduction to SML Harper postscript file Interpreting the in SML dvi file Homework Due Friday Ignore problem Sample solution to the programming problems Avoiding the Overheads of Substitution dvi file LAMBDA Based Intermediate Language dvi file Conventional Optimization of LAMBDA dvi file Assignment Simple Optimization of LAMBDA dvi file Some related optimization documents Making Lambda Calculus Smaller Faster Appel and Trevor Jim Unrolling Recursions Saves Space Appel Closure Conversion of LAMBDA dvi file Abstract Models of Memory Management Morrisett Felleisen Harper Uniprocessor Garbage Collection Techniques Wilson Assignment Optimization Closure Conversion and GC dvi file Simple Copying Collector sml code Introduction to Advanced Control Constructs dvi file Operational Semantics for Advanced Control Constructs dvi file Implementing Evaluation Contexts dvi file Assignment Closure Conversion take and Garbage Collection dvi file Adding Threads to Standard ML Cooper and Morrisett postscript Portable Multiprocessing Interface for Standard ML of New Jersey Morrisett and Tolmach postscript CML Concurrent Language Reppy postscript Assignment Fun with Threads and Modules dvi file Back to the homepage	other	cornell
808	 Server Date Monday GMT Tuesday GMT CodeWarrior for Setting Up CodeWarrior for CodeWarrior can be run on your own personal Macintosh Copies of CodeWarrior can be purchased from the Campus Store The CodeWarrior installed in the CIT labs is just like the one you would install on your Mac except for few things we have added the CSLib library and the Basic project stationery Note These additions were built using CodeWarrior version so it is possible that they will not work with earlier versions of CodeWarrior although we have heard from people that they do Once you have retrieved the Additions folder install the additions as follows Open the Additions folder Inside it there is SimpleText file containing instructions similar to these There are two folders called INTO MacOS Support and INTO Project Stationery The folder structure in the Additions folder is meant to mirror the folder structure inside the Metrowerks CodeWarrior folder of your copy of CodeWarrior to make it easy to follow these instructions Open your or CW Gold folder Open the Metrowerks CodeWarrior folder inside it Open the INTO MacOS Support folder in the additions Move the Support folder into the MacOS Support folder in your Metrowerks CodeWarrior folder Open the INTO Project Stationery folder Move the Basic file into the Project Stationery folder in your Metrowerks CodeWarrior folder Open the INTO Proj Stat Support folder in the INTO Project Stationery folder Move the file into the Project Stationery Support folder in the Project Stationery folder of your CodeWarrior When you open new project with CodeWarrior you should now be able to select the Basic stationery This will include the CSLib library which should also now be available to you Click here to get the Additions folder Additions Folder Other Machines If you have copy of CodeWarrior for computer other than the Mac you may still be able to set up the environment However the course staff will not be able support this Build the CSLib library Get the source code for by anonymous FTP from Follow the instructions on page in the Roberts textbook Appendix Library Sources Compile the source code on your machine using CodeWarrior To create the CSLib library for we only compiled the genlib simpio string random and exception parts of the library we left out the graphics stuff If everything seems to work for your machine feel free to compile all of it Put the compiled library and the library header files into the support directory for your CodeWarrior Make the Basic project stationery Our project stationery is based on the ANSI project stationery with the CSLib library added Put your project stationery in the project stationery directory of your CodeWarrior Spring pierce	other	cornell
809	 Server Date Monday GMT Friday GMT Prelim Prelim General Info Tuesday February pm Prelim will cover up through recursion through Teitelbaum section and the first page of There will be no coverage of tail recursion the comma operator higher order functions or complexity and performance The Prelim review session will be held on Sunday February at pm in Baker Room Assignments Olin Upson Kimball Olin Spring pierce	other	cornell
810	 Date Tuesday GMT Server Thursday GMT Jeff Miscellaneous Math Places AMS Home Page Institute for nonlinear science and lyap software Maple ftp server MathWorks Home Page MathWorks ftp site Home Page Netlib Home Page Nonlinear Science Print Archive SIAM Web Server Stochastic ODEs The Web Virtual Library Mathematics Yahoo Mathematics Page Yahoo Universities Page CFD codes list APS Center for Turbulence Research An introduction to CFD Turbulence research Web Indices List of WWW servers by location The Web Virtual Library Subject Catalogue Yahoo Guide to WWW The Webcrawler Lycos Some Colleagues Toby Driscoll Satish Reddy Peter Schmid Fabian Waleffe Cornell Stuff CU Library CUInfo Uncle Ezra Cornell Theory Center Center for Applied Mathematics Cornell Math Department Math Department Instructional Computing Lab Movies Local Movie Listings Internet Movie Database News and Weather CNN Interactive Northeast Sattelite Image updated hourly Northeast Radar Image updated hourly Ithaca Weather Locators Netfind at NJ find people by name and domain name Dictionaries Dictionary Webster Dictionary PC Software Linux Documentation Project Oakland MSDOS and Windows Archivesarhive Indiana Windows Archive JUMBO Windows Shareware Windows Shareware Games games games Links to other sites PC Hardware KC Computers upstate NY Interactive Computing Oregon good notebook prices Computer Discount Warehouse not the best prices but reliable and comprehensive PC Catalog search tons of stores for the best price FTP Sites ctan TEX archive GNU stuff SCHEME stuff NCSA stuff Washington University mirror site back to the home page baggett	other	cornell
811	 Server Date Tuesday GMT Thursday GMT The Doon School The Doon School The Doon School is residential school located in Dehra Dun India Contents Introduction DSOBS USA on the Net Archived email from the DOSCO mailing list OBs news Old Boys Register form Chandbagh School Pakistan The Rose Bowl The Doon School Weekly Chandbagh Magazine Prayer and Song Book The Dosco Logo Gallery We need volunteers to help us complete the Dosco web pages If you are interested please send me note Maintained by and tushar	other	cornell
812	 Date Sun Dec GMT Server Mon Nov GMT Vizual Insight Zone Richard Gillilan Visualization Group Cornell Theory CenterIthaca NY email richard information last updated Introduction As part of an effort to provide interactive visualization the Theory Center has constructed virtual reality facility Although the use of virtual reality in scientific research is still in its infancy wide variety of scientific disciplines are beginning to take advantage of the technology This document lists current VR applications gives instructions for using our facility and notes on effective use Gallery of Images Chagas Disease Metaballs CaveMaze VR Railroad new users README software hardware effective use previous work VR FAQ	other	cornell
813	 Server Date Sunday GMT Thursday GMT Computer Science Fair HomePage Undergraduate Computer Science Fair Information Sheet This spring we will be holding an Undergraduate Computer Science Fair The Fair will be run in the spirit of local science fair and students may enter any project that has relevance to computer science The intention of the Fair is to enourage students to work on independent projects and to give them public showplace for projects demonstrating their creativity and originality Secondly students often cite their work on independent projects as their fondest memories of the undergraduate experience Finally we will use the Fair as tool for increasing the visibility of our students with potential employers and potential graduate departments The Fair will be held using two mediums the web and poster session In order to submit project website should be constructed containing short abstract describing the project and any longer description and summary of results pictures or demos that the team wishes to display Websites for all projects will be linked up to single website that is accessible from the CS department homepage Outstanding projects may be highlighted by the department via additional links from the department homepage in order to showplace examples of what Cornell undergraduates do We will also be having poster session in which all the entries will be physically displayed to the general public for one afternoon One member of the team of entrants should be on hand at all times to describe the project For those that wish to we will allow the entrants to to bring in personal computer in order to give demonstrations of projects We will be able to provide power but no networking capabilities Sample Projects The projects might be theoretical in nature or involve an interesting program Some possibilites include but are not limited to An interesting of project turned in for CS course result of an independent research project new mathematical theorem or an interesting new proof of known theorem Especially encouraged project that does not fall within the scope of any one course computer game that takes illustrates an interesting CS aspect an interesting tool for the web for examples visit the MIT Media Lab since artists seem to be on the cutting edge of using computers in new ways one might produce new tool for generating artwork if you happen to be in NYC you might want to stop by the Mediascape exhibit at the Guggenheim SoHo for ideas alternately there are several web sites that are of interest one example is the artnetweb note the list of CS companies that sponsor that page Elegibility Any Cornell undergrad may enter the contest Group work is allowed as long as all members of the group are Cornell undergrads If the project is done as part of an on ongoing Cornell research project then it is crucial that you clarify the exact contribution of your work in relation to the contributions of persons that are not part of the project team background of the problem and the previous work done on it should also be provided No faculty sponsorship is required We can not emphasize enough the importance of clearly stating the contributions of the project and providing description remember that people will quit reading or listening to you as soon as they get bored or tired Projects must comply with the Engineering College Code of Academic Integrity and Policy Notebook We reserve the right to exclude projects that we feel do not comply with the above criteria Important Dates Firm dates will be announced at later date Tentatively form indicating intent to submit project will be due on January this will include information such as the project title and names of students working on the project Webpages describing the projects should be ready for public perusal by February and the Fair poster session will be held on some afternoon during the week of February roughly For more details and updates see our website at Questions Biana Brukman at	other	cornell
814	 Server Date Monday GMT Thursday GMT	other	cornell
815	 Server Date Sunday GMT Wednesday GMT Incremental Compuation Deriving Incremental Programs Deriving Incremental Programs Objectives We are engaged in an ambitious effort to derive incremental programs automatically or from programs written in standard programming languages This approach contrasts with our earlier approaches that aimed to incrementally evaluate programs In essence every program computes by iteration expressed as recursive functions or loops This is why loop optimizations are so important loop body can be regarded as program parameterized by an induction variable that is incremented on each iteration by change operation Efficient iterative computation relies on effective use of state computing the result of each iteration using stored results of previous iterations This is why strength reduction and related techniques are crucial for performance Given program and an input change operation program that computes efficiently by using the result of the previous computation of is called an incremental version of under Sometimes information other than the result of needs to be maintained and used for efficient incremental computation of We call function that computes such information an extended version of Thus the goal of computing loops efficiently corresponds to constructing an extended version of program and deriving an incremental version of the extended version under an input change operation In general incremental computation aims to solve problem on sequence of inputs that differ only slightly from one another making use of the previously computed output in computing new output instead of computing the new output from scratch Incremental computation is fundamental issue relevant throughout computer software optimizing compilers transformational program development and interactive systems Results Thus far we have partitioned the problem of deriving incremental programs into three subproblems Exploiting the result the return value of Caching maintaining and exploiting intermediate results of the computation Discovering computing maintaining and exploiting auxiliary information about information not computed by We summarize here the essence of our methods In Systematic Derivation of Incremental Programs we gave systematic transformational approach for deriving an incremental version of program under an input change The basic idea is to identify in the computation of those subcomputations that are also performed in the computation of and whose values can be retrieved from the cached result of The computation of is symbolically transformed to avoid these subcomputations by replacing them with corresponding retrievals This efficient way of computing is captured in the definition of In Caching Intermediate Results for Program Improvement we gave method called for statically transforming programs to cache all intermediate results useful for incremental computation The basic idea is to extend the program to program that returns all intermediate results II incrementalize the program under to obtain an incremental version of using our method for and III analyze the dependencies in then prune the extended program to program that returns only the useful intermediate results and prune the program to obtain program that incrementally maintains only the useful intermediate results In Discovering Auxiliary Information for Incremental Computation we proposed novel approach for finding auxiliary information Auxiliary information is by definition useful information about that is not computed by Where then can one find it The key insight of our proposal is Consider as candidate auxiliary information for all intermediate computations of an incremental version of that depend only on such an incremental version can be obtained using some techniques we developed for solving and We use techniques developed for solving and instead of just so that the candidate auxiliary information includes auxiliary information useful for efficiently maintaining the intermediate results How can one discover which pieces of candidate auxiliary information are useful and how they can be used We proposed Extend with all candidate auxiliary information then apply some techniques used in our methods for and to obtain an extended version and an incremental extended version that together compute exploit and maintain only useful intermediate results and useful auxiliary information Thus on the one hand one can regard the method for as an extension to methods for and On the other hand one can regard methods for and suitably revised for their different applications here as aids for solving The modular components complement one another to form comprehensive principled approach for incremental computation and therefore also for efficient iterative computation generally Although the entire approach seems complex each module or step is simple In CACHET An Interactive Program Transformation System For Deriving Incremental Programs we describe our prototype implementation of these ideas	other	cornell
816	 Server Date Monday GMT Monday GMT Activities in the Cornell CS Department Activities These are links to some miscellaneous activities associated with the department CUCS Hockey Association of Computer Science Undergraduates ACSU	other	cornell
817	 Server Date Sunday GMT Friday GMT Nikos Research Page work with Charles Van Loan My thesis deals with the Kronecker product of matrices More specifically am looking at Approximating matrix with the Kronecker product of pair of matrices Expressing FFT and Wavelet algorithms using the Kronecker product notation Automatically implementing signal processing algorithms that use the Kronecker product via symbolic manipulation and program transformations plan on providing access to my system that generates efficient FFT code for different languages and systems via the WWW For the moment the input form is working and no code is generated Please have look In general am interested in numerical linear algebra and parallelization use of symbolic math and compiler techniques for optimization FFTs wavelets simulation high performance and scientific computing	other	cornell
818	 Server Date Monday GMT Monday GMT CS Assignment Internet Homework Number Date Assigned January Date Due February To submit your answer You will submit your answers to this assignment via email See the instructions below Introduction The Internet offers wide variety electronic information resources This assignment touches on three of these resources World Wide Web WWW the newsgroups and electronic mail email on the CS information available therein Prerequisites You will need access to the Internet and to WWW browser newsreader and an email application in order to complete this assignment All four of these services are available in the Upson Mac Lab via Bear Access to those with NetIDs and passwords The instructions for this assignment will be for Bear Access but you may use different combination of access applications NCSA Mosaic rn and mail from Unix account you wish Bear Access In order to use Bear Access you will need NetID valid password and two blank floppies one for mail and one for news Bear Access can be found on the Macs under the Apple menu Once launched Bear Access presents you with menu system from which you may access the WWW browser Netscape the newsreader NewsWatcher and the email application Eudora This handout contains only skeletal instructions for the use of the these applications we recommend that you read the documentation on these applications if you are not familiar with them WWW The WWW is an Internet hypertext resource WWW documents may contain text GUI forms graphics sound animation as well as hypertext links to other documents on the Web The web in World Wide Web refers to the structure implied by these hypertext links You can jump from document to document across machine organizational and geographic boundaries by following links If you think of the documents as nodes and the links as edges in graph you get the idea CS material on the Web fair amount of information related to CS is available via the WWW from the CS home page Lecture notes homework assignments and course information are currently available Videos of the lectures may be made available on the WWW in the future Using Netscape Click on the World Wide Web the Bear Access menu to launch Netscape Hypertext links in documents may be displayed as blue underlined text or as icons Clicking on hypertext link will cause the document referenced by the link to be retrieved The title of the current WWW document is displayed in the title bar of the Netscape window this is the document title from the title bar referred to below The Location field gives the current URL more on this later The Home button may be used at any time to return you to the default document In the Mac Lab the default document is the CUInfo home page The Open button may be used to jump to an arbitrary URL We recommend that you take look at the Netscape handbook select the Help Handbook menu item for further instructions on how to use Netscape and for further information on the WWW Accessing the CS home page After Netscape has been launched you should see the CUInfo home page The procedure for reaching the CS home page from the CUInfo home page is as follows Click on From document Other Cornell Web Servers CUInfo Home Page Cornell University Dept of Computer Science Other Cornell WWW Servers Course Home Pages Cornell Department of Computer Science CS Introduction to Digital Cornell Course Home Pages Spring You should now be viewing the CS home page Spend some time navigating the documents linked to this page try to get picture of how the various documents are linked and what the overall structure is When you become somewhat familiar with the CS page and with Web navigation in general answer the following questions Start from the CS home page Click on Table of Contents then click on Generations of Computers Click on Next either one What document are you now viewing Give the document title from the title bar Now navigate back to the CS home page How did you accomplish this Give sequence of clicks button presses menu choices etc There are several possible answers Finally you should get used to searching through the Web for information whose location you do not know priori Answer the following question in which CS WWW document is the acronym RTL first defined Give the document title from the title bar URLs Uniform Resource Locator URL is basically an address of WWW document For the URLs which you be using in this assignment the address is absolute as opposed to relative it can be used from anywhere on the Internet Opening URL simply means retrieving the WWW document at the address referred to by the URL you might think of this as jumping to the document Open the URL http What is the title of this document By now you should be getting used to tracking down information on the Web Try to answer the following question starting from the Hyperion Web page who was the director of the Babylon epsiode Race Through Dark Places Newsgroups The newsgroups provide sort of Internet bulletin board where messages may be posted and read by wide variety of people with similar interests CS has dedicated newsgroup which may be used for announcements feedback questions of general interest etc To access the CS newsgroup from the Macs click on the Network News Usenet menu item on the Bear Access menu then click on the NewsWatcher Help menu item and read the instructions Configure and run NewsWatcher as specified in the instructions Once NewsWatcher has been configured and is running go to the Full Group List window Scroll down through the list of newsgroups until you see on window should appear containing list of messages actually hierarchical list of authors and subjects of messages organized by threads on message will bring up the full message which consists of header the From To etc lines above the and body the part below the Find the message with the subject article and date Sun Jan GMT What is the body of this message It should be four lines of text See the documentation for further information on the newsgroups and on NewsWatcher Email The Bear Access email application Eudora may be accessed via the Mail menu item on the Bear Access menu Click on the Mail Help item and read the instructions there Configure and run Eudora as specified in the instructions Once Eudora has been configured and is running you may send message by selecting Message New Message from the menu at the top of the screen See the documentation for further information on electronic mail and on Eudora Submitting Answers Send an email message to with the subject assignment answers Include the following information in your message Name Last First Cornell ID Address Phone Grading letter or audit College major and year in school Proficiency on scale of know in FORTRAN BASIC Pascal Scheme Other languages please list Computer science courses taken so far Answers to questions	other	cornell
819	 Server Date Sunday GMT Saturday GMT Business Sector Personal Group Applications START	other	cornell
820	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide	other	cornell
821	 Date Mon Dec GMT Server Mon Apr GMT Textbook Errors Errata for Watt Computer Graphics Second Edition Addison Wesley The bulleted numbers refer to page number The first equation on the page has two mistakes should read Also VW should read dot The third row second column entry of should be sin phi not sin theta The first matrix is incorrect It is not orthonormal and thus can not be the product of two rotations The second constraint in the middle of the page should read Normalizing the range of zs values so that the range of maps into the range Matrix equation has an incorrect last COLUMN It should read should read Equation should have set of brackets so that the multiplies the entire expression Figure is confusing at best think that the vector should be and the vector should be The third equation on the page gives mu as function of Fo The mu should be eta the index of refraction The equation is just rearranged version of the one above it The second numbered bullet should read These values of eta Note that in the code the index of refraction is refered to as mu In figure the notation Nt dot implies in inside should read is inside In Equation the last in the equation for Nb should be ys The Ns on the right of the equation for Ns should be Na In Figure the parametric directions and are reversed	other	cornell
822	 Server Date Sunday GMT Friday GMT Parallel Object Recognition and Applications to Facial Recognition Parallel Object Recognition and Applications to Facial Recognition Matt Androski Chris Paradis Jody Shapiro Introduction This project was an attempt to parallelize computer vision object recognition algorithm Given database of object models and previously unseen image this algorithm attempts to find any and all models which appear in the new image Matching is performed using an approximation of the Hausdorff Fraction see Figure for simple example The image search is performed in hierarchical scheme which attempts to minimize comparisons by quickly eliminating regions of the image from consideration Figure previously unseen image containing model In this paper we will discuss the pros and cons of different methods of parallelization and describe the factors that motivated our design decisions We will then describe our parallel implementation using in detail this will be followed by performance analysis We also discuss the suitability of this algorithm for use in facial recognition and present our results We conclude with discussion of some possible extensions to both the parallel implementation and the facial recognition aspects Approximation to the Hausdorff Fraction This method uses an approximation to the Hausdorff Fraction to measure the similarity between two edge images of the same size This approximation is computed using subspace representation of the two edge images The distance for which the fraction is being computed is factored in by dilating one of the images by the distance For this application one of the images in the match will be model from stored database while the other will be region of new image To create the subspace we first convert each of the model images into column vector by reading the pixels in column major order We then construct matrix from these vectors We compute the eigenvectors and eigenvalues of this matrix and select the largest eigenvalues and create matrix from their corresponding eigenvectors This matrix is used to project each of the model images and any region of the new image into the subspace The subspace representation of the two images will each be vector The primary step in computing the approximation to the Hausdorff Fraction is dot product of these two vectors This method is described in detail in The subspace representations of the database models are precomputed and stored along with all of the matrices and data needed to perform the projection operation Regions of the image we are searching need to be projected into the subspace during run time This projection operation is computationally very expensive Therefore both the search algorithm and the parallelization method attempt to minimize the number of projections performed Note that the approximation is only accurate to within of the true Hausdorff Fraction so final decisions about the relative quality of match are made using the true Hausdorff Fraction Search Algorithm The search algorithm presented in attempts to minimize the number of projections and comparisons by performing examination of the new image The new image is subdivided into cells where each cell represents set of translations of the model with respect to the image Each model is translated to the center of the cell and compared with that region of the image dilated by the radius of the cell see Figure This amounts to rough comparison of this model with every possible translation in the cell If the resulting fraction is less than some threshold then the set of translations represented by that cell can be ruled out as match with that model If the resulting fraction is not below the threshold then the algorithm subdivides the cell into four quadrants and considers each of those This is repeated until the model is ruled out or the algorithm has recursed down to the point where each cell is one translation see Figure If model can not be ruled out by the approximation at the lowest level then the true Hausdorff Fraction is calculated If the model still can not be ruled out it is marked as possible match and the fraction and position are stored for later consideration Figure Image divided up into cells with model translation shown Figure cell is searched with strategy Thus the search is depth first and each cell of the image is an independent entity Projections of regions of the new image are computed for each cell at each level For efficiency all models which passed the test at higher level are compared to the projection and list of the survivors is passed to the next lower level The search algorithm is described in detail in Parallelization Issues The first major task in parallelizing this object recognition algorithm was deciding how to distribute the processing amongst the processors One option was to distribute the search cells across the processors Thus each processor would be assigned group of cells and would search each of these cells for all models in the database This method had some attractive features Cells are independent entities as are all image projections associated with them The projections could be computed and used locally for each of the models and no communication between processors would be necessary However this method requires each processor to have access to the entire database of models Our test database contained view each of models for total of models For database of that size having complete set of models at each processor is not unreasonable However any real application would require much larger database which would preclude the use of this method Our second option was to distribute the models across the processors Thus each processor would have subset of the models in the database and would search every cell in the image for its set of models This method is much more tolerant of large database than the first but it introduces some significant problems Each processor is searching through all of the cells in the image As such every processor will need most of the image projections calculated Image projections are very expensive so having each processor compute all of the projections locally is unacceptable Instead it is necessary to have processors store projections in global data structure as they are calculated so other processors can access them This introduces significant network traffic into the parallel version However since this method can handle large database much more effectively it became the only choice for implementation Once this implementation was chosen we were faced with two primary issues in parallelization One issue was how to efficiently compute and share the image projections To prevent processors from needing to access the same projections simultaneously we stagger the starting points of each processor across the image we are searching In an ideal case the processors will move from cell to cell in lock step without any conflicts If two processors happen to need the same projection simultaneously and the projection has not yet been calculated then simple locking mechanism ensures that only one does the calculation while the other waits So when given processor needs projection it first checks to see if the projection has been calculated If so it gets the projection and uses it If it has not been calculated it locks the projection calculates it and stores it in the global structure If it fails to lock the projection then another processor must be computing it so it waits until that computation completes The second issue was that of load balance This issue appeared to be deceptively simple since large quantity of models could be easily distributed across many processors The problem with this simple solution arose because of the organization of our database The views of each of the models were stored sequentially in the database given processor would be assigned most of the views of few objects If one of those objects appeared in the image that processor would have many more close matches than other processors and would recurse more deeply into the image This created distinct load imbalance We solved this problem by spreading the views of each object across the processors In real application it would be sensible to store the views of an object out of order to solve this problem With this change in place we achieved much more acceptable load balance Figure shows the load balance of the algorithm before and after this correction It is important to note however that it is impossible to predict which models will cause the deepest searches so there will always be certain amount of load imbalance Figure Load Balancing Performance Once our implementation was complete we measured its performance on the massively parallel processor We also compiled the sequential version for the and measured its performance The graph in Figure shows the performance results in terms of speedup over the sequential version Figure Speedup vs Number of Processors The graph clearly shows that our parallel implementation achieves less than ideal performance Ideal performance would be speedup of for test on processors These results were not as good as we had hoped so we attempted to identify the source of overhead which was limiting our performance We separately measured the time spent in each phase of the search The breakdown of time for different numbers of processors is shown in Figure Figure Breakdown of Processing Time The single processor graph shows that the parallel version when run on one processor performs nearly as well as the sequential version However when more processors are added we see that the time spent fetching projections from the global structure is significant source of overhead As the number of processors being used increases the fewer projections are calculated locally so more global accesses are required The graphs show that the overhead associated with fetching projections increases for more processors To solve this problem we would like to fetch the projections using access and do some other calculations while waiting for the data to arrive However the nature of the algorithm prevents us from knowing in advance which projections we need Thus by the time we know we need projection we have no other calculations to perform while waiting for the data Experiments With Facial Recognition With our parallel implementation complete we began to investigate the usefulness of this method for facial recognition Our goal was to see if the algorithm could successfully find faces in scene using the approximation to the Hausdorff fraction One test method we considered was inserting face models from our database directly into scenes and then seeing if we could match them This works well but is very artificial Instead we use images that are not in the database of the people who do appear in the database to see if we can effectively find those faces This is much more representative of situation We started the construction of our database with set of images This set consisted of poses each of different people We wanted to exclude some of these poses from the database so that we could search for them in scenes We elected to save the poses for matching and construct the database from the poses The resulting database is shown in Figure We used this database to construct subspace and the needed supporting data as is described in Our next step was to create set of images to search We did have access to the people who appear in our database so we decided to create synthetic images by inserting the edge images the ones we kept out of the database into images which contained other faces of roughly the same size We attempted to select images which contained significant number of faces and additional clutter to introduce the possibility of false matches We have included several of our synthetic test images and the results of our searches on them Each set of images includes the original grayscale and the corresponding edge image Each pair of images following consists of the synthetic image created by inserting the face we wish to search for and the same image with the best match overlayed in red The notation associated with the inserted face indicates that we inserted pose of person In instances where the search fails to identify the correct face the correct face is shown in blue while the result of the search is shown in red Coordinates of the match are column followed by row with the origin at the top left Figure Face database Original image and version Person inserted at Found person at Person inserted at Found person at Person inserted at Found person at Original image and version Person blue inserted at Found person red at Person blue inserted at Found person red at Person inserted at Found person at Original image and version Person inserted at Found person at Person inserted at Found person at Original image and version Person inserted at Found person at Person blue inserted at Found person red at Facial Recognition Results The results of our experiments with facial recognition were mixed We were pleased that often the algorithm successfully selected the correct person to match the face in the scene However the algorithm does sometimes fail and incorrectly selects another face or in rare cases something that is not even face However the key result of our tests was more subtle When we examined all of the possible matches which survived the Hausdorff approximation based search we found that the correct result was nearly always present Our test set was not large enough to suggest any statistical conclusions but we believe that the search algorithm is effective in quickly eliminating without eliminating good matches The final decision as to which element of the database is the best match is made with the true Hausdorff approximation We believe this is where the algorithm fails Thus it may be possible to use the approximate Hausdorff method to quickly search the image and then use more robust face matching algorithm to pick the best match from the survivors The method developed by Turk et al might be good choice for this application Conclusions It has been established that searching scene for given set of models can be conducted efficiently by using the approximation to the Hausdorff fraction In the first part of this project we have shown that this algorithm can be effectively parallelized Thus with enough processors at our disposal we can quickly search new scene for models in the database Further we have determined that this algorithm can be successfully applied to the problem of facial recognition Given database of faces and scene it is possible to use this algorithm to search the image for people who appear in the database This algorithm has potential applications as means of identifying unknown individuals This could be used by law enforcement agencies for searching criminal records Companies could use it to verify the identity of employees as part of their security More general problems such as face detection could be addressed with variant of this algorithm which searches for structures in scene This work could also be extended to search for given face in sequence of images Future Work and Improvements The primary limiting factor in this parallel algorithm is the time spent fetching projections from the global structure As we have already stated predicting the need for given projection would allow us to perform access and avoid wasting time waiting for the network to supply the data Future revision to this implementation should include some means of projection prediction simplistic approach would be to fetch all projections that might be needed The danger in this approach is that such scheme would increase network traffic and congestion significantly proper approach would be to employ something akin to branch prediction scheme with high accuracy Another possible approach to improving this algorithm might be to use breadth first search rather than depth first one This would allow you to accurately predict which projections you would need However this would also require storage of list of surviving models for each cell at each level as the search proceeds The memory requirements of these lists would be significant and perhaps prohibitive Yet another solution would be to use the first method of parallelization described above We would distribute the cells across the processors Each processor could compute the projection for its cells as needed and store them The problem of storing all of the models could be solved by subdividing the database into model sets processor would consider only one set at time When nearing completion of set the processor could begin reading the next set from file This would keep memory requirements to minimum However the demands on the file system might become the limiting factor in the algorithm with this implementation We see three main areas for future work with respect to facial recognition larger set of test images could be used in an effort to produce real statistics on recognition performance However these statistics will still be approximations because facial recognition is inherently Real test images as opposed to our test images could be used This would require the people in the database to naturally appear in the test images most likely new face database would need to be created It would also be interesting to see how the search algorithm performs under changing lighting conditions The true Hausdorff fraction that is computed to eliminate matches is not necessarily the best measure to use for facial recognition Edge detected images of faces are not necessarily good basis for final matching Perhaps better method would be to use matching scheme the method used in might be good candidate Certainly based matching appears to be useful for quickly and efficiently narrowing the search References Huttenlocker Lilien and Olson Object Recognition Using Subspace Methods Hiroshi Murase and Shree Nayar Visual Learning and Recognition of Objects from Appearance International Journal of Computer Vision Matthew Turk and Alex Pentland Eigenfaces for Recognition Journal of Cognitive Neuroscience Vol Number David Culler et al Parallel Programming in Proceedings of Supercomputing Chang Grzegorz Czajkowski and Thorsten von Eicken Design and Performance of Active Messages on the IBM Olivetti Research Laboratory Database of Faces Carnegie Mellon University Test Images for Face Detection Source Code	other	cornell
823	 Server Date Sunday GMT Wednesday GMT Virtual Reality Video Conferencing Virtual Reality Video Conferencing Implemented High Performance Graphics Engine Projects being developed as part of course Virtual Reality Video Conferencing Video Texture Mapping Design of Related Links Brian Smith my project advisor homepage VR Immersive Desktop Teleconferencing Interactive by Microsoft Project at Sun Microsystems Laboratories Manual Virtual Reality Modeling Language Desktop Video Conferencing Product Survey MBONE the Multicast Backbone on the Internet Graphics Engines List	other	cornell
824	 Server Date Sunday GMT Friday GMT The Weakest Failure Detector for Solving Consensus The Weakest Failure Detector for Solving Consensus by Tushar Deepak Chandra Vassos Hadzilacos and Sam Toueg This paper has pages To get postscript copy click here or here to get it from the mirror site preliminary version of this paper appeared in Abstract We determine what information about failures is necessary and sufficient to solve Consensus in asynchronous distributed systems subject to crash failures In we proved that failure detector that provides surprisingly little information about which processes have crashed is sufficient to solve Consensus in asynchronous systems with majority of correct processes In this paper we prove that to solve Consensus any failure detector has to provide at least as much information as Thus is indeed the weakest failure detector for solving Consensus in asynchronous systems with majority of correct processes Research supported by an IBM graduate fellowship NSF grants and Ames grant grants from the IBM Endicott Programming Laboratory and Siemens Corp and grant from the Natural Sciences and Engineering Research Council of Canada Maintained by tushar	other	cornell
825	 Date Mon Dec GMT Server Wed Apr GMT Cornell Theory Center Copyright Statement Cornell Theory Center Copyright Statement All contents copyright Cornell University All rights reserved For permission to reproduce any materials on the Cornell Theory Center World Wide Web servers contact Linda Callahan Director External Relations cal phone fax Software that is available for redistribution is identified and covered under terms described within	other	cornell
826	 Server Date Monday GMT Wednesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
827	 Server Date Sunday GMT Wednesday GMT Lecture CONCEPTS last lecture Simple expressions and programs statements and their evaluation examples CONCEPTS this lecture Compound statements and scoping rules blocks and declarations fun with else iteration with while and break fencepost errors HANDOUT Sample Prelim questions Prelim notes Review session is Sunday at Prelim is Monday PM Coverage is everything but there will be no detailed questions on the stack model Closed book closed notes mostly for your benefit Bring writing implement We do stress memorization We will forgive minor syntactic errors Room assignments Upson Phillips Do miss the prelim Make up exams are oral and guaranteed to be no easier than the real one Compound statements Another kind of statement we actually seen this already but had given it name This is what the curly braces do at least so far Sort of like begin and end in PASCAL Syntax an open curly brace then or more statements then closed curly brace square compound expression can include declaration statements but they must all appear at the beginning before any statement which is not declaration statement Example with declaration int square Scoping rules Nasty example do write code like this void main int int printf The rule is simple to figure out which is intended look outwards from the line you are on until you find You can add this to the stack model but little ugly and we wo do it We wo use this feature in anything very complicated in Where have we seen compound statements Conditional statements often involve compound statementsif test thenstatement else elsestatement test is an expression but thenstatement and elsestatement can be any statement It is good practice to use compound statements with conditional statements it makes your code much easier to read Where else have we seen compound statements Hint in this case they usually involve declarations Fun with else You do actually need to use else with ifif printf This can lead to totally unreadable code especially if you nest your if statements Do do this if if else There is reasonable way of doing multiway conditional statementsif if if else defaultstatement do personally find this incredibly readable but sometimes it necessary Iteration Today we mostly cover the syntax of iteration in We do some examples of its use in section Iteration involves executing some part of your program repeatedly as does recursion The easiest way to do iteration is with whilewhile expression statement Typically statement is compound statement semantics of while evaluate expression If it is false zero then we done with the while statement If it is true then evaluate statement then evaluate the while statement again Examplevoid countdown int count while count printf count count count printf Blastoff void main start countdown start printf start This example also shows off subtle but important property of the stack model Note that if the test expression is never your while statement will run forever How do we get out of while statement early while count printf count if return count count Break statements Suppose that instead of getting out of the entire countdown function we merely want to get out of the while statement NASA did goof the astronauts got impatient and decided to blast off before the countdown finished There is good way and bad way We only going to teach you the good way The break statement terminates while statementvoid countdown int count while count printf count count count if count break printf Blastoff What about nested while statements Again this allows unreadable code to be created The world has enough of this without you folks contributing Small example while while if abs break if test break The rule is that break statement terminates the smallest while statement that encloses it Iteration and the stack model As far as the stack model is concerned iteration primitives are much different than conditional statements They simply manipulate the program counter These primitives are sometimes called Control Flow primitives Fencepost errors With iteration and also with recursion it becomes very easy to make fencepost errors Suppose you want to build fence and you need to install posts which are apart How many fenceposts do you need void nastybug int count count while count count count something This kind of bug is hard to find in general	other	cornell
828	 Date Mon Dec GMT Server Thu Apr GMT Lab CS Laboratory Modeling and Scientific Visualization Introduction Scientific visualization is term which refers to the process of converting data into pictures This lab will demonstrate several of the techniques of visualization The techniques will be used to view simulated landscape complete with rivers and clouds The examples shown below are the result of calculating height field and displaying it as landscape The blue is flat polygon simulating water surface density field and displaying it as cloud either by volume rendering or by isosurface extraction followed by polygon rendering set of rivers determined by plotting streamlines of the gradient of the height field The gradient vectorfield and the streamlines are shown also The vectorfield can be considered an plan view of the landscape slopes The third image shows landscape with about stream start locations Procedure You will need to download the program The program caluclates field of altitudes to make landscape It also calculates scalar field of densities to use as cloud These two fields are manipulated to derive the slope of the surface then visualized New modules which are used include the Isosurface module which fits polygons to points of equal field strength in field AutoGlyph module which constructs an arrow at every point in vector field Streamline module which follows vector field in its direction of flow Refine module which interpolates points into field Map module which allows the data in one field to be interpolated onto the positions of another field You may want to look at the example programs in for further examples that use these modules Assignment Run the program few times to see what it does Try out various options on the control panel Modify the program to add the following features Modify the colors of the rivers by mapping the magnitude of the gradient the slope onto the streamlines then coloring them so that high slopes regions of the streams are white to simulate rapids while lower slopes are blue The program as given uses Map module to map altitude to the streamlines You will need to add another Map module and cotrol the colors based on the data component of the field One possible example is shown below Modify the surface color so that is green near ocean level and white at mountain peaks with pale yellow in between Use the ColorMap module Modify the river generator to start rivers at regular grid points say by on the surface Use the Construct module to make starting grid See the image above with stream starts for an example Modify the program to produce trees on the surface The Glyph module will produce arrows when given vector field If the type input of the Glyph module is given geometry say cone it will place it at every point on the surface If you use parametric surface as an input be sure to run it through Refine module with the level input set to triangles Use an Include module to limit the trees to band of elevations as shown below You will probably want to use Reduce module to lower the density of trees on the surface Modify the program to produce an animation of the cloud The animation should show the cloud changing from one density distribution to another by interplolating between two fixed density functions Make perhaps ten time steps in the sequence Some results from You will need to demo all of the assigned functions in one modified net with the appropriate interactors to control the functions you have added As usual the style of the program will be graded as will its function The cloud animation may be in separate program The Lab grading guide will be filled out by consultant during section to evaluate your work Back to Main Page Go to Lab Last modified Land Copyright Statement	other	cornell
829	 Server Date Sunday GMT Thursday GMT if publish it it is true some of my writings not had much published but have written some things proud of some of them have been flames of mine and others have been more thought out as conscientious objector to all armed conflict my first published letter was published in the grand rapids press few years back during the gulf war since that time however started keeping more of my work online lest you wonder also do write poetry and other things but probably rather be famous as an essayist anyhow like to argue so here some of my writings there dreadful mess going on in byron center which is suburb miles from where went to high school so wrote letter the unabomber suspect was mathematician so all mathematicians are suspected terrorists do think so so wrote letter to the editor of my newspaper my most widely read letter almost certainly was letter had published in utne reader while back this is letter sent them with which was much more proud no accounting for taste had letter printed in the tech couple years back about the undergraduate association at mit also published letter in the same newspaper regarding gay and lesbian issues in the process of writing letter on rotc policies at cornell wrote bitchy letter to the cornell review recently what humorless schmucks and yes like to argue we are the music makers and we are the dreamers of dreams aphex twin dan brown snowman last updated may	other	cornell
830	 Server Date Sunday GMT Tuesday GMT Reading Top Reasons You Never Want To Visit Reading You be in Pennsylvania Dutch Country Berks County Pennsylvania is considered an outlying part of Pennsylvania Dutch Country which consists roughly of the counties of Berks Lebanon pronounced and Lancaster with its center in Lancaster County The Pennsylvania Dutch really Dutch at all in fact they claim to be of German descent but the species has mutated to such degree that the Germans really want them either For lack of better term we refer to these beings as Dutchies There is only one waul in Dutchy Dutchies speak language entirely their own It is possible that it may have evolved from English lucky English speaker is occasionally able to catch one out of every hundred or so words Dutchy speaks In any case this language consists of number of consonant sounds and one vowel phoneme which can be written For example the word house in English would be rendered haus in Dutchy It is impossible really to describe how this word is pronounced saying hoss while trying to swallow your larynx is perhaps close approximation One other distinctive characteristic of Dutchy speech is the consistent transposition of the phonemes and This phenomenon is reputed to be the result of particularly gruesome accident involving Volkswagon Beetle and dyslexic farmer For example once overheard the manager of the produce department our local grocery store is called Weavers pronounced Veewaus and is run by food distribution company called and am not making this up Shur Fine heard her say something about putting up diwiders betveen the wegetables so that they vould get wexed Apparently the wegetables vere grexing One can understand vhy this vould be upsetting Do even think about trying to find good pizza The food that is eaten in Reading is quite like the food that people eat everywhere else Dutchies do have any appreciation for good food like pizza seen four pizza places in the exact same location go in and out of business one right after another But you can take comfort in the fact that although it is impossible to get real pizza in Berks County you never find better chicken barbecue This favorite food of the true traditional Dutchy is an entire chicken or pig for some of the larger representatives of the Dutchy species roasted over fire and eaten whole bones entrails and all One thing at which Berks Countians excel in making however is donuts But they do just make donuts they introduced an improved food variety all their own called faustnauchts not saying this right unless you blow chunks of your windpipe all over the place Faustnaucht is the Dutchy word for concentrated nutrition product few hundred years ago one Dutchy fellow named Jesus pronounced Cheesaus fed five thousand people with just five faustnauchts and couple of barbecued chickens have personally seen grown adults actually explode after eating half faustnaucht My dad puts faustnauchts in the trunk of his car during the vinter to give him better traction in the snow There is only one highway through Berks County Even if you actually wanted to visit Reading it turns out that it is not really possible There is only one highway that runs through Berks County It runs from west to east from County to Schuykill County If you want to go north or south in Berks County you just plain out of luck It actually easier to drive through Maryland if you want to go from say Harrisburg to Philadelphia And perhaps highway is really the right word to describe Berks County only road Most highways do have traffic lights every hundred yards for the entire length of the road from one end of the county to the other Disclaimer The opinions of this author were not even expressed in the above document Any mention of fictitious persons real or otherwise was not meant to reflect upon the character of the character upon whom it was meant to reflect In short the author does not wish to be held responsible for any of the above which he swears he did not even write pierce	other	cornell
831	 Date Sun Nov GMT Server Tue Apr GMT Student Projects Student Projects and school year Cornell Theory Center and Department of Computer Science The student projects listed below result from work performed for Special Investigations in Computer Science or for Independent reading and Research Most of the projects were extensions of the language IBM Visualization Data Explorer The students wrote code to construct new modules for use with Data Explorer Some projects used DX for visualization Others were direct applications The projects shown here were done for Bruce Land module to produce fractal landscapes by Jonathan Alferness Parallel trace visualization by Daniel Herman module to produce plants using by Alerk Amin Keyboard Systems Study by Simonetta Rodriguez Plant Geometry Generator by Chen PEEK polytope visualization by cross section and projection by Gordon Kindlmann Visualization of Dinosaur Egg by Jennifer Moyer blobby modeler for Data Explorer by Huang DX to WebOOGL converter by Felix Lung and David Wu LZW compression modules for DX by Chen NTSC simulator modules for DX by Hung Chen and Lin DX to VRML object translator module by Chris Kline Krieging Interpolator module for DX by Chaoyi Lang An improved volume rendering module for DX by Robert Amidon Fractal surface modules by William Nell rubber sheet simulator for DX by Chris Kline See also Cornell Theory Center Examples of visualization work from CTC final projects Cornell Theory Center Last updated by Bruce Land	other	cornell
832	 Server Date Monday GMT Wednesday GMT Homework	other	cornell
833	 Server Date Sunday GMT Thursday GMT The PREDATOR Project The PREDATOR DBMS Project Contents What is PREDATOR Paper describing the Enhanced Abstract Data Type paradigm Code design of PREDATOR How to install PREDATOR Tips on system development Coding conventions Testing Acknowledgements What is PREDATOR The PREDATOR database system PRedator Enhanced DAta Type DBMS is an DBMS built as research prototype to study how complex data types should be supported Existing technology is based on the notion of Abstract Data Types ADTs each data type is encapsulated through well known interface and the database system maintains an extensible table of ADTs Each ADT provides bunch of methods that can be applied from within an SQL query to operate on ADT values The PREDATOR system recognizes that the cost of ADT operations can dominate database performance Consequently the ADT notion is enhanced so that each data type can maintain use that for optimizing operations on the ADT and apply optimizations on expressions involving concatenations of ADT operations Further each data type can provide query language in which complex operations on that type can be expressed This Enhanced Abstract Data Type paradigm is the basic technology in PREDATOR Providing the support for this paradigm requires fundamental redesign of many components of traditional DBMS The purpose of PREDATOR is to fully explore the idea and to see how queries involving complex object expressions can be further optimized by exploiting interactions between The current focus of work is to build support for several different data types each of which can independent of the others The paradigm The paradigm is explained in detail in technical report also being submitted as paper to ACM SIGMOD This document also describes the architecture of PREDATOR the interesting design issues possible extensions of the current technology and open problems for future research System code structure The detailed code design is described here This may not always be upto date because the code base is constantly being updated For most students in you will only need to concentrate on the portion of the design document dealing with the SQL engine the portion dealing with new data types Installation instructions These instructions are only for Cornell students For others PREDATOR is not yet publicly available piece of software but it will be in few months Here are the installation instructions and some quick tests you can run System Development Look here for some tips on system development in PREDATOR Coding conventions When adding to PREDATOR it is crucial that you follow the same coding conventions that have been used relatively uniformly throughout the code Click here to get to list of dos and The document also tells you how to use RCS simple source code control mechanism used to manage the distribution of PREDATOR code Testing Initially after installing your code you should try some quick tests On more regular basis as you add code you should run test suite that is being developed for PREDATOR Details of this test suite and how to run it are here Acknowledgements PREDATOR is built using the SHORE storage manager as the data repository	other	cornell
834	 Server Date Sunday GMT Wednesday GMT Kristen Summers Logical Structure Types Toward Taxonomy of Logical Document Structures In Electronic Publishing and the Information Superhighway Proceedings of the Dartmouth Institute for Advanced Graduate Studies DAGS pages Boston May Abstract The automated discovery of logical structure in text documents is an important problem that has recently received good deal of attention it can enable the creation of flexible and sophisticated document manipulation tools that will greatly increase the impact of electronic documents This paper addresses aspects of the nature of these logical structures in order to develop categories of structures that reflect the variance in requirements for discovery and the variance in significance for applications complete taxonomy is not developed but relevant attributes are identified in three forms of categorization fundamental based on structure definitions discovery based on required observables to find structures and usage based on roles structures play in applications The attributes themselves are independent of the choice of particular logical structures to consider in given application and their direct implications are discussed You can view the full postscript file view an html version at the conference papers site or return to my home page	other	cornell
835	 Server Date Sundacp No match GMT Monday GMT Applet Voronoi Diagram Delaunay Triangulation If you were running Web browser such as Netscape then you would see Voronoi Diagram Delaunay Triangulation here The mouse Click the mouse in the drawing region to add new sites to the Voronoi diagram or Delaunay triangulation The Voronoi Diagram and Delaunay Triangulation checkboxes These toggle between the Voronoi diagram and the Delaunay triangulation Your current set of sites remains the same for both diagrams The Clear button Press this to begin new diagram with no sites The Show Empty Circles button Press this to see the empty circles for your set of sites Each Voronoi vertex or Delaunay triangle has corresponding empty circumcircle What is it The Voronoi diagram has the property that for each site clicked with the mouse every point in the region around that site is closer to that site than to any of the other sites The Delaunay triangulation is the geometric dual of the Voronoi diagram Alternately it can be defined as triangulation of the sites with the additional property that for each triangle of the triangulation the circumcircle of that triangle is empty of all other sites These closely related data structures have been found to be among the most useful data structures of the field of Computational Geometry Additional Information The actual data structure here is Delaunay triangulation The Voronoi diagram is built from the Delaunay triangulation The Delaunay triangulation is built within large triangle whose vertices are well That why in the Delaunay triangulation there are lines heading off to the upper left the upper right and down This technique makes the code simpler since otherwise additional code would be needed to handle new sites that are outside the convex hull of the previous sites The algorithm To insert new site we walk across the triangulation starting from the most recently created triangle until we find the triangle that contains the new site This triangle and any adjacent triangles that contain this new site in their circumcircle are eliminated and the resulting empty spot is retriangulated This technique is commonly called the Algorithm The expected time to insert new site is roughly where is the current number of sites Author Paul Chew chew	other	cornell
836	 Server Date Sunday GMT Tuesday GMT UNIMEDIA zum Einsatz multimedialer Techniken in der Lehre an der TH Darmstadt FB Informatik Wolfgang Henhapl FB Informatik Datenbanken Alejandro Buchmann FB Maschinenbau Praktikum zum Arbeiten mit parametrischen Rainer Anderl zum Einsatz multimedialer Techniken in der Lehre an anderen Paderborn Hypermedia die Ausbildung Verteiltes Lehren und Lernen WWW Conference Workshop Teaching Learning with the Web und Kostenrechnung Online HIS Hannover GmbH Dokumentation Lehrens und Lernens an Hochschulen der HIS GmbH Symposion der Gesellschaft Informatik Hypermedia in der und Weiterbildung vom bis zum Oktober Die Liste wird durch Ihre Beteiligung Schicken Sie uns Ihre Hinweise	other	cornell
837	 Date Sun Nov GMT Server Thu Jun GMT CS Final project animation Computer Science Cornell University Final Project Animations These animations were submitted as final class projects by students in Computer Science Cornell University during the through spring semesters This course provides an introduction to the principles of interactive computer graphics and scientific visualization Topics include and graphics algorithms perspective transformations and algorithms parametric surfaces lighting models image synthesis and application to scientific data analysis They were created using IBM Data Explorer The instructor is Bruce Land Animation from Maximum mpeg size is Mbytes average is Numbers are for reference and indicate no other ordering USS Hornet mpeg and description Mt Cyclone virtual Coaster mpeg and description Shadows mpeg and description DIDI the magic helmet mpeg and description The unabomber fatal mistake mpeg The Magic mpeg and description Ignag the one with whiskers mpeg and description Judgement Day mpeg and description Godzilla Megalon In Game of Chess mpeg and description Veritech Battle mpeg and description Typical Day on the Plains mpeg and description Enemy Invasion mpeg and description Tanks on Fire mpeg and description Nuke mpeg Barney Must Die The Future of Dragon Day mpeg and description Cornell mpeg and description Intergalactic Journey mpeg and description James Blob Saves Orphange mpeg and description Ride To Heaven mpeg and description Robbie vs the Daleks mpeg and description Attack of the fly mpeg and description The HEAD mpeg and description Pinball mpeg and description My Dixie Wrecked mpeg and description Origami Dinosaur Park mpeg Transformer from Hell to Heaven mpeg and description Captain Kirk has bad day mpeg and description Springtime in Ithaca mpeg and description Spring SnoSkiing mpeg and description Welcome to Rebel Attack mpeg and description mpeg and description Annihilation mpeg and description Conehead goes jogging mpeg and description Crew Boat Rowing on Lake mpeg and description Animation from Phoenix Rejuvenation bird is reborn Mbyte The Penalty Shot hockey player scores in breakaway play Orientation of the player body and hands are calculated from the trajectories of the puck and body Mbyte HOTH An ATAT from StarWars Mbyte Empire Strikes Back The Opening Battle starwars saga with bit of lab humor at the end Mbyte Knight Rider Kitt Karr Part III An automobile duel Mbyte Race driver view of car race Mbyte Dogfight dogfight between carefully modelled and Spitfire Mbyte House Design house is built Mbyte MacroMouse in The Hallway of Death spoof on certain games Mbyte Demento the Robot robot which rebuilds itself Mbyte Head Trip human head in strange surroundings Mbyte Riding Bike detailed bike and rider The bike includes spokes chain and pedals Mbyte Water Wonderful World diver hunts for treasure Mbyte Fly by the Pool Side fly trys to avoid pool cue Mbytes Fasten Your Seat Belt car crash with realistic crumpling Mbyte Trotting Quadraped Horse The title says it all Mbyte VR Trooper robot which changes shape Mbyte House of Lost Dreams Under Construction An accurately modelled house from actual plans Mbyte Bungee Jumper jumper who meets tragic end Mbyte As Time Goes By traditional alarm clock Mbyte Outpost StarWars scene Mbytes Dandelion dandelion grows goes to seed and blows away all in single day Mbyte Tank War An alogrithmically controlled tank battle The tank detects the terrain it starts on then follows streamline down the hillside while keeping its cannon aimed correctly Mbyte Voyager Journey Home spacecraft returns to earth Mbyte Surreal Descent octopus lands in bad spot Mbyte Silicon Frog frog with serious thirst who trys to hijack beverage truck with his tongue Mbyte The Match robot volley ball match Mbyte Rower at Sunrise person rowing shell on Cayuga inlet Mbyte Space Shuttle shuttle blastoff with volume rendered exhaust smoke Mbyte Light Death Insect meets streetlight Mbyte Tunnel of Doom exploration of very dangerous place Mbyte be Back rocket launch which includes very convincing thrust flame and Earth Mbyte It Bug not Spider An animation combining heirarchally modelled motion of bug with the motion of rubber sheet The shape of the rubber sheet was solved for each frame using Laplace equation with constraints derived from the bug position Mbyte The Great Space Coaster simulation of camera riding in roller coaster on the moon The coaster is an arbitrary parametric curve specified at runtime Mbyte Animation from Bubblebee Mbytes bumblebee with texture mapping Juggle Mbytes An invisible juggler Weird Science Mbyte From dragonfly to butterfly Virtual Fight Mbytes Choreography of two figures Day at the Pool Mbytes Particle systems at the pool Rad Spider Mbytes spider and her web GIS Mbytes Real GIS data of the Ithaca area and the airport Death Trek Mbytes Star Trek Death Star Drive Mbytes Oceanside driving Flight Mbytes flock of birds and parachute over real terrain Flush Mbytes Follow bug down the drain HBO Mbytes of the Observatory Hoop Mbytes Robot basketball Pursuit Mbytes running figure Race Mbytes racetrack and spectators Stage Robot Mbytes robot puts on show Tour of the Solar System Mbytes Fly through the whole solar system Related Topics MPEG software MPEG FAQ How to MPEG movies UNIX An Introduction to IBM Data Explorer DX Visualization at the Theory Center Comments about Theory Center online documents are welcome and may be sent to Last modified Dwyer Copyright Statement	other	cornell
838	 Date Mon Dec GMT Server Wed Mar GMT Lab CS Laboratory Using virtual camera Introduction This exercise introduces the concept of virtual camera The virtual camera is set of transforms which takes representation of set of objects and arranges for them to be shown in window By analogy film camera transforms the world into fixed size image viewed from certain point with certain focal length of lens For virtual camera we will need to specify where the camera is where it is pointed the width of the field of the camera and perhaps other parameters which real camera can not have clip planes or variable aspect ratio Procedure First you need to download several example files To do this click on each of the filenames shown below When the text window opens use the save as option to put the file in your own directory Name each file with the same name as shown below Open the program and its control panel When you execute it you will see that two image windows are opened One is controlled by the familiar Image module The other is controlled by Camera and Display module The Camera module gives you explicit control of the viewing parameters Whereas the image module always points at the scene by default an explicit Camera can point anywhere you want and can be controlled by the program itself On the control panel switch the selectors to the Animate position and run the sequencer The position of the Camera the from parameter and the up direction are now function of time The contents of the two compute modules which control the camera are shown here Bugs found as of In the program fragment hyperlink replace approxUP with norm approxUP in the second compute module expression Assignment Model TV sitting on table next to simple still life Model TV camera floating in space chassis lens tube lens Define interactors to control the position point up direction and zoom angle of the TV camera Use these interactors to orient the TV camera in space and to control Camera module to produce the image the TV camera would see Put the image on the front of the modeled TV as shown in the image below The cameraINscene program mirror is very similar to the TV set You will need to convert the control interactors into rotations and translations of the TV camera The Transform module allows you to rotate by an arbitrary set of basis vectors program fragment helps to explain how to take the three input vectors to from up and convert them to camera rotation matrix Your program does not need to show the recursive image if the camera happens to be looking at the TV screen See image below right It is more important to be able to control the camera in space and show the resulting image than to make fancy TV set or camera model Some results from Some results from Be prepared to demo your TV program during section for maximum of minutes You will be graded on the correctness of the camera control and the readability of the program You must document your code Layout small groups of modules which fit on one screen and connect them to other groups with transmitters You should use macros and comments in the Notation field of each module so that you and the grader can understand the program Control panels if any should be well organized labeled and with the appropriate numeric ranges The Lab grading guide will be filled out by consultant during section to evaluate your work Back to Main Page Go to Lab Last modified Land Copyright Statement	other	cornell
839	 Server Date Sunday GMT Friday GMT home sweet home the glass house what to be found altavista yahoo excite hyperreal the onion red meat cd world olestra haiku dan brown snowman last updated aug	other	cornell
840	 Server Date Monday GMT Tuesday GMT People at the Design Research Institute People at the Design Research Institute Frank Adelstein Harry Barshatzky Lois Brown Mike Cavanaugh Jim Davis Hrishikesh Dixit Srikanth Kannapan Matthew Morgenstern Suxuan Liu Greg Zack	other	cornell
841	 Server Date Monday GMT Monday GMT Schedule Course Schedule Key exp attendence is expected Class will be devoted to covering new material opt attendence is optional Class will be devoted to answering questions students raise about the current assignment tba Class contents has not yet been decided Date Contents exp Few words on programming make www Intro to CHIP exp CHIP Interface Demo in SUN LAB Discuss and assign phase due opt exp Phase due Assign and discuss phase due exp Discuss phase details Fall Break exp Discuss more phase opt Question Session opt Question Session exp Assign and discuss phase due opt Discuss phase details tba tba opt Last chance to ask phase questions much needed vacation	other	cornell
842	 Server Date Sunday GMT Friday GMT my life at the keyboard Computers have been part of my culture all my life My father worked for IBM Every so often we visit him at work and see the huge computer rooms Sometimes he bring home pieces of computers for us to see But had no idea what these things really did They were just cool looking Sometime when was or my father brought home some IBM documentation on programming languages and flowcharting tried to read them but they did not make any sense to me but this is not surprising since IBM is exactly famous for clearly written documentation In came to MIT During the first few weeks went on tour of the MIT Artificial Intelligence Laboratory which in those days included the Logo Lab do remember why went on the tour but remember that was with several other freshmen with whom lived at my fraternity but ca recall if we were all together at the AI Lab because we were together as new members of the frat or whether came to join that frat because of liking the people met at the AI Lab The former seems more likely especially since the house had strong representation at the AI Lab In any event we were playing with Logo and were left pretty much alone we had to figure it out by ourselves We had lot of fun with it So as an undergraduate would sometimes come to the AI Lab to play or hack with Logo and began to learn to program remember anyone teaching me think we must have taught each other Sometimes would try to use Lisp on the but it was too mysterious for me to figure out That summer worked for IBM as an operator position calling for about as much skill as an espresso maker But in my spare time at work was allowed to use the computer language APL and this time found textbook for the language so was able to learn some of it still had no idea how languages actually worked just used them In my sophomore year took the course which is the ancestor of the course now known as This course explained how computer language could be designed using simpler language as building blocks It also tried to give us some sense of the ideas of modularity and top down design and most crucially the idea of abstraction that one can make program which represents some concept or set of agreements and thereafter use it without needing to know how the concept was implemented The program becomes black box whose internal details are irrelevant Later that year took second course which explained how the simplest sorts of computer languages machine language could be implemented by hardware circuits was now able to understand computer programming down to the level of individual logic gates if wanted to This reinforced my sense of the value of keeping different levels separate in order to build large complex structure Later though would learn that one of the hardest problems is deciding where to draw the modularity lines and that putting one borders in the wrong place makes system slow and difficult to use The next major step in learning programming was student job at the Architecture Machine Group which is an ancestor of the Media Laboratory In those days group of students at the ArcMac were developing new operating system for use around the lab The operating system being new was full of bugs and these in turn demanded that there be constructed many software tools for examining the structures used by the program had the opportunity to look over the shoulders of those who were more experienced and even to use the tools bit to poke around It was while using one of these tools that suddenly understood that there is no actual meaning in the patterns of binary ones and zeros in machine and no significant difference between the information on disk and in the machine memory given region of memory can be an instruction or number or letter or picture The difference is solely matter of interpretation This was perhaps the biggest aha in my life and was happy that other people were around who could understand it and why it mattered It was while working at this same job that began to think not just about how to make program do something but how to make it easy for someone else to use This was also step towards being professional programmer worker who makes artifacts for others to use not just for own delight in making it It was also during this time that also began to be good enough designer that other people started taking my ideas for design and function seriously After graduated began to work in the real world as programmer My first job was at Imlac in Needham MA The Imlac was minicomputer what you call workstation now that was sort of an expanded with built in vector display processor It was programmed in assembly language Imlac big product was phototypsetting system CES which took advantage of the raster graphics to offer kind of WYSIWYG interface for the typesetting This was before laser printers kept this first job only year and then moved to new job with the Honeywell Multics Multics is an operating system of great historical importance It was first developed as partnership by MIT and General Electric as an experiment in practical very large system At the time it was the very cutting edge of the state of the art in computer science By the time joined the Multics group those days were past but the group retained some measure of pride and still had very high standards even though time had passed them by learned several important ideas from working with the Multics people First my understanding of interface the relation between program and user expanded to include the idea that the user might be another programmer It was important to make programs as building blocks by programmers whose needs you could not expect to easily anticipate second idea was that programs were meant to be read by people as well as machines The Multics group had developed programming process which required that all modification to the system be described and justified to group of senior programmers before being written and be read by some person other than the author before being installed This was necessary because Multics was far too large for any single person to understand it The coordination that this review board provided kept Multics stable and consistent as it grew and changed for more than years Though Multics is now nearly forgotten it set mark for software quality never equalled Working with Multics taught me to be careful in my designs to always to allow room for unanticipated future changes and to expect people to read my programs In my work at Multics came to know many people but one of particular note was Bernie Greenberg Bernie was one of the most brilliant programmers have ever met In addition he was very talented musician playing both rock guitar and baroque harpsichord with equal ease and he spoke several languages Bernie also me to Lisp At that time the MIT Artificial Intelligence Laboratory was developing the first Lisp Machines and Bernie was friends with several of the key workers on this project learned Lisp from Bernie not long before he left Multics to join new startup company to commercialize the Lisp Machine soon left as well to join Logo Computer Systems new firm which intended to implement version of Logo for the Apple II home computer Logo Computer Systems was the first time was ever with startup firm Instead of the formal regulations of Multics was with an adhoc group which included several close friends and lovers as well as some bizarre personalities At LCSI we worked very very hard because we knew that money was in short supply We would often work for to hours in row We did almost all our work in Lisp on Lisp Machines and gradually became an expert with this language In the end we managed to produce our product on time but then most of us left the company as result of political battles with the higher management This turned out to be blessing though because Alan Kay had just gone to Atari which was then quite rich and Alan was setting up research labs in California and Cambridge Almost the entire Boston staff of LCSI came to form the Atari Cambridge Research Center Atari gave us money to design the best work environment we could think of and freedom to work on problems that interested us Not only was able to work on music was able to hire one of my friends Tom Trobaugh to work with me At Atari knew the happiness of working with partner on problems we really cared about using the most powerful computers available Alas Atari began to lose money and one day it closed the lab After Atari went under enrolled in the MIT Media Lab as one of the first contingent of doctoral students The Media Lab The Media Lab encourages students to set their own directions in fact it insists on it This has both pros and cons The advantage is that you learn to be independent to think outside the common assumptions of the field The drawback is that you do always have the companionship of others while learning In my own case became interested in the linguistic phenomenon called paraverbals those inarticulate noises like uh huh and hmmm that help make conversation run smoothly There pretty large literature on the subject but had to discover it on my own and sure it would have gone faster with guide On the other hand with an experienced authority controlling my learning would have done what did The other important thing about the Media Lab is the constant focus on demonstrating one work Some people complain about it but very important To do good demo you have to be able to explain what you doing and why it matters to smart but uninformed person with just few short sentences You have to learn to be clear and you have to learn to express your idea for the benefit of the learner not the teacher And you have to learn grace under pressure wish everyone learned these skills One of the first projects worked on was the phonetic dictionary Remember when you were kid and you asked for the meaning of word and they told you to look it up in the dictionary fine idea except it hard to do when you only heard the word and so do know how it spelled This is especially true for English with its bizarre spelling rules The phonetic dictionary allows you to look up word by spelling it according to how it sounds not how it spelled You write some approximation of the sound of the word and the system consults dictionary organized by pronunciation The key to the thing was being able to accept wide range of phonetic spellings For example for the word headache you might write hedayk or hedake was pleased to see this project mentioned on the very first page of Stewart Brand book about the Lab My supervisor was Chris Schmandt known to all by his login name geek could write at length about his knowledge but there are lots of smart people in the world He has two qualities that are more rare First he no autocrat You can argue with him There no way to put on an air of superiority when you call yourself geek Second and even more valuable he kept his perspective In particular he was always taking off for week or two at time to bring his then baby daughter out into the wilderness learned from him that computer will happily sit idle for week while week lost from fathering is gone for ever My major project was the Back Seat Driver which was car that could give you driving instructions in the city of Boston It had street map so it knew the roads navigation system so it knew where it was and speech synthesizer so it could talk to To actually make this work needed car and not just any car The navigation system was supplied by our sponsor Japanese electronics firm and was designed to work with only one type of car top of the line luxury sedan also needed not one but two cellular phones in the car for the communications The Media Lab bought me what needed and kept the keys was surely the only graduate student in the USA with such lab equipment One day was demonstrating the Back Seat Driver to group from General Motors When took them out for ride they had great time shooting pictures of each another getting into Japanese car Off we went driving As usually happened at one point the driver missed turn Normally the consequence was that the BSD would calmly inform the driver of the fact and plan new route only in this case the driver was former race car driver and he quickly made an illegal Turn without even slowing down maneouver even seasoned Boston drivers never attempted This caused the program to crash but guess that better than crashing the car have to add something here about the demise of Lisp Machines and the rise of Unix and about becoming obsolete	other	cornell
843	 Date Mon Dec GMT Server Fri Dec GMT Interdependent Particle Systems Interdependent Particle Systems by Justin McCune Introduction Particle systems have been used to model variety of fuzzy objects such as water fire grass fireworks clouds smoke and others In no work that am aware of do the particles within the system interact with each other Instead to simulate the realities which they model the designers of the use specific starting configurations groups of particle systems and introduce torques spirals and other effects to the particle system Sometimes to simulate waterfalls and other fuzzy objects where collisions are necessary the particles are checked for collision against small number of external objects and are bounced off of the objects with which they collide Independent particle systems therefore do not experience pressure gradients do not collide with particles within their own system and only approximate the reality which they represent The results reported within this paper report on that do interact with their neighboring particles The motivation behind this research is an attempt to allow the interaction of two or more particle systems and to more produce more realistic model of particle systems Section reviews the principles of independent particle systems section presents the problems and methods used in this research section discusses the results section presents the conclusion and possible extensions while section presents the references Review of Independent Particle Systems Particle systems can usually be characterized by the following properties lifetime velocity color transparency size shape Almost all particles have lifetime velocity and color where the remaining properties are decided upon by the modeller Over the lifetime of the particle the particle will change some or all of its the color might fade from white to red before it dies Velocities of particles can increase decrease or alter directions due to gravity or collision with some object The other characteristic of particle systems is that there are large number of particles Water is technically comprised of billions and billions of molecules and particle system likewise represents what it models with many many particles though not billions and billions The typical particle system is comprised of thousands of particles where this could range from few thousand to hundreds of thousands depending upon the resolution needed and the size of the desired image Particle systems are used to model fuzzy objects such as fire water and other dynamic systems that are difficult to model with conventional methods mainly due to the wide variations in color and shape even for just one moment in time To provide well known example of particle system take look at the Genesis Effect in Star Trek II The Wrath of Kahn particle system is used to model first an explosion and then the spreading of fire around planet The Genesis Effect used thousand particles throughout the course of the animation Interdependent Particle Systems In an interdependent particle system particles can change based on the presence number proximity of neighboring particles In real systems comprised of molecules large densities tend to disperse until equilibrium is reached Molecules also exchange energy and that energy can directly affect the color of the light that the molecule emits or reflects With an interdependent particle system it becomes possible to simulate these effects For instance take fire particle system and water particle system and mix parts of the systems the result is steam An interdependent system of fire and water interacting to produce steam was the goal and motivation of this research The obvious and most difficult problem when dealing with an interactive particle system is the large number of particles To determine collision engergy exchange or other interactive effects on any particle the particle either must search or sum the effects of all its neihgboring particles The problem as most simply and correctly formulated is squared in complexity With hundred thousand particles however moving and changing squared particles per frame of an animation will take too long simplification is needed to make the system develop more quickly and is easily justified and arrived at when examining real systems In all systems we are concerned with particle dependency on its neighbors is usually proportional to or less than the inverse square of the distance between it and the neighbor With thousands of particles within system it is likely that much less than hundred particles will actually contribute significantly to the motion or energy level of any particle Thus there is but to determine what significant contribution is the distance where the average particle contribution will be less than significant and which particles are within that distance The problem is simplified but to determine which particles are within the distance without any other information than given by the particles themselves would still be an squared operation Therefore it is logical to introduce into the model the concept of bins Space is divided into regularly spaced equal volume bins Each particle is put into the bin corresponding to its location in space Thus there are two large lists one list of all the particles and the other an arranged set of bins containing pointers to the appropriate particle Ideally each bin would in any dimension be at least the size of the distance whereby particle is judged to possibly have significant contribution To determine the contributions of the neighbors to particle the program would need to search only the other particles within the bin that particle is in and all the particles within the immediately neighboring bins to deal with particles located near the boundaries of bin Since all particles within the threshold distance are guaranteed to be within the space searched particle is guaranteed to be modified by all significant contributors Though this would work it is impractical to implement due to memory limitations The ideal bin size would generally be only three to four times the size of particle However to account for all the places particle might move to during the progression of its life there will be large percentage of bins that most of the time are empty Given this and the fact that there are dimensions which must have bins allocated result in very large numbers of bins For instance taking hundred bins per each dimension results in the need for million more bins than particles hundred bins would also be inefficient for many parts of the particle system where there were large densities of particles again the lists to be searched would be in the hundreds per particle negating the effectiveness of using bins Therefore larger number of bins is necessary but using more bins would quickly exhaust the resources of almost any computer To solve this problem we must simplify the model even further losing much of the accuracy that could be obtained with the previous methods Each bin is now allowed to hold only number of particles temperature or some other most important data element Instead of containing variable size list of particles within the bin it contains set small number of informational elements This results in the loss of alot of useful information and will result in rough approximations that lose the accuracy of earlier models However interdependent reactions are still possible because there is some information available about any particle local region of space and its immediately neighboring areas of space The problem is transformed from one of searching through thousands of particles to one of communication accuracy By containing only such simple information spatial relation is lost as well as specific data and most importantly identity Simulation of collisions movement and temperature exchange is now possible only as probabilities and is no longer deterministic For example to determine the collision of particle moving through space with another particle we must bound the maximum number of particles in any given region of space If particle is attempting to move through bin then collision occurs with probablility equal to the number of particles within the bin divided by the maximum number of particles allowed in the bin For example if the maximum number of particles per bin is and there are particles in the bin that particle is attempting to move through then there is chance that particle will collide The communication issue is also problem that must be resolved In the efforts to research fire and water combining to form steam the appropriate physical model is each particle exchanges temperatures and sometimes steam is created sometimes the fire is extinguished Since the identity of any particle within bin is lost particle that moves from bin to another bin where it should change state and likewise decrement the opposing particles states will not have any specific particle with which to interact Therefore some means of communicating the change of state is necessary For example consider water particle moving into bin full of all the surrounding fire particles the water particle should transform to steam But the fire particles should have their temperatures altered as well or should have some proportion of fire particles die to account for the energy exchanged The bins therefore must be utilized to pass messages to particles that should die or undergo loss in energy One set of particles is choosen to perform the transition and issue the appropriate message the other is choosen to listen for the message and take the appropriate action In the fire and water example the water is the one which performs the tansition to steam and passes the message while the fire particles are the system that reacts to the passed messages One possible means of message passing and the one utilized in this research is to use the number of particles per bin as the means of message passing Temperature of given particles and motion vectors can be calculated based on these figures To differentiate water from fire water is given negative count Where it is obvious that two types of particles are present in certain bin it is assumed that fire extinguishes water with certain ratio of fire particles to water particles If the water particles transform they decrement the number of particle bins by the number of fire particles extinguished Before the move again they note the change and that percentage of particles will on average die For example take particle It moves into bin and after all other fire particles have moved it notes that there are particles including itself in the bin During the water movement portion of the frame water particles move into the same bin and are considered to exchange heat and vaporize with the fire particles Say that it takes two fire particles to vaporize one water particle then fire particles are extinguished while new steam particles are created The final bin count is steam is counted as neutral particle The final position of all particles in the frame is output and processing for the next frame begins Each is searched for those particles that should have died When particle is reached or any of the fire particles in the bin it notes that there are now particles in the bin when their used to be Thus out of the particles must have died The particle picks random number between and and if it number is less than it number is up and the particle dies It can happen the opposite way as well that moves into bin populated by water particles and should extinguish itself as well The water particles also need to know their state after all water particles have moved so that they will also be killed off in the appropriate situtation byproduct of the fact that probabilities are used to kill of particles is that the bin counts are accurate only on the average As time passes however local error and changes in the system based on the error could accumulate Therefore it is necessary to recount the number of particles of any type at the end of each movement phase This in some ways doubles the time required to animate any interacting particle system but is still linear in time and better than squared Thus the steps required to interact particle systems with message passing can be generalized as follows Remove dead particles of type from the particle system Move the type particles After all type particles have moved each type particle notes final state Remove dead particles of type from the particle system Move the type particles After all type particles have moved each type particle notes final state Results Though the above presented method solves many problems there are few that are more difficult to In particular conservation of momentum is difficult to simulating collision is easily done using probabilistic method and in closely approximating reality should be done through every bin which the particle moves However when collision occurs the only particle that can be affected unless message passing is again used is the source particle This problem encountered during the research can either be by ignoring interim bins completely as is done in this research or perhaps can have damping factor applied proportionate to the number of collisions that might have occurred Another difficulty is that there are even more parameters that must be tweaked into place to produce an image that approximates the reality and does approximate some alterante reality where flames progress upwards in very defined bands for instance An implementation of an interdependent fire system was investigated and can be seen by the results below The fire particle system image was originally created with attempted to use particles in the provided MPEG The particles are created during frames and after that are created from the particles that have already died The image was rendered using DX with color map and an opacity map The animation took approximately minutes to create running on RISC processor with MB of memory However it has been noticed that due to the bin limitations many of the particles go unused and essentially only slightly more than particles are being used Using only particles due to the current initialization sequence of the program slightly less full animation is produced but is comparable to the original and only takes minutes to create In the provided animation particle temperature is based on the number of particles within the same region of space while it motion vector is determined based upon the density of particles immediately within its own space as well as those bins that immediately neighbor the space damping factor is applied to the motion in the plane that produces circular when no particles are collided whereas in the vertical direction changes in motion are based on temperature Overall there are parameters including bin sizes that may be modified It is also important to note that if the bin size is selected to be too large visible artifacts will be generated The animation is also present as an MPEG There are some artifacts present in the animation of the flame that am not quite yet sure why they are there In the first frame of the animation provided top view is provided It is possible to see from this top view pattern that is an obvious artifact from using the bins some combination of the motion mechanism although am unsure as to why this is the case Also the flame tends to pulse from one frame to the next which is something that would preferably not am unsure what is causing the oscillatory motion There is another benefit to using bins with an interdependent particle systems parallelization As opposed to passing particles and all their associated information across bin boundaries only the information contained by the bins need be passed This can save given the amount of information each particle must pass as well as the fact that there can be good number of particles per bin up to more than times the amount of message passing that needs to be done Thus it should be possible to parallelize the application One other effect should be noted In independent particle systems groups of particle systems can be lessened or local processing abandoned altogether once sufficient information for given area of the output area has been determined there is no reason to use thousand particles to represent section of the screen only pixels by pixels wide In an interdependent particle systems this is not the case The entire process of the particle system is dependent upon the presence and number of its nearest neighbors stopping part of the particle system will eventually translate its effects to neighboring parts of the particle system that are still moving with unknown consequences Thus some of the optimizations that are possible for independent systems are not necessarily possible with interdependent particle systems Conclusions This work has demonstrated that an interdependent particle system approach is feasible and that it is possible to use some of the attributes of the particle system itself to model fuzzy objects model has been proposed to allow the interaction of two particle systems and could possibly be extended to more Many aspects of this work remain unexplored Future work will finish the investigation of the proposed model to interact two particle systems to result in third There are many aspects of interdependent particle systems where research could still be done For instance investigating the interactions used on independent systems to achieve the flickering of flame by adding spirals or clustering particles Or trying to simulate these effects by adding an air particle system to the field to simulate the convection of air Starting configurations that change over time and are not based on some random distribution of some preset starting configuration but perhaps based on preset data volumes It would also be interesting to see the results of wall of fire or some other configuration of flames modeled on parallel processor References Particle Systems Technique for Modeling Class of Fuzzy Objects William Reeves ACM Transactions on Graphics Vol No pp Particle Animation and Rendering Using Data Parallel Computation Karl Sims Computer Graphics Vol No pp	other	cornell
844	 Server Date Sunday GMT HYBRID Workshop on Verification and Control of Hybrid Systems Sponsored by DIMACS and SYCON October New Brunswick New Jersey Program Organizers sponsors and program committee Registration travel and accomodation information Registration form Program Sunday October Invited Lecture Chair Varaiya University of California at Berkeley USA Sastry University of California at Berkeley USA game theoretic viewpoint to verification problems for hybrid systems Invited Session Chair Alur AT Bell Labs USA Manna Stanford University USA Pnueli The Weizmann Institute of Science Israel Clocked transition systems Benveniste France Compositional and uniform modelling of hybrid systems Gupta XEROX PARC USA Jagadeesan Loyola University USA Saraswat Bobrow XEROX PARC USA Computing with continuous change Mackworth University of British Columbia Canada The evolution of hybrid intelligent systems Invited Session II Chair Ramadge Princeton University USA Sussmann Rutgers University USA Partitions of the state space regular synthesis and piecewise smooth feedback controls Ghosh Indian Institute of Science India Marcus University of Maryland at College Park USA Arapostathis The University of Texas at Austin USA Controlled switching diffusions as hybrid processes Kohn Sagent Corporation USA Nerode Cornell University USA Remmel University of California at San Diego USA Hybrid systems as Finsler manifolds II convexification of constranit manifolds Kohn Sagent Corporation USA Nerode Cornell University USA Automata comparison procedure for the verification of hybrid systems Contributed Session Chair Sastry University of California at Berkeley USA Weinberg Lynch MIT USA Verification of automated vehicle protection systems de Lemos University of Newcastle UK Hall University of York UK Extended RTL in the specification and verification of an industrial press Sintzoff Universite Catholique de Louvain Belgium Invariance and termination in structured dynamical systems Deshpande Godbole Gollu Varaiya University of California at Berkeley USA Design and evaluation tools for automated highway systems Godhavn Lauvdal Egeland The Norwegian Institute of Technology Norway Hybrid control in sea traffic management systems Haddon Godbole Deshpande Lygeros University of California at Berkeley USA Verification of hybrid systems monotonicity in the AHS control system Monday October Invited Lecture II Chair Sifakis VERIMAG France Pnueli The Weizmann Institute of Science Israel Hybrid systems the computer science view Invited Session III Chair Nerode Cornell University USA Mitter Borkar Chandru MIT USA linear programming model of logic Artstein The Weizmann Institute of Science Israel Stabilization with hybrid feedback Branicky MIT USA General hybrid dynamical systems modeling analysis and control Seidman University of Maryland Baltimore County USA The residue of model reduction Invited Session IV Chair Henzinger Cornell University USA Ho INTEL USA Automatic analysis of hybrid systems Halbwachs VERIMAG France Verification of linear hybrid systems by means of convex approximations Alur Kurshan AT Bell Labs USA Timing analysis with Cospan Larsen Aalborg University Denmark UPPAAL tool suite for verification of systems Contributed Session II Chair Benveniste France Caines Wei McGill University Canada On dynamically consistent hybrid systems Dimitriadis Shah Pantelides Imperial College UK Optimal design of hybrid controllers for hybrid process systems Holloway University of Kentucky at Lexington USA fault monitoring of hybrid systems using templates with dynamic time scaling Qiwen Weidong The United Nations University Macau Hierarchical design of chemical concentration control system Stromberg Linkoping University Sweden Switched bond graphs as to formal verification of hybrid systems Ji Weidong The United Nations University Macau Formal specification of stability in hybrid control systems Banquet Tuesday October Invited Lecture III Chair Sontag Rutgers University USA Brockett Harvard University USA Resource allocation for control Invited Session Chair Kurshan AT Bell Labs USA Heitmeyer Naval Research Laboratory USA The role of continuous and discrete variables in analyzing requirements specifications Maler VERIMAG France Pnueli The Weizmann Institute of Science Israel Asynchronous circuits and timed automata Sinclair Dublin City University Ireland Validation of hybrid systems by Narain Bellcore USA Proofs from temporal hypotheses via symbolic simulation Invited Session VI Chair Krogh Carnegie Mellon University USA Ramadge Princeton University USA decision rules in hybrid control systems Garg Cofer The University of Texas at Austin USA On controlling timed discrete event systems Shayman University of Maryland at College Park USA Kumar University of Kentucky at Lexington USA Modeling and control of discrete event systems via process objects and masked composition Kumar University of Kentucky at Lexington USA Shayman University of Maryland at College Park USA Supervisory control of systems using prioritized synchronization Contributed Session III Chair Guckenheimer Cornell University USA Puri Varaiya University of California at Berkeley USA Borkar Indian Institute of Science India of differential inclusions Henzinger Cornell University USA Linear approximations for nonlinear hybrid automata Cerans Viksna University of Latvia Latvia Deciding reachability for planar systems Hoffmann Klatt University of Dortmund Germany Modeling hybrid dynamical systems Kourjanski Varaiya University of California at Berkeley USA Stability of hybrid systems Park Kangwon National University Korea Kim Kwon Seoul National University Korea Model and stability of hybrid systems Panel Discussion Hybrid Systems Research Achievements Problems and Goals Moderators Henzinger Cornell University USA Sontag Rutgers University USA Panelists Guckenheimer Cornell University USA Kurshan AT Bell Labs USA Nerode Cornell University USA Reed Oxford University UK Sifakis VERIMAG France Varaiya University of California at Berkeley USA Wednesday October Invited Lecture IV Chair Pnueli The Weizmann Institute of Science Israel Lynch MIT USA Modelling and verification of automated transit systems using timed automata invariants and simulations Invited Session VII Chair Sussmann Rutgers University USA Cassandras University of Massachusetts at Amherst USA Optimal control problems in hybrid systems with some manufacturing applications Antsaklis University of Notre Dame USA Hybrid control using Petri net feedback controllers Krogh Carnegie Mellon University USA Cury Univ Fed Santa Catarina Brazil Niinomi Mitsubishi Heavy Industries Japan Control of hybrid systems using finite state approximations Bailey Grossman Gu Hanley University of Illinois at Chicago USA The analysis design and control of hybrid systems using persistent object stores Invited Session VIII Chair Schneider Cornell University USA Lynch MIT USA Vaandrager CWI The Netherlands automaton models for hybrid systems Chaochen Technical University of Denmark Denmark formal theory of limits of durations Ravn Technical University of Denmark Denmark Detecting interesting events Bouajjani VERIMAG France On the verification of duration properties Contributed Session IV Chair Reed Oxford University UK Bett Lemmon University of Notre Dame USA gain schedule synthesis of supervisory hybrid control systems Savkin Evans University of Melbourne Australia Petersen Australian Defence Force Academy Australia new approach to robust control of hybrid systems Raisch University of Stuttgart Germany DES approach to control of hybrid dynamical systems Larsen Aalborg University Denmark Pettersson Yi Uppsala University Sweden Diagnostic for systems Zhang Mackworth University of British Columbia Canada Specification and verification of dynamic systems by timed Larsen Aalborg University Denmark Steffen University of Passau Germany Weise Technical University of Aachen Germany Fischer protocol revisited simple proof using modal constraints Organizers Sponsors and Program Committee This workshop is organized as part of the DIMACS Special Year on Logic and Algorithms DIMACS is Science and Technology Center funded by the National Science Foundation and the participating institutions are Rutgers University Princeton University AT Bell Laboratories and Bellcore The of this workshop is SYCON Rutgers University Center dedicated to research in control theory and closely associated topics Organizing Committee Rajeev Alur alur Thomas Henzinger tah Eduardo Sontag sontag Program Committee Rajeev Alur AT Bell Labs USA Albert Benveniste France John Guckenheimer Cornell University USA Thomas Henzinger Cornell University USA Bruce Krogh Carnegie Mellon University USA Amir Pnueli The Weizmann Institute of Science Israel Peter Ramadge Princeton University USA Shankar Sastry University of California Berkeley USA Fred Schneider Cornell University USA Eduardo Sontag Rutgers University USA Hector Sussmann Rutgers University USA Joseph Sifakis VERIMAG France DIMACS Special Year Organizing Committee Eric Allender allender Robert Kurshan Moshe Vardi vardi Registration Travel and Accomodation Information Registration Please email the registration form to Pat Toci at toci There is no registration fee Travel and Hotel Information It is recommended that participants arriving by plane fly into Newark Airport Flying into Kennedy or La Guardia can add more than an hour to the travel time to DIMACS DIMACS has successfully and quite pleasantly used the Comfort Inn and the Holiday Inn both in South Plainfield New Jersey they are next to each other The Comfort Inn gives participants of DIMACS workshops the special rate of if two guests share room and the Holiday Inn gives DIMACS the special rate of per room includes continental breakfast The Comfort Inn phone number is The Holiday Inn phone number is The Comfort Inn provides free van service to and from Newark Airport You need to give them notice To travel between Newark Airport and the Holiday Inn we recommend ICS Van Service for inside the United States or The rate is per person It must be booked in advance From the New York airports participants may take the Grayline Air bus Shuttle to Newark Airport and then ICS Van service from there The first day of the workshop October will be held at the Holiday Inn All workshop events on October will take place at DIMACS located in the CoRE Building of Rutgers University Busch Campus in Piscataway New Jersey Both the Comfort Inn and the Holiday Inn provide free van service to and from DIMACS Participants arriving to DIMACS by car need parking permit Parking permits will be available in the hotels and at the registration table Please be sure to park in Lot For further questions regarding local transportation and accomodations or to obtain detailed driving directions to the hotels and to DIMACS contact Pat Toci at toci Students The participation of graduate students at the workshop is strongly encouraged DIMACS provides funds to partially reimburse the cost of travel and accommodation for students If you are student and wish to be considered for travel support please mark the registration form appropriately The support level per person will depend on the number of student participants	other	cornell
845	 Server Date Sunday GMT Monday GMT Handouts Semantics of Programming Languages Handouts Course Overview dvi file includes administrative information prerequisites syllabus textbooks information resource information homework and exam information and some practical advice Introduction to SML Harper postscript file Back to the homepage	other	cornell
846	 Server Date Sunday GMT Wednesday GMT Todd Peskin Resume TODD PESKIN Local Address Highland Road Ithaca NY Permanent Address Davis Drive Washington Crossing PA Objective To obtain summer internship where can utilize my knowledge in business and computer science Education CORNELL UNIVERSITY Johnson Graduate School of Management Master of Business Administration May Ithaca NY College of Engineering Master of Engineering May Computer Science Bachelor of Science May Computer Science Dean List Semesters Johnson School Clubs Operations Management Society Consulting Club Acacia Fraternity President Treasurer Orientation Counselor Engineering Summer Ambassador Lester Knight Scholar Experience Fall Summer and Summer BDM INTERNATIONAL Engineering Cooperative Aided in the development of two networked databases for the Department of Defense Created tested and altered client software for these databases Programmed using Microsoft Windows and Vermont Views Optimized numerous existing portions of the database software McLean VA Summer NEW JERSEY SURVEY Secretary for the State Geologist Scheduled meetings and routed calls Prepared memos letters and reports for internal and external communication Trenton NJ Summer EDUCATIONAL TESTING SERVICES Administrative Assistant Created program in hypercard for maintaining record of reports books and journals Utilized Word Processors Spreadsheets Link and Paint programs on Macintosh and IBM computers Princeton NJ Personal Fluent in Pascal SQL Scheme Lisp and Basic Familiarity with Unix Vax VMS Windows and Macintosh operating systems Basic knowledge of Spanish Enjoy skiing sailing and hockey	other	cornell
847	 Server Date Monday GMT Tuesday GMT Office Hours Office Hours Instructors Instructors office hours are held in the instructors offices listed on the first day handout and the instructors page Mon Tue Thu Telle Wilson Telle Wilson Telle TelleWilson TelleWilson Wagner WagnerWeber Wagner WagnerWeber Weber Weber Teaching Assistants TAs office hours are held in Upson Office hours in bold are open office hours Other office hours are by appointment only Sign up for appointments in Upson Mon Tue Thu Pierce Pierce Chen Pierce Pierce Chen Chen Paradis Shea Paradis Chen Paradis Shea Paradis Shea Shea Spring pierce	other	cornell
848	 Server Date Sunday GMT Wednesday GMT Distributed HTTP Server Richard Hsu Cornell Distributed HTTP Server Richard Hsu Fred Hsu Department of Computer ScienceCornell UniversityIthaca New York Abstract The web is growing at an exponential rate Companies academic institutions government and many other agencies are all moving toward this universal information highway As the amount of hypermedia meterials increases the burden on top of HTTP servers gets aggravated It is an essential task to find mechanism in which hypermedia data can be collected and stored in central repository and requested information can be forwarded to outside clients within reasonable period of time We have proposed implemented and tested several models The result shows clearly the superiority distributed HTTP servers over servers Furthermore HTML document access patterns are discussed and suggestions for future implementation of HTTP are presented clever and scalable model can be implemented with few changes in the current protocol and communication scheme Background Information Technical Analysis on HTTP Usage and Performance Distributed HTTP Server Project Details Conclusion About Richard Hsu Fred Hsu	other	cornell
849	 Date Sun Nov GMT Server Wed Sep GMT CTC Visualization Animations Cornell Theory Center Scientific Images and Animation See also the CTC Explorations page dynamic transition in simulation of million atoms simulation of the dynamical failure of notched solids under tension at the atomistic level using classical molecular dynamics and system sizes from to more than million atoms Research by Farid Abraham IBM Almaden Research Center Visualization by Bruce Land and David Schneider Diagnosis of Emphysema and Lung Cancer using techniques Modern radiologic techniques particularly computed tomography CT and magnetic resonance MR imaging acquire more data than are routinely displayed in diagnostic images Supercomputers can be very helpful in processing and presenting this information Image analysis used on appropriate images in conjunction with representative patient databases will permit the development of clinical analysis and decision support systems and will form an integral part of the diagnostic process in the future Research by Claudia Henschke and David Yankelevitz Cornell University Medical College Visualization by Catherine Devine SORTIE Simulation Model of Forest Growth simulation of years of forest growth under different conditions Research by Douglas Deutschman and Linda Buttel at Cornell and Simon Levin at Princeton University Visualization by Catherine Devine Molecular Visualization variety of research projects focusing on molecular visualization Projects range from imaging of chromosomes in petunias to the mechanism of Acetylcholinesterase to mechanisms of Chagas Disease Visualization by Richard Gillilan Model of Fabric Drape Drape the final shape fabric assumes when laid over an object is an important characteristic of fabric for both aesthetic and engineering applications Research by Bijian Chen and Muthu Govindaraj Department of Textiles and Apparel Cornell University Visualization by Catherine Devine Isospectral drums Recently it was proved that there exist nonisomeric planar regions that have identical Laplace spectra That is one can not hear the shape of drum For more information see technical report Research by Toby Driscoll Center for Applied Math Cornell Visualization by Bruce Land Keyboard Systems Study angular deviation data of wrist motion obtained with an exoskeleton measuring glove worn by human subjects using keyboards had previously been obtained by Hedge While human factors researchers had long used such measuring devices to obtain wrist motion data this data had not previously been visualized Tsunami simulations Tusnami are caused by underwater earthquakes which start waves propagating rapidly across the ocean Simulations help to understand and predict these large often dangerous phenomena Research by Phil Liu Department of Civil and Environmental Engineering Cornell University Visualization by Catherine Devine Past Visualization Examples General information about Visualization at the Theory Center is also available online Copyright Statement	other	cornell
850	 Server Date Sunday GMT Sunday GMT Wei Chen Bookmarks Wei Chen Bookmarks Cornell Department of Computer Science CUinfo Page The Cornell University School of Operations Research and Industrial Engineering Yahoo System Concepts RESEARCH RELATED TOPICS ICDCS Papers on failure detection US EDUCATION fastWEB Financial Aid Search Through the Web Financial Aid Information Page How to Succeed in Graduate School Binghamton University Home Page Ithaca College WWW Syracuse University Information System Yahoo Education Universities United States Rank PhD Programs in Computer Science America Best Graduate Schools News Rankings News Graduate Liberal Arts Rankings Computer Science Computer Science Faculty Research and Postdoc Positions Peterson Education Center US INDUSTRY COMPUTER INDUSTRY Digital Systems Research Center Home Page The IBM world wide web home page AT Home Page AT Bell Lab Xerox PARC Sandbox Nano and UbiComp Server Access HP Welcome to Digital Equipment Corporation Microsoft Corporation OSF Home Page IBM Research Homepage COMMUNICATION AND PUBLIC RELATION Cunningham Communication Hoovers company database Arthur Andersen Home Page Andersen Consulting Home Page JOB SEARCH Online Career Center ICPA Jobs for Technology Marketing Finance Professionals in Asia Pacific Rim Japan Singapore Hong Kong China and US Pacific Coast INTERNET CAREER CONNECTION Job tools MONSTER BOARD Job Search JobWeb Catapult International Student Guides NEWS Welcome to MSNBC CNN Interactive CHINESE STUFFS Tsinghua Veterans Homepage Chinese Students Soccer Tournaments Chinese Community Information Center IFCSS Welcome to IFCSS Professional Service ChinaNet homepage Welcome to Chinese Universities page China Monthly CSSA at Cornell University CHISA World Wide Web Server CND WWW SERVER TSINGHUA ALUMNI NEWS Chinese magazine Chinese stuff Chinese Electronic Magazines CHINA Home Page at CERNET SPORTS Official NBA Women Soccer World Front Page ESPNET SportsZone NBA Centennial Olympic Games Home Page Federation Internationale de Football Association ESPNET SportsZone Sports Information Server WEB SERVICES HotBot Search Engine NYNEX Interactive Yellow Pages Home Page WWWW WORLD WIDE WEB WORM WWW Browsers that can display Japanese FUN STUFFS April Fool Cornell Cinema Pictures in the newsgroups Welcome to the Experimental Multilingual Digital Greeting Card Centre The Internet MahJong Server FRIENDS AND FAMILIES He Qi Home Page Tsinghua University Suggestion Box for Reunion Likan Homepage COOL TOOLS Guide to LaTeX CANADA Welcome to Mageta International Inc US GOVERNMENT House Of Representatives Home Page MISC ITEMS SBA Map of Regions Edmund Automobile Buyer Guides INTELLICAST USA Weather Dealernet Book Classics INSPEC out of their minds The Spinners Ithaca Housing http Yahoo Business and Economy Companies Career Services Training Sales Everything HR OmniCom Associates Home Page THE CAIRO CONFERENCE HOME PAGE World Health Organization is Page PAHO Home Page Globalvision TravelFile Destination Information for CHINA	other	cornell
851	 Server Date Monday GMT Monday GMT CS Lectures Table of Contents Back to the CS home page CS Lectures When you see this symbol in this document press it to get the postscript file for that document It little cleaner than the html printout Sections in this document Introduction to Computer Systems CPU Organization Programming Procedures Recursion and Stacks Assemblers Linkers and Loaders Interrupts and Introduction to Logic Design Topic Introduction to Computer Systems Readings The What and Why of CS How Pascal Really Works How can we handle complexity Where do other courses fit in Intro to Design Design Strategies Design Documentation Anatomy of computer History of Modern Computers Generations of Computers Topic CPU Organization Readings The CPU Design Problem Registers and the Control Unit The program as machine language Put Data in Memory Implementing Loops The Unit ALU Register Transfer Languages Microprogramming Summary Topic Programming Readings Architecture Registers Data Sizes Memory Layout Instructions General Instructions Assembler Directives Instructions Assembler Data Movement Instructions Arithmetic Instructions Logic Instructions Control Addressing Immediate Addressing Data Register Direct Addressing Address Register Direct Addressing Address Register Indirect Addressing Address Register Indirect with Addressing Address Register Indirect with Displacement Addressing Address Register Indirect with Index and Displacement Addressing Program Counter with Displacement Addressing Program Counter with Index and Displacement Topic Procedures Recursion and Stacks Readings for this topic Writing an Absolute Value Function in Assembler Solution registers and JMP Solution Storing the return address in register Problems with Recursion Introduction to Stacks Solution Use Stack for Return Address The JSR and RET Instructions Saving State Function Prologs and Epilogs Prologs Another Example Stack Frames Using the Stack Frame to Pass Parameters Using the Stack Frame for Local Variables Parameter Order an Important Detail Accesing Parameters Problem Its Solution Frame Pointers Frame Pointers Detailed Example Subroutine Linkage Instructions Passing Arguments by Reference Case Study Memory Management on the Mac Virtual Memory Page Tables Summary Topic Assemblers Linkers and Loaders Readings for this topic Preparing an Assembly Program for Execution Machine Code Example The CLR Instruction Example The ADD Instruction Example The MOVE Instruction The Assembler Pass Build the Symbol Table Pass Generate Code and Build RLD Structure of Object Module Linking programs The Linker The Loader Summary Topic Interrupts and Readings for this topic What happens when you do something wrong How does processor call the service routine Supervisor versus user mode How exception is processed on Writing exception handlers Tracing Breakpoints Operating System Calls Reset Interrupts on the More properties of Peripheral Interrupts Summary Topic Introduction to Logic Design Readings Digital systems Gates Truth Tables Boolean Algebra Combinatorial and Sequential Circuits Sequential Circuits Physical Level Choosing technology Making Gates TTL Making Gates TTL cont Making Gates TTL cont Other Gates TTL Packages Fan Fan Out Physical to Logical Level Boolean Algebra Some Theorems of Boolean Algebra Proving Boolean Equations Generating Boolean Equations from Truth Tables Canonical Form Canonical Form is not minimal form Karnaugh Maps Rules of thumb for finding minimal expressions Mapping real problems to boolean equations Implementing SOP using only NAND gates Implementing SOP using only NOR gates Multiplexers Another Silver Bullet the Programmed Logic Array PLA The Programable Memory PROM Summary Back to the CS home page	other	cornell
852	 Server Date Sunday GMT Monday GMT Data Mining EMV Project Proposal Classification in Data Mining Eric Vitrano Common Level Class table methods open filename close filename write tuple char sends in char string of the whole record in ascii read tuple tuple number will read the tuple and return tuple instance returns char string which lists the scheme takes in char string and sets the scheme of the table to that scheme Class tuple method attribute number location to copy the attribute value to Data Mining Classifiers Stage Once the above groundwork is complete will implement version of an elementary data mining classification algorithm This algorithm will be based on the decision tree model with limited pruning summary of the algorithm in pseudocode form is as follows Tree Building MakeTree Training Data Partition Training Data Partition Data If all in in same class tree done Else for each attribute find best split Split and partition Partition All partitions from above Tree Pruning RemoveNode Node For all nodes in Node If node in Node has same class value as parent Split Evaluation Split Data For each attribute calculate goodness of an attribute return highest Data Partition Data into two sets based on goodness from The above algorithm will be implemented in Visual with the intention to build decision tree that will classify tuples into defined classes The tree must be trained using training set where the classes of the tuples is known and then tested on data to see if the returned classes are of the appropriate type The results can then be used for directing queries on incoming data as well as classifying existing data Stage When the above algorithm is implemented further algorithm will be implemented This next algorithm will either be related to SLIQ or will be something generated by observing the development and processes of the general case Possible areas of improvement would be pruning on the fly limiting the searches of the data and the amount of data needed to be kept in memory and classification of the data Time Estimates would expect the following schedule to be an approximate scheme for progress October Completion of groundwork steps November Completion of the general algorithm November Completion of Stage algorithm December Evaluation and further consideration of data mining classifictiaon EMV Home Page	other	cornell
853	 Server Date Monday GMT Wednesday GMT Final Examination	other	cornell
854	 Server Date Monday GMT Friday GMT CS Fall Lecture Lecture MaxFlow MinCut Theorem homepage Page Page Page Page Page Page Page Page	other	cornell
855	 Server Date Sunday GMT Monday GMT Reasoning About Uncertainty Up Teaching Experience Previous Reasoning About Knowledge Reasoning About Uncertainty COM Course Description Agents must reason and act in an uncertain world In order to do so intelligently they need to deal with and reason about this uncertainty This course discusses modeling and reasoning about uncertainty going from purely qualitative notions an event is either possible or it is not to quantitative notions such as probability an event has probability with some consideration of notions of plausibility We consider various logics of reasoning about uncertainty both propositional and and discuss the subtleties they reveal Finally we discuss how our approaches give us tools to understand and analyze central problems in the literature including nonmonotonic reasoning and problems of statistical inference particularly that of going from statistical information to degrees of belief Although many of the examples will be drawn from the AI literature the material is also relevant to distributed systems philosophy statistics and game theory We will try to make connections to work in all these areas While there is lot of material on this subject the course will focus on recent trends indeed the readings will include great deal of material	other	cornell
856	 Server Date Sunday GMT Thursday GMT CS Project TOP Distributed Network Visualization and Management network management system with topologies discovery and visualization faults detection and performance analises Leejanwun Vince Livince Wanglinhsian Overview Since the internet has been growing fastly at exponential rate with different sizes and types of networks connected together for data communications As the networks become larger and more complex high quality networking monitoring system with network status control faults detection and performance analises becomes vital necessity for any distributed computing environment Problems occurred in the network can be easily reflected and solved in very short time Our goal is to design and implement an efficient network management system with different networks topologies discoveries and display it through graphical interface to give clear view of the connections and status Faults detection and performace analises are also incorporated in the project Technical Backgrounds Simple Network Management Protocols SNMP SNMP is developed in in orderto provided simple and efficient protocol for network management data communications between different types of networks It is easy to implement on large network system without posing too much stress on the it is being supported by most of the internetwork architetures routers and bridges The exchange of information using SNMP is made through messages PDU which can be viewed as objects that contain both values and titles from higher perspective There are only five types of PDUs used by SNMP to monitor the network two for terminal data settings two for terminal data reading and one for monitoring events such as and Project Success Criteria deliverable software with GUI that displays different topologies and network status Manager interactions with the network The basic management specifications such as fault detection and topologies display and performanace analises achieved Successfu testing in simulated local area network Expected Educational Results Understand the use of the most popular networking management communication protocols Learn the different network models and management issues associated to the networks Capability to design management applications according to the specifications and considering some major issues such as security management configuration management fault management and accounts management Know how to manage network system References COMER Internetworking with Vol Principles Protocols and Architeture Prentice Hall Englewood Cliffs New Jersey COMER Internetworking with Vol II Design Implementation and Internals Prentice Hall Englewood Cliffs New Jersey	other	cornell
857	 Server Date Sunday GMT Tuesday GMT will he ever shut up music gives me goosebumps listen to lot of music and also enjoy performing oratorios in formal choruses while it seems ridiculous sometimes to make this distinction listen to some very different types of music classical including contemporary art music electronic including trance ambient and techno other including showtunes and well other sorta shame we have to make these distinctions we are the music makers and we are the dreamers of dreams aphex twin dan brown snowman last updated aug	other	cornell
858	 Server Date Sunday GMT Thursday GMT SYMPOSIUM ON TEACHING LOGIC Announcement and Call for Papers DIMACS Symposium on TEACHING LOGIC AND REASONING IN AN ILLOGICAL WORLD Rutgers University July Sponsored by the DIMACS Special Year on Logic and Algorithms and the Association for Symbolic Logic in conjunction with the Federated Logic Conference Hosted by Rutgers The State University of New Jersey Logic and logical thinking are central to all disciplines and are critical in the mathematical and computer sciences This symposium will explore the teaching of introductory logic and logical thinking with primary focus on the college level and secondary focus on the high school level The symposium will be interdisciplinary emphasizing and contrasting approaches used in mathematics computer science natural sciences and engineering The symposium seeks sharing of ideas rather than consensus on how to teach logic so that all participants gain an appreciation for the fundamental issues and ultimately are better able to motivate the importance of logic and to convey the foundations of logical reasoning to students Topics of interest include but are not limited to Pedagogical Approaches Cognitive Models of Logical Reasoning Empirical Studies Exemplary Course Material Innovative Approaches Courseware for Teaching Logic Submit an extended abstract maximum of pages by April Submissions in postscript form are preferred email them to lmc Mail paper submissions to David Gries Computer Science Upson Hall Cornell University Ithaca NY USA Notification of acceptance May Camera ready and electronic paper versions due July Accepted papers will be published in locally available proceedings and on the World Wide Web Organizers Susanna Epp DePaul University epp David Gries Cornell University gries Peter Henderson SUNY Stony Brook pbh Ann Yasuhara Rutgers University yasuhara For further information contact Peter Henderson Department of Computer Science SUNY Stony Brook Stony Brook USA pbh The symposium will be held prior to the Federated Logic Conference FLoC hosted by DIMACS as part of its Special Year on Logic and Algorithms FLoC includes the following conferences IEEE Symp on Logic in Computer Science LICS July Rewriting Techniques and Applications RTA July Conference on Automated Deduction CADE workshops July Conference on Automated Deduction CADE July August Verification CAV July August For further information see the FLoC home page at http Information about the Special Year can be found in http	other	cornell
859	 Server Date Sunday GMT Friday GMT Friends from Techo Friends from Techo Directory of Friends homepages	other	cornell
860	 Server Date Monday GMT Monday GMT Project Martix Products Back to Home Page Project Martix Products Date Assigned February Date Due February Introduction This project involves writing small assembly language program for multiplying matrices Your program will gets its input from and send its output to the BasePak runtime window Specs Overview Compute the matrix product AB AB mod where and are matrices of unsigned integers The minimum matrix size will be and the maximum matrix size will be Input parameters matrix of unsigned integers is the first matrix in the product matrix of unsigned integers is the second matrix in the product unsigned integer is the number of rows in unsigned integer is the number of columns in and the number of rows in unsigned integer is the number of columns in and satisfy Output parameters matrix of unsigned integers AB mod Arithmetic Do all arithmetic over integers mod use unsigned integer multiplication and addition and take only the word of multiplication results User interface The user interface of your program will be minimal is an assembly language program after all Your program should prompt the user for the parameters and successively then allow the user to enter the values of the elements of the matrix then the values of the matrix After these values have been entered your program should output the matrices and and then output the result matrix All numerical input and output should be in base Matrices should be output in standard order row of elements in the matrix should correspond to row of numbers on the screen For example if were matrix with elements and then would be output as Matrices should be input by prompting the user for elements one at time in the same order in which they would be output The text of the prompt should include the matrix name and the indices of the element currently being prompted for For example the matrix given above would be entered via the following exchange underlined text indicates the program output text indicates the user input Sample Run run of your program should look something like the following Result which corresponds to Documentation The usual documentation guidelines always explain how you using registers use symbolic constants whenever possible state the input and output parameters of all subroutines etc apply Your program should have at least subroutines one for inputting matrices one for printing matrices one for multiplying the matrices Each subroutine should begin with header that looks like this Name of function Synopsis brief description of what the function does who calls it why and any exceptional HLL description Put in high level language pascal description of routine Register usage Map out what registers are used for Input Conditions What should the format of the registers and stack be on entry to the routine Output Conditions What will the format of the registers and stack be when the routine returns Stack frame What does the stack frame look like For example Saved Registers Old Return Address Param Param The subroutine code should immediately follow the subroutine header Try to comment each line and use block comments and blank spaces to separate logical sections of the subroutine For example here the code of routine that swaps the two registers and if SWAP Prolog Save registers set up stack frame LINK set frame pointer no locals SP Save registers we use Compare and to see if we need to do anything If not then just jump to epilog and leave CMP BLT DONE If we get here Swap the contents of and using as scratch register tmp tmp Epilog Restore registers clean up stack frame return DONE SP Restore registers etc UNLK RTS Try to give high level description in the function header more detailed description in the block comments and in the individual line comments Do just repeat what the code says if possible In addition for this project be sure you document the following aspects of your program your method of laying out matrices in memory your indexing conventions Misc Your program should check that the values of and supplied by the user fall within the allowable range You probably need to adapt the signed decimal routines in the BasePak library for use as unsigned routines For this project simply taking the word of the return from would be acceptable for inputting unsigned integers though that be such great idea in real program and using will work for outputting unsigned integers as long as you remember to clear the high word of Submitting Hand in the following to the consulting office hardcopy of your program hardcopy of sample run of your program an electronic copy of your program on diskette Back to Home Page	other	cornell
861	 Server Date Sunday GMT Thursday GMT Multimedia Home Page Multimedia Home Page Eric Vitrano vitrano Contents Readings Project Readings Technical Introduction to Digital Video The World of Digital Video Poynton Colour FAQ JPEG Still Picture Compression Standard MPEG Algorithms for Manipulating Compressed Images Image Metamorphosis Resolution Independent Video Language Audio Engineering and Psychoacoustics Psychophysics and Modern Digital Audio Technology Methods for Encrypting and Decrypting MPEG Video Data Efficiently Multimedia Storage Servers Tutorial Disk Scheduling in Multimedia System MBone Provides Audio and Video Across the Internet RSVP New Resource ReSerVation Protocol Experiments with Lossless JPEG Codec Performance of Software MPEG Video Decoder Fast Software Processing of Motion JPEG Video Project The JPEG Watermarking Project is now proceeding Project Home Page EMV Home Page	other	cornell
862	 Server Date Mon Nov GMT bytes Mon Nov GMT Network Interface Architecture The architecture provides and communication over commodity networks for workstations and PCs It removes the large communication overheads found in the standard networking layers in the operating system defines an architecture which allows network interfaces to be mapped directly into without compromizing protection With the operating system is no longer involved with the sending and receiving of messages This allows much tighter integration of computation and communication with the effect that communication overheads are reduced dramatically is available on several platforms PCs running Windows NT and using DECchip based fast ethernet interface PCs running Linux and using DECchip based fast ethernet interface or using Fore Systems not ATM interface Sparcstations running SunOS or Solaris and using FORE Systems not ATM interface Funding for the project is provided through DARPA ITO contract ONR contract The initial versions of were developed under contract from Rome Laboratory Air Force Material Command Software Alpha Release for Windows NT is forthcoming RSN as they say Release for Unix is now available Download the software distribution and the Release Documentation This release supports the and systems mentioned above and is fairly flexible and easy to install some may point out unlike the previous release Please send mail to Matt Welsh for questions or problems about this release The earlier alpha Release for Unix is still available in There is little or no reason to use this release except that it includes Active Messages and different implementation of libunet Papers and talks Incorporating Memory Management into Network Interfaces Anindya Basu Matt Welsh Thorsten von Eicken Department of Computer Science Cornell University Submitted for publication November network interfaces allow applications direct access to the network without operating system on every send and receive Messages are transferred directly to and from by the network interface while observing the traditional protection boundaries between processes Current network interfaces limit this message transfer to region of physical memory to allow safe DMA This approach is inflexible in that it requires data to be copied into and out of this memory region and does not scale to large number of processes This paper presents an extension to the network architecture allowing messages to be transferred directly to and from any part of an address space This is achieved by integrating translation buffer into the network interface and coordinating its operation with the operating virtual memory subsystem This mechanism allows network buffer pages to be pinned and unpinned dynamically Two implementations of are described demonstrating that existing commodity hardware and commercial operating systems can efficiently support the architecture ATM and Fast Ethernet Network Interfaces for Communication Matt Welsh Anindya Basu and Thorsten von Eicken Proceedings of the Third International Symposium on High Performance Computer Architecture HPCA San Antonio Texas February Fast Ethernet and ATM are two attractive network technologies for interconnecting workstation clusters for parallel and distributed computing This paper compares network interfaces with and without programmable for the two types of networks using the communication architecture to provide and communication provides protected access to the network interface and offers latencies as low as usec over Fast Ethernet and usec over ATM The design of the network interface and the underlying network fabric have large bearing on the design and performance Network interfaces with programmable can transfer data directly to and from user space while others require aid from the operating system kernel The paper provides detailed performance analysis of for Fast Ethernet and ATM including performance on set of parallel benchmarks These results show that computing is possible on network of PCs connected via Fast Ethernet Copyright IEEE Personal use of this material is permitted However permission to this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists or to reuse any copyrighted component of this work in other works must be obtained from the IEEE Contact Manager Copyrights and Permissions IEEE Service Center Hoes Lane Box Piscataway NJ USA Telephone Intl Communication over Fast Ethernet Matt Welsh Anindya Basu Thorsten von Eicken Proceedings of Lyon France August Fast Ethernet can provide alternative to more esoteric network technologies for cluster computing We use network architecture based on the approach to implement and communication over Fast Ethernet with performance rivaling and in some cases exceeding that of Mbps ATM provides protected access to the network interface and enables latencies of less than usec over Fast Ethernet Network Interface for Parallel and Distributed Computing Anindya Basu Vineet Buch Werner Vogels Thorsten von Eicken Proceedings of the ACM Symposium on Operating Systems Principles SOSP Copper Mountain Colorado December The communication architecture provides processes with virtual view of network interface to enable access to communication devices The architecture implemented on standard workstations using ATM communication hardware removes the kernel from the communication path while still providing full protection The model presented by allows for the construction of protocols at user level whose performance is only limited by the capabilities of network The architecture is extremely flexible in the sense that traditional protocols like TCP and UDP as well as novel abstractions like Active Messages can be implemented efficiently prototype on an ATM cluster of standard workstations offers microseconds latency and bandwidth It achieves TCP performance at maximum network bandwidth and demonstrates performance equivalent to Meiko and TMC supercomputers on set of benchmarks The Network Architecture talk about given at the Berkeley NoW retreat by Thorsten von Eicken May and UNAM Bringing Parallel and Distributed Computing Closer Cornell WIPS Systems Work in Progress Seminar talk by Basu that describes the architectures of and UNAM People Thorsten von Eicken Anindya Basu Chang Grzegorz Czajkowski Deyu Hu Werner Vogels Matt Welsh For further information contact Thorsten von Eicken	other	cornell
863	 Date Mon Dec GMT Server Fri Dec GMT Modeling Human Facial Expressions Modeling Human Facial Expressions Daniel Hung and Steven Huang CS Topics in Computer Graphics Introduction Human faces are among some of the most difficult objects to model in computer graphics and have been in the attention of numerous attempts some almost as old as computer graphics itself Facial expressions are the result of the movement of skin layered atop muscles and bone structures and may have thousands of combinations As part of our coursework we propose to focus on this subject Our work will be divided into three parts survey of various techniques developed throughout the years an implementation of one such technique and the presentation of our results Limitations Due to time constraints it is unlikely that detailed implementation of any of the models is possible The goal of the project is thus to produce technology demonstration of technique The availability of suitable input devices or face mesh would limit the accuracy and aesthetic quality of the finished product We wish to be able to produce at the minimum wire frame animation of face mesh The results from the survey and the implemented model will be presented in class Prior Art General Structure Among the various approaches taken over the years distinctive generalization can be made There generally exists muscle motion simulator called variably as action units abstract muscle action procedures or minimum perceptible actions This layer enables the generation of expressions that are not necessarily humanly possible such as asymmetric movement of two sides of the face On top of the muscle layer we find an abstraction for humanly significant expressions This layer might include smile frown horror surprise and other expressions As the objective of many projects was to emulate the human face during speech there usually exists another layer above expressions that include phonemes speech primitives complete data set of phonemes allow the synthesized face to look like it is coordinated with speech which is played back separately Keyframing Keyframing was one of the earliest approaches taken and involved linear transformations from one face mesh to another The amount of computations were extensive and the data set large The approach was rather inflexible because the range of expressions that can be generated are limited by the keyframes that were previously digitized It is also difficult to generalize work on one face mesh to another Parametric Deformations second approach was to model the human face as parametric surface and record the transformations as movements of the control points to minimize the data storage requirements These approaches are still difficult to generalize over different face meshes One such attempt utilizes patches that were defined manually on an actual digitized face mesh The control points for the patches were moved to effect the distortion of the face While this method is powerful we know of no automatic way of defining the relevant control points for the patches Another such attempt used Rational Deformations to move points inside defined volume if not for the amazingly little understanding we have of them The human facial muscles are capable of large amount of expressions and realistic simulation of muscles requires the simulation of muscle action wrapping around the skull structure jaw rotation and folding and stretching properties of skin hybrid approach would be to simulate muscles that are not necessarily After the data set was complete we decided that the available functions to deform the face mesh were overly complicated and derived simple one Pd where is the time parameter running from to Po is the point where the force is applied Pd is the point of attractive force and is every face vertex in the bounding box The formula moves every vertex in the bounding box towards the attraction point Pd by magnitude inversely proportional to its distance from the point of force application Po An example of this muscle model is shown below This formula had an unacceptable side effect of seemingly to pinch the points close to Po towards Pd We abandoned it because we felt we needed smoother attraction which led us to cos pi Pd Po where we introduced new parameter defines the radius of influence and while closely related to the size of the bounding box is separate parameter In general however should cover roughly the same area as the bounding box Note that singularities appear if is much smaller than the bounding box Note that the Pd Po term in this formula moves all the vertices in the bounding box and the radius of influence parallel to the vector between the point of force application towards the point of attraction In effect the point of attraction actually defines plane of attraction for the bounding volume This is the formula we settled with and the cosine term does provide us with smooth deformation sample of this muscle model is shown below Not all muscles on the face apply force linearly Sphincter muscles around the lips for example do not work well with this formula unmodified We thus defined special case of the formula to deal with these muscles cos pi Pd There are two important differences The term was introduced to allow the muscle to contract in one axis and expand in another instead of uniform contraction or expansion The direction of motion is now defined by Pd which is in the direction of the point of attraction similar to formula The reason we inverted the sign of this formula was because we felt that positive should denote contraction and negative should denote expansion in order to be consistent with formula The example on the left below shows contracting sphincter muscle and the one on the right shows an expanding sphincter muscle Putting it all together Armed with the face mesh and the muscles what remains is the definition of parameters which is largely tedious task We present few expressions generated by IBM DataExplorer below for mpeg demos click on the links below the images MPEG demos of our work Click Here to see the smile animation Click Here to see the kiss animation Data Explorer files of our work Click here for the connections list of the mesh Click here for the DX macro which models linear muscle on the face Click here for the DX macro which models the facial mesh Note that this requires vertex list connections and lip connections file similar to the ones above in order to work Ahead The effects we have achieved are far from realistic The complexities of facial animation have not yet been fully explored but we believe we have come up with reasonable model for manipulating data less than vertices versus the much larger data set acquired by machines with good quality Other areas may be explored and those we feel are interesting are listed below skin Coordination of lip muscles with speech Motion of other facial elements such as eyeball or jaw Modelling of the interior of the mouth such as teeth and gums Modelling of hair features such as hair moustache beard or eyebrows References Arad Dyn Reisfeld and Yeshurun Image Warping by Radial Basis Functions Application to Facial Expressions Models and Image Processing Badler and Platt Simulation of Facial Muscle Actions Based on Rational Deformations Computer Graphics September Kang Chen and Hsu Automatic Approach to Mapping Lifelike Human Face Image and Vision Computing Minh de Angelis and Thalmann Design Transformation and Animation of Human Faces Visual Computer Primeau and Thalmann Abstract Muscle Action Procedures for Human Face Animation Visual Computer Nahas Huitric Rioux and Domey Facial Image Synthesis Using Skin Texture Recording Visual Computer December Nahas Huitric and Saintourens Digital Actors for Interactive Television Proceedings of the IEEE Tost and Pueyo Human Body Animation Survey Visual Computer March Waters Muscle Model for Animating Facial Expressions Computer Graphics July Maintained by Steven Huang and Dan Hung Last Modified December	other	cornell
864	 Server Date Monday GMT Friday GMT Help on Searching NCSTRL Documentation Help on Searching You can search for document with either simple search or fielded search Simple Search Simple search consists of single text entry box on the NCSTRL server home page Enter keywords in this box digital library to search the author title and abstract fields of the bibliographic entries for technical reports The entire NCSTRL collection is searched The search returns documents whose bibliographic entries contain all the words you enter in either the author title or abstract fields Fielded Search The fielded search form has three logical components First there are three text entry fields for bibliographic keyword entry and two radio buttons to specify whether the keywords entered should be anded or ored together Second there is menu of the publishers in the NCSTRL collection and check box to use all publishers Finally there is text entry field in which you may specify document identifer To specify search criteria do the following If you wish to specify search criteria based on bibliographic keywords author title or abstract fill one of the keyword fields see the rules for bibliographic keyword matching Author The author first or last name or names Title The words in the title of the document Abstract The words in the abstract of the document and select the AND or OR radio button Select at least one of the publishers from the list on the form or select the checkbox to search all publishers Unfortunately each Web browser has different rule for multiple selections in menu Consult the documentation for your browser for help with this Document Identifier The identifying name of the document unique for any given publisher Your entry will be matched against any substring of the document identifiers the entry will match and document identifier entry is always anded to bibliographic keyword entries only documents which meet the bibliographic keyword criteria and the document name criteria will be returned Please take note that not all documents in the collection have abstracts If you want your search request to include documents without abstracts enter your search criteria under Title as well as Abstract Your search criteria will be rejected if you do select at least one publisher or the all checkbox and specify at least one bibliographic keyword or document identifier Rules for bibliographic keyword matching Words that you enter in the three bibliographic keyword fields Author Title Abstract are matched to bibliographic entries according to the following rules Each word that you enter matches any word in the respective field that begins with respective word For example the word comp matches computer computation comprehensive etc You may choose either the logical connector AND or OR between the bibliographic keyword fields by using one of the radio buttons below the fields For example if you select the or button and the word robot in the Title field and robotics in the Abstract field the search will return documents that have either robot in their titles or robotics in their abstracts If you select the and button the search will return only those documents that have robot in their titles and robotics in their abstracts You may also use logical connectors and and or within fields For example if you enter robotics or vision in the abstract field the search will return documents that have the word robotics or vision in their abstracts If you enter robotics and vision in the abstract field the search will return documents that have both the word robotics and vision in their abstracts Multiple words that are not separated by and are assumed to be and separated For example if you enter computer vision in the abstract field the search will return documents that have both the words computer and vision in their abstracts Finally you may use parentheses to group words For example if you enter Gries or Teitelbaum and Field in the author field the search will return documents authored by Gries or by Teitelbaum and Field Note Do not use short common words or single letters in the bibliographic keyword fields the You will be asked to your search if the keyword you enter matches too many words in the database Up to Main Information Menu NCSTRL Documentation Any comments or questions Contact us at help	other	cornell
865	 Server Date Sunday GMT Monday GMT DeeJayer Guide for ISDN Record Hops DeeJayer Guide for ISDN Record Hops by Aswin Introduction Being DJ is position of power You are in charge of what songs are being played However it also bears heavy responsibility What you are doing should be what the people want So for me being DJ means to always play better music To push my limits so to speak That is the attractive thing about being DJ In plain words like to play hot music So much for the blabla let see how it works How to Use Our Equipment Turn on the main switch on the extension box on the far right corner of the desk turn that switch off at the end of the hop Make sure everything is on The amplifier should have the buttons for tape and tuner on do ask me why There is an extra small switch box with three buttons mic tape and Make sure is pressed We have and TAPE to play music On the Mixer you use for BOX for and TAPE for the lower double tape deck Now we play some music Do not put the sliding switches over since this can distort the music Everytime you put up new song check the volume level When you program be ready to adjust the volume if you are on the floor How to program This is the player Put in cd Close the slide When programming track make sure you know the disc and the track in advance Press program then press one of the disc buttons on the left then press the track number on the right if then press and the two digits This should all happen in quick order How to change cd and program when music is playing Press exchange to open the slide Put in the cd you want Press exchange again Then program as before How to program TAPE Will be put in later version What to Play We have three sorts of music we mainly dance to Jitterbug Music Like Bill Haley Jerry Lee Lewis Big Joe Turner speed up to beats per minute Lindy Hop Music Old Swing Band Music Like Benny Goodman Glen Miller Count Basie Duke Ellington up to West Coast Swing Music Like BB King Bonnie Raitt Delbert Mc Clinton up to Almost all cd are marked with the speed kind and quality CDs are also marked by color is blue WC is red LH is yellow orange means Carolina Shag CS When you start you can never do wrong by playing songs that are marked So play those lot When you start picking more of your own music be aware of the following It is the style of the rhythm section that determines the dance style not just the speed faster tune might feel more like and feel like WCS and slower tune might have an older style bouncy beat and feel more like slow Lindy Only when you get more experienced you should bring more and more of your own music hope do not sound to rigid since every DJ has different taste and style It often happened to me that song that liked very much at home did not work at all on the dance floor Music for dancing is pretty specific So get some experience first before you start experimenting As the ratio use the following guideline Jitterbug Lindy Hop West Coast Swing For example could play etc Play for the People Try to play what people like If hardly anybody is dancing to song it is probably not good tune Do not tire people to play fast songs in row Also there are lot of beginners at the dances especially early in the evening normally play only few songs over night This is als the case for WC Play slow one and then faster one Variation is the key to your success Length of Songs Five minute songs are too long If song is very long over minutes try to fade it out If there is great song that you would like in it entire length then consider having people change partners several times so people do not have to dance with the same partner for long time This is called mixer Mixers are done as follows quote Announce at the beginning that it is mixer Then when you want people to change partners lower the music and announce the change make sure that people are really changing partners they normally do not hear you quote Sound Level Every song is recorded at different sound level Therefore DJ should always monitor the sound level at the start of each song Sometimes it is also desirable to adjust the treble and bass using the equalizer for further reading see here By Aswin	other	cornell
866	 Server Date Monday GMT Tuesday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
867	 Server Date Sunday GMT Monday GMT CS Topics for CS The following are prerequisites for the course If you feel you do not meet one or more of these please contact me praveen cs to discuss whether you should enroll for the course Knowledge of the basics of relational database systems as taught in CS The broad topics that you should have at least passing familiarity with are the relational data model the relational algebra and calculus SQL file structures heap and isam and indexing structures These will be very briefly covered again at the start of the course Ability to program with The projects for the course will involve adding code to database system written in If you have experience writing code you might feel that you can pick up Some of the background info in the course home page might help you If you have never programmed in or you should talk with me before enrolling for the course Also take look at the information on the term project to get an idea of what sort of programming is required Introductory courses in data structures CS or equiv and operating systems	other	cornell
868	 Server Date Monday GMT Wednesday GMT The contest The fabulous contest page Here in land we have problem Look at the other CS course home pages has got an logo has some thing with lambda on it has that funky scrolling text and even has lame but still better than nothing picture of their textbook What do we have Nothing We need help Here your chance to make difference Create borrow or steal picture for us Here are the rules The picture must be in either GIF or JPEG format The picture must be fairly small see the course home page for examples Send your submissions via to jfoster You should either uuencode or binhqx your file attaching file in Eudora will be sufficient Do send in anything you would want your mother to see Winners will receive absolutely nothing but will be acknowledged on the home page The entries so far authors have been omitted but keeping track Muscular guy lifting CS Dept Mac Big little tiny CS Fancy with some floating stuff Fancy version The zone Ominous warning Back to reality	other	cornell
869	 Server Date Monday GMT Sunday GMT Problem Sets CS Problem Sets Thorsten von Eicken Fall Problem Set Handed out Due by Problem Set Handed out Due by Problem Set Handed out Due by Problem Set Handed out Due by Return to CS Home Page	other	cornell
870	 Server Date Sunday GMT Saturday GMT ORWELL Removal of Tracked Objects in Digital Video ORWELL Removal of Tracked Objects in Digital Video Alfred Hong Heji Kim Wang Department of Computer Science Upson Hall Cornell University Ithaca NY US http Table of Contents INTRODUCTION BACKGROUND INFORMATION SPECIFICS Hausdorff Tracker EVALUATION RELATED WORK AND EXTENSIONS REFERENCES Introduction Object tracking in sequence of images can provide base for multitude of digital video processing applications such as removal of object in the scene Although numerous editors are available and removal OTR is mostly manual process Using the existing feature in RiVL we implement application that allows the user to specify and remove an object then reconstruct the background to result in new video sequence Our work primarily focuses on algorithms for the domain of stationary backgrounds with single moving object In addition to OTR we also extend this work to segment the from the background we can use the resulting segmentation for variety of video processing effects such as overlaying the on top of different sequence The resulting application is an ideal test bed for experimenting with various OTR and segmentation algorithms We reconstruct the background and use different techniques for segmentation as illustrated in the diagram below Figure Orwell OTR and Segmentation Overview The rest of the paper is organized as follows Section provides some background on RiVL and the Hausdorff tracking algorithm Section discusses vision algorithms we employed to our ends Section reviews the work we have done Section concludes with current status and future research directions Key words Hausdorff distance segmentation background reconstruction image filtering Background Information RiVL RiVL is resolution independent video language which has video and audio as first class data types Jonathan Schwartz has implemented RiVL as extension for multimedia processing The high level operators used in RiVL are independent of video format and resolution and provides the necessary infrastructure to test our ideas generates the code for RiVL functions that need to perform low level image processing routines that are not already included in the RiVL library The implementations of median and mean filters use the functions generated by for computations Hausdorff Tracker The Hausdorff tracker is object tracking system for continuous sequence of images The model of the tracked object is represented by binary produced by applying Canny edge operator over smoothed version of the image of the input image Taking advantage of the fact that the motion of the object is roughly an affine transformation between any two consecutive frames the algorithm matches all the possible translations and scales of the model to specified search window shown as red dotted box in Figure Generally the best match has the most points which overlap with transformation of the model Since we use this best match as model for the next image once the tracker begins to wander the results can deteriorate quickly Figure Hausdorff tracking algorithm explained Specifics This section discusses the implementation of the algorithms accessible from the Orwell Editor The first subsection discusses The second subsection discusses the background reconstruction algorithms assuming stationary camera and the third subsection discusses the segmentation algorithms Hausdorff Tracker The tracker in RiVL returns scale and translation coordinates for each image Performance of the tracker depends on setting the correct parameters for the search size of the search window scaling factors and the forward and backward distance which limits the allowed dissimilarity in match We must make between the laxness of the constraints and the processing time required to track the object The Hausdorff tracker also works better for larger images Background Reconstruction We need the background to replace the tracked object from the original sequence and to possibly segment the object We experiment with three different approaches to background reconstruction temporal median filter temporal mean filter and physical space search The first two approaches for the background reconstruction are temporal mean filter and the temporal median filter Temporal Mean Filter TMEF The TMEF technique computes the mean pixel value by taking the arithmetic average of the whole frame sequence and assigns this result to the pixels in the background frame This technique averages out the tracked object in the scene with possible blurring effect We implement this filter by averaging each of the RGB values independently Temporal Median Filter TMDF TMDF builds the background frame by computing the median pixel value from sorting the images in the video sequence This techniques relies on the assumption that any portion of the tracked object appears in any one particular location in less than half the image frames We implement this filter by finding which frame has the median using its value and then reconstructing the background using the corresponding RGB values Both temporal filters are pixel level operations we wrote in only allows twenty frames maximum to be entered as input to function and because medians of medians is not median we could not implement true median function over the entire video sequence Instead we compute the median for several different samples each sample composing of twenty frames set at equal intervals and allow the user to decide over the best result Physical Space Search Physical space search finds the frame where the bounding box of the tracked object does not overlap with the one in the currently processed frame that is the part of background needed to replace the object is the one that has not been occupied by the object in the previous frames Using assumptions of motion continuity we initially search for the the background for the current image near the frame where we found the background for the previous frame this way we can avoid comprehensive search For the initial frame we must search the entire sequence for all possible background replacements Although we prefer the closest frame that contains the background we also want to find multiple scenes in which the background resides in case that another moving object has moved into the background It is also possible to partition the bounding box into smaller blocks and search for the background in pieces If we assume single moving object in the sequence then it is possible to use one frame which has the object removed and the background reconstructed as the background for the entire sequence However due to shifting lighting levels it is desirable to reconstruct the scene for every frame or every block of frames Figure shows the result of the background covered by the subject head reconstruced Figure Sequence illustrating and background reconstruction Object Segmentation Image Segmentation Segmentation or separating the tracked object from the background is one of the core problems in vision that has yet to be adequately solved for unconstrained settings We explore motion differencing second differencing and background subtraction for this classical problem Figure Segmentation methods Image Differencing Motion differencing applies threshold over two consecutive images to produce binary image indicating the regions of motion We extend motion differencing to use three consecutive frames With second differencing we perform binary AND operation on the difference image of the first two frames and the last two frames to segment out the moving object in the middle frame Moving objects are more clearly segmented when there exists less overlap of the moving object with itself in consecutive images we choose the three consecutive frames such that there has been sufficient motion Figure Segmentation methods Background Subtraction Background subtraction involves application of threshold over the background with the image containing the moving object This techniques works well only when used with faithful copy of the background Evaluation Figure Input video sequence We used the above video sequence of frames as one of the inputs for our test Images were recorded as Motion JPEGS with Sun Microsystems camera using Parallax board Mean Median Figure Temporal filter results The example images above are the results from temporal filters The reconstructed background image from the mean filter has slightly visible blurring effect caused by the moving object As the number of frames in the video increases this effect will become negligible We can further process the mean filter with smoothing function and then sharpening function to further rid of the shadowing effect Figure Segmentation results for background subtraction We choose the eyeball test metric commonly used by many vision researchers to determine the quality of the segmentation Background subtraction produced the best segmentation with the smoothest edges and the least number of holes within the object Motion differencing performed the worst since it tends to give an irregular outline of the motion and includes portion of the background which belongs to the object in the previous image but not in the current image this effect appears as an undesirable white outline around the object in the right pair of images below The second differencing method shows improved results over regular motion differencing but is still not as solid as background subtraction Second differencing has an advantage over background subtraction since reconstructing the background is not necessary Some sort of is necessary for all cases to fill in the holes and smooth the edges Figure Segmentation results for second differencing and motion differencing We set out with goal one of and the other of The overall quality of depends on the accuracy of the Hausdorff tracker and the fidelity of the reconstructed background We feel we have accomplished OTR as long as the background does exist We have had less success with segmentation and leave much room for future improvements Related Work and Extensions Multimedia and vision are highly experimental areas embodying numerous possibilities Although tracking and are active ares of research in vision there appears to be virtually no established work on automating object removal using background reconstruction We can extend this project along these orthogonal directions solve object removal for moving camera to handle zooms and pans handle subtle problems in object removal such as object shadow reflection etc integrate Orwell with full video editor as well as include more functionalities such as allowing the tracker to backtrack to reset the object position refine segmentation with morphological operators References Tracking Objects in Complex of the Fourth International Conference on Computer Vision with Noh and Rucklidge Jain Kasturi and Schunck Machine Vision Ousterhout John Tcl and the Tk Toolkit Massachusetts Swartz Jonathan and Smith Brian RiVL Resolution Independent Video Language Submitted to the Workshop July Toronto CA Teodosio Bender Salient Video Stills Content and Context preserved Proc ACM Multimedia pp	other	cornell
871	 Server Date Sunday GMT Monday GMT Address Address and stuff Department Jonathan Swartz Department of Computer Science Upson Hall Cornell University Ithaca NY Department fax Office Upson Hall Home Jonathan Swartz Spencer Road Ithaca NY	other	cornell
872	 Server Date Monday GMT Thursday GMT About the Design Research Institute Design Research Institute Overview The Design Research Institute is an organization of collaborating industry and academic scientists and engineers devoted to research bringing computer science and computation technology to bear on problems of engineering design DRI was established in by Cornell University and Xerox Corporation and is located in the Center for Theory and Simulation in Science and Engineering on the Cornell campus in Ithaca New York The Institute was founded on the principle that American research universities represent major resource that can and should be employed in America effort to improve its industrial global competitiveness At present five Xerox scientists form the nucleus of DRI collaborating in research with Cornell faculty students fellows and visiting scientists in the College of Engineering Research problems are motivated by industry but solved through the pooled talents and expertise of the combined DRI community It is anticipated that additional companies and Cornell units will participate as the Institute grows The DRI mission is Pace to Product that is to develop technologies and methodologies for accelerating the design and engineering of products DRI research currently encompasses three themes Information capture and access developing Corporate Memory of Design heterogeneous information base capturing designs and design experiences and featuring query and browsing capabilities in support of engineering processes and decisions Computational Prototyping developing scientific computing algorithms and applications and computing environments for their use to enable mechanical fluid and other physical systems to be simulated by computer reducing the need for building hardware prototypes Collaboration technology developing tools and methods for sharing of engineering information and creating shared engineering work spaces Since the issues of engineering productivity addressed by DRI are of concern to much of American industry goal is to secure federal or other outside funding to support the Cornell associates of DRI Industry staff are supported by their companies Most DRI research is Software prototypes are implemented to demonstrate concepts and show feasibility and results are published in technical reports and journals As appropriate technology is expected to be freely transferred into partner companies DRI Partners The Design Research Institute is partnership of industry academia and government Industry Corporations can participate in the Institute by engaging in the research of DRI generally by establishing groups of research scientists and engineers on campus Companies take the lead in setting the research agenda and have access to the research results of all of DRI Academia Cornell University is the host institution for the Design Research Institute Faculty staff and students in the College of Engineering work closely with industry scientists in collaborative research DRI offices and laboratories are located in the Center for Theory and Simulation in Science and Engineering and in the Department of Computer Science and collaboration extends to the Sibley School of Mechanical and Aerospace Engineering and the Departments of Electrical Engineering and Theoretical and Applied Mechanics Future involvement is expected in other units of the College of Engineering as well as the School of Industrial and Labor Relations and the Johnson School of Management Government It is anticipated that government or other external organizations will fund part of the research of DRI since the research goal of the Institute is to develop technologies that will enhance the competitiveness of all of American industry Such funding will support Cornell affiliated staff not industry staff Mission Accelerating the Pace of Product Development The research mission of the Design Research Institute is to develop technologies and methodologies for increasing the pace of development of products such as aircraft computing and communications equipment automobiles machine tools office equipment and composite materials DRI research is expected to lead ultimately to shorter product development cycles This focus on the time element of engineering reflects the importance of time to market in today global competitive environment Research projects seek to leverage massive computation multimedia networks and heterogeneous database technologies to enable more effective engineering by both individuals and work groups Three themes form the heart of the DRI research agenda information capture and access computational prototyping and collaboration technology Research in these areas is directed toward facilitating more effective engineering and developing means to eliminate or accelerate engineering tasks Information Capture and Access One goal of DRI is to develop technologies for an enriched information and document environment that enables increased worker productivity in tasks especially that of engineering design DRI research in information capture and access involves multitude of technologies distributed databases and persistent object storage document image processing and management multimedia and user interface technology information science for heterogeneous data and knowledge representation and organization centerpiece for this work is vision of Corporate Memory of Design distributed collection of all the information pertaining to product development documents drawings schedules catalogs field service records minutes of meetings records of decisions and histories of past projects Initial contents of the DRI prototype Corporate Memory will be engineering reports in scanned and synthetic document form engineering drawings photographs of engineers along with records of their areas of expertise and project assignments and computational prototyping programs complete with documentation and sample visualization output The Corporate Memory will not be centralized but rather will be spread across many computers in many sites linked by network It will be closely integrated with public information sources such as electronic libraries and national online databases The Corporate Memory will support wide variety of uses through specialized interfaces tailored to various applications For example an engineer may receive automatic notification of any engineering change on his project by electronic mail manager may have permanent project status window on his or her workstation refreshed by program that continuously queries the Memory for schedule references departmental document scanner may automatically file in the Memory all documents pertinent to particular project Parametric design programs may sift through previous designs for best matches to new requirements The clients of the Memory will all share layer of intelligent access capabilities such as querying browsing natural language interfaces and of the content of the Memory An information capture and access testbed is now being implemented It is based on several existing information and document systems ranging from an electronic notebook system to network document and database access systems to information filters and interfaces These systems will be integrated into unified environment supporting experiments with and development of enabling technologies for the Corporate Memory Computational Prototyping Computational prototyping involves the simulation by computer of complex physical systems and visual display of their behavior to engineers This process enabled by network access to supercomputers graphics workstations scientific visualization technology and new parallel computing algorithms will replace some of the time consuming building of hardware prototypes with interactive design at the workstation Successful simulations have to date been achieved in several key physical domains including flow of fluid and heat in thermal ink jet free surface ejection of droplet from an acoustically excited pool of liquid electrostatic interactions of toner particles in xerographic development system lubricant flow in bearings and charge transport in semiconductors New methods have been developed to solve these problems on supercomputers Ultimately the simulations will run fast enough for interactive use by engineers An emerging focus area in Computational Prototyping is Systems In collaboration with departments of Electrical Engineering and Theoretical and Applied Mechanics computational tools are being developed that will lead to an improved understanding of MEMS electromechanical behaviors Specific areas of research include reliability and failure modes in these structures as well as techniques for sensitivity analysis and optimal design of MEMS This project is being funded by the NSF MEMS program research goal is to develop flexible powerful yet friendly environment supplying computational and graphics resources that enable an engineer to employ simulation as an everyday design tool The DRI vision is of an integrated environment providing simulation and visualization capabilities for engineers at Xerox and other partner companies driven by Cornell supercomputers Intelligent browsing capability and online documentation are key components of the vision Building toward this goal is Protolab computing environment for engineering simulation featuring automatic generation of simulation programs from descriptions and an object oriented library of models and methods research proposal on the development of Protolab submitted jointly with General Electric and Cornell Computer Science has been selected as potential funding candidate by ARPA Collaboration Technology The Design Research Institute recognizes that the way engineers work together as team is as important as their individual contributions Thus collaboration technology forms the third component of the DRI research agenda DRI activities in this area are in providing shared access to objects in the Corporate Memory and in enabling effective communication among engineers Toward the latter cooperative engineering environment is under development featuring structured dialog among members of team to facilitate resolution of engineering changes during product design Research in this area is just beginning but is expected to grow to involve analysis of engineering processes and development of additional tools to facilitate collaboration Of special interest is enabling effective teamwork among engineers separated by several time zones Corporate Participation Companies joining the Institute typically will participate by locating research staff on campus In the case of Xerox the founding partner group of seven scientists within the Corporate Research Group was permanently established at Cornell Xerox provides to Cornell yearly grant which offsets the cost of its offices and support services Corporate partners benefit from participation in DRI in several ways The companies leverage both their intellectual investment and their financial investment through participation in collaborative research with university faculty and students as well as scientists from other partner companies Government or other external funding is expected to support the Cornell affiliates Through collaboration partner companies have direct involvement in establishing the research agenda of the Institute Problems can be drawn from an industrial context and distilled into fundamental research questions This approach provides new scale and perspective that is unusual in academic research but which promises exceptional synergy Partner companies also have convenient first access to research developments in DRI including research involving scientists from other companies There are many avenues of technology transfer including joint projects with company units and hosting of visiting scientists on campus Intellectual Property Rights Most research in the Design Research Institute is intended to be open and Results will be available for use by partner companies as developed and will be published in scientific journals as appropriate To cover ownership rights to inventions deriving from current DRI research an intellectual property rights agreement has been reached in principle between Cornell and Xerox It provides that rights to inventions of Xerox employee shall be covered by standard Xerox policy and that rights to inventions of Cornell employee shall be covered by standard Cornell policy In the case of joint invention by Xerox and Cornell employees rights shall be jointly owned Joint ownership generally implies that each party has the right to use or license the invention independently as either party wishes In the case of DRI joint ownership has been redefined by the parties for the mutual benefit of both parties When additional corporate partners join DRI the issue of intellectual property rights will be revisited but it is expected that agreements developed to cover the new partners will be similar to the model Steering Committee and Institute Organization Policy for the Institute is established by Steering Committee whose membership includes representatives of Cornell and each of the partner companies At present the committee consists of three Cornell members and five Xerox members When additional corporate partners join DRI an Institute office will be created to augment the offices of the individual companies director is expected to be named at that time Until then Cornell and Xerox are sharing in the administration of DRI As the Institute grows it is envisioned to include separate branches focusing on key areas of DRI research The branches will engage various units of Cornell and partner companies and government agencies may participate in any or all of the branches as they choose Design Research Institute Engineering and Theory Center Cornell University Ithaca NY	other	cornell
873	 Server Date Sunday GMT Monday GMT Resume Vineet Ahuja ahuja Current Address Hasbrouck Apartments Ithaca NY Permanent Address floor Botanic Terrace Conduit Road Hong Kong Objective To obtain permanent position as software engineer Education Cornell University Ithaca NY Master of Engineering Computer Science GPA nbsp December Pune Institute of Computer Technology Pune India Bachelor of Engineering Computer Engineering Graduated with Distinction nbsp August Relevant Coursework Engineering Computer Networks Automata and Computability Theory Software Design for High Performance Architectures High Performance Computer Systems Multimedia Systems High Capacity Information Networks Databases and Management Systems Computer Organization Software Engineering Data Structures Artificial Intelligence Computer Graphics Operating Systems Projects Stable Storage Server nbsp Spring Design and implementation of distributed stable storage server for an electronic commerce system Parallel Ray Tracing in nbsp Spring Parallelisation of public domain ray tracer RayLab in Compositional using the method Secure Video Transmission nbsp Fall Researched method for secure transmission of video streams based on the RSA encryption standard Handwritten Character Recognition nbsp June package for recognition of handwritten English characters and form parsing with automated database entry written in and Visual Basic under Windows Financial Accounting nbsp Fall financial accounting package for managing account books and preparing final accounts written in COBOL Research Efficient Computation of Parallel FFTs Researched methods to decrease communication overhead and computation of the FFT on distributed memory parallel machines Parallel Matrix Vector Multiplication nbsp Fall Design and implementation of optimized algorithms for parallel matrix vector multiplication on distributed memort parallel machines Experience Summer Intern nbsp June Thinking Machines Corporation Design and development of GlobalWorks Run Time Environment OS for clusters of workstations Computer Skills nbsp Pascal COBOL Assembly HTML OWL MPI Active Messages Platforms Software FrameMaker Matlab Awards and Prizes First runners up in project competition for Handwritten Character Recognition Activities Founder of club at Pune Institute of Computer Technology	other	cornell
874	 Date Mon Dec GMT Server Spring Evening Prelim Exam Schedule Spring Evening Prelim Exam Schedule Updated October Feb Feb Feb COM CHEM ARME CHEM BIOAP CHEM MATH CHEM MATH CHEM MATH DEA MATH ENGRD Feb Feb Feb ABEN ARME ARME BIO BIOAP BIOAP BIO BIOES CHEM BTRY CHEM COM ADM CHEM ECON MATH COM ECON MATH ENGRD ELE MATH ENGRI ELE MATH ILRLE ADM MATH ILRLE MATH MATH PHYS PHYS MATH SOC PHYS MATH MATH Mar Mar Mar ARME COM BIOBM CHEM COM CHEM COM COM CHEM COM COMM CHEM EDUC ENGRD COMM ENGRD ENGRD ENGRD ILRST ENGRD SPAND MATH ENGRD MATH NS MATH MATH OR IE OR IE PHYS PSYCH SPAND AM Mar Mar Mar CHEM BIOAP DEA COM CHEM MATH ENGRD ENGRD MATH PHIL MATH MATH MATH MATH MATH MATH MATH MATH MATH MATH Apr Apr Apr ABEN ARME ARME ARME BIO BTRY BIOES BIO CHEM CHEM BIOAP CHEM ILRLE ELE CHEM ILRLE ENGRD COM PHYS ADM ILRST MATH MATH PHYS PHYS Apr Apr Apr CHEM ARME COM CHEM BIOAP ADM COM CHEM MATH COM CHEM MATH ECON CHEM MATH ECON CHEM MATH ELE COM NS ENGRD EDUC SOC ENGRI ENGRD PHYS ENGRD PSYCH OR IE OR IE AM Apr Apr Apr BIOAP ARME BIOAP COM CHEM MATH COM ELE MATH COM ENGRD MATH COMM MATH MATH ENGRD MATH MATH ENGRD MATH MATH ENGRD MATH MATH MATH SPAND	other	cornell
875	 Server Date Sunday GMT Wednesday GMT Courses currently enrolled in This is list of all classes am enrolled in Fall Comments or questions about this web page Send mail to sxsrivas	other	cornell
876	 Server Date Monday GMT Thursday GMT Topics for prelim Topics on prelim programming Base classes and derived classes Inheritence Functions Instance variables Protected keyword Constructors for derived classes Virtual functions Pure virtual functions II Program correctness Induction Assertions Truth validity Hoare triples Preconditions and postconditions The assignment rule Loops Loop invariants Bound functions steps to proving loop correct Developing loop using an invariant You need to understand but not memorize the lists of step for these last two III Gofer Types Int Char Bool Float Tuples Lists Functions Function definitions Basic pattern matching integers Pattern matching with lists and tuples Where clauses Polymorphic types etc what is the type of map Currying and partial application The isomorphism Just kidding Did you know that Currying was actually invented by Schonfinkel So it should be called Schonfinkelization functions Map Filter Anonymous functions Lazy evaluation and infinite lists Just the basic concept nothing tricky Efficiency considerations fib recursively tail recursively You do need to know about list comprehensions	other	cornell
877	 Server Date Monday GMT Wednesday GMT Midterm Examination	other	cornell
878	 Server Date Monday GMT Tuesday GMT Zeno Papers Papers from Zeno Research Compressed Domain Transcoding of MPEG Brian Smith Soam Acharya Abstract Current compression formats optimize for either compression or editing For example motion JPEG MJPEG provides excellent random and moderate overall compression while MPEG optimizes for compression at the expense of random access Converting from one format to another process called transcoding is often desirable over the life of video segment In this paper we show how to transcode MPEG video to without fully decompressing the MPEG source Our compressed domain transcoding technique differs from previous work because it uses new technique that is optimized for software implementation and because we compare the performance of working implementation of our compressed domain transcoder instead of just counting the number of multiplies needed to transcode Our experiments show that our compressed domain transcoder is to times faster than an optimized spatial domain transcoder and offers another benefit single parameter can improve the speed of transcoding at the expense of the quality of the resulting images This is important to many applications Acrobat Gzipped postscript VR Immersive Desktop Teleconferencing To appear in ACM Multimedia Jefferson Han Brian Smith Abstract Current systems provide user interface This paper presents application called VR that provides richer interface VR is distributed system that allows users to connect to worlds and interact with other using live video and audio embedded in virtual space This paper describes prototype implementation of VR including the user interface system architecture and detailed look at the enabling technologies Future directions and metaphors for this space are discussed HTML version Acrobat version Compressed Domain Processing of Images To appear in Imaging Journal Brian Smith Lawrence Rowe July Abstract This paper addresses the problem of processing video data in the compressed domain The operations covered are those where pixel in the output image is an arbitrary linear combination of pixels in the input image which includes convolution scaling rotation translation morphing image composition and transcoding This paper further develops an approximation technique called condensation to improve performance and evaluates condensations in terms of processing speed and image quality Using condensation video can be processed at near rates on current generation workstations Acrobat version Massively Distributed Video File Server Simulation Investigating Intelligent Caching Schemes Alexander Castro Edward Lazzerini Vivekananda Kolla December Abstract This paper the final report in graduate multimedia systems course presents the results of simulation study that compares the effectivesness of different caching schemes within the DVFS architecture HTML version Acrobat version Survey of Compressed Domain Processing Techniques Reconnecting Science and Humanities in Digital Libraries University of Kentuky Brian Smith Oct Abstract This short paper surveys current techniques for compressing compressed multimedia data including compressed audio video and images HTML version Acrobat version Resolution Independent Video Language Presented at ACM Multimedia Jonathan Swartz Brian Smith November Abstract As common as video processing is programmers still implement video programs as manipulations of arrays of pixels This paper presents language extension called Rivl pronounced rival where video is first class data type Programs in Rivl use high level operators that are independent of video resolution and format increasing portability simplifying code reuse and reducing development time This paper also describes Rivl interpreter and the strategies the interpreter uses to optimize Rivl programs These optimizations include classical programming language optimizations such as common subexpression elimination and out of order execution image and video specific optimizations such as computing only those images that will affect the output and an optimized memory manager HTML version Acrobat version Query By Humming Musical Information Retrieval in an Audio Database Presented at ACM Multimedia Asif Ghias Jonathan Logan David Chamberlin Brian Smith November Abstract The emergence of audio and video data types in databases will require new information retrieval methods adapted to the specific characteristics and needs of these data types An effective and natural way of querying musical audio database is by humming the tune of song In this paper system for querying an audio database by humming is described along with scheme for representing the melodic information in song as relative pitch changes Relevant difficulties involved with tracking pitch are enumerated along with the approach we followed and the performance results of system indicating its effectiveness are presented HTML version Acrobat version Name Server Presented at the Workshop Peter Liu Brian Smith Lawrence Rowe July Abstract This paper describes general purpose name server for This name server maintains host addresses and port numbers of services running in distributed vironment and allows clients to query about them It starts services on demand so services are guaranteed to be available and it provides simple authentication protocol for better security The name server is also designed to be tolerant Multiple backup servers can be started on different hosts and failover occurs when the main server goes down In addition the name server provides mechanisms to interface with external modules for extending its functionality Acrobat version Tcl Distributed Programming Presented at the Workshop Brian Smith Lawrence Rowe Stephen Yen May Abstract This paper describes an extension to that introduces suite of commands for creating systems This extended abstract provides examples of using the RPC abstraction and the distributed object system Acrobat version Tutorial Unpublished manuscript Brian Smith Lawrence Rowe September Abstract This document provides tutorial introduction to HTML version Acrobat version Rivl Tutorial Unpublished manuscript Brian Smith Jon Swartz December Abstract This document provides tutorial introduction to Rivl HTML version Acrobat version Protocol Unpublished manuscript Brian Smith May Abstract This paper describes protocol for audio and video file servers is the transmission protocol used in CMT the Continuous Media Toolkit Acrobat version Experiments with Lossless JPEG Codec Master Report Kongji Huang May Abstract This master report describes set of experiments conducted to test the effectiveness of the lossless JPEG encoding method Acrobat version	other	cornell
879	 Server Date Sunday GMT Friday GMT Program Clarifications Program Clarifications November Added November Part Part asks you to compare the running time of Parts and Unfortunately since we sorting only elements both parts execute in less than second So for Part answer this question Which part or should execute faster Why Added November In say that it has one argument array Then in the function it refers to These should be the same So the function should be void elemptr int for elemptr malloc sizeof elem if NULL printf Error out of memory at exit rand Added November Mac Memory Limits Macs have memory limit that you can statically declare only bytes of data As result we have to change the number of things that you have to sort Part Each int is bytes so should be able to fit ints However we need little room for additional stuff like function calls which take up memory so we only sort integers For the output print every integer per line Only the size of the array in changes Part Each elem is bytes so we could only fit As result dynamically allocate the array You do know how to do this so give you the code We will sort an array of elems printing every for output Change to void elem int elem malloc sizeof elem if NULL printf Error out of memory exit for rand Also your main should be void main void elem you add the rest of the code Recall the duality presented in class is pointer to an elem However we dynamically allocated an array for to point to As result is the first element of that array and is the last element In your quicksort function you can treat as though it was an array of elems Part We will sort an array of pointers to elems printing every for output Only the size of the array in changes Added November Partitioning Example There is very minor typo in the partitioning example On page in the third line it says However since This should be	other	cornell
880	 Server Date Monday GMT Wednesday GMT Topics for prelim Topics For the Prelim Basic constructs basic types int char float double cin cout control statements for loops while loops if switch function declaration reference parameters vs value parameters Complex types strings definition array of characters terminated by functions for manipulating strings strcmp strcpy arrays including arrays structs arrays of structs structs of arrays of etc typedefs const declarations static declarations Pointers declaring pointers operators how to use them understanding programs that contain them pointers to structures field relationship between pointers and arrays indexing pointers and pointer arithmetic ptr arrays and pointers as parameters in functions Classes basic declarations private vs public friend functions vs member functions operator overloading overloading the assignment operator constructors null constructor copy constructor constructor with arguments destructors const member functions Memory Management definitions of static automatic dynamic data using new and delete using new and delete for arrays using new and delete in conjunction with classes shallow copy vs deep copy Software Engineering Programming Style how to divide programs up into and files why divide up programs into and files how to write comments Note you do not have to comment any code on the test unless you are directly asked for comments but some explanations be useful for gaining partial credit if you make mistakes the difference between declarations and definitions interfaces and implementations public vs private member functions and data members of classes	other	cornell
881	 Server Date Sunday GMT Tuesday GMT Lecture REVIEW previous lecture problem algorithm program language computer distinction execution trace program structure output statement conditional expression operators input function CONCEPTS this lecture expressions arithmetic relational logical conditional operator precedence and parenthesization function application convergence divergence strict evaluation programs output libraries READING Teitelbaum Sections Roberts Section Section Expressions Familiar from grade school arithmetic Consist of operators and operands constants An operator applied to its operands is an application are parenthesized to indicate structure Reduce to single value by process of evaluation Evaluation of an expression can be traced The process used in evaluation and tracing is expression simplification Simplification To evaluate expression repeatedly replace an innermost application within by its value using the appropriate rule of arithmetic Stop when has been reduced to single value Note evaluation not required Expressions in Operations Binary Operators Examples Unary Operators Meaningidentitynegation Examples Relational Operators Operator Meaning In relational operations are just arithmetic operations they yield integer values interprets as logical false All other integers are treated as logical true In particular relational operators use to mean true Remember that the equality relation is Using means something else in never use in an expression Examples Expressions in Precedence Parentheses can be used to group operators explicitly In the absence of parentheses operator groupings are determined by operator precedence High Low unary binary An operator with higher precedence groups more tightly than an operator of lower precedence Operators of same precedence group to the left Example groups as The Two Uses of Programs You can always add parentheses to make the intended meaning clear Example is the same as as far as the computer is concerned But to realize that the value of this expression is and not human needs to remember precedence order Programs are written to be executed by computers and to be read by humans In many respects the latter is the most important part My personal rule is to always use parentheses if the meaning of the expression is at all ambiguous Extra parentheses never hurt Expressions in Function Applications name arguments arguments is list of expressions separated by commas The value of this expression is obtained by applying function name to the arguments The number of arguments in the argument list must match the arity of the defined function name There are no functions built into Functions are defined externally by libraries Examples abs sqr GetInteger hypotenuse Expressions in Conditional Expressions condition The value of conditional expression is the value of if condition evaluates to or the value of otherwise Since relational operators use values and for true and false this allows choice of value based on the outcome of relational test But condition is not limited to relations Examples First the condition is evaluated and then either the or the is evaluated but not both Convergence and Divergence Evaluation of an expression diverges if the result of an application is undefined Evaluation converges if it does diverge Example diverges An operator is strict if it evaluates all of its operands It is if it does necessarily evaluate all of its operands Example are strict diverges conditional expressions are Expressions in Logical Expressions Logical operators are used to combine the logical values true and false in various ways andF or FT not FF FF FT TF TT TF In logical values are represented by and so the logical operators are also arithmetic operators Operator Meaningandor not Examples Logical expressions are Programs void main void statements All programs have this general form statements are commands that direct the computer to do something The statements are executed from left to right in order The program stops after executing the last statement Output printf format expressions This is the only statement you need for now Prints output to destination usually window on the screen format is quoted string giving the desired form of the output expressions are the things to be printed If there are no expressions format is just constant string to be output	other	cornell
882	 Server Date Sunday GMT Thursday GMT PSSPD Parallel Solution of Sparse Symmetric Positive Definite Systems PSSPD Parallel Solution of Sparse Symmetric Positive Definite Systems is sparse matrix package for solving large sparse symmetric positive systems on machines This package is implemented in ANSI using arithmetic The Interface MPI is used for communication among processors PSSPD is parallel direct sparse solver It solves sparse symmetric positive system by computing the sparse Cholesky factorization where is permutation matrix PSSPD is designed to be run on all processors in communicator in parallel The sparse matrix and the right hand side vector are distributed among the processors in the communicator However PSSPD does assume any particular distribution of matrix or vector among the processors user guide to PSSPD is available here For further information regarding PSSPD please contact the author csun	other	cornell
883	 Date Mon Dec GMT Server Fri Feb GMT Lab CS Laboratory Phong Lighting Introduction In this exercise you will code the lighting equation as series of compute statements You will bypass the default illumination model which is built into the Image module By doing this you will be able to control lighting effects directly For example you will be able to define spotlight or make the intensity of an object drop off with distance Procedure First you need to download several example files To do this click on each of the filenames shown below When the text window opens use the save as option to put the file in your own directory Name each file with the same name as shown below The program implements spotlight entirely within DX using compute modules Ambient diffuse and specular terms are each computed and added together to obtain the intensity of each point Follow the flow of the program to see how the intensities are computed For the initial program it is assumed that the light is at finite distance from the objects but the viewer is very far away in direction Some examples of the program output are shown below The first shows spotlight oriented along the with width of width of means dot The small white dot is an icon showing where the light is The arrow is an icon showing the direction of the spotlight The next image is the same light position but with the spotlight so that the light is omnidirectional The bright spots on the surfaces near the light are due to large dot in the diffuse term Notice that the diffuse reflection has the color of the surface while the specular reflection has the color of the light white You can turn off the default shading in DX by collecting single AmbientLight with the object you are rendering An AmbientLight ingores normal information All you see is the color defined for the object as if it were lighted from all directions uniformly The example program constructs surface calculates the surface normals then throws away the lighting information to produce an unshaded surface because there is an AmbientLight module The colors you calculate become the color of the objects in the image module Note that you must use the module to show the image because the must be available to the program Do not use an Image this exercise leave the viewing distance at infinity that is leave the Camera module perspective flag at Modify the program to use the dot formulation of specular lighting rather than dot Make an interactor to choose which model you are using All surfaces get more shiny at high angle of incidence Modify the specular term to simulate this effect Below is an example of what the modified program might generate The specular reflection on the vertical plane is releatively diffuse because the angle of incidence is near zero The specular reflection from the horizontal plane is narrow because the angle of incidence is high the light is grazing the surface Clarification You need to make some part of the specular term dependent on the angle of incidence arccos dot The light shown is omnidirectional light The definition of the reflection vector is given on page of Watt The spotlight as given to you has soft cutoff with angle Modify the program so that instead of dropping off as power of cosine the intensity is uniform for angles less than certain value and zero for angles more than that value Angle is measured here from the vector Include an interactor to choose between the cutoff methods The two images below show soft cutoff spotlight and hard cutoff spotlight Note the jagginess at the edge of the hard cutoff light which results from very abrupt cutoff function Try to minimize the jagginess in your program Modify the program to fly the light through scene consisting of few objects The light should be spotlight which flys curved path with the direction of the spotlight tangent to the path for about half the flight then the spotlight should suddenly lock onto one object and remain locked for the second half of the flight One frame of possible animation is shown below Bugs as of The term Ip in the calculation of the specular term should be moved to the final calculation so that dot is calculated The Compute module does not understand transform objects so do use Rotate Scale Translate or Transform modules when you are building your scene Be prepared to demo all of the functions specified in the first three bullets above ambient lighting diffuse lighting light position light directionality and specular reflections of two kinds in one program All interactors should be labeled have appropriate ranges and step sizes and be in no more than two control panels The code should be well documented and organized Be prepared to demo the flying light in separate program What seem to be the differences between the dot and dot specular lighting models in terms of the appearance of objects Write the formula you used to make surface more shiny at high angles Write the formula you used to impelment sharp cutoff spotlight Back to Main Page Go to Lab Last modified Copyright Statement	other	cornell
884	 Server Date Sunday GMT Thursday GMT Huang Favori Links Page Favorite Links Formosa National Taiwan University Computer Science Information Engineering NTU The NTU CSIE WWW Site Taipei Municipal Chien Kuo Senior High School Cultural Division TECO in Houston Taiwan Indenpendence Party UFO News World China Times Taiwan China Times US Chinese Media Information Net Taiwan Chinese Web Home Page Sina Net Chinese Cyber City CNN New York Times USA Today Pictures Hacking Games American Go Association NNGS Home Page Yahoo Computer Games Page WWW Search Engines My Yahoo Yahoo Excite HotBot Lycos Inktomi Total Search Archie Request Form Investments Stocks Fidelity Investments Home Page My Friends Career Center Office of Academic Career Development Office National Association of Colleges and Employers JOBWEB Online Career Center Margaret Riley Internet Job Guide Academe This Week Trinity Partners TNL Internet Solutions Career Sites Asia Net Dream Jobs Map MapQuest Vicinity Corporation City Net Miscellaneous Cornell Library Cornell ISSO SCOLA Home Page Hits World Interactive nest egg Hello China Greyhound Internet Station Student Services fastWEB Financial Aid Search Through the Web Cascade Connections NCSA Home Page Weather Internet Flower Shop Taiwan Love Songs CUCS WWW Statistics Ithaca Internet Classifieds Ithaca MarketPlace Internet Shopping Network Computer Discount Warehouse AT Universal Card Services Universal Communications Network Video On Line Electronic Newsstand Homepage The Electric Postcard Study Aboard Electric Center ROT Last modified Thu Nov	other	cornell
885	 Server Date Monday GMT Tuesday GMT Distributed Systems Research links This page holds some links to other projects or research groups doing work related to the work going on in the Horus group We are aware that this is only very small subset of the actual work going on and apologize for all the omissions If you have link that you think should belong here please let us know Related projects at Cornell The Cluster Communication project Project Zeno and the Continuous Media Toolkit The NuPrl Automated Reasoning System Projects on reliable group communications in more or less alphabetic order Amoeba project at the Vrije Universiteit Amsterdam Mars project at the Technical Universiy of Vienna Navigators project at INESC Lisbon at the University of Newcastle UK Phoenix at EPFL Lausanne Rampart at AT Bell Labs Relacs at the University of Bologna RMP at the University of West Virginia The Team project at the University of California San Diego Totem at the University of California Santa Barbara Transis project at the Hebrew University Comments to Werner Vogels	other	cornell
886	 Server Date Sunday GMT Monday GMT Course Material Additional Course Material Java Textbook Title Java How to Program Authors Deitel and Deitel ISBN Publishers Cost Programs in this book are available at http and at http Other sources of Java programs http Java Virtual Machine detailed specification of the Java Virtual Machine can be found here JVM is stack machine unlike JRM which is register machine but you may find it fun to read parts of the spec of JVM	other	cornell
887	 Server Date Sunday GMT Tuesday GMT SUKHPAL SANGHERA other routes Sukhpal Sanghera Some Routes From My Home CAML Programming Language ML Programming Language Courses Spring Computer Science Technical Reports HTML NewsStand NILE Collaborative Project of Computer Scientists and Physicists in Distributed Computing Horus Group Communication System in Distributed Applications Frequently Asked Questions From Borland Computics and Physics Around the World Particle Data Group Jobs Much Music Paaaaaarty	other	cornell
888	 Server Date Sunday GMT Monday GMT Jean Aswin Swing Dance Page The Jean Aswin Swing Dance Page Upcoming Local Classes by Jean Aswin The Next West Coast Swing Party is on Saturday Nov The next parties are on Nov and Dec PM PM Intermediate WCS Workshop PM PM Dance Location The Greater Ithaca Activities Center GIAC Albany Street corner of Court Street great wood floor Location of the ISDN Record Hops is currently The GIAC Gym at Albany Street SW corner of Albany and Court enter on Court Start time is PM Shout Sister Shout Sequence from our current Intermediate series We teach West Coast Swing Lindy and Jitterbug Click here for information about our upcoming classes There are other teachers teaching Swing and Ballroom There is overview of upcoming classes including other teachers available Class Material Notes Some notes that we hand out to people taking our classes Other Links The Ithaca Swing Dance Network ISDN Home Page The US Swing Dance Server	other	cornell
889	 Server Date Sunday GMT Tuesday GMT Support for Complex Applications using the Horus system Next Introduction Support for Complex Applications using the Horus system Werner Vogels vogels Robbert van Renesse rvr Dept of Computer Science Cornell University Ithaca NY December Abstract distributed application involves more than just protocols for the dissemination of video and audio data As in any other distributed application protocols are necessary that guarantee the consistency and security of shared data objects The Horus system offers framework for building complex distributed systems that involve any number of protocols as well as variety of protocols for the different aspects of distributed application including some protocols specific to applications We believe that this integrated approach is superior to combining different toolkits and illustrate this with detailed example of an existing application Introduction Horus Horus and Conclusion and ongoing work References About this document Robbert VanRenesse Tue Dec EST	other	cornell
890	 Server Date Sunday GMT Thursday GMT Regular Language to SQL Query Translation Translation of Regular Questions into SQL Constructs COM Final Project Report Spring Alfred Hong May Table of Contents Problem Description General Approach Results and Evaluation Discussion Conclusion and References Problem Description Web sites today that provide query to backend database are done mostly via keyword or categorical search forms These search parameters are preselected and usually inhuman Since the query parameters are preselected the answers are fixed and static to the user Replacing these fixed query forms with natural language query could make things more human more natural and more flexible middleware mechanism that converts natural language question into the backend database language to perform the user query request might do the job Since relational databases are very popular SQL will be the target database language for conversion Table of Contents General Approach The approach in general involves Identifying target domain for testing of concepts Researching possible techniques for dealing with the problem Implementation using questions the author came up with Testing out implementations and Refinement and retesting Identifying Target Domain Natural language processing is difficult subject To tackle the focus of this project specific domain is chosen for ideas and The domain of querying for flight schedules is thus chosen Using sample schedule information from USAir flight schedule database the following relational database table definition and record shows the type of information that is dealt with FLTS toCity fromCity beginDate endDate leaveTime arriveTime flightNum frequency stops stopCities meals fare San Francisco CA Ithaca NY PHL With the domain specified certain assumptions are made to simplify the task of natural language question to SQL construct translation Focus on simple queries user usually do not ask complex SQL queries that involve not exists or groupings for instance Time and dates these need special treatment because of the variety and complexity of formats used Query against one database table only dealing with multiple tables is complex task because of ambiguity resolution difficulties with table joins Punctuations not dealt with One sentence questions only Techniques Researched Several possible to tackle the problem were looked at GAP and semantic features with semantic features Procedural semantics and question answering conversational agents Information retrieval concepts and Template matching Of these techniques although some tests were initially done with using and GAP features not with flight schedules the extra and GAP features are really not necessary for the problem Simple with semantic features suffice The idea of using some combination of question answering conversational agents information retrieval concepts and template matching came about from the realization that the number of synonyms and phrasings possible for asking for flight schedule is actually quite diverse requiring rather large lexicon for small domain Table of Contents Results and Evaluation with Semantic Features Because of the nice structured format of SQL queries flight schedule questions can be directly mapped to that of parts of SQL queries As shown in Table for San Francisco can be mapped to the WHERE destCity San Francisco construct and for May can be mapped to the WHERE departDate construct Table Translation Mapping for the Sentence What flights are available for San Francisco from Ithaca for May SentenceSQL What flights are availableSELECT flights FROM schedules for San FranciscoWHERE destCity San Francisco AND from IthacadepartCity Ithaca AND for May The following is the result from parsing the sentence What are the departure times for houston tomorrow SELECT TIME DEPART TOMORROW IAH from to Sample questions for testing were solicited from users given that they need to purchase ticket to San Francisco tomorrow from Ithaca The following are example questions What are the available arrival times for Miami for tomorrow What are the departure times for Houston for tomorrow How many stops are there to San Francisco for flight When does flight arrive in Orlando today What is the cheapest flight available to San Francisco tomorrow Can you book me the cheapest flight can take to San Francisco tomorrow Do need to stay Saturday night to get the lowest fares How many flights do you have available going to San Francisco tomorrow Can you check tomorrow flight schedule to San Francisco for me need to fly to San Francisco tomorrow Is there any flights available Question types can be parsed but not the others for reasons mainly of not anticipating certain words and different sentential structures For results see the results documentation and code As note questions and involve the realization that the cheap concept means SELECT MIN FARE operation is needed Question is type question Question involves COUNT operation and question has sentences that violates the defined assumptions Question Answering Conversational Agents Information Retrieval Template Matching The results of the method could be improved with further refinement as sentential constructs are discovered This is not ideal however which motivates the search for other means of tackling the problem Questions are often asked in bits and pieces this is quite true for querying flight schedules This requires the flight schedule answering system to be aware of what has been asked in session then results can be further refined by the user with several questions Viewed in this way multiple sentences would not be major problem since it is allowed Even though the number of synonyms required are quite large lexicon need to exhaustively cover all possibilities that the user may present to the system For example flight flight schedule schedule reservation refer to the same thing other inferences are possible through other combinations of words with helper words and different word arrangements For instance to go to miami in the context of flight schedules implies flying to miami To parse all possible combinations of questions also require large number of rules The sentences need to fly to San Francisco tomorrow Is there any flight available and the sentence Is there any flight available to San Francisco tomorrow are the same queries Notice however that key phrases are the same to San Francisco tomorrow and any flight The idea is that if these can be identified then maybe sentence boundaries and syntactic structure are not as important and the lexicon need to concentrate only on key Fig Interface of Flight Schedule Query Application To test the idea out application has been written Fig As shown there are several parts to the interface The user inputs queries clicks on the Analyze button and key are extracted from the input and stored Extraction of key concepts is done by regular expression matching with lexicon that ignores irrelevant words akin to in information extraction in the context of flight schedule query In the figure the history text box shows that the concepts flights atlanta and tomorrow are extracted from the sentence which is shown directly under the line Actually the extraction of to atlanta instead of just atlanta would be better for indicating atlanta as destination city is followup question that requests for flights to houston instead The extracted information then is used to do template matching to SQL syntax this has not been implemented yet The user can input successively to refine or change their queries until the Reset button is chosen to restart new session Using also makes it easy to interface to Web page with backend relational database engine Evaluation of this application can not be done since it has not been completely developed yet However the pattern matching and key concept extraction component certainly show promise at this point Thus with combination of question answering conversational agents information retrieval and template matching techniques maybe the flight schedule query problem can be dealt with feasibly Table of Contents Discussion Conclusion and Future There are other problems that were overlooked What if the user mistype their questions What if the user does not follow correct English grammar rules In this case current methods of query on the Web are definitely at an advantage Then again these Web sites are limited and return relatively large sets of data that require further interpretation on the part of the user In general natural language processing is difficult subject Even with specific domain chosen problems are abound In terms of the method if lexicon that deals with all possible flight schedule scenarios is used dates times and flight numbers are given special identification parameters city names with multiple words are given special treatment and grammar rules are refined by repeated testing then query system could be possible However even if the sentences could be parsed the parsed result can not be used readily integrating such system with web is not straightforward because of the resident LISP used for the Even if it is done it is rather resource intensive This led to researching other possible ways to make it more feasible Hopefully the alternative method embodied by the application as discussed in the previous section will prove to be promising Future Work Interface LISP and the to web page Continue work on application over the summer Table of Contents References Allen James Natural Language Understanding ed Redwood City CA Almasi et al Technology to Make Information Available on the Web In Proceedings of the Fourth Workshop on Enabling Technologies Infrastructure for Collaborative Enterprises WET ICE Apr Berkeley Springs West Virginia IEEE Computer Society Press Los Alamitos CA pp Table of Contents	other	cornell
891	 Server Date Sunday GMT Friday GMT publishing with the World Wide Web publishing with the World Wide Web Jim Davis and Carl Lagoze Xerox and Cornell University Abstract The goal of publishing is to simplify digital publishing over the Internet We would like digital publishing of matter technical reports course notes brochures be as easy as sending email is now but with the virtues of archival storage and easy searching that we associate with electronic libraries We propose protocol Dienst to allow communication between clients and document servers by encoding messages within URL preliminary version of this protocol now runs at eight sites and we describe some of its features Next we present tools for automating the maintenance of document collections Finally we discuss the problems had with the Web as it stands hoping to motivate changes that would improve performance of digital library systems such as ours library with no limits However one may sing the praises of those who by their virtue either defend or increase the glory of their country their actions only affect worldly prosperity and within narrow limits but Aldus is building up library which has no other limits than the world itself Desiderius Erasmus wrote these words in praise of his friend Aldus book publisher of the century More than years later digital publishing may finally enable us to fulfill this vision providing universal access to all the world information What in the way The existing technologies WWW gopher and even anonymous FTP make reproduction and transmission fairly fast and cheap but do little or nothing to help writers write or readers find or read documents In our view the problem is that they provide too little structure to the document collection All of them present basically the same abstraction namely hierarchy of files but do nothing to help the user locate file within hierarchy Every site is different Some group reports by year others by project name but even if every site on the Internet organized its hierarchy identically it would not be enough because every site also has its own conventions for naming files indicating data formats and making searchable indices writer who wishes to contribute has basically the same problem easy to copy file into an anonymous FTP area but hard to make sure that it indexed properly considerate writer might want to provide the same document in several formats to increase the chances of accessibility but this is nuisance We claim what needed is new higher level protocol that hides the underlying details and the underlying tools to simply library management This paper presents our first steps towards the universal library We describe protocol for universal access and the server that implements it For those familiar with our server in this paper we describe not the currently running protocol but rather the one we have submitted as an Internet Draft DIENSTPROT which corrects number of design flaws in the working version We regret any confusion this causes We present number of tools that integrate with our server to make publishing document relatively easy We also discuss the steps we took to bring large existing collection online from paper Finally since our protocol is based on the World Wide Web we also describe some of the problems we observed in using it in the hope that others at this conference will have solutions we can adopt Our focus on publishing requires explanation We realize that some content providers will not place their intellectual property on the net until clear definitions of legal rights and mechanisms for payment and protection are in place We have nothing to contribute in these areas Nevertheless there are number of providers such as universities or corporate internal groups for whom these issues are less pressing and we believe that we can thus make some useful contribution without working on the additional issues raised by economics Dienst provides uniform protocol for document access Dienst is protocol for search retrieval and display of documents Dienst models the digital library as flat set of documents each of which has unique name can be in many formats TIFF GIF Postscript and consists of set of named parts Dienst supports interface to this document model Messages may be addressed to every document server to particular server to one document or to particular part of document message is encoded into the path portion of URL and contains the name of the message the recipient and the arguments if any message may be sent to any convenient Dienst server the nearest for example which will execute it locally if or forward it as appropriate Dienst appears to be single virtual document collection and hides the details of the server distribution Note that the actual implementation does not use an object oriented language we use message passing only as convenient conceptual model Each document in Dienst has unique identifier which names each document in manner This identifier called DocID serves exactly the same role as URN and when URNs are fully specified we will adopt them DocId has three components naming convention publisher and number To ensure that each DocID is unique each component or rather the institution that issues each component guarantees that the next component is unique thus each naming convention controls namespace of publishers and each publisher issues set of numbers For each publisher there must be at least one server to handle messages for the documents issued by that publisher In our view the minimum commitment publisher must make to issue document is to store and deliver the document to the network When Dienst server receives message for document it locates the closest server for the document publisher and forwards the message to it Dienst messages address four types of digital library services user interface services which present library information in format designed for human readability repository services which store the document and support retrieval of all or part index services which provide search and miscellaneous services which provide general information about server Of these four services only the first is used directly by human The others used by programs in particular other Dienst servers but also by other digital library or publishing systems For example the Stanford Information Filtering Tool SIFT obtains bibliographic records through the index interface and we are currently designing gateway to the WATERS WATERS system We encourage other developers of digital library systems to provide both and to their systems All services except the last are optional at given site This allows maximal flexibility in the way that particular server implementations interoperate For example one server may exist solely as user interface gateway providing transparent access for users to particular domain of indexes and repositories We see this flexible interoperability as key to the development of digital library infrastructure where the collection will span multiple sites and continents Repository servers store documents in multiple formats key difference between Dienst and other current digital library systems is its ability to represent documents in multiple formats Most current digital libraries present documents in exactly one form PostScript Although PostScript is almost always available for newly produced documents there are problems with relying on it to the exclusion of all other formats First most older works are only available in paper making scanned page images the only practical means of bringing the material online We describe our experiences in doing that below Second looking forward we can expect to see other document representations become popular Surely at World Wide Web conference we can claim that HTML will be used third reason is that for some applications other formats are just better For example if one wishes to do full text indexing on document collection the plain text is more useful than the PostScript file and if one wishes to display just single page collection of page images may be better than searching through PostScript Therefore Dienst conceptual data model allows each document to be stored in one or more formats The Dienst protocol includes message that requests document for list of formats in which it is available We specify formats with MIME MIME Dienst does not support the notion of explicit conversion between document formats as does System Putz repository willing and able to provide document in given format should simply list that format even if it is only obtained through conversion service Diversity is the rule on the Internet and each site supporting Dienst is likely to store their documents in different way The Dienst protocol hides all detail of the underlying storage organization this is in sharp contrast to FTP Gopher and bare HTTP where the underlying hierarchy is visible Each Dienst repository includes function which maps from DocID and format to the actual storage pathname on that server This hides both details of file system structure and file typing or naming conventions from outside users Thus one may request say the second page of the TIFF version of document from server without needing to know where and how it is stored Index servers support search An index server accepts queries in some query language and searches for document records that satisfy the query In our model an index server is totally distinct from repository Repository data is likely to be huge but index servers store only which is quite modest in size The choice of query language is crucial to the power of an index server As we did not wish to make this choice the Dienst protocol is designed with one initial query language and provision for extension to support others Every query language is based on an underlying model for the meta data it queries The initial query language in Dienst assumes minimal data model where documents have an author title and abstract in addition to the publisher and number query may refer to any of these fields if it refers to more than one then the terms are connected with an implicit and Thus one might query for all documents published by author Wilson at publisher Stanford search request returns document of type consisting of records containing on all the matching documents This follows the encoding proposed for Uniform Resource Characteristics URC URC The URC draft proposes fields such as title author and and URL all of which which are obviously applicable we have added number of experimental attributes prototype implementation runs at eight sites An initial version of Dienst and prototype implementation were developed as part of the Computer Science Technical Report CSTR project an effort to create an online digital library of technical reports from the nation top computer science universities This version was installed at the five universities that form the project Cornell CMU Berkeley MIT and Stanford and shortly thereafter at Princeton Dartmouth and Rochester Here we describe few of its features full account may be found in Dienst One uses Dienst by connecting to any convenient Dienst server that supports the user interface services using standard Web client This server will display form for searching the collection Unless the user restricts the search to single publisher all Dienst servers are searched in parallel Each Dienst server is made aware of all other Dienst servers by fetching list of all servers from single central Thus when new server comes online other servers become aware of it after only short time The results from search are displayed as list of the DocID author title and date for each matching document and include URL for each document Selecting one displays the document in more detail including list of the available formats obtained as described above The user can retrieve the document in any of the formats Some repositories include page images as dot per inch GIF files When this is the case the user interface service is able to display the document page at time inline on the user Web client We found that such pages are readable on most monitors and saves considerable network bandwidth compared to the dpi TIFF images In addition some sites also store reduced size thumbnail page images which allow the user to quickly browse through document and then click to view interesting page say one that contains graphic in version Although we do not have any formal user studies anecdotal evidence says that this is very powerful and helpful feature The server also allows the user to download print all or selected pages of the document Local users may print directly while remote users can download PostScript version of the document and then print it manually Since all documents are not available in PostScript the server has the ability to translate from TIFF images to level PostScript on the fly Maintaining the Document Collection Our goal is to simplify the process by which an author publishes digital documents Much of the work in this area is at the document creation layer that is enhancements to HTML HTML editors Our approach is to allow authors to use their traditional text production system LaTeX troff Word etc and then provide tools by which they can submit the results of that text processing to digital library Dienst simplifies digital library maintenance Digital library technology will only propagate beyond the technologically savvy if such systems require minimal human intervention especially by trained experts Two points are obvious First authors are concerned primarily with writing documents and getting them published Submission to digital library should require little more skill than using word processor Second many of the organizations that wish to publish documents government agencies academic departments small companies have little technical expertise These organizations might tolerate the need for reasonable skill level to install digital library system we intend to address the skill level required to install the digital library system in future work However they surely will not tolerate the cost of systems expert to maintain the library At Cornell we have implemented set of tools that mostly automate the process of managing digital library The tools are closely integrated with the Dienst digital library server They are similar in spirit to those implemented for the Wide Area Technical Report Server WATERS system known as Techrep but whereas Techrep is designed to maintain the centralized index and unstructured document repository that is characteristic of WATERS the tools described here are tailored for the distributed indexes and structured repositories characteristic of Dienst Our design goal was to make the digital library maintainable by document librarian DL with relatively computer training This DL serves four major roles as the general manager of the collection as the reviewer of document submissions to protect against counterfeit document submissions as the clearing house for copyright issues and as the archiver of document hardcopy This system has recently been installed in the Cornell Computer Science Department and is now the means for all technical report submissions Authors add documents with an HTML form The submitter prepares document for submission by producing PostScript representation Rather than plethora of document formats from variety of word processors we determined that PostScript represents lingua franca that could be generated from virtually all word or text processing systems We recognize that there will be documents that can not be represented in this fashion but estimate that there number will be very few and that techniques for managing them can be developed as the process matures The author submits document by completing an HTML form that contains text fields for bibliographic data about the document These fields are the document title author pathname of the PostScript file abstract and submitter address The submitter can quickly complete this form by cutting and pasting text from the document source The document librarian validates submissions to the library The document librarian in the role of gatekeeper of the system learns of each submission through an automatically generated message No document actually enters the database until the DL manually checks the submission In addition the DL acts as the legal gateway ensuring that the authors complete copyright release form that gives the department permission to make the document available over the internet When manual checking and copyright clearing are complete the DL uses simple command to assign DocID to the document and signal that the document is ready entry into the database The remainder of the process is fully automated Software that is integrated with the digital library server generates the bibliographic entry from the submitter entry checks the validity of the postscript file builds the actual database entry and generates the GIF images for online viewing and browsing of the document The image conversions in this process are done with the Extended Portable Bitmap Toolkit PBMPLUS PBMPLUS consists of number of filters for conversion between variety of image formats TIFF GIF Bitmaps etc and small set of portable formats and set of tools to perform manipulations rotations color transformation scaling on the portable format files PBMPLUS has the advantages of being free quite reliable usable on wide variety of graphical formats and quite powerful in its basic image manipulating capabilities Document librarian controls document withdrawal library system must be able to handle author requests for document withdrawal The reason for withdrawal may be invalidation of the published research or newly published results in another document For purposes of maintaining the integrity of collection we have made the document librarian the control point for this operation Document withdrawal via simple command replaces the bibliographic file with an entry whose only attributes are the document number and WITHDRAWN flag all other bibliographic information is deleted This ensures that the DocID is not reused for another document Furthermore the withdrawal moves the original bibliographic file and associated image and postscript files to location that is not accessible to the document server Hardcopy is sometimes required While electronic document delivery is the raison of our system we recognize that publication quality hardcopy is sometimes needed The document librarian must produce paper copy for archival storage and for people who do not have electronic access In our system printing of TR is done using package provided by Cornell Information Technologies called EZPUB allows users across campus on various platforms to print to central Xerox DocuTech publishing system This is publication quality printer that offers very and resolution dpi and document setup facilities such as binding different paper types etc With command in the Dienst document management suite the DL can specify that multiple copies of TR be printed on the DocuTech The command does automatic setup of the print job including formatting of standard Cornell Technical Report cover page We have just begun to use this automated system in the Computer Science department at Cornell At later time we will evaluate the effectiveness of the system with special attention payed to the number of documents that require special submission procedure are not translatable to postscript Obviously if the ratio of these is high to the number submitted documents we need to rethink the design of the system Digitizing existing documents is mostly manual task We describe above system for almost complete automation of the document submission process At Cornell we faced the additional task of converting an existing collection to digital form While some of the tools described above were useful for this task large amount of manual intervention was required The Cornell Computer Science Department has been publishing technical reports since As of September the department had published TR with an average length of pages total of over pages The digital record for many of these TR is either not easily available or in format that is difficult to interpret with current hardware and software for example document formatted in an extinct copy of WordStar that is only available on floppies for CPM system The common form that exists for all existing documents is hardcopy the department maintains archival copies of the entire TR corpus production scanning facility on campus allowed the department to convert the entire corpus to group TIFF images Over nine month period all hardcopy pages were scanned to individual TIFF files and downloaded via FTP to disk in the Computer Science Department Each TIFF file ranges in size from around one kilobyte for blank page to almost two megabytes for page that contains high quality photographic image The total collection of pages images now occupies around gigabytes It should be noted that scanning collection even as modest as the Cornell CS TR is time consuming labor intensive and not without problems Even the most careful scanning technician occasionally misses pages skews pages or misses part of page due to unnoticed fold when the page is put on the scanner bed These problems are difficult if not impossible to detect automatically In addition any problems that are detected are computationally intensive to correct For example simple rotation of dpi TIFF image due to incorrect scanning orientation can take up to thirty minutes on reasonably equipped SPARCstation An example illustrates the difficulty of correcting scanning problems We discovered after all scanning was complete that many of our older TR were scanned from pages that were oriented in landscape mode two pages The result was TIFF file containing two page images which made correct page mapping impossible in the document server While it was easy to find files with this problem by reading the height and width from the TIFF header with publically available TIFF package Leffler reasonably quick correction required handcrafting to split the files Even with the handcrafted code the location and correction process took over week of compute time on powerful workstation In addition to manual scanning of documents we also had to manually enter the bibliographic files While it would have been easy to write translators between and other common bibliographic formats such as BibTex refer etc consistent electronic bibliographic format was not available for all the TR The Web is an imperfect document viewing technology Basing our system on the World Wide has had both benefits and shortcomings The obvious benefit is wide availability over publically available browsers The shortcoming is that HTML HTTP and Web browsers lack number of features important for digital document display and navigation In this section we enumerate these features with the goal of inspiring discussion and enhancement of the technologies by the Web community Facilities for display of compound documents The Web has insufficient mechanisms for displaying documents that consist of multiple textual and parts In the electronic mail world this issue is addressed by MIME Multipurpose Internet Mail Extensions MIME Although HTTP uses MIME typing to allow browsers to map to the proper viewer for document documents are allowed to have only single MIME type multipart MIME is not one of them The only facility for documents is the ability to embed images either GIF or Bitmap in an HTML document Yet there are gross inefficiency problems with image embedding since the HTTP browser must initiate an HTTP GET message for each embedded image For document with many embedded images this can lead to unacceptable document download times Furthermore there are other types that one might like to embed in documents for example MPEG clips Ability to display TIFF images Among the many digital image formats GIF JPEG PBM etc TIFF is the most flexible and extensible The TIFF specification is constantly evolving with the latest being Revision finalized in TIFF The most significant evolution from the standpoint of reducing network bandwidth in image transfers is the growing number of compression schemes for TIFF images The ability to display TIFF images in HTML documents would take full advantage of this rich image standard and permit immediate display of images produced by scanners fax machines and most paint and programs without computationally expensive conversion to GIF format Arbitrary rectangle section from the client Viewing of document images on the Web would be greatly enhanced if the user of client were able to select across an arbitrary rectangle in the image and transmit the selected coordinates back to the server The server could then retransmit zoomed image of the selected image if the higher resolution were available which it often is in high resolution TIFF image Image zooming is an important feature when the image being viewed is document page that contains figures or tables with small fonts Client feedback on display capabilities main contribution of Dienst is that it supports the notion of multiple formats for the same document The user can select among the available formats and use the view appropriate for that format We would prefer to at the server end chose the best format to display on the respective client This would be possible if the client HTTP request contained information on the display capabilities of the client system especially display depth and size Authentication The ability to restrict who is able to access document is an essential feature of production digital library While our system is intended for publishing limiting access is required even in this domain say for example documents that should only be read by members of campus community or employees of corporation To do this we require that server be able to guarantee the identity of those making protocol requests Summary We have described system Dienst that simplifies document publishing on the Internet This system makes two important contributions First Dienst provides uniform protocol for search retrieval and display of documents This protocol addresses flexible document model where each document has unique name can be in multiple formats and consists of set of named parts These parts can be physical such as pages or logical such as chapters and tables In addition the protocol allows full interoperability between distributed digital library servers The result is that the user sees single virtual document collection Second Dienst provides set of tools that permit easy management of digital library These tools automate document submission permit document librarian to manage the collection and facilitate the production of archival hardcopy We plan over the next year to build on this technology in number of ways Installation of the digital library server is too difficult We intend to implement tools that will the server The search engine in the current implementation is primitive We intend to include more advanced search engines for example search to make document discovery in collection more powerful and easier The current strategy of conducting parallel search over all servers does not scale over very large number of servers We intend to use about individual document servers to improve the search strategy With this facility one could for example choose to search only those libraries that have high probability of containing computer science documents We plan to examine and possibility incorporate current work on copyright servers so Dienst might be used for commercial documents Finally we hope to use some of the current work in identifiers to refine the method by which documents on the net are addressed in Dienst Acknowledgements This work was supported in part by the Advanced Research Projects Agency under Grant No with the Corporation for National Research Initiatives CNRI Its content does not necessarily reflect the position or the policy of the Government or CNRI and no official endorsement should be inferred This work was done at the Design Research Institute collaboration of Xerox Corporation and Cornell University and at the Computer Science Department at Cornell University References Cohen Danny Cohen Format for Bibliographic Records Dienst James Davis Carl Lagoze protocol and server for distributed digital technical report library Cornell University Computer Science Department Technical Report June DIENSTPROT James Davis Carl Lagoze Dienst Protocol for Distributed Digital Document Library Internet Draft EZPUB Cornell Information Technologies How to Use and the Docutech Printer at Cornell Information Technologies November Leffler Sam Leffler Public TIFF package Available via ftp from MIME Nathaniel Borenstein Ned Freed MIME Multipurpose Internet Mail Extensions PBMPLUS Jef Poskanzer Extended Portable Bitmap Toolkit Available from many anonymous FTP sites including Putz Steve Putz Design and Implementation of the System Document Service Xerox PARC SIFT Online service at http TIFF Aldus Corporation TIFF Revision Specification URC Michael Mealling Encoding and Use of Uniform Resource Characteristics Internet Draft WATERS Kurt Maly Edward Fox James French and Alan Selman Wide Area Technical Report Server Published online in http Biographies Jim Davis works for Xerox at the Design Research Institute consortium at Cornell University which which seeks ways to improve the engineering design process He received PhD in from MIT Media Technology Laboratory His thesis the Back Seat Driver was computer program which provided spoken driving instructions to the operator of car in Prior to that he worked in research and development at number of places including Atari Cambridge Research Laboratory At the DRI he works on developing electronic corporate memory His most recent project is system for shared group annotation using the World Wide Web He also plays electric bass and is learning Dutch Carl Lagoze works for the Computer Science Department at Cornell University as Senior Software Engineer in the CSTR project He received Master of Software Engineering from the Wang Institute of Graduate Studies in After receiving his degree he worked in both academia and the commercial world developing tools for the generation of editors Over the past two years he has discovered the joys of digital libraries and the fascinating world of information capture and access From the view of his friends he is doing something on that information superhighway Lagoze is also the proud parent of the cutest baby ever and an avid cyclist and canoeist contact author davis	other	cornell
892	 Server Date Sunday GMT Wednesday GMT Class List Fudan Classmate List Picture of the Class China Section Huang XuanJing Ye DanJin csli Zhao Jie hkcc Bao Lu lbao Mao DiLin dlmao Wu ChengRong cwu Ye XiaoMeng sherman Lin Li ssysc Zhao Bin ssysc Hua LiXin Shanghai People Insurance Company Pudong Branch Fan Lei fanshi Zhang Yiming wind Huang Bangyu ben ben Current Wang Haibo wang Chen Ying Xie Jie bullsha Liu Jun stefan Lee liyege yglee Wang Ji wj Xu JunJie jimmyxu Wu XueBo Hua YiXing Ask ChengRong Wu Shen Yu asunaro Li Shen Computer department Bank of Communication Head Office Xian Xia Road Shanghai Japan Section Zhang YiQiang Henry henry Address NANAKUBO JAPAN Tel home Fax home henry Tel office Fax office Singapore Section Zhang XiaDong zhangxd Fan Shiqing sqfan Zhu Chang Ask Shiqi Fan USA Section Wu JianMing SLC UT Tel jwu Jiang Nan njiang Zhang LiXin MEB CS dept Univ of Utah UT lizhang Du Fan dufan Lin Ling llin Zhou Yi Tan Lei Raymond lei raymondt Tang WeiYu wtang Wang HaiHong whh Song SunTian eagles esong Yan Zhimei mayy Cheng Xun Home Santa Ynez Apt El Colegio Goleta CA Home Ph Birthday or Office Ph xun Xiang YuanYuan yuanyuan Guo HaiYing hguo Jin Jing jing Ye Yan yye Address Henderson St Apt Bloomington IN Phone Yu Yingjun Zhou LiDong ldzhou send mail to all Last updated on Please send comment report changes to ldzhou	other	cornell
893	 Server Date Sunday GMT Thursday GMT Cornell Info sites Cornell Info links Cornell CS Technical Reports CUINFO Cornell Gopher Directions to and from Cornell Cornell Directory Cornell Staff Directory Cornell Student Directory Courses Classes Exams Cornell Calendar Cornell Arts Music Bailey Hall Concerts Cornell Musical Events Ithaca Weather Forecast World News Briefs USA Weather Map Beginner Guide to HTML	other	cornell
894	 Server Date Sunday GMT Friday GMT Resume Front Page Yoosun Resume Cover Page Resume	other	cornell
895	 Server Date Sunday GMT Saturday GMT The Real Anindya What Anindya really looks like am the guy on the left cool Back to Anindya Homepage Back to Cornell Computer Science Homepage	other	cornell
896	 Server Date Sunday GMT Sunday GMT Kolla so called friends If your name is not here and you think you are my friend please feel free to inform me Sorry for that My friends Maybe not Krothapally Sudha Doppalapudi Ravi Kiran Maddiptla Adarsh Tummala Sudheer Chaparala Sandeep Kalari Parichai Aerrabaotu Rajashekar Pavuluri Kiran Kumar Seelam Rajashekhar Reddy Joseph Basani Kura Devender Galla Narsimha Rao Tattukulla Bhramaramba Kallem Murali Gudipalli Sugadeesh Kadapa Vijay Kumar Pasha Abdul Hadi Gouse Rajeev Nagabhrava Prashant Reddy Damalaceruvu Amith Yamasani Avinash Gupta Kartik Kapadia Hrishikesh Dixit Vadi Praveen Kumar Ahuja Vineet Balaji Iyer Joseph Mathews Pinisetti Nitish Pinisetti Nandita Narayanan Arvind	other	cornell
897	 Server Date Monday GMT Wednesday GMT General Information	other	cornell
898	 Server Date Sunday GMT Monday GMT Jon hotlist Selections from my hotlist Politics Welcome to the White House National Performance Review Home Page Government Politics Central Intelligence Agency Home Page The Department of the Treasury Internal Revenue Service Constitution Table of Articles Commercial CD Connection Commercial Services on the Net Mother Jones CyberDeals Ordering Info Internet Shopping Network PERIPHERAL PRO Global Electronic Marketing Service Internet Mall Reference Reference Reference Works Index to Multimedia Information Sources The Jargon File Hypertext Webster Interface Computing Linux Documentation Project The Python Programming Language League for Programming Freedom Resources The tcsh man page Miscellaneous Xerox PARC PubWeb Server Welcome to Danfuzz World World Wide Web of Sports CYBERSIGHT Carnegie Mellon University CALIFORNIA Banned Books Netsurfer Digest Home Page The Beer Page	other	cornell
899	 Server Date Monday GMT Saturday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
900	 Date Mon Dec GMT Server COMPUTER SCIENCE COURSE DESCRIPTIONS COMPUTER SCIENCE DESCRIPTIONS OF COURSES Note Courses in brackets are not offered this year The Department of Computer Science is part of both the College of Arts and Sciences and the College of Engineering COM Fundamental Programming Concepts COM Introduction to Computer Programming COM Introduction to Computer Programming COM Introduction to Computer Programming COM The Computer Age also ENGRG COM Creating Web Documents COM Computers and Programming also ENGRD COM Structure and Interpretation of Computer Programs also ENGRD COM Taste of UNIX and COM Introduction to Scientific Computation also ENGRD COM Discrete Structures COM Introduction to Digital Systems and Computer Organization COM Introduction to Theory of Computing COM The Science of Programming COM Programming Languages and Software Engineering COM Data Structures COM Programming Languages and Logics COM Introduction to Compilers and Translators COM Practicum in Compilers and Translators COM Systems Programming and Operating Systems COM Practicum in Operating Systems COM Computer Graphics and Visualization also ARCH COM Practicum in Computer Graphics also ARCH COM Numerical Analysis COM Parallel Computing for Scientific Problems COM Introduction to Database Systems COM Practicum in Database Systems COM Distributed Systems and Algorithms COM Robotics and Machine Vision COM Robotics and Machine Vision Lab COM Foundations of Artificial Intelligence COM Practicum in Artificial Intelligence COM Introduction to Theory of Computing COM Introduction to Analysis of Algorithms COM Applied Logic also Mathematics COM Independent Reading and Research COM Programming Languages and Software Engineering COM Modern Programming Languages COM Practical in Distributed Systems COM Practicum in Distributed Systems COM Computer Architecture COM Parallel Computing for Scientific Problems COM Robotics and Machine Vision COM Robotics and Machine Vision Lab COM Introduction to Automated Reasoning COM System Concepts COM Advanced Programming Languages COM Compiler Design for Architectures COM Concurrent Programming COM Advanced Systems COM Theory of Concurrent Systems COM Frontiers of Parallel Computer Systems COM Topics in the Theory of Distributed Systems COM Matrix Computations COM Numerical Optimization and Nonlinear Algebraic Equations COM Numerical Solution of Differential Equations COM Multimedia Systems COM Robotics COM Robotics Laboratory COM Machine Vision COM Natural Language Processing COM Reasoning about Knowledge COM Reasoning about Uncertainty COM Analysis of Algorithms COM Theory of Computing COM Introduction to Symbolic Computation COM Computational Geometry COM Computer Science Colloquium COM Seminar in Systems and Methodology COM Seminar in Programming Refinement Logics COM Topics in Parallel Architectures COM Topics in Computer Graphics COM Seminar in Programming Languages COM Topics in Numerical Analysis COM Seminar in Numerical COM Seminar in Distributed Systems COM Seminar in Natural Language Understanding COM Dynamic Manipulation and Scientific Computation COM Robot Cafe COM Proseminar in Cognitive Studies II also Cognitive Studies Philosophy Linguistics and Psychology COM Seminar in Natural Language Understanding COM Seminar in Computational Algebra COM Seminar in Theory of Algorithms and Computing COM Special Investigations in Computer Science COM Special Investigations in Computer Science COM Special Investigations in Computer Science Search the Courses of Study Go to College of Engineering Course Descriptions page Go to Courses of Study home page Write to with your comments and suggestions	other	cornell
901	 WWW Alert Redirection response from server is not handled by this client Date Mon Feb GMT Server Location http Document moved Document moved This document has moved here	other	cornell
902	 Server Date Sunday GMT Thursday GMT Home Message of the Week As of Hope you guys had fun solving those word problems probably about as much fun as had grading them Next up is prelim good we in the home stretch Course Description CS is credit course that introduces fundamental computer programming and concepts Programming projects are written in the programming language Some assignments will also use Matlab CS assumes no prior knowledge of computing and has no prerequisite computer science courses However majority of the students in recent years have had some programming experience prior to taking The course may be taken for letter grade or if your college or program advisor allows it General Information CS Instructors Tim Teitelbaum Upson Mike Godrey Upson Office Hours Tu Th Hal Perkins Upson Office Hours Th Todd Wilson Upson Office Hours Tu Teaching Assistants All ocnsulting hours in Upson Andrew Chew Upson achew hours open by appt Patrick White Upson white hours open by appt David Wu Upson Usually in office TR hours open knock on Upson first by appt dwu Course Administrator Laurie Buck Upson Office Hours pm and See Laurie to take care ofadministrative problems not related to the technical content of the course including scheduling conflicts for exams and errors in posted grades Undergraduate Office Upson Open Tutoring All tutoring by TA will be out of Upson Call or visit the Undergraduate Office to sign up for tutoring appointments if you are having trouble with the course You must sign up at least hours in advance If you need to cancel an appointment you must call the Undergraduate Office in advance If you miss two tutoring appointments without calling to cancel you will not be given further appointments Lectures Lectures for and meet at the same times The first five lectures August through September for both and will meet in Olin at and Beginning Tuesday September lectures for CS and CS will meet separately Lecture section numbers times and rooms are as follows Lectures CS Sections CS Sections DayTimeRoom meeting at on Tuesday has been canceled If you are registered for that section you should attend section instead Sections are required part of the course used to clarify topics covered in lecture discuss programming problems and work additional problems and exercises Graded programs and exams are returned in sections and sample solutions and practice exams are handed out there All sections for CS each week will cover the same topics However there will be some variations in problems and exercises depending on the instructor and the interests of the students in each section Computing Facilities Programming assignments will use Metrowerks CodeWarrior programming environment on Macintosh computers The computer room in the basement of Carpenter Hall is the primary lab for CS CS students have priority in this lab and this is where you will find CS consultants extra copies of handouts unclaimed work and posted announcements and grades There are around Macintosh IIci computers in the Carpenter lab each with of main memory and MB hard disk running Apple System The Carpenter lab is open when the Engineering library is Normal hours are Sat Sun Hours will be restricted during vacations and university holidays Although Carpenter is the primary lab for CS CodeWarrior is available on all of CIT public Macintoshes that have enough disk space and RAM to support it During peak periods you may want to use machine at another location to avoid long lines in Carpenter No food or drink is allowed in the computer labs Please keep the area clean and recycle Consultants On duty in the Carpenter Hall basement daily and most evenings starting The exact schedule will be announced in class and posted in Carpenter Consultants will Help you find program errors Consultants will not fix your programs for you they will suggest how you can find errors and fix them yourself Receive assignments Return prelims and programs that were not picked up in sections Bring you ID card with you when you pick up an exam Receive regrade requests Provide tutoring but only during slack periods Texts and Other Materials Text The Art and Science of by Eric Roberts recommended Getting Started with Matlab by Rudra Pratap optional The readings listed in the syllabi are suggested readings to help you follow the lectures and section material Exams in CS are not based on the reading list they are based on material covered in lectures sections and assignments You are not responsible for material in the book that is not covered in class Handouts Distributed in class limited of extra copies will be available in Carpenter Communications Announcements are posted on the bulletin board to your right as you enter the Carpenter lab and are on the newsgroups Software Cornell Information Technologies CIT provides Metrowerks CodeWarrior and Matlab on all of its public Macintosh computers To access Matlab you will be given user name and password all students in CS use the same user name and password Do not give this password to others Do not forget the password The course staff has been instructed not to give the password to anyone If you forget it you will have to see your instructor Disks You will need few inch floppy disks for your programming assignments No student files may be left on CIT public machines they are cleanedout every day You must store your files on your own floppy disks You also should keep copies of all your work on separate disks This site is under construction Sorry for any inconviences Last Updated on Sunday October If you have any comments or suggestions please email them to dwu	other	cornell
903	 Server Date Sunday GMT Saturday GMT Image and Video Transition FX for Rivl Image and Video Transition FX for Rivl Fernandez Valerie Ohm and Amith Yamasani October Overview Rivl is language extension to for manipulating images and video sequences It comes with set of primitives such as fade rotate overlay etc The purpose of this project is to extend the set of primitives and use them for creating complex transitional effects between two images or video sequences Deliverables set of primitives to create transitional effects between two images or on one image by creating sequence of intermediate images Effects would include Flip Deform Squish Peel Melt Morph The same transitional effects on video sequences Milestones Study the implementation of Rivl and understand the internal representation of images and video sequences Work on some of the simpler transitional effects such as Flip Melt and Peel Get these effects working on single image and on transition between two images The algorithms will be modified to work on video sequences Implementation of the other effects like Squish and Deform to work on both images and video sequences Test the functions extensively and optimize them for maximum speed If time permits Create simple interface to accept points on two images and use the points as references for the morphing of one image to the other Documentation parts of which could be done concurrently with the coding and testing Technical Overview The effects Flip This is basically shearing operation with fixed line on either of the two axes The parameters would be the position and orientation of the fulcrum the image and the angle through which to flip the image In the case of flipping video the frames would be processed one by one with the angle increasing gradually Melt The image seems to melt into liquid and flow down out of sight This would involve generating random smooth wave and shearing the image with the wave The wave would also have to change in shape gradually so that it does look like curtain falling This effect simulates the folding up of piece of paper over and over again How the image is to be folded can be determined by parameters to the function The image can be folded as an opaque piece of paper or as transparent one Peel This is real cool effect like peeling off sheet of paper placed over another one Even video sequence can be peeled off to expose another sequence The direction of peeling can be specified as parameter This effect could be extended to rolling it away like scroll Squish Squishing an image would cause it to get compressed with bulge in the middle is variant of this where the squishing is little springy This involves shearing the image unevenly applying sine function to the shear and gradually increasing the amplitude of the sine wave Deform Deforming an image would involve squeezing rectangular image into nonrectangular area which could be quadrilateral or an oval First the image would be resized in both dimensions to fit the bounding rectangle of the destination shape and then it would be sheared to fit the actual shape In most of these effects as one video sequence gets transformed the next sequence fills the background	other	cornell
904	 Server Date Monday GMT Monday GMT Instruction Set Simulator Back to Home Page Project Instruction Set Simulator Date Assigned March Date Due March Before new processor is built the architects usually implement an simulator This simulator runs programs written for the new architecture so that the instruction set can be for usability and work on software can be started before the hardware is available This assignment involves the implementation of simulator in assembly language We will give you an assembly language program which accomplishes part of this task and you will add whatever assembly language code is necessary to make the simulator fully functional This project is due Thursday March at the start of class You are encouraged to work in groups of at most two in building this program The completed program should simulate machine language instructions stored in simulated memory The simulator should Actually only implement physical memory address through An attempt by simulated instruction to fetch or store memory address in the range through should cause an exception Memory fetches and stores to addresses in the range through should cause input or output to occur memory fetch to an address in this range should cause to be printed out in hexadecimal followed by question mark The simulator should then accept hexadecimal constant to be input from the keyboard and should return that input as the fetched word memory store to an address in this range should cause to be printed out in hexadecimal followed by colon and the value to be stored also printed in hexadecimal When started your simulator should enter an input loop which allows values to be entered into the simulated memory The input loop should behave as follows Read hexadecimal constants one per line The first will be count in words the second will be legal memory address Your simulator should then read hexadecimal constants per line the first at memory location the second at and the last at This should be repeated until count of is input The simulator should then start executing instructions from location Once the simulated processor has executed HALT instruction the simulator should print in hexadecimal the contents of registers PC status register bits and the contents of its memory addresses through Since there is no mechanism for creating reset or device interrupt in the software simulator these interrupts need not be addressed What to Modify Make the following modifications to the instruction set simulator Remove any bugs which might be lurking in the loop Complete the implementation of any opcodes which are missing or not fully implemented Complete the implementation of any Bcc cases which are missing or not fully implemented Implement the cases in LOAD and STORE Make HALT compliant with the specification Make sure that the simulator reads to valid memory locations in all cases In particular look at the implementation of RTI and at the interruption handler When could these routines make invalid memory accesses Fix any problems that you find If bad memory access of this sort occurs in the interruption handler or in the RTI implementation print an error message and halt the simulator Make any other modifications necessary to bring the simulator into compliance with the specification Mark your modifications in the simulator source code with highly visible comments Rows of asterisks accompanied by word or two explanation of the type of modification are recommended reader should be able to easily distinguish your modifications from the original source code Examples rts and What to Hand In Please hand in the following in single envelope marked clearly with your name hardcopy of the full source of the completed simulator program hardcopy of the ouput produced by the option for the simulator run on the example given in the Specification hardcopy of the output produced by the Run option for the simulator run on your own additional test cases disk containing the assembly language for your simulator clearly named Back to Home Page	other	cornell
905	 Server Date Sunday GMT Monday GMT CS Final Report Parallel FFTs FFTs are currently calculated in phase cycles of communication and computation the number of cycles being equal to the number of dimensions of the problem The communication phase is distributed matrix transpose and is implemented with an personalized black box function So dimensional FFT would need cycles phases FFT distributed transpose FFT distributed transpose Data is initially distributed such that each processor has an rowsxcolumns block of the matrix column block distribution number of rows columns of the problem size and respectively the number of processors Each process then computes the FFT of its local data and calls the distributed transpose function which results in each processor having matrix of size The FFT of this matrix is computed followed by another distributed transpose phase Problems in the communication phase Motivations Implementing the distributed transpose operation as black box can be inefficient due to unused processor cycles while waiting for and sending data and idle floating point units while doing the sends and the recieves The function starts by collecting data for all the processors so that the data is stored linearly and can be sent directly to the other processors The nth rows of columns each goes to the nth processor so the collecting is done trivially block copying column at time the matrix is stored in column major Once that is done the processor sends out signals to all other processors indicating that it is ready to recieve data from the other processors and then proceeds to send its data to the other processors when it recieves ready signal from the processors It then waits for all its incoming data to arrive and then does transpose on the local buffer The recieving end At the recieving end the processor wastes processor cycles while waiting for data from all processors to arrive so it can do transpose on the buffer Synchronization wait It also wastes the FPUs the has while doing the flow control and operations of data from the network interface to memory since these require only integer arithmetic The sending end The sending end suffers lot of overhead if the message being sent is greater then in length see section The thrust here is to break one big message into number of messages smaller than Eliminating Synchronization Waits We try to eliminate synchronization waits by performing operations on the small blocks that are exchanged between processors thereby shifting stance from collective communication to communication This requires modification in the initial data distribution to lead to an efficient implementation of the computation which changes to column cyclic The distributed matrix transpose phase changes to collecting block for processor and performing the last part of the computation of cycle on that block before sending it to the processor As the distribution is column cyclic the data has to be collected in rows of stride The processor that recieves the block transposes it and performs the first part of the computation of cycle that is to be applied on that block and scatters the data with stride across the rows This loop is unrolled once so that processors do not waste any time waiting for data That is every time the processor polls the network for an incoming packet it gets the data it needs and can operate on it see figure So forms of waiting are eliminated The need to wait for all blocks since we can operate on each block independently The need to poll the network for each block since we unroll the loop and schedule the communication so that we get the packet every time we poll the network Once processor has got all its data it can perform the main body of the computation Limitations We find that the cost of copying the data into and out of the message packets is prohibitive sAs the data has to be gathered before sending and scattered after recieving with stride we can do only an element wise copy of the data and that is very inefficient Limiting packet size The implementation of Active Messages over the sends messages in chunks Messages greater than have to wait for an acknowledgement from the recieving processor before the next chunk can be sent and therefore suffer the entire roundtrip latency of the network The call to therefore does not return till all chunks have been sent To avoid this overhead we send packets of size so that can return immediately and the processor can get its next packet ready for sending This allows some parallelism in the send operation Each message is collected from the packet of size collectd from the matrix as described in the previous section with row stride and column stride of rows in packet of columns in packet After collecting packet the last part of the computation of cycle is applied to it before sending it At the recieving end each packet is transposed and the first part of the computation of cycle is applied to it followed by scatter operation into the buffer with column stride The elements of each column are copied contiguously This is done number of times till the buffer has received all its data or till the sending side has finished sending the buffer Note that as in the previous case the loop is unrolled so that each processor is sending data to processors and recieving data from processors to avoid waiting for packets from the network Limitations We find again the cost of the copying between buffers to be prohibhitive to attaining good efficiency Note that the copying in this case is more than the copying in the earlier case as we have to collect data with stride from the main array into the buffer as in the previous case and then from there copy data into packets with row and column stride and respectively to be sent through the network At the recieving end the packet is copied into the buffer with column stride After all the packets have arrived the buffer is merged into the main buffer with contiguous copy of all columns lot of this copying is element wise except for the copying of the of the packet into the buffer and the into the main array which is done column wise and therefore we can not take advantage of block copying functions here Results Conclusions and future work We have seen that this approach will not work as is due to the copying and computation overhead it introduces Our next step will be to look into how these overheads can be removed	other	cornell
906	 Server Date Sunday GMT Friday GMT Fall Homework Sets Fall Automata and Computability Theory Homework Sets Click on for postscript version Homework Due Solutions Homework Due Solutions Homework Due Solutions Homework Due Solutions Prelim Solutions Homework Due Solutions Alternative solution for ii from Francis Homework Due Solutions Homework Due Solutions Homework Due Solutions Prelim Solutions Homework Due Solutions Homework Due Homework Due home page	other	cornell
907	 Server Date Sunday GMT Friday GMT is toolkit for interactive development of graphics in multimedia and applications is an extension package to the scripting language Graphics rendering for the Microsoft Windows environment is implemented over the Microsoft is designed to develop fast graphics applications for desktop computers It provides an for easy interactive development of graphical environments such as Games Virtual Reality Video Conferencing Virtual Seminar Rooms etc can be embedded into GUI as well as scripted to provide near animation This toolkit is intended to work in any or without any hardware accelerator available for graphics support has been developed as research project by the Multimedia Research Group Project Zeno at Cornell University Department of Computer Science An Introduction to and DirectX is programming system developed by John Ousterhout at the University of California Berkeley and now at the Sun Microsystems Lab which is easy to use and which has very useful graphical interface facilities Tcl tool command language is the basic embeddable scripting language while Tk toolkit is graphical user interface toolkit based on Tcl for constructing widgets has been implemented over almost all the existing platforms Also it provides core library to develop extension features to the toolkit Microsoft DirectX Software Development Kit provides set of APIs that provides the developers with the resources needed to design applications such as the next generation of computer games and multimedia applications is an API that provides advanced software solutions for typical provides interface that allows applications to easily implement complete graphical system and interface that applications can use to take control over the rendering pipeline as well as the accelerator hardware Manual CommandsThe interpreter and script commands to implement graphics GE LibraryThe Graphics Engine library of functions which extends the use of	other	cornell
908	 Server Date Sunday GMT Thursday GMT CUCS Hockey Home Page Welcome to CUCS hockey Schedules The schedule for the season The schedule for public skating Skaters new and old should try to make it and work on their skating The Hockey Czars Takako Hickey Nick Howe Dave Walker who needs to get home page Jason Hickey Becoming new player In order to become new CUCS player you must meet one of the following critera You must be graduate student faculty staff or researcher in the CS department or You must be significant other of any of the above or You must be sponsored by someone who is already CUCS hockey player If you are sponsored by someone then you are allowed to play with us for up to scrimmages If everything works our for you and for us then we will deem you CUCS hockey player If things do not work out we do not like your style of play then we will politely refuse your request to become player There is one exception to this policy We maintain list of people who play goalie whom we call if we are short for scrimmage If you would like to get on this list drop us line Keeping in touch We maintain two mailing lists and one newsgroup The mailing list for general announcements Scrimmage announcements and team rosters will be sent to this list You probably want to be on this list Send mail to hockey cs to get on it The mailing list for CUCS hockey discussions Anything that might be of interest to CUCS hockey players but is important enough to post to local newsgroups that is gatewayed to cs Anything posted to is resent to Anything sent to cs appears in This newsgroup is only available to people with CUCS accounts If you have problems accessing newsgroup link click here CUCS Hockey Lore Notes from Rhonda talk In DVI and Postscript form Here you will find basic explaination of the game rules tactics etc Lynah Rink Rules and Policies Please read this An explanation of how the CUCS Hockey finances work Information about CUCS Hockey equipment rentals Photo gallery Hockey around the Web NHL Home Page at Hawaii Klootzak Internet Hockey Archive Today NHL Games The FAQ part and part NHL Schedule Team home pages If you have problems accessing newsgroup link click here This page is maintained by the Hockey Czars hockey Comments and suggestions are welcome Click here to send us mail	other	cornell
909	 Date Mon Dec GMT Server Thu Jun GMT Lab CS Laboratory Parametric Surfaces Introduction This exercise is concerned with building surfaces for computer graphics It will introduce various types of parametric surfaces Procedure First you will need to download two files To do this click on each of the filenames shown below When the text window opens use the save as option to put the file in your own directory Name each file with the same name as shown below After downloading the files start DX then open and execute Each module when opened has explanation of its function One of the Compute modules performs the main operation of mapping grid to coordinates to make the parametric surface The others just produce pi and produce the variables Assignment Quadric surfaces Modify the Compute in to produce unit sphere Use another Compute module to convert the sphere to superquadric That is if the vector is quadric surface then is superquadric surface where the power of vector just means the power of each term Try values of from to or so You will need to handle negative values of and in the compute Make the value of set by an interactor The two images below show sphere modified by and respectively Figures of rotation Modify the program to produce figure of rotation given by cylinder radius where is the axis of the rotation Modify the program to produce figure of rotation which approximates the shape of drink bottle The bottle should have at least neck and body with bottom Two bottles modeled in spring are particularly elaborate juice bottle Coke bottle Bottles modeled in beer bottle vase soda bottle Note that the form used in compute module is conditional If is not equal to zero then do else do This allows arbitrary functions to be constructed For example try to make funnel Modify the original program to convert the torus into spiral spring with four complete turns Animate the spring so that one end of the spring remains fixed and the other end undergoes simple harmonic motion The spring should not pass through itself and the motion should repeat every frames Model sphere which moves sinusoidally that is with the end of the spring and appears to be attached to the spring One frame of an animation is shown below Bugs as of The comment in the Construct module is incorrect It should read make grid spanning to Be prepared to demo and explain the superquadric function your soda bottle and spring animation The Lab grading guide will be filled out by consultant during section to evaluate your work Back to Main Page Go to Lab Last modified Land Copyright Statement	other	cornell
910	 Server Date Monday GMT Monday GMT Mesh Generation Mesh Generation Paul Chew My work on mesh generation has been motivated by the finite element method widely used technique to obtain approximate solutions to partial differential equations The first step of this method is to divide the given problem region into elements creating mesh number of algorithms have been developed to automate this process but most of these algorithms do not provide guarantee about the quality of the resulting mesh for instance an element may cross region boundary or there may be some flat triangles leading to poor error bounds have developed efficient techniques for producing meshes of guaranteed quality for problems in the plane and for curved surfaces the elements produced are all triangles that are close to equilateral in shape all region boundaries are respected and the user can control the element density producing small elements in interesting regions and large elements elsewhere am working to extend this technique to full problems producing tetrahedral meshes Example Mesh Example Surface Mesh The Mesher in Action postscript animation of the mesher at work The colors represent grades for the various triangles red implies bad shape yellow implies too large blue implies boundary is too long and green implies all right An Interactive Meshing Demo Mesh polygonal shape of your own choosing The input for this is currently very slow the whole demo is still being modified Some References Paul Chew Mesh Generation for Curved Surfaces Proceedings of the Ninth Symposium on Computational Geometry ACM Press Paul Chew Triangular Meshes Department of Computer Science Tech Report Cornell University	other	cornell
911	 Server Date Sunday GMT Saturday GMT Expanding Your Horizons Expanding Your Horizons Expanding Your Horizons in Math Science and Engineering is program for middle school girls designed to encourage them to study science and math The first EYH conference was held at Cornell in and involved about girls and their parents Since that time the program has expanded and in workshops were offered and nearly girls from all over Tompkins County participated Why EYH The Text The Data The Doonesbury Cartoons How does EYH work From the recruiting brochure What this Expanding Your Horizons Conference about It an opportunity for girls in grades and their parents to learn about careers that use mathematics and science You get information straight from the source Come meet women who are doctors engineers computer scientists biologists chemists veterinarians You can ask them questions like In your lab do you work with other people or What was your favorite class in high school See for yourself how important mathematics and science classes are What will do activities You have chance to perform scientific experiments work with computers study barnyard animals and lots of other great stuff And what is really great is that you get to choose which workshops you want to go to and we do our best to make it so Each will have cool science mathematics or engineering activities and women who are real scientists engineers or mathematicians What do get You get fun day filled with great science engineering and mathematics activities folder full of interesting materials about mathematics engineering and science lunch and science toy What do the accompanying adults get to do There will be special workshops for the adults to show them how to help you explore mathematics science and engineering If they have any questions about careers for women in mathematics science and engineering there will be plenty of professional women to offer answers The adults will get to go with you to one or two workshops and see all the cool stuff you are doing Above all there will be plenty of coffee for them to drink Computer Science Workshop The Computer Science workshop is called Image Processing In it we show girls how computers store and manipulate pictures We use program called popi to manipulate pictures of the girls Click here for our handout on Image Processing Click here for some manipulated pictures	other	cornell
912	 Server Date Sunday GMT Thursday GMT Joint Partners Joint Partners If you are working with partner for the current problem set fill out the form below This will join your NOODLLE directories for this project This means that you will both be able to work on the same files in your combined current directory None of you other directories will be effected Your Login Your Password Partner Login Partner Password	other	cornell
913	 Server Date Sunday GMT Tuesday GMT online papers by Jim Davis publications The documents contained in these directories are included by the contributing authors as means to ensure timely distribution of scholarly and technical work on basis Copyright and all rights therein are maintained by the authors or by other copyright holders notwithstanding that they have offered their works here electronically It is understood that all persons copying this information will adhere to the the terms and constraints invoked by each author copyright These works may not be reposted without the explicit permission of the copyright holder publishing with the World Wide Web Int WWW Conference Also available in postscript Dienst An Architecture for Distributed Document Libraries Communications of the ACM April Vol No page Also available in PostScript Shared Annotation for Cooperative Learning submitted to Computer Support for Cooperative Learning conference pages Dienst Building Production Technical Report Server Chapter in Advances in Digital Libraries Springer Verlag	other	cornell
914	 Server Date Monday GMT Wednesday GMT Audio System For Technical Readings Abstract Topic Audio System for Technical Readings Time Date January Place UpsonHall Cornell University Ithaca NY The advent of electronic documents makes information available in more than its visual form information can now be We describe computing system AsTeR that audio formats electronic documents to produce audio documents AsTeR can speak both literary texts and highly technical documents presently in La TeX that contain complex mathematics Visual communication is characterized by the eye ability to actively access parts of display The reader is active while the display is passive This role is reversed by the temporal nature of oral communication information flows actively past passive listener This prohibits multiple views is impossible to first obtain view and then look at details These shortcomings become severe when presenting complex mathematics orally Audio formatting which renders information structure in manner attuned to an auditory display overcomes these problems AsTeR is interactive and the ability to browse information structure and obtain multiple views enables active listening Raman raman Last modified Wed Aug	other	cornell
915	 Date Mon Dec GMT Server Complete List of Cornell Web Pages CUinfo List of WWW Sites This list is sorted in alphabetical order and includes all World Wide Web home pages at Cornell with the exception of personal home pages If you would like to to have your Web page listed here please fill out this registration form or send with URL to Search the complete list of Web pages at Cornell Acacia Fraternity Academic Technology Center Cornell Information Technologies Academic Technology Services ATS Administrative Systems Distributed Technologies Advanced Electronic Packaging Facility Aegean Dendrochronology Project Africana Library Africana Studies and Research Center Agricultural and Biological Engineering Department of Agricultural Experiment Station Geneva Agricultural Resource and Managerial Economics Department of Agriculture and Life Sciences College of Agriculture Energy Program Air Force ROTC Cadet Wing Alpha Chi Omega Sorority Zeta Phi Chapter Alpha Chi Rho Fraternity Alpha Epsilon Pi Fraternity Beta Chapter Alpha Gamma Rho Zeta Chapter Alpha Omicron Pi Sorority Epsilon Chapter Alpha Phi Alpha Fraternity Alpha Chapter Alpha Phi Delta Chapter Alpha Sigma Phi Iota Chapter Rockledge Alpine Ski Team Alumni Affairs and Development Division of Alumni Federation Amateur Radio Club Amnesty International Group Ithaca Animal Science Nutritional Toxicology Animal Science Department of AnimaLife Anthropology Department of APLYSIA Hometank Neuroscience Database Project Applied and Engineering Physics School of Applied Mathematics Center for Archaeological Fieldwork Server Archaeology Department of Architecture Department of Arecibo Observatory ARME Extension Program Art Computer Art Arts and Sciences College of Asian Studies Department of Astronomy Department of Athletics and Physical Education Department of Atmospheric Sciences Program Atomic and Solid State Physics Laboratory of Bailey Hortorium Ballroom Dance Club Bear Access Project Cornell Information Technologies Beta Theta Pi Fraternity Beta Delta Chapter Big Red Trumpets Bio Pl Plant Physiology Biochemistry Molecular and Cell Biology Graduate Field of Biochemistry Molecular and Cell Biology Section of Biodiversity and Biocollections The Cornell University MUSE Project Bioengineering Society BioG Biological Control Guide to Natural Enemies in North America Biological Sciences Division of Biomechanical Engineering Program in Hospital for Special Surgery Biomedical Engineering Society BMES Biometrics Unit Biophysics Graduate Field of Biotechnology Computing Facility Biotechnology Center for Advanced Technology CAT Boyce Thompson Institute for Plant Research Breast Cancer and Environmental Risk Factors Program on Business Services Campus Insights Campus Life Information Technologies Campus Life Housing Dining Residential Programs and more Campus Store Canine page information on diseases of dogs Capital Facilities Statutory Office for Career Services Catherwood ILR Library Cayuga Lodge Student Cooperative CBC Rowing Club CBS Centers formerly Copy Centers CEE Civil Engineering Cells in Frames project ATM over Ethernet Center for the Environment Central Technical Services Cornell University Library Chemical Engineering School of Chemistry Department of Chi Alpha Christian Fellowship Chi Omega Theta Alpha Chapter Child Abuse Prevention Network Project Chinese Bible Study Info Page Chinese Christian Fellowship Mandarin ChiNET Psi Upsilon Alumni Christian Fellowship CCF Church of Christ Bible Study CIT Publications City and Regional Planning Department of Civil and Environmental Engineering School of Class Notes Classic Computer Club Classics Department of Coalition for Life CCFL Collection Development Policies College Republicans Communication Department Instructional Server Communication Department of Community Rural Development Institute CaRDI Community Relations Office of Comparative and Environmental Toxicology Institute for Computational Fluid Dynamics Laboratory Computer Graphics Program of Computer Science Undergraduates Association of Computer Science Department of Design DEA courses Concert Commission Concert Series Continuing Education Summer Sessions School of Cornell Abroad Undergraduate Overseas Study Program Cornell American The American Society Cornell Chimes Cornell Chronicle Cornell Cinema Cornell Club of Northern New Jersey Cornell Composting Cornell Cooperative Extension Cornell Fund Cornell High Energy Synchrotron Source CHESS Cornell Information Technologies Main Server Cornell Law Review Cornell Magazine Cornell Research Foundation Cornell Review Cornell Tradition Cornell University Home Page Cornell University Instructional Server Cornell University Library Cornellian CORSIM The Cornell Microsimulation CRP Computers in Planning Ecuador Economy Connection to the Cornell Network Project Cuba Studies Group CUErgo the Cornell Ergonomics Web CUinfo Cornell University Information System Dairy Markets and Policy Program on Delta Chi Fraternity Alpha Chapter Delta Delta Delta Alpha Beta Chapter Delta Gamma Chi Chapter Delta Kappa Epsilon Fraternity Delta Phi Epsilon International Sorority Delta Rho Chapter Delta Sigma Rho Tau Kappa Alpha Speech Debate Honor Society Delta Tau Delta Fraternity Beta Omicron Chapter Design and Environmental Analysis Department of Design Studio Mechanical and Aerospace Engineering Diagnostic Laboratory Dickson Hall Distributed Technologies Systems Integration Magazine Distribution Center formerly General Stores Durland Alternatives Library Dutch Club East Asia Program Ecology and Evolutionary Biology Graduate Field of Ecology and Systematics Section of Economics Department of Education Program Planning in Agricultural Extension and Adult Education Education Experiential Learning Systems Education Department of Electrical Engineering School of Electronic Review Shelf Emerson Manufacturing Laboratory Engineering Materials by Design Engineering Library Engineering College of English Critical Surfing English Department of ENGRI Environmental Systems Engineering Entomology Department of Entrepreneurship and Personal Enterprise Program Environmental Biology Program Boyce Thompson Institute Environmental Conflict Management Program on Episcopal Church Equal Opportunity Office of Equine Research Park Ergonomics Research Group Evangelical Fellowships Experimental Ponds Facilities Management Family Life Development Center Farming Alternatives Program Feline Health Center Feminist Action League Filipino Association CFA Fine Arts Library Finger Lakes Runners Club Floriculture and Ornamental Horticulture Department of Flow Cytometry and Imaging Facility Flying Club Food and Nutrition Policy Program Food Engineering Lab Food Industry Management Home Study Program Food Agriculture and Development Cornell International Institute for CIIFAD Footbag Club Forensics Society Fracture Group Fruit and Vegetable Science Department of FSAE Race Car Team Gaming Club Cornell Strategic Simulations Society Gannett Health Center Gateway Theatre Genetics and Development Graduate Field of Genetics and Development Section of Geological Sciences Department of includes the Institute for the Study of the Continents INSTOC Glee Club Government Department of Grad Life Bible Studies Grades on Disk Arts College Electronic Grading Program Graduate School Greek Epigraphy Project Habitat for Humanity Cornell Chapter Hangovers An Cappella Subset of the Glee Club Help Desk Cornell Information Technologies History Department of Hong Kong Christian Fellowship Hotel Administration School of Hotel School courses Research Design Analysis Program Evaluation Research Design Human Ecology Human Ecology College of Human Resource Services Human Service Studies Department of Hybrid Electric Vehicle Team IEEE Cornell Chapter Industrial and Labor Relations School of Information Resources Cornell Information Technologies Injection Molding Program Institute for African Development Institute for Social and Economic Research CISER Institute of Food Science Institute on Science and the Environment for Teachers ISET Integrated Pest Management Program Interactive Multimedia Group Interfraternity Council International Agriculture and Rural Development Graduate Field of International Agriculture Program International Christian Fellowship International Legal Studies Program International Service for the Acquisition of Applications ISAAA International Students and Scholars Office International Studies Mario Einaudi Center for International Workplace Studies Program Italian Language Program Ithaca Tangueros Ithaca United Soccer Club Japan Association Japanese Animation Society JASA Theory and Methods Editor Page Jewish Infoline Jewish Studies Program of Johnson Graduate School of Management Johnson Museum of Art Judicial Statistical Inquiry Form Kappa Alpha Theta Iota Chapter Kappa Delta Omega Chi Chapter Kappa Kappa Gamma Psi Deuteron Chapter Korean Bible Study Korean Church Korean Graduate Student Association Kosher Dining Hall Kroch Library Asian Collections Kultura Magazine Lambda Pi Chi Alpha Chapter Lambda Theta Phi Fraternidad Latina Chi Chapter Landscape Architecture Department of Latin America Studies Program Latino Studies Program Law Library Law School Legal Information Institute Lesbian Gay Bisexual Transgendered Resource Office Levin Lab Linguistics Department of Local Government Program Electronic Information Center Local Roads Program Luso Brazilian Student Association Macromolecular Diffraction Facility MacCHESS Management Library Mann Library Materials Science and Engineering Department of Materials Science Center Math Club Math Department Instructional Computing Lab Mathematics Library Mathematics Department of Meaningful Learning Central Mechanical and Aerospace Engineering Sibley School of Medical College Medical Sciences Graduate School of Medieval Studies Program Cornucopia Microbiology Graduate Field of MicroElectroMechanical Systems MEMS Mideast Library Collection Minorty Organization Of Architecture Art and Planning Mircobiology Section of Modern Languages Department of Molecular Beam Epitaxy Facility Museum Educational Site Licensing Project MESL Music Library Music Department of National Agricultural Biotechnology Council National Data Archive on Child Abuse and Neglect National Nanofabrication Facility at Cornell Native Americas Magazine Natural Resources Department of Naval ROTC Near Eastern Studies Department of Network and Computing Administrators Network and Computing Systems NCS Neurobiology and Behavior Graduate Field of Neurobiology and Behavior Section of News Service Northeast Regional Climate Center Nuclear Studies Floyd Newman Laboratory of Nutrient Analysis Laboratories Nutritional Sciences Human Anatomy Physiology Nutritional Sciences Division of Office of Information Technologies Library Reference Services Operations Research and Industrial Engineering School of Organization for Labor Action COLA Ornithology Lab of Outing Club Participatory Action Research PAR Pathology Department of Peace Studies Program Persian Student Association Pesticide Management Education Program Pharmacology Department of Pharmacology Field of Philosophy Department of Phonetics Laboratory Physical Sciences Library Physics Department of Physiology and Biophysics Department of Physiology Graduate Field of Physiology Section of Pi Beta Phi New York Delta Chapter Pi Kappa Alpha Fraternity Beta Theta Chapter Pi Kappa Phi Fraternity Planning Design and Construction Plant Biology Graduate Field of Plant Biology Section of Plant Breeding Plants Genes and Global Food Production Plant Breeding and Biometry Department of Plant Pathology Department of Plantations Path Guide Cornell Plantations Policy Department Preservation and Conservation Department of Law Historic Preservation Information Project Professional Development Program Project Making Cornell University Project Mandarin Protestant Cooperative Ministry Psi Upsilon Psychology Introductory Psychology Psychology Department of Public Affairs Institute for Public Computer Labs Cornell Information Technologies Public Service Center Purchasing Department Rare and Manuscript Collections Division of Cornell University Library Religious Studies Department of Research Office for College of Agriculture and Life Sciences Resource Information Systems Institute for Rhizobotany Project Rigid AirFoil Team Romance Studies Department of Root and Soil Research Center for Rugby Mens Rural Schools Program Russian Language Program Sage Chapel Choir Sailing SALALM Sass Research Group SCAS Soil and Water Management Science Technology Studies Department of Science and Technology Magazine SciTech Seal Serpent Society Senior Class Campaign Shake Ultimate Frisbee Team Shaolin Kung Fu Association Shoals Marine Laboratory Sigma Chi Delta Fraternity Sigma Delta Tau Alpha Chapter Sigma Gamma Rho Sorority Lambda Omicron Chapter Sigma Lambda Latinas Unidas Iota Chapter Sigma Phi Epsilon Fraternity Beta Chapter Ski Club Ski Racing Club Home Page Social Science Update Society for Creative Anachronism SCA Society of Women Engineers Sociology Department of Soil Crop and Atmospheric Sciences Department of Something to Grow On South Asia Program Southeast Asia Program Space Plasma Physics Lab Sponsored Programs Office of Statistics Biometry Statistical Methods II Statistics Center Statler Hotel Student Employment Services Student Linux Users Group CSLUG Student Services Office of ILR Student Services Student Terminal Operations Supervisor STOS Students for the Ethical Treatment of Animals Taiwanese Student Association CTSA Society CTAS Tango Cafe Tau Beta Pi Cornell Chapter Tau Kappa Epsilon Fraternity Scorpion Chapter Technical Reports Department of Computer Science Technologies for Learning Center Technology Access and Business Assistance Cornell Office for COTABA Technology Connection Cornell Business Services Textiles and Apparel Department of Thai Association CTA Theoretical and Applied Mechanics Department of Theory Center Tomato Genetics Cooperative Training for Technology Cornell and Beyond Travel Office Travelers on the Electronic Highway Undergrduate Admissions Office University Assemblies University Controller Division of the University Council University Print Shop and Electronic Composition Services Uris Library Web Resources Plant Soil and Nutrition Laboratory UTOPIA Venezuelan Students and Scholars Association Veterinary Medicine College of for Research and Advanced Studies Office of the Visual Communications Lab Waste Management Institute Water Resources Institute Willard Straight Hall Program Board Wilson Synchrotron Laboratory Women Handbook Work and Environment Initiative World Tae Kwon Do Association Cornell Chapter of the Writing Program John Knight Writing Program WWW Virtual Library Physiology and Biophysics Young Israel of Cornell Youth and Work Program Zeta Psi Fraternity Psi Chapter Zoology Graduate Field of	other	cornell
916	 Server Date Sunday GMT Friday GMT HTML asWedit pPCx The pPCx page pPCx stands for parallel predictor corrector package and is parallel version of the PCx code for Linear Programming developed at the Optimization Technology Center at Argonne National Labs This is work in progress people involved from the Cornell side are Thomas Coleman Chunguang Sun and Michael Wagner and Steve Wright from Argonne The basic framework for pPCx is predictor corrector interior point method for linear programming Most of the work in an interior point method lies in solving symmetric sparse positive definite system of linear equations we use new parallel multifrontal Cholesky factorization developed by Chunguang Sun that efficiently handles We also take care of dense rows and columns efficiently so that we can exploit sparsity in the normal equations as much as possible The constraint matrix is stored in distributed form thus enabling the solution of very large problems that can not be solved on single processor The code is written entirely in with MPI extensions and will thus be easily portable to other architectures The testing is being done in the ACRI on the IBM at the Cornell Theory Center Here are few of the papers that are relevant for the development of this code Wright Modified Cholesky Factorizations in Algorithms for Linear Programming Preprint May Mehrotra On the implementation of interior point method SIAM Journal on Optimization pp For other interior page pages check out Interior Points Online Back to the Please send comments or suggestions to mwagner Last update Fri Oct EDT	other	cornell
917	 Server Date Monday GMT Monday GMT Program Program IMPORTANT When you type in the program remember to change the following lines in the CompoundCurve function Change int xm int ym to double xm double ym Click this link to retrieve the Program folder Program Folder Spring pierce	other	cornell
918	 Server Date Sunday GMT Saturday GMT Some Dirt for YOU Me singing in the Shower Pretty scary	other	cornell
919	 Server Date Monday GMT Saturday GMT Resources Resources Manual Pages Interesting Web Sites Newsgroup Last modified Oct	other	cornell
920	 Server Date Sunday GMT Thursday GMT Knowledge Base This page is intended to be answer general questions for developers On Solaris linking Tk gives me the error Undefined first referenced symbol in file socket getpeername gethostbyname You need to add to the LIBS line in the Makefile System Lab Specific How do access the files in my Unix account from my Windows and NT desktop Open Explorer Go to the menu Tools Map Network Drive and enter in the Path entry box For example would use in Then you will be able to access your files from the mapped drive Note that as of the server Dawn is not visible in the Network Neighborhood list but steps above work anyway How do use Windows applications in Unix You can use the windd command to log on an NT machine Type windd in an xterm and the windd desktop will come up Type the name of an NT server such as vulture in the Application Server entry box and press return That will bring you to the NT login screen Notice that WinDD runs Windows NT only but most applications should work without problems You miss the NT desktop though Also WinDD does work on display If you want to increase the size of the WinDD dekstop try giving the option when you start windd windd Where is purify for the different CUCS systems On Solaris On SunOS The answers to the following topics will come up shortly How do maintain binaries of different platforms in the same file system want to compile for both SunOS and Solaris but now need to do make distclean each time want to compile binaries for different platform Use symbolic links cd and look at the directory structure use it to manage four configurations with single source base More explanations will come up shortly What is purify Why can it help me with my development There is no purify on Linux What alternatives can use What is the flag when compile Tcl What is the Engineering Manual What is CVS How do develop test suite for my applications quick example for writing test suites How do compile my extension into shared library am working on an example Cornell CS Department Specific Is there quick example for CVS	other	cornell
921	 Server Date Sunday GMT Monday GMT CS Department Annual Report Annual Report Welcome to the version of the Annual Report of the Cornell Department of Computer Science You can either view the full table of contents or else select one of the major topic items listed below Message from the Chair Research and Professional Activities of Faculty Research and Professional Activities of Research Scientists Technical Reports List Faculty and Staff Roster The project of the Computer Science Department has all the department technical reports available on the Web for your perusal All of the projects in the department are also available on the Web Return to Departmental Home Page If you have questions or comments please contact www Last modified February by Denise Moore denise	other	cornell
922	 Server Date Sunday GMT Tuesday GMT The Art Gallery Welcome to The Art Gallery You need Netscape to visit this gallery because all pictures here are inline jpg images If you use Mosaic close it run Netscape and come back In order to see the first picture click key button below After this you will need just to click current picture to see the next one Pictures are here All pictures here are taken from user groups on Internet Some people tell that their picture are not for commertial use Please take it into account when copy picture Here will be Ascii Art Gallery	other	cornell
923	 Server Date Monday GMT Monday GMT Index Structure and Interpreration of Computer Programs Computer Science Department Cornell University Spring Course Materials Downloadable Software MacMarlais in StuffIt format Emacs the editor for use with MacMarlais version in StuffIt format StuffIt Expander software which you need to decompress Marlais and Emacs Handouts Notes on Dylan Notes on Programming Style MacMarlais error descriptions Miniquiz Miniquiz Solutions Dylan cheatsheet Downloading files using Netscape Using the Emacs editor Using MacMarlais Using the debugger Printing The Substitution Model Emacs Reference Card Miniquiz Induction Lists Miniquiz Solutions Miniquiz Symbolic Differentiator Dylan Code Data Abstraction Miniquiz Solutions Generics Dylan Code Structural Induction Object Oriented Programming Sorting Dylan Code The Enviroment Model Reasoning about Resources Miniquiz Miniquiz Solutions Priority Queues Code Priority Queues Prelim Info Prelim will be Thursday March from to Practice Prelim in PostScript format Practice Prelim in TeX format Practice Prelim in WWW html format Practice Prelim Solutions in TeX format Practice Prelim Solutions in PostScript format Practice Prelim Solutions in WWW html format Practice Prelim in PostScript format Practice Prelim in TeX format Practice Prelim in WWW html format Final Exam Study Guide in WWW format If you interested in the inner workings of the Dylan interpreter download mini version written by Justin Voskuhl It written in Pascal so you can look at the source code It can display the substitution model steps for the expressions it evaluates as well which may be useful to some students for prelim Problem Sets Problem Set Problem Set Problem Set Supplement to PS Problem Set Problem Set Problem Set Problem Set Source Code Code Star Trek Contest Winners Dan Oberlin David Bartholow Sean Welch Joe Lee Lecture Notes Lecture Introduction Lecture Dylan Lecture The Substitution Model and Higher Order Procedures Lecture Special Forms Lecture Lists Lecture Tail Recursion Lecture Data Abstraction Lecture Symbolic Differentiator Lecture Generic Functions Lecture Generic Operations Lecture Analysis of Algorithms Lecture Side Effects Lecture The Environment Model Lecture Local State Lecture Destructive List Operations Lecture Object Oriented Programming Lecture New Language Brenda Lecture More Brenda Lecture Generic Function Dispatch Lecture More About Generic Dispatch Lecture Garbage Collection Lecture Macros Lecture Streams Lecture Infinite Streams Lecture Quicksort Lecture Priority Queues Lecture Computability home page Last Modified by JEH	other	cornell
924	 Server Date Sunday GMT Friday GMT The Real Deal of the Network Computer The Real Deal of the Network Computer by MULVA Jeffrey Moore jmm cs William Lee wwlee cs Check out the Mulva Report And just what is this madness With all of the hype surrounding the new network computer and platform independent programming languages such as Java we decided to design our own network computer to see what type of hardware and software we would get using at the price point computer will not contain many things which we take for granted when discussing personal computers For example hard drive becomes optional equipment as does keyboard and mouse By removing these devices presents an interesting problem and raises many other questions We want to find out what these problems are and obtain solution for them In order to do this we must first design network computer of our own to discover exactly what buys We priced it using off the shelf readily available hardware Our implementation is only theoretical because we did not actually build working prototype mainly because computer scientists and that not what we do The main purpose of this exercise is to get an idea of the performance obtainable from network computer We want to determine how much of the network computer hype is real and how much of it is marketing For more information refer to the NC Specification document and what do we learn from this lot We learn how to estimate the performance of system that currently does not exist This is valuable skill because this type of evaluation must be done on new project of this type to see if the end result will be usable If the result product is not usable or the performance is less than that of what you can currently get it will not sell With this in mind we want to know if the Network Computer will revolutionize the computer industry or just be another fad that will quickly die Also there are some other social aspects to this For example if the machine does not contain hard drive and you receive electronic mail where is the mail stored This would be new paradigm for the computer industry and we are trying to determine whether the NC is technologically superior to personal computer or if it is lot of hot air and how does it tie in with High Performance Computer Architecture We trying to see if this computer is high performance at all From what we can tell we ca see that this type of computer provides at least the same performance as other computers in the same price range It is not clear that this computer will perform at speed which closely resembles modern personal computer and how do we measure success If we can get data that conclusively shows the performance of NC it will be possible to estimate the overall performance of the system For example if we use NC with an ethernet connection browsing the WWW will it have the same performance as personal computer browsing the WWW These are just some of the questions that must be answered and finally how are we progressing Project Proposal Price the computer Modify Web Browser Create Web Project Web Page Distribute Survey Gather data from web browser Checkpoint Create poster Final Report Poster session MULVA Name of Jerry Seinfeld girlfriend which rhymes with part of the female anatomy Courtesy of the Junior Mint episode of Seinfeld Visitors since April	other	cornell
925	 Server Date Sunday GMT Sunday GMT Fall Course Materials Fall Foundations of Artificial Intelligence Course Materials Newsgroup Handouts Lecture Notes Homeworks and Solutions Handouts and Project Information Lisp Lisp Environments Useful Common Lisp and AI Links Note Many of these files are Postscript files their names end in No browser we know of can display them directly so you either have to specify helper application like ghostview to display them for you or you can download the file and do something with it locally for example in unix you could lpr it to which understands Postscript Netscape Navigator in the PC lab at least on some machines is already configured to use ghostview If you try it and it work try this Handouts Tentative Course Syllabus last modified General Course Information last modified html Lecture Notes Introduction to AI Aug Defining Artificial Intelligence postscript postscript per page html Sep Uninformed Search postscript postscript per page html Sep Heuristic Search postscript postscript per page html Sep Optimal Search postscript postscript per page html Sep Admissible Heuristics Adversarial Search postscript postscript per page html Sep Minimax Motivation for Pruning postscript postscript per page html Sep Pruning in Game Playing postscript postscript per page html Sep Introduction to Machine Learning postscript postscript per page html Sep Decision Tree Learning postscript postscript per page html Sep Issues in Decision Tree Learning postscript postscript per page html Sep Learning as Search postscript postscript per page html Sep The Version Space Algorithm postscript postscript per page html Sep Genetic Algorithms postscript postscript per page html Sep Neural Networks Feedforward Networks postscript postscript per page html Oct Neural Networks Backpropagation postscript postscript per page html Oct ML Applications postscript postscript per page html Oct History of AI Systems postscript postscript per page html Oct Forward Chaining Systems postscript postscript per page html Oct Backward Chaining Systems postscript postscript per page html Oct Knowledge Representation Semantic Nets postscript postscript per page html Oct Representing Facts in Logic postscript postscript per page html Oct Resolution Theorem Proving Conversion to Clause Form postscript postscript per page html Oct Unification Selection of Clauses postscript postscript per page html Nov Intro to Planning The Frame Problem postscript postscript per page html Nov Partial Order Planning postscript postscript per page html Nov Partial Order Planning II postscript postscript per page html Nov Hierarchical Planning Reasoning Under Uncertainty intro postscript postscript per page html Nov Probabilistic Reasoning Bayesian Inference postscript postscript per page html Nov Belief Networks postscript postscript per page html Nov Natural Language Processing intro postscript postscript per page html Nov Syntactic Analysis parsing postscript postscript per page html Nov Sentence Analysis chart parsing postscript postscript per page html Nov Conceptual Sentence Analysis the CIRCUS parser The Problem of Inference postscript postscript per page html Nov Machine Learning of Natural Language no notes Homeworks and Solutions Homework due Monday html Homework Solutions html Homework due Monday html Homework Solutions html Lisp code for counting games Homework Homework due Wednesday Homework Solutions from Fall We covered all of the material on that midterm html Solution to Midterm html Solution to Midterm html Homework that clarification for problem was added at on Here is the clarification Unless otherwise specified you can assume that either the system adds the fact that JB is Dodge Van to the KB at query time or the fact that JB is Dodge Van already exists in the KB The postscript document has been modified only to include this clarification due Monday Homework Solutions Note that program information is also available in the folder on the drive of the PCs Program due Monday html Program Solution html Program due Wednesday html Program Solution html Program due Friday due date Monday at the beginning of html Handouts and Project Information Course Syllabus and Project Information last modified Project Ideas Format for project proposal due at class time on Tues PC lab postscript html Due Dates Format for status reports postscript html Here are some examples of code with good procedural and data abstraction as well as good consistent indentation Courtesy of Ed Wayt and Oumi Mehrotra Generic Plan for Finishing the Project On Time It will be easier if you write your code in stages The code reviews provide intermediate feedback on your progress Here is how suggest working on the code If for some reason you think that your particular project does fit well into the structure below let me know and can help you create schedule that does First think about the major modules that your project requires and the knowledge structures rules state descriptions board representations that need including any related constructor functions and accessor functions as described by Winston in our main text Implement the modules as stubs lisp functions that have no substantive code but that specify all of the necessary parameters and that make calls to the appropriate module stubs Write the code to implement your generic knowledge structures completed for code review Oct Get the system running from beginning to end as soon as possible just on simple example This will invariably require making many simplifying assumptions Design the inference engine or control strategies needed for your system specific search strategy rule interpreter move generator learning algorithm completed for code review Nov Finish the implementation of the AI part inference engine control strategies learning algorithm of your system Incrementally remove the simplifying assumptions by adding the necessary code Evaluate the system appropriately Be sure to leave enough time for the evaluation it is an IMPORTANT component of the final grade by project end Lisp introduction to lisp list primitives defining functions conditionals recursion data abstraction mapping iteration debugging structures objects Lisp Environments The Allegro Lisp Editor the lisp for the PC lab Using Lucid Lisp with Emacs only useful if you have an account on the CS machines and want to use Common Lisp on those machines rather than the PC lab Useful Common Lisp and AI Links Common Lisp The Language Guy Steele Tulane Common Lisp Tutorial Johns Hopkins Common Lisp Tutorial Common Lisp Resouces from CMU AI Repository including the Lisp FAQ Free Common Lisp implementations from the Lisp FAQ Machine Learning Databases at UC Irvine It probably best to first check the end of the page for the README file associated with the data bases Return to home page	other	cornell
926	 Server Date Monday GMT Saturday GMT CS Assignment Grades CS Assignment Grades Final Course Grades Homrwork Assignment Assignment Grading Remarks Grader Ioi Lam Homework Assignment grades Homework Assignment grades Assignment Grading Remarks More assignment Grading Remarks Grader Ioi Lam Homework Assignment grades Assignment Grading Remarks Homework Assignment grades Homework Assignment grades Exam Exam Grades Last modified Nov	other	cornell
927	 Date Mon Dec GMT Server Fri Feb GMT Lab CS Laboratory Getting started with DataExplorer These instructions will introduce you to DataExplorer DX and the lab facilities in the Cornell University Computer Science department and in the Cornell Theory Center DX is software package intended to be used for scientific visualization At the start of the semester we will use it as platform for various computer graphics procedures Machines to run DX are located in room in Upson and in room in the TC building There are several sections Basic Information Your First DX session see below UNIX for CS DX Data Structures DX use notes and warnings Further Information Submitting Still images and animation for the course Web pages Creating MPEG animation files There are some DX techniques outlined in the DX Repository which may be useful later in the semester You may also want to look at some student programming projects using DX Disk Space We have set up temporary Gbyte partition for CS use at You should consider it scratch space for MPEG compression Materials are subject to deletion after hours To use it Make sure on the HP machines that is in your path On the IBM machines skip this step Issue the command klog then enter your IBM system password On the IBM machines skip this step Issue cd command to Make directory for your materials Your First DX session To get started login to one of the machines or IBM On the IBM machines you will need to start using the command On the HP machines starts automatically The first time you login you will need to load few files and modify your file If you do know how to do this in UNIX ask consultant or check ou the UNIX intro page Click here to download some utilities you will need When the dialog box appears save the file as in your home directory Execute the command tar This will put the utilities in new directory called Add the line setenv DXMACROS to your file Note that myid is placeholder for your user id Execute the command source This will cause the macros to become available to DX when it starts up This command is executed automatically whenever you login or open new window Anytime you start session make sure you have running type csh then start DX by typing At the end of session On the IBM machines kill by typing Then logout On the HP machines logout from the desktop DX has extensive help including tutorials and complete manual which you can look at by clicking the Help menu in the upper right of the editor window You can also click the middle button over any object module menu to get context sensitive help Back to Main Page Go to Lab Last modified Land Copyright Statement	other	cornell
928	 Server Date Monday GMT Thursday GMT Table of contents Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide Slide	other	cornell
929	 Server Date Monday GMT Thursday GMT Tour of the CSRVL Tour the CSRVL Here is sequence of images captured from video of the CSRVL Believe it or not this is more or less how the lab looks on daily basis These are all GIF files about each The CSRVL consists of two adjoining rooms on the floor of Upson Hall at Cornell University The main lab is used by faculty and students involved in research in robotics and machine vision Therein can be found all of the equipment needed to build test debug and run experiments with our mobile robots along with number of workstations and personal computers used in machine vision processing as well for programming the mobots The teaching lab is used by undergraduate and graduate students taking courses in robotics and vision These include an undergraduate course in vision and robotics and graduate seminar in machine vision The teaching lab contains dozen Sparc IPX and IPC machines for use by these students as well as the Puma and Zebra robotic arms view of the hallway outside the lab floor Upson The door of the teaching lab The door of the main lab We big on safety view of the main lab from the door The Puma robotic arm in the teaching lab Lily recharging in the teaching lab The row of Sparc IPXs in the teaching lab Tommy recharging in the teaching lab next to molson the compute server The Sparc IPCs in the teaching lab Another view of the Puma arm small machine room within the main lab horus and kama are sitting here kama in the machine room Rosemary our newest mobot with guts exposed in the main lab thokk where sit in the main lab The electronics bench in the main lab looking towards the teaching lab Looking towards the corner of the main lab from thokk Camel along with some junk on the floor of the main lab disclaimer attached to thokk Two guys who were unfortunate enough to be in the lab while was filming Looking towards the electronics bench from the back of the main lab Return to the CSRVL Home Page Welsh mdw	other	cornell
930	 Server Date Sunday GMT Thursday GMT Masters of Engineering Projects This year all our projects will address issues associated with the development of an environment for designing specifying implementing and testing Adaptive Mesh Refinement AMR methods for tackling very complex problems ex spiraling coalescence of two black holes from computational sciences The participants in the development of this environment will have the opportunity to work on very specific projects that can be developed individually but at the same time will require some degree of interaction in the design validation and testing phases Thus in addition to the opportunity of acquiring specific skills and knowledge by working on very narrow and interesting problem the opportunity to see and understand the procedure of designing and implementing complex software for parallel and distributed platforms will be given Projects Intelligent Graphical User Interface for AMR Parallel Runtime Support System for AMR Dynamic Load Balancing Algorithms for AMR Parallel PDE solvers using AMR methods Parallel structured grid generation for complex geometries Scientific computing benchmarks for multithreading on parallel and distributed platforms Study the impact of restructuring CG scalar algorithms and codes in terms of CG performance on MPPs Intelligent Graphical User Interface for AMR This project requires the design and implement an intelligent for specifying geometries operators and various parameters required to solve numerically PDE problems This project consist of two components Problem specification Visualization Existing Problem Solving Environment PSE PELLPACK will be extended This project is recommended for students with interest on GUIs PSEs and in general for computing environments Parallel Runtime Support System for AMR This project requires the design and implementation of communication and threaded modules requirted for the efficient implementation of and control primitives for parallel AMR methods Existing communication software like MPI AMs and threaded packages like Qt and will be utilized This project is recommended for students with interests both on systems parallel parallel compilers and computational sciences An interaction with Bernoulli and projects is expected Dynamic Load Balancing Algorithms for AMR This project requires the development implementation and evaluation of of dynamic load balancing algorithms for AMR direct like generalized spectral bisection and its derivatives and curves and ii incremental The objective is to develop module for and ii acquire useful knowledge in solving an instance of very difficult combinatorial optimization problem dynamic load balancing of adaptive computations on network of heterogeneous workstations and MPPs Existing algorithms and software will be extended and new ones will be build This project is recommended for students with interests on the solution of practical optimization problems related to parallel and distributed computing Parallel PDE solvers for problems using AMR methods This project requires the implementation of library of routines for the discretization and solution of wave equation on MPPs and SMPs Both and multithreaded paradigms will be used and evaluated In addition accuracy and stability of multithreaded computations will be analyzed languages like HPF and low level like plus message passing will be used This project is recommented for students with interests in parallel numerical computing and scalability analysis An interaction with project is expected Parallel structured grid generation for complex geometries This project requires the development of parallel algorithms and implementation of library of parallel grid generation modules using Algebraic Methods Elliptic Methods Moving Algebraic Methods languages like HPF and low level like plus message passing will be used This project is recommented for students with interests in parallel numerical computing Existing scalar algorithms and code will be used An interaction with is expected Scientific computing benchmarks for multithreading on parallel and distributed platforms Study the impact of restructuring CG scalar algorithms and codes in terms of CG performance on MPPs This project requires the development of Conjugate Gradient algorithm suitable for multiprocessors and includes the implementation of CG using Typhoon parallel compiler Issues related to expensive dot product operations will be studied How much the algorithm restructuring can help in improving performance compared to well known CG algorithm Is it worth the effort and possible increase in space complexity How much the code restructuring can help in improving performance compared to straight forward cg code Is it worth in doing the extra step in exploring functional parallelism on top of the How much will cost to use multithreading in implementing functional parallelism ii masking some of the global address space overheads Is the overhead worth the increase in software complexity What about error and stability For more information contact	other	cornell
931	 Date Sun Dec GMT Server Mon Nov GMT Cornell University Evangelical Fellowships Cornell University Evangelical Fellowships Welcome to the unofficial home page of the Evangelical Fellowships at Cornell University Hopefully all the fellowships will soon have their own pages accessible from here Who Are We Summer Christian Fellowship Community Bulletin Board Page of the Who Are We Campus Crusade for Christ Chi Alpha Chinese Bible Study Cornell Chinese Christian Fellowship Cornell Christian Fellowship Cornell International Christian Fellowship Grad Life Bible Studies The Holy Ghost Connection Hong Kong Christian Fellowship Japanese Bible Study Korean Bible Study Korean Church Student Group The Navigators to the Community Bulletin Board Community Events And Announcements Racial Reconcilation Studies Cornell Christian Listserver Local Churches Taken from Page Other Christian Internet Sites Statement of Faith Mission Statement Summer Christian Fellowship Let the party begin the summer all the groups below and more meet together at least once week for fellowship the building of our faith and for reaching others For more info on summer contact Jay Marland to the Page of the Month Great Link page of the Cornell Chinese Christian Fellowship Good News Page Who Are We Summer Christian Fellowship Community Bulletin Board Page of the Back to the Last updated sort of Sept Send comments to Ard Louis at ardlouis	other	cornell
932	 Server Date Monday GMT Saturday GMT CS Problem Set CS Problem Set Stochastic Stereo Vision postscript copy of the assignment IMPORTANT for problem you should look at the postscript of the handout and not the photocopied handouts in class since the images were blackened out by the photocopying process Test Images You should make your own test images in addition to the ones here The problem set is finalized you need only submit the results for these two images below left and right random dot stereogram as seen in of assignment left and right images from stereo camera You should submit the results starting from zeroed disparity map and using this starting map If you are using linux or NT on an IBM you should use this short image The map was generated using simple windowing sum of squared differences method Be sure to use value of Delta otherwise this disparity map will have the wrong size Using the ADT image libraries The following versions of the library are available SunOS available on the cs dept machines as with the appropriate header files in DO NOT use on your command line Sunlab located in with header files in Other locations library and header files Solaris available on the cs dept machines as with the appropriate header files in be sure to include on your command line Sunlab you wo need the Solaris version Other locations library and header files Linux Here is the ELF library and tarfile containing the header files AIX thanks to Christoper Kline here is copy of the email he sent me Windows NT changed my mind the chances of easily getting Visual code to compile with another compiler is minimal If you want to use gcc then maybe we can talk debates to jmiller Problem Set If the maximum absolute value of disparity is then the disparity image should lose only pixels on each side because of the Cyclopean model not as mentioned in the HW assignment This would yield disparity image that is Yes mixed this one up It should only be pixels on each side when using the cyclopean model If you correct the mistake be sure to double the Delta constant to when using the tree images so that the disparity map gave you will be the right size What is the termination condition When the average of the demon energy is near zero The demon energy can temporarily be zero but the average will not be zero unless the system is near equilibrium Since the average is near zero the standard deviation has to be near zero and therefore the ration of the two is nearly see equation in Barnard Paper The termination condition is NOT zero energy for the system any interesting answer should have energy How can make my own test images Answer write program to generate the images Answer generate them in matlab there are set of matlab files in read the documentation simple image is rand background rand moving object copy background copy forground copy forground shift by imSaveF save images note we multiply imSaveF by since gray images have values and rand generates values in range What does ergodic mean good answer to this was recently posted to What are areas have optimization techniques been applied to image restoration and reconstruction Grimson Terzopoulos Geman and Geman Leclerc Hung et al shape from shading Ikeuchi and horn stereo motion and optical flow Ullman Horn and Schunck Hildreth Murray and Buxton Barnard Jain texture Hassner and Slansky Kashyap et al Cross and Kain edge detection Torre and Poggio Tan et al image segmentation Silverman and Cooper Li perceptual grouping Lowe Mohan and Nevatia Herault and Horaud interpretation of line drawings Leclerc and Fischler object matching and recognition Fischler and Elschlager Davis Shapiro and Haralick Bhanu and Faugeras and Meiri Modestino and Zhang nasrabadi et al Wells III Friedland and Rosenfeld Li Li pose estimation Haralick et al	other	cornell
933	 Server Date Sunday GMT Monday GMT Resolution Independent Video Language ACM Multimedia Electronic Proceedings November San Francisco California Resolution Independent Video Jonathan Swartz Department of Computer Science Upson Hall Cornell University Ithaca NY US swartz Brian Smith Department of Computer Science Upson Hall Cornell University Ithaca NY US bsmith http This work is supported by funding for the Xerox Design Research Institute and the US Air Force under contract ACM Copyright Notice Table of Contents ABSTRACT INTRODUCTION THE RIVL LANGUAGE Image Operations Sequence Operations THE RIVL INTERPRETER Implementation of Image Computing Implementation of Sequences Memory Management RELATED AND FUTURE WORK REFERENCES Abstract As common as video processing is programmers still implement video programs as manipulations of arrays of pixels This paper presents language extension called Rivl pronounced rival where video is first class data type Programs in Rivl use high level operators that are independent of video resolution and format increasing program portability simplifying code reuse and reducing development time This paper also describes Rivl interpreter and the strategies the interpreter uses to optimize Rivl programs These optimizations include classical programming language optimizations such as common subexpression elimination and out of order execution image and video specific optimizations such as computing only those images that will affect the output and an optimized memory manager Introduction In order to support the development of multimedia applications programming languages should include audio video and images as true data types just as characters text and numerical values are true data types in today languages The operators in multimedia language should be format independent so that video and images of different formats can be easily intermixed like integers and floating point numbers in most modern programming languages The operators in multimedia language should be resolution independent so that high or low resolution input data produces better or worse results just like single and double precision floating point numbers produce more or less accurate results in numeric computations Platform independence and code reuse will be useful side effect of multimedia programming languages and just as optimizing and parallel compilers can take existing programs and make them run faster so optimizing multimedia compilers will speed up multimedia programs Rivl pronounced rival is language extension and optimizing system designed with these goals in mind Rivl provides video data type and video operators that are format and resolution independent Format independence means that MPEG video can be freely intermixed with JPEG Postscript and uncompressed images Resolution independence means that operations in Rivl cut the first five seconds of the video clip are well defined whether the film resolution is or frames per second or the image size is or These features relieve the programmer of tedious low level details and allow runtime system to execute Rivl program quickly on low resolution data for crude output for prototyping or debugging and slowly on high resolution data for more refined output Rivl approach to video manipulation has significant advantages over current approaches Rivl programs are easier to read write and maintain than their counterparts Rivl code is platform independent Rivl expresses video and image editing operations in format and resolution independent way Rivl separates the description of video operations from their implementation allowing the Rivl runtime system to improve the execution efficiency of Rivl programs We have implemented an interpreter for Rivl as an extension to the Tcl language an approach that allows us to easily embed Rivl in other applications This paper describes the design and implementation of the Rivl language the Rivl interpreter and its optimizer The rest of the paper is organized as follows Section illustrates the Rivl language through series of examples Section discusses the Rivl interpreter and how it optimizes image and video operations Section reviews related work and concludes with current status and future research directions The Rivl Language This section illustrates Rivl programs through series of examples Since Rivl is an extension of Tcl Rivl programs have access to all the primitives of the Tcl language Rivl extends Tcl with two data types images which represent still images and sequences which represent video segments timestamped set of images Table lists some of the Rivl primitives for manipulating images and sequences The table is divided into five classes Currently supported formats include JPEG MPEG and Postscript Geometric The image operations in this class move and resize the image the sequence operations speed up slow down and temporally shift the sequences Assembly This class provides cut and paste type operations on images and sequences Conversion This class provides functions to convert between images and sequences and to map image operations over the frames of sequence Transforms Image transforms used in this paper Sections and contain examples that clarify the use of image primitives and sequence primitives respectively Table Image and sequence primitives Type Image Sequence Description operations operations Read from disk Write to disk Geometric Translate an image in space shift sequence in time Scale an image in space scale sequence in time Rotate an image around its center Assembly Crop the specified region to make new Concatenate multiple end to end Overlay multiple in place Conversion Convert between list of images and sequence Apply script to each image in the sequence Transforms Fade the image by specified percentage Resample the image at specified size Apply blur filter to the image Make transparent all pixels below certain intensity Image Operations Consider the following Rivl fragment set expr set expr Program Whirlpool effect is Rivl image and is floating point value between and The first line calls to shrink about its center by factor of and assigns the result to The second line calls to rotate about its center by and again stores the result in Figure shows the effect of this fragment with several values of The repeated use of set in this fragment is cumbersome To remedy this problem we borrowed an idiom from Scheme any operator with the character appended destructively modifies its first argument Taking advantage of this notation we can rewrite program as expr expr Notice that the destructive operation omits the in front of its first argument whereas the form requires the This artifact is caused by the way Tcl implements point we discuss in related paper More complex effects can be constructed using Tcl constructs for looping branching procedure creation and recursion The Rivl program in figure creates fractal Sierpinski Gasket from an arbitrary image Figure Output from program for Figure Fractal program and output for Sequence Operations sequence the Rivl abstraction for video can be thought of as set of images Like image commands sequence commands can be composed to express new operations For instance common video editing operation is assembly when two sequences are connected and written The following Rivl fragment assembles the first seconds of the sequence and the sequence writing the result to all files are MPEG format set raiders set bobo raiders raiders bobo An important primitive in Rivl is applies image effects to sequences executing given script for each image of sequence and combining the resulting images into new sequence is similar to map in Scheme For example consider the command clip evaluates the template command on each image in clip substituting the current image wherever appears in the template The results are gathered and returned as new sequence Thus this command returns new sequence containing thumbnail versions of the images in clip Sometimes rather than applying the same operation on each image in sequence it is desirable to vary the operation over time For example consider the operation of fading sequence to black This effect can be achieved by calling on each image in the sequence with parameter that decreases over time In this case must call procedure with parameter that indicates the time of the image being modified To this end performs the following additional substitutions Substitute the time stamp of the current image in seconds Substitute the length of the sequence in seconds Substitute the relative time of the current image divided by Using this mechanism can be expressed clip expr When combined with sequence assembly operations simplifies the expression of effects that are often used in transitions between two parts of movie For example the procedure in figure connects two sequences with transition The first parameter transition is script to be passed to MovieA movieB are the two sequences to be joined and duration is the time in seconds to apply the transition effect Thus connectWithTransition expr jack jill connects two sequences jack and jill with five second fade proc connectWithTransition transition movieA movieB duration set lengthA movieA set lengthB movieB Untouched parts of first and second movie set begin movieA expr duration set end movieB duration lengthB Apply timed effect to end of first movie overlay with beginning of second movie set movieA expr duration lengthA set movieB duration set middle transition begin middle end Figure Procedure to connect two sequences with an arbitrary transition The Rivl language extension thus provides powerful notation for programming with video Rivl high level semantic description of video operations also allows the interpreter to optimize the execution of Rivl programs The next section describes these optimizations The Rivl Interpreter This section discusses the implementation of the Rivl interpreter In the first two subsections we discuss the efficient implementation of image and sequence operations In the third subsection we discuss memory allocation issues for video computing and describe Rivl custom memory management system Implementation of Image Computing There are two ways to optimize still image computing First we must make sure that individual image operations such as scales rotations are efficient These issues have been addressed at length in the graphics literature and good algorithms are readily available Second we must be intelligent about which operations we call in what order to achieve our final result feature of Rivl that allows us to exploit the second type of optimization is lazy evaluation also known as execution Rivl only computes video data when it is needed for output or display The result is that at computation time Rivl can plan more intelligent computing strategy than if each command were executed immediately and independently The Rivl interpreter alternates between two modes of operation mode and mode In mode the interpreter evaluates Rivl programs recording and storing operations in directed acyclic graph DAG whose edges correspond to images and whose nodes correspond to primitive operations scale or overlay This process is typically very fast since image operations are recorded but not executed In effect the DAG represents dynamic instruction trace of the Rivl program execution Consider the following program which overlays scaled and rotated version of the image onto the image set tiger tiger tiger set flowers flowers tiger flowers Figure shows the graph created by this program Both and are implemented with pair of translations surrounding an or the translations move the origin of the scale and rotate operations to the center of the image Figure Sample image graph call to triggers the mode In principle the Rivl interpreter traverses the graph from inputs to output computing intermediate images until the output image is computed But before computing the images the interpreter perform several optimizations Two optimizations graph restructuring and calculation are described below Graph restructuring The first optimization modifies the graph so its output is equivalent but the computation is more efficient Such modifications include combining or swapping adjacent nodes For example figure contains six adjacent affine transformations Rivl collapses these nodes into single affine transform figure This optimization improves both the computation speed and the quality of the final image by reducing the number of times the image is resampled calculation The second optimization introduced by Shantzis is to compute only those regions of each intermediate image that affect the final result In our example program only small portion of flowers is visible in the final result figure on right It is sufficient to read in and blur only this portion Rivl calculates regions for intermediate images for every edge in the DAG the have region the need region and the result region The have region at an edge is the region of pixels provided by the edge left node The need region at an edge is the region of pixels needed by the edge right node Finally the result region is the intersection of have and need This intersection contains all the pixels that both have defined values and affect the final output image Only the pixels inside the result region need to be computed Figure shows the regions computed for each intermediate image in our example graph In particular only small region is calculated for each of the two lower images Following these optimizations the Rivl interpreter computes the graph result image writes the image to disk and returns to processing commands in mode Figure Restructured image graph Result regions Implementation of Sequences Our implementation of sequences borrows many ideas from our implementation of images since many optimizations prove especially beneficial for sequence computing We will use scrolling titles as sample task to motivate this section The following program adds scrolling credits to the last seconds of second minute movie set credits credits expr credits credits expr set raiders set outseq credits raiders outseq Program Adding scrolling credits to the end of movie The titles are stored as Postscript program that generates long image The function makes the titles background transparent The program converts the image to sequence credits scrolls credits upwards over time using and scales and shifts credits to the desired time range sec The final overlays the titles onto the raiders movie and the result is written to the file Like image commands sequence commands are stored in graph called the sequence graph until the sequence is computed in response to command Figure shows the sequence graph for program in which each node corresponds with one line of the program The sequence graph is used to generate set of image graphs that correspond to the sequence individual frames Figure Sequence graph for scrolling titles Suppose we want to compute the frame in the output sequence at time We perform two passes over the sequence graph backward pass and forward pass In the backward pass we compute timestamp for each edge An edge timestamp indicates the time value at that edge that influences output frame As we traverse the graph each and node we encounter potentially alters the timestamp The top of figure shows the timestamps computed for In the forward pass we build an image graph corresponding to output frame As we traverse the sequence graph each and node we encounter adds node to the image graph uses the timestamp to determine which frame to read uses the timestamp when substituting values for and The bottom of figure shows the image graph computed for To compute the whole sequence we repeat the image graph generation algorithm for all relevant output times at increment of where fps is the desired frame rate in of the output sequence For program ranges from to The resulting graphs are merged into single compound image graph as shown in figure Figure Generating the image graph for Figure Image graph for entire sequence The optimizations of section are used to process the compound image graph to produce the output images along with two additional optimizations image subgraph reuse and detection Image subgraph reuse In figure the subgraph containing and is replicated many times It is more efficient to use single subgraph with multiple output edges as shown in figure In this way the pixels of are read and masked only once and the various nodes share common input In general Rivl detects and merges redundant image subgraphs whenever possible form of common subexpression elimination detection In our example the first seconds of appear unchanged in the output An obvious optimization is to avoid unnecessary decompression and compression by copying the compressed data directly to the output In formats such as MPEG direct copying is not always possible on every frame since MPEG sequences contain frames that are encoded as differences from other frames and can not be decoded in isolation However MPEG streams are often divided into groups of pictures GOPs usually to frames long that are independent from other GOPs When reading and writing MPEG Rivl transfers groups of pictures directly whenever possible Figure Image graph for entire sequence with shared subgraph Memory Management In addition to optimizing image and sequence calculation the Rivl interpreter contains custom memory management module to cache previously computed images and cope with very large images To understand the utility of caching images consider the evaluation of the graph in figure The output of the node is used many times it is advantageous to cache this image The Rivl memory manager detects this case freeing each image only when it is no longer needed in the current graph evaluation Another issue is whether to store images after graph evaluation ends Interactive applications of Rivl often require repeated evaluations of slightly changing graph Because the language restricts the way image graphs can be modified the image associated with an edge remains accurate for the lifetime of the graph and can be cached Unfortunately we have no special knowledge about which images to cache for future graph evaluations In principle the user can access any edge that was ever created Mistakenly discarding data is nonfatal since we can always recompute the data but such mistakes hurt performance To address this issue Rivl provides an command to allow applications to set the priority of an image The memory manager discards low priority images and keeps high priority images in memory For instance video editor built using Rivl calls to raise the priority of displayed images so that the results of special effects can be quickly viewed We are looking into algorithms and heuristics for automatic priority adjustment For example images generated by expensive operations and images that have been referenced repeatedly in the past are candidates for high priority The initial implementation of Rivl treated images as indivisible memory buffers Unfortunately this representation performed poorly for large images The Rivl memory manager divides large images into pages of manageable size figure Pages are handled as independent entities by the memory manager allowing an image to be cached in parts In addition large images with considerable blank space are efficiently represented by set of pages figure Figure Dividing large image Representing sparse image To illustrate the utility of Rivl memory management policy we consider the execution of the scrolling titles program program under standard memory model in which the entire image is read into virtual memory buffer for the duration of the program Assuming color image this requires MB of storage In contrast Rivl accomplishes the task as follows The title region is divided into ten equally sized pages given Rivl current maximum page size Rivl allocates loads and masks each page of data only when necessary The results of each call to are cached for future requests Rivl discards pages as soon as they are no longer needed The memory footprint is MB enough for Rivl to hold two pages at once In summary the Rivl interpreter uses variety of strategies to optimize execution of Rivl programs They are Graph restructuring Combining or reordering nodes in the graph for speed calculation Computing only the parts of an image that affect the output Direct transfer detection Copying compressed data directly to the output when possible Image subgraph reuse Sharing common subexpressions in the image graph Image caching Caching images if they are needed later in the graph evaluation Image subdivision Dividing large images into manageable pieces Related and Future Work Many commercial packages are available that provide software libraries of image manipulation functions Some use execution to achieve similar optimizations as those mentioned in section These include the Pixar system described by Shantzis and Silicon Graphics ImageVisionLibrary Holzmann Popi allows image transformations to be specified with concise expressions at mechanism that permits rapid prototyping of new image primitives We are adapting this idea to Rivl None of the above mentioned systems provide language support for motion video Some systems Data Explorer or Khoros provide graphical programming environment where image programs are expressed as flowcharts Although this way of expressing image operations is an improvement over pixel manipulation the limitations of flowcharts for expressing complex programs are Furthermore the support for motion video operations in these systems is limited or Matthews Gloor and Makedon VideoScheme combines Apple QuickTime movie player with video manipulation language In VideoScheme the user works with objects close to the underlying implementation of video data such as pixel arrays and frames This access gives users considerable flexibility in creating new image operations For example algorithms for detecting cuts in video can be easily built out of pixel array primitives In contrast Rivl high level of abstraction allows it to exploit delayed computation for improved efficiency and its resolution independence makes programs more portable Rivl is implemented with lines of code and lines of Tcl code It has been ported to the Sun OS HPUX and Linux operating systems Rivl has been used to build simple video editor Rivl and its editor can be found at http The Rivl language is still evolving We are extending the core set of Rivl primitives to support other types of video processing such as image analysis computer vision and morphing With the right primitives we hope to build rapid prototyping environment for exploring video content processing We are also building parallel implementation of the Rivl interpreter using workstation clusters In this implementation Rivl program will run quickly using low resolution images on small cluster slowly using high resolution images on small cluster and quickly using high resolution images on large cluster The interpreter will automatically parallelize the Rivl program using both coarse grained parallelism one image one process and fine grained parallelism one image multiple processes References Aho Sethi and Ullman Compilers Principles Techniques and Tools Reading Mass pp Data Explorer software package IBM Foley et Computer Graphics Principles and Practice second edition Reading Mass Holzmann Gerald Popi AT Bell Laboratories Murray Hill NJ Le Gall MPEG video compression standard for multimedia applications Communications of the ACM April Vol pp Matthews James Peter Gloor and Fillia Makedon VideoScheme Programmable Video Editing System for Automation and Media Recognition ACM Multimedia Proceedings pp Pennebaker JPEG still image data compression standard Van Nos and Reinhold New York Poskanzer Jef The Extended Portable Bitmap Toolkit PBMPLUS Postscript Adobe Systems Incorporated Mountain View CA Shantzis Michael Model for Efficient and Flexible Image Computing SIGGRAPH Proceedings pp Ousterhout John Tcl and the Tk Toolkit Massachusetts Rasure and Kubica The Khoros Application Development Environment Experimental Environments for Computer Vision and Image Processing editor Christensen and Crowley World Scientific Silicon Graphics ImageVision Library Silicon Graphics Mountain View CA Swartz Jonathan and Smith Brian RIVL Resolution Independent Video Language Submitted to the Workshop July Toronto CA http Footnotes The Rivl image type is unrelated to the canvas image type	other	cornell
934	 Server Date Sunday GMT Saturday GMT Term Project Parallel Ray Tracing in Vineet Ahuja Amith Yamasani We propose to parallelize an existing implementation of ray tracer called Raylab which is public domain software This sample scene reduced here took approximately minutes to render on the sequential version We have finished learning and now intend to investigate strategies for parallelization of the code We will then convert the program first to program is currently in and then to We hope to come close to of The program will be implemented on the port of DATE TIME	other	cornell
935	 Server Date Sunday GMT Wednesday GMT Fall Syllabus Fall Automata and Computability Theory Syllabus Below is tentative list of topics to be covered in the course They fall into three major areas Finite Automata and Regular Sets Pushdown Automata and Context Free Languages Turing Machines and Effective Computability Each area will comprise roughly third of the course The entire body of lecture notes is available in postscript format by clicking here or you can obtain hardcopy for from Linda Mardel in The lecture notes are soon to be published as textbook by For that reason am very interested in your comments and suggestions In particular will pay you for each mistake typo misspelling etc that you find that do already know about known errata Suggested supplementary readings are taken from the text by Hopcroft and Ullman Introduction to Automata Theory Languages and Computation In addition to these specific topics it is important that by the end of the course you have good general understanding of what it means for set to be regular recursive and of the capabilities of finite automata pushdown automata and Turing machines and of how to describe sets using regular expressions and grammars Finite Automata and Regular Sets Chps Lecture Course Roadmap and Historical Perspective Lecture Operations on Sets Lecture Finite Automata and Regular Sets Lecture More on Regular Sets Lecture Nondeterministic Finite Automata Lecture The Subset Construction Lecture Pattern Matching and Regular Expressions Lecture More on Pattern Matching Lecture Regular Expressions and Finite Automata Supplementary Lecture Kleene Algebra and Regular Expressions Lecture Homomorphisms Lecture Limitations of Finite Automata Lecture Using the Pumping Lemma Lecture DFA State Minimization Lecture Minimization Algorithm Lecture Relations Lecture The Theorem Supplementary Lecture Collapsing Nondeterministic Automata Supplementary Lecture Automata on Terms Supplementary Lecture The Theorem for Term Automata Lecture Finite Automata Lecture and Regular Sets Pushdown Automata and Context Free Languages Chps Lecture Grammars and Languages Lecture Balanced Parentheses Lecture Normal Forms Lecture The Pumping Lemma for CFLs Lecture Pushdown Automata Supplementary Lecture Final State vs Empty Stack Lecture PDAs and CFGs Lecture Simulating NPDAs by CFGs Supplementary Lecture Deterministic Pushdown Automata Lecture Parsing Lecture The Algorithm Supplementary Lecture The Algorithm Supplementary Lecture Parikh Theorem Turing Machines and Effective Computability Chps Lecture Turing Machines and Effective Computability Lecture More on Turing Machines Lecture Equivalent Models Lecture Universal Machines and Diagonalization Lecture Decidable and Undecidable Problems Lecture Reductions Lecture Rice Theorem Lecture Undecidable Problems about CFLs Lecture Other Formalisms Lecture The Supplementary Lecture While Programs Supplementary Lecture Beyond Undecidability Lecture Incompleteness Theorem Lecture Proof of the Incompleteness Theorem Supplementary Lecture Proof home page	other	cornell
936	 Server Date Monday GMT Thursday GMT Prelim Prelim General Info Thursday March pm The Prelim review session will be held on Sunday March at pm in Baker Room Assignments Olin Upson PH Kimball PI Olin Olin Spring pierce	other	cornell
937	 Server Date Sunday GMT Tuesday GMT Poetry Poetry Author Note wrote most of these poems over the past year not too surprisingly my emotional turmoils are often reflected in the verses The Emigrant Soldier What soil sand or rock did tenderly kiss as the holy ground of my homeland Whose water wine or sweetened liquor care lift to quench my thirsty throat From whom did accept gold silver and that which glitters in payment for the crimson stains upon my metal Undisturbed save by the chilly winds of wilderness slept under foreign skies with unknown shrubbery my bedding My resting place lay unmarked save by rusty broken sword The Electric Kiss In the darken world of digital songs bounded by whirling bits of zeroes and ones We kissed Devoid of sensations yet felt your lips upon mine tender moist tinted with the lightest touch of passion smelled the scent of your fragrant locks and tasted the wetness of your mouth Though separated by time place and physical laws We kissed uncaring unbound enjoying only the moment joining the pleasures of nanosecond With sadness and tearful reluctance we parted separated Ended the Electric Kiss Declaration The smile of your tender lips brightens my leaden heart The swirl of your soft flowing locks warms like the sun The batting of your gentle eyelashes makes my steady hand quake The laughter in your glittering eyes makes my life full of joy Oh dear one How do love you How fleeting the ticks of clock when am with you Soft chuckles and heartfelt laughter did enjoy with you What little else can say but love you Prisoner No rings of iron nor ropes of hemp bind me No walls of concrete enclose me No cuffs of steel nor pillory of wood shackle me Yet am prisoner Memories of our tender kiss muffles my voice Thoughts of our shared secrets restraints my action The door to my cage is unlocked open Yet remained within Yet am prisoner Prisoner in loving you Three Loves What is love they asked Which love answered Tell us of the first they asked cried as thought of the answer but no tears came It had dried long ago screamed as memories came back but no sounds of agony issued It had silenced long ago Trembling answered The first love is like poisoned blade thrust in your heart by the pale hand of loved one so slowly twisting uncovered my hand from my chest and black blood yet flowed trickling down to stain the floor As we walked they asked again What is love they asked Which love answered Tell us of the second they asked lifted leather sack and opened it My heart beats within surrounded by sharp glittering glass shards shook the bag and felt the pain Cursing spit out mouthful of scarlet That is the second love answered Pain from thousand cuts twisting churning the gentle touch of your loved one placed your heart in bag of broken glass As we walked they asked again What is love they asked Which love answered Tell us of the third they asked cried no tears came but blood streaked Streaked down my face screamed but my voice cracked my throat tightened in noose fell on my knees The beating heart within the sack The sword wound upon my chest Nothing Nothing Tell us of the third they pressed again ca gasped There is Voices Under the pale moon chatted with digital shadows Men and women with voices flowing through web web of tubes Each mask of electrons wears Deceitful smiles of delight flashed in their curious eyes game of romantic intrigue they played without tender yielding flesh without gentle kisses or red roses without any form of golden bands drifted amidst sea of banshee sounds Blind and Numb hear the Lake of Souls Save me save me Ha ha ha ha Tell me of that IMHO the cried and laughed with them Yet in the end They are little more than distant voices as am to them Tender is the Night Tender is the night when Luna luminous glow fell upon your lovely face and stars winced in bright jealousy Soft is the evening breeze that the whispers of air send your locks rippling like ocean waves caressed the gentle curves of your neck feeling the comforting smoothness of your skin Gently kissed your half closed eyelids Embracing you felt our bodies tremble in tingling resonance our hearts pounded fearful yet full of love delightful joy Tender is the night when Luna grew bashful behind the formless clouds and stars twinkled in glitters of envy Envious of us Modes Whistling breeze through tattered veils Broken shards of light and shadows Pale transluscent marble floor Dried droplets of blood and tear Wandering did breathless moans of lust Tender whispers of yearning yet echos Pacing the thoughts Ringing laughters and fleeting smiles Lonely House Two Tattered Veils Three Broken Windows and Four panels of Stained Floor And would be the one to hold you down kiss you so hard take your breath away Dark Winds over Sethanon With cynical intelligence and festering passion fought upon the wall of grey Sethanon beneath Dark Sun and Dark Moon Each moment hectic exertion Each moment sorrowful introspection Fleetingly fell the sands of time As the embers of hope grew dimmer Howling winds cleaved its chill to my bone Grimacing steel laced through my flesh tasted the bitterness of my blood Hot salty tears streaking down my soul Once you and kissed farewell in street devoid of others Farewell Kiss Like stringless kite flew my caring thoughts of you No longer able to enter your world No longer able to warm your heart saw the tragedy acted out Neither laughter nor joy in the finale Only frozen shards of dreams remain In that sudden moment understood little the promises that would never be In that blinking of the eye Your face was unfamiliar no longer the one had known Snow descended in my world So cold so cold that could not love so cold that it expose my every hidden regret You and kissed farewell in an alley with no others letting the wind mock my weakness incapable of pushing you away You and kissed farewell in the chaos of night my heart waiting anticipating sorrow and despair At Buttermilk Fall Tho brilliant sunlight streamed across my face And glittering blue flowed the sky above me Dark and shadowy swirled my thoughts Tho grass swayed in breeze And aqua lotus leaves floated upon the rippling pond Black and grey trembled my feelings small tome of love poems the gentle reminder of that difficult truth is better to loved and lost then loved at all Depression and Desolation mine Dark Shadowy Black and Grey Until thought of your gentle face your hazel eyes and dark locks your beautiful carefree smile Slowly gradually almost imperceptiblly the corner of my lips turned smiled as thought of you Monologue Broken Verses In the silence of the night am troubled In the noise of the day am worried Shards of my dreams rained upon me their sharp points and razor edges bled me Why is it that must ever turn inward to face that abyss within To be alone in confronting the demons Why ask why Do you not hear the laughter within the wind Mocking silly laughters that sends chills up my spine Do you not hear the cries within the cackling fire Taunting eerie cries that burns me No tears no sadness No screams no sorrow Only embers of resentment now remain In the end only the flame of anger and hatred remains to burn away the excessive emotional burdens to burn away the impurities to burn away all but the focus sighed at the sands the rocks the azure heavenlies If must fight on alone so be it In the end if must pay so be it So be it laughed there is no joy in the sound laughed Musings to Demons In the twilight of broken visions when my left arm clots of scarlet my constant companions are but two Death and Despair Where are my tears long wondered Perhaps they fled this cruel mortal shell leaving me expressionless What twisted creature within me mocks That should laugh and taunt my own misery Death and Despair Death and Despair How you been with me always false laughter or an joke mocking my own screamless torments can not break your companionships Longing for the end Mayhaps Blood stained white roses Teardrops upon broken granite Lightning in gray tempest These are but few of my favorite things Thunderstorm Sky gray edge to edge Thunderous boom resound heavenlies Billiant glare lights above Tear drop rain softly caressed Amidst storm stood awed Stilled at Nature mood Thunderstorm II Through eye edge steel sky held Sudden flashes ripped blacken clouds Echoed still thunderous clash Chilled rain washed my burning tears Impressions Colored shadows filtered in ambient light Neon brilliance stared out to cloaked streets Airy curly lazily drifted puffs of virulent cigarette smoke Harshly speedily pressingly pounded drums voices and metallic strings Hazel transluscent emerald and scarlet ebbed vessels of ethanol Notes trembled through walls floors and wavering forms Portraying feverish beating dream Familiar faces lighted by inhaled tobacco whispered softly into ears Why do people come to such places do know but hey barkeep could you get me another one References Possession from Fumbling toward Ecstacy Sarah McLachlan Arista Records Farewell Kiss from Farewell Kiss translated from Chinese	other	cornell
3753	 Server Date Sunday GMT Monday GMT Course Home Page CS Info Syllabus Labs Links Announcements Room Update Due to unforseen circumstances we are still unable to use Upson for class Therefore here are the following room assignments for Tuesday and Wednesday Section in Philips Section in Upson Thursday class will meet in the MacLab as usual Prelim The first prelim will be on Wednesday It is an closed book exam that will cover all course material covered through the first lab assignments Labs and Lab are both due on Tuesday You do not need computer to do Lab	course	cornell
3754	 Server Date Sunday GMT Thursday GMT Advanced Language Implementation CS Advanced Language Implementation Contents Description Handouts Administrivia Web Links Description Modern programming languages such as SML Java Haskell and Dylan provide features such as objects and closures polymorphism abstract data types and classes garbage collection exceptions and continuations threads and synchronization constructs This class will survey modern techniques for efficient implementation of these features Our focus will be on the implementation of modern functional languages but we will make connections to other kinds of languages notably Handouts Handouts are now on separate page Administrivia Instructor Greg Morrisett Office Upson Email jgm Phone Admin Assistant Linda Competillo Upson Office Hours MWF or send email for an appointment TA Evan Moran Office Upson Email evan Phone Office Hours Tuesday Thursday Web Links Mark Leone Resources for Programming Language Research The Fox project information about Standard ML Reference information for postscript User guide Description of the base environment Description of the system environment Library documentation Documentation of available tools Reference indexDocumentation of available tools gentle introduction to SML Andrew Cumming MIT info on	course	cornell
3755	 Server Date Sunday GMT Thursday GMT Computer Science Computer Science Fall Course Information August is an introductory course covering broad range of computer science concepts and techniques including data abstraction recursion program correctness generic functions object oriented programming pattern matching and languages and their evaluators We use the Dylan language an object oriented dynamic language developed at Apple Computer which is well suited for covering broad range of introductory computer science topics This is not course about the Dylan language it just happens to be the notation that we have chosen for writing programs The major goals of the course are to teach students how to think clearly about programs and programming and to provide toolbox of modern programming techniques that will be applicable in any language What course to take Students often wonder whether to take or focuses on programming skills in the language Java whereas provides exposure to broad range of computational and programming problems using number of programming paradigms including functional and imperative programming techniques If you have good CS background or good formal skills mathematics or physics you should probably take Transfers between and in either direction are encouraged during the first two weeks Reaching Us The best way to reach the course staff is by posting questions or comments using the Web site http This site contains all course materials and runs CoNote server which allows students and staff to post questions and answers as annotations to the handouts and problem sets In order to access the Web site you will need to request and password for the CoNote system To do this simply go to the home page and follow the instructions Your and password will be created by Monday if you request them this week You can also reach the course staff is by sending email to but this should not be used for asking questions about problem sets or handouts use the Web site Who We Are Dan Huttenlocher Professor Upson Tobias Mayr TA Upson James Hamblin ugrad TA Robert Szewczyk ugrad TA Justin Voskuhl ugrad TA Andras Ferencz consultant Melissa Ho consultant When We Meet Lectures are Tuesday and Thursday at in Kimball and recitations are Monday and Wednesday at or Recitations expand on the material in lecture and provide more opportunity to ask questions Consulting hours for help with problem sets or other questions will be held from until midnight the two evenings before each problem set is due see schedule below Thus for problem sets due on Tuesday there will be consulting hours Sunday and Monday evenings and for those due on Thursday there will be consulting hours Tuesday and Wednesday evenings Consulting hours are in the public Mac lab in Upson Office hours are James Hamblin TBA Dan Huttenlocher Tobias Mayr Robert Szewczyk TBA Justin Voskuhl TBA Course Materials There is no textbook for this course There will be course handouts and lecture notes which will be available both in hardcopy and on the course Web site The Dylan interpreter is available free on the course Web site and was developed by Justin Voskuhl for this class It is implemented in Java and thus will run under any Java capable Web browser The best current browser it changes almost weekly is Netscape for which has Borland Java compiler There are also standalone versions available that you can download onto your computer if you do not want to use the Web browser version One word of warning if you download standalone Dylan onto your machine make sure that you are using the most recent version by checking the web site Course Requirements Students are responsible for all material in the assigned readings as well as that covered in lectures and in recitations There will be six problem sets two preliminary exams and final exam schedule is given below Each problem set will be combination of written exercises and programming assignment Course grades will be based on combination of the problem sets and exam scores The problem sets will account for approximately one half of the total grade No late assignments will be accepted we will generally grade assignments immediately and return them the following class period You should try to complete the programming assignments early as we will not accept late work The best use of your time and the machine time is to think about the problems before sitting down at the computer No matter how many times we say this it takes long time to sink in think about the problems before sitting down at the computer Policy on Joint Work Much of the learning in this course comes from doing the programming problems You may work jointly with one other person on the assignments no more than two people should work together However if you work together with someone you must submit single joint assignment with both names on it Under no circumstances may you hand in work done with or by someone else under your own name If in doubt credit the person from whom you got help You would be amazed at how easy it is to tell when people work together on problem sets so please do make life unpleasant for all of us by breaking these rules Public Lab Facilities CIT and various colleges on campus provide public Macintosh and PC facilities you may use your own machine or the public ones The CS department does not provide computer facilities for this course The course consultants will be available in the Upson Mac lab see above Problem Set Due Dates and Exam Dates All problem sets are due before on the due date For example an assignment due Tuesday must be submitted electronically to the course server by on Tuesday that is late Monday night No late assignments are accepted so make sure you submit your final solution by the correct time and date Assignment Assignment Assignment Prelim Assignment Assignment Prelim Assignment Final Exam see exam schedule Lecture Outline The Study of Computation and an Introduction to Dylan Function Abstraction and the Substitution Model of Evaluation Procedures and Processes Iteration Recursion and Induction Higher Order Procedures Functional Arguments and Values Analysis of Algorithms Orders of Growth Data Abstraction Structures Contracts and Implementations Hierarchical Data Lists Trees and the need for Quotation Recursive List Processing and Reasoning about Lists Symbolic Differentiation An Extended Example Generic Operations Type Dispatching and Generic Functions Generic Operations Polynomial Arithmetic System Assignment and the Environment Model of Evaluation Assignment and Local State Variables Objects with State and Object Oriented Programming Object Oriented Programming and Inheritance Multimethods and More About Object Oriented Programming Mutable Data Stacks and Queues Mutable Data Heaps Heapsort and Priority Queues The Metacircular Evaluator Dylan in Dylan Variations on Expression Evaluation Compilation and Optimization Streams Infinite Streams Nonlocal Exits Catch and Throw Garbage Collection and the Illusion of Infinite Memory Topics in CS Randomization and Quicksort Topics in CS Computability	course	cornell
3756	 Server Date Wednesday GMT Monday GMT Home Page Foundations of Artificial Intelligence Computer Science Department Cornell University Fall Welcome to Course Information for and Course Materials for and Code of Academic Integrity Please read Announcements claire The due date for Program has been moved to Monday Nov at the beginning of class scott Solution to Homework is now here kevin The code on the PCs for programming assignment is now all set Note that new file needs to be loaded all of the functions are the same but they have been rearranged slightly Also variables previously defined as constants were changed to parameters to appease the compiler these vars are still bracketted by Those of you using the PC lab should use the files there Those using the cs machines should use the files on Netscape kevin can be found in at for those with PC accounts kevin For those of your using the PC lab there is serious gremlin in the code for programming assignment You will still be able to look at the code and get started on the assignment but the planner will not successful run upon completion of Meanwhile we be hunting Those using the cs machines should have this problem kevin Special Offer Limited Time Only Are you concerned about getting zero on the third program Worry no longer Just complete the assignment as specified on the Course Materials page and positive grade will result Guaranteed This offer available only through November Only one assignment per group please claire There is clarification to problem in homework Unless otherwise specified you can assume that either the system adds the fact that JB is Dodge Van to the KB at query time or the fact that JB is Dodge Van already exists in the KB The postscript document has been modified to include this clarification scott The new homework is here The new homework is here Its due kevin The solution to Programming Assignment is now available on the Course Materials page claire The solution to the midterm is available from the Homeworks and Solutions portion of the home page claire Information about the status reports due Tuesday is now available in the section of the home page claire Reminder No class on Monday scott Solutions to Homework are right here in postscript Other CS course home pages CS Department home page	course	cornell
3757	 Server Date Sunday GMT Saturday GMT Home Page Database Systems and Information Retrieval Department of Computer Science Cornell University Spring Grades Have nice summer Introduction This three credit course covers the fundamentals of database systems and information retrieval The course will be roughly two thirds databases and one third information retrieval Topics to be covered in database systems include the following data modeling model relational model physical organization indexing and hashing relational database design database query languages query optimization crash recovery concurrency control and transaction processing The information retrieval part deals with how to find useful information in large textual databases This part of the course will cover inverted file systems the vector space model the SMART system vector similarity indexing weighting ranking relevance feedback phrase generation term relationships and thesaurus construction retrieval evaluation and if time permits automatic text structuring and summarization Link to Course Material class notes homeworks solutions Class Times and Place Tuesday Thursday minutes Thurston Prerequisites or and is recommended Books Database System Concepts by Korth and Silberschatz McGraw Hill Second Edition Required see cover Fundamentals of Database Systems by Elmasri and Navathe Benjamin Cummings Second Edition on reserve Principles of Database and Systems by Ullman Computer Science Press on reserve The information retrieval part of the course will use photocopied material from Salton books and research papers Instructor Amit Singhal singhal Upson Office hours Tuesday Thursday Teaching Assistants Sophia Georgiakaki spg Office hours Wednesday in Upson or by appointment send mail Marcos Aguilera aguilera for only Amith Yamasani amith Office hours only by appointment send mail Grading Exams There will be two midterms each worth of your final grade and final exam worth of your final grade Homeworks There will be five homeworks in the semester each worth of your final grade Homework Policies You can work in groups of up to people on homework If you work in group clearly indicate the names of all the group members on each homework The entire group will receive the same grade Homeworks will be available on the home page on Tuesday and will be due in class on Thursday of the following week solution set along with grading guide will be available of course after the due date through the course home page No late homeworks will be accepted Illegible homeworks are hard for your TAs to grade Even though it is not required you are encouraged to type your homeworks Use LaTeX if possible if you do already know it this will be good opportunity for you to learn LaTeX Homework Submission Please attach cover page to your homeworks with names of all the group members sorted alphabetically by the last name Also write on the cover page For Example Bill Clinton Bob Dole Ross Perot Graded Homeworks Graded homeworks will be returned in class sorted alphabetically by the last name of the first group member from the cover page The grade will be listed on the first page following the cover page If you do not want your homeworks returned in this way please send mail to the instructor Regrade Policy All regrade requests should be submitted to the instructor in writing within week after you get back your graded homeworks Course Schedule This is tentative schedule for the course All chapters refer to Korth and Silberschatz Tuesday January Introduction Model Reading Chapters and Thursday January Model Relational Model Reading Chapters and Tuesday January Relational Algebra Reading Chapter Homework available Thursday February Tuple Relational Calculus Domain Relational Calculus Reading Chapter Tuesday February SQL Reading Chapter Thursday February Integrity Constraints Relational database design Reading Chapters and Homework due Tuesday February Relational database design Reading Chapter Homework available Thursday February Relational database design Reading Chapter Tuesday February File Structures Reading Chapter Thursday February Indexing Reading Chapter Homework due Tuesday February Query Optimization Reading Chapter Thursday February Prelim Tuesday March Query Optimization Reading Chapter Homework available Thursday March Crash Recovery Reading Chapter Tuesday March Crash Recovery Concurrency Control Reading Chapters and Thursday March Concurrency Control Reading Chapter Homework due Spring Break Tuesday March Transaction Processing Reading Chapter Homework available Thursday March Transaction Processing Reading Chapter Tuesday April Introduction to Information Retrieval Thursday April Vector Space Model Homework due Tuesday April Term Weighting Thursday April Prelim Tuesday April Indexing Homework available Thursday April Evaluation Tuesday April Relevance Feedback Thursday April Document Clustering Homework due Tuesday April Advances in Information Retrieval Thursday May Advances in Information Retrieval	course	cornell
3758	 Server Date Wednesday GMT Thursday GMT Home Page Home Page Looking for Admin handouts and information incl TA office hours Lecture notes Assignment information Recitation information The Ethics Professionalism and Social Responsibility Page or maybe Electronic Submission Procedure Group Performance Evaluations Web resources Quotes and other fun stuff collection of jokes has been started here Submit your own Sumedh office hours Breaking News Recitation this Monday will be held in the csuglab floor Upson Misc Stuff Converting raw text to Postscript Some people have asked how to convert raw text to Postscript The simple way is to use the Unix program enscript Here are two suggested ways of doing this enscript enscript The first prints the files good for source code The second prints them The gives nice header This generate Postscript file If you leave out the it should just send the file to the printer More to come Last modification Wed Nov EST	course	cornell
3759	 Server Date Monday GMT Thursday GMT CS Fall Advanced Programming Languages Fall Faculty Robert Constable rc cs Upson Office Hours Monday Teaching Assistant Ravi Kumar ravi cs Upson Office Hours Thurs Fall Notes Fall Assignments Fall Notes Fall Notes Fall Notes Nuprl Classic ML Comments Questions Suggestions on Web page Please pavel	course	cornell
3760	 Server Date Wednesday GMT Thursday GMT Home Page Systems Programming and Operating Systems Practicum in Operating System Kenneth Birman News Group Course Syllabus Lecture Notes Unix Filesystem Structure Linking Static and Dynamic Assignments Assignment Assignment Assignment Assignment Assignment Solutions Solution Solution Solution Solution Prelim Solution TAs LiLi Upson Hall Phone lili Office Hours Wednesday and Friday Huang Upson Hall Phone ychuang Office Hours Tuesday and Thursday Mihai Budiu Upson Hall Phone budiu Office Hours Wednesday and Thursday Last modified Thu Nov	course	cornell
3761	 Server Date Wednesday GMT Friday GMT CS Advanced Database Systems CS Advanced Database Systems Time AM Tuesday and Thursday Place Upson Survey Proposal Due Project Proposal Due Prelim Exam UP Paper Survey Due Evaluation Project Completion Final Exam AM HO Contents Lecture Schedule Prelims Sample Questions Answers outside firewall Prelim Result Stats Project And Survey Project Info The PREDATOR DBMS Current Lists outside firewall Reference Material List Handouts Notes and Mail Archive Course Description Prerequisites TextBook Information Grading Professor Teaching Assistants Course Description CS is being offered for the first time in Fall It is intended to give students solid background in the design and development of database management systems DBMS Database systems are possibly the largest pieces of software and certainly among the most valuable pieces of software While DBMS is in one sense giant application program there are surprisingly many principles behind its development and use The database industry is growing and thriving and the demand for knowledgeable database engineers is much greater than the supply The database research community is also active and there are always new problems to be addressed because of the explosive amounts of data that people wish to access This course forms essential background for anyone who wants to become systems engineer at database development company or become an informed user of database systems or become database systems researcher or develop systems in any domain that manipulate large amounts of data or find out how teller machine really works number of advanced fundamental DBMS concepts will be covered Although this is not intended to be an introductory course it is new course and there may be students in the class with different backgrounds Consequently the discussion of various topics will begin with quick review of basic material taught in CS Click here for tentative list of topics to be covered In terms of workload here what the course involves There will be midterm and final examination These will test breadth of basic concepts Each student will have to do survey paper on specific advanced topic Here is list of possible topics The purpose of this is to be aware that what is being taught in the course is only fraction of what is out there This paper will be due three weeks after the midterm and should be complete with references It will require reading papers from journals and conference proceedings in the engineering library will suggest initial references and you will have to pursue additional references from there Click here for information on reference material in the library development project involving programming Look here for more information There will be no written homework assignments Students take turns writing lecture notes Depending on enrollment this means each person will have to take notes once or twice in the semester Hopefully this additional work will turn out to be useful around exam time Here are the details in Development Project The term project is an important part of the course and will involve significant amount of programming You can choose whether you wish to work alone or in teams of two However the projects will involve proportionally more work The goal of the project is to get experience at building some specific DBMS component to get comfortable working with large and modifying it in modular manner The second goal is as important as the first one because all database systems are huge software systems and rarely do you have the luxury of starting from scratch This forces you to write modular code and also to understand the interaction between the different system components when the inevitable bugs appear There are two research DBMS prototypes that will be used in the projects One is MINIBASE which is software associated with the textbook It is simple database system that provides all the components from the SQL parser down to the disk manager This should hopefully be available depending on our being able to compile and run it in our computing environment The important part of MINIBASE is the interface description of the various system components The actual code comes from class projects Consequently projects using MINIBASE will involve writing component like the buffer manager based on specification of its interface The other prototype is PREDATOR which is query processing engine that have been developing for my research There are number of possible projects some of which could lead to research topics that can be built on top of PREDATOR The focus here is on the functionality like complex queries and new data types If you are not familiar with recommend MINIBASE project because the amount of design needed is minimal If you think you are interested in database systems research then you should do PREDATOR project If you fall in neither category then you should decide whether you want project at the DBMS storage access buffer areas or the query processing optimization areas and choose between MINIBASE and PREDATOR There are also some general projects that involve neither system If you have your own idea on suitable project you should talk with me about it well in advance of the project proposal date Here is tentative list of possible projects In all the projects there will be certain steps that should be followed As part of the project proposal you should discuss with me and submit an ordered list of pieces of functionality that the project will produce There will be review in which you meet with me to discuss the progress that you have made towards completing the project The code you write must follow the coding conventions of the particular system that you are working on detailed coding conventions document will be provided and should be followed closely This is something that will be very picky on and that will contribute to the grade you get on the project Project submission should include demo and reasonable amount of test data Some useful references are Home page for PREDATOR Home page for MINIBASE Course TextBook The primary text is beta edition of new book on database systems Database Management Systems by Raghu Ramakrishnan This book contains many more details than are in most other introductory database books It is also associated with free software for an instructional database system MINIBASE which we might use in class assignments The textbook is available in the campus store for Here are other textbooks which could be used as references Korth Silberschatz Database System Concepts Second Edition This is the standard introductory database text but lacks the detail to be used in graduate course Michael Stonebraker Readings in Database Systems Morgan Kaufmann Second Edition This is collection of relatively recent papers in the area collected and introduced by Stonebraker who developed the Ingres Postgres and Illustra database systems Many of these are fundamental papers on core areas Elmasri Navathe Fundamentals of Database Systems Second Edition This is an alternative introductory database text Gray Reuter Transaction Processing Concepts and Techniques Morgan Kaufmann This is the bible of transaction processing pages long and tells you all there is to know and lot more about transactions It is wonderful reference to clear up confusing aspects of concurrency control recovery transaction semantics etc Some reference material has also been placed in the library Click here for details Information Here are some resources about programming Tutorial CS The language under construction Debugging with gdb GNU Make Grading Policies The grades for the course will be assigned based on the following percentages Prelim exam Final exam Survey paper Lecture Notes Term project The prelim exam will be on the evening of Oct at in Upson It will be set to be comfortably finished in hrs but an extra half hour will be provided for those who need it Likewise for the final exam The final should be in exam period Dec but this again is tentative and needs to be confirmed The final exam will focus on material not tested in the but the material covered in the earlier part of the course may form background for some of the questions Professor Praveen Seshadri Office Upson Phone praveen cs Office Hours AM Tuesday and Thursday Teaching Assistants Wei Tsang Ooi Office Upson Hall Phone weitsang cs Office Hours MWF AM noon	course	cornell
3762	 Server Date Wednesday GMT Monday GMT Data Structures Computer Science Fall Time and place Tuesday Thursday pm Kimball Course staff and office hours Handouts Assignments Corrections to the current Assignment Solutions to past Assignments and Prelims Prelim and Final dates Programming Language Academic Integrity Text Errata postscript Recently downloaded copy of the Errata sheet for the text pages Current estimate on the approximate Schedule Topics covered in lecture and the corresponding chapters in the text Includes rough prediction of future lectures Last updated Lab accounts Send email to heng if you do not yet have Lab account Assignments Homework due Tuesday September Statistics graded out of mean SD Assignment due Thursday September Statistics graded out of for program for written part mean SD Assignment due Thursday September Statistics graded out of mean SD Assignment due Thursday October Statistics graded out of mean SD Assignment due Tuesday October Statistics graded out of mean SD Average time spend hours Assignment due Tuesday October Statistics graded out of mean SD Assignment due Tuesday November Statistics graded out of mean SD Assignment due Tuesday November Late assignments will not be accepted Assignment due Tuesday November Late assignments are due the Tuesday after Thanksgiving December Corrections and Clarifications to the current Assignment Assignment and Prelim Solutions Homework Solutions Homework Solutions Homework Solutions to Recommended problem Homework Solutions to Assigned problems Homework Solutions to Recommended problems Homework Solutions to Assigned problems Prelim Solutions Homework Solutions Homework Solutions to Recommended problems Homework Solutions to Assigned problems Homework Solutions to Recommended problems Homework Solutions to Assigned problems Homework Solutions to Recommended problems Homework Solutions to Assigned problems Info on Assignments Please fill out the info sheet and the release forms for the class if you have not done so yet Graded homework is available in stack in the Undergrad Office Upson If you prefer that we hold onto your homework until you pick it up then you should clearly mark HOLD at the top of the first page of the homework Homeworks will only be accepted in class and on time Late homework will receive grade of zero However to cover cases of emergency or illness up to two assignments will be accepted one lecture late or one assignment two lectures late without penalty You do not need to inform me about late homeworks in advance or to give me any excuses Excuses for late homeworks beyond the first two will not be accepted Other Handouts Printed handouts are available on the Web In addition extra copies of these handouts will be dropped off at the Undergraduate Office Upson immediately following class will use some transparencies for the lecture Copies of the transparencies will be available at the lecture but not be available afterwards General Information Getting Started with Microsoft Visual Version Prelims and Final Prelim Thursday October Prelim Thursday November Final Monday December Prelims will be given on the above days in class Programming Language Programs can be written in either or If you do not know either or you might consider taking concurrently to this class to learn or you have to learn it by yourself using any book or one of the online Tutorials and Tutorials Online An Introduction to by Marshall Brain This is great introduction for people who know procedural language like Pascal or Fortran Programming in by David Marshall These are the course notes for class at the Cardiff University Lots of example programs lecture notes for the initial weeks of last are seems very helpful in learning Learn Today is guide to lot of books example programs and online tutorials Each reference is very well annotated The Yahoo Page If you wish to surf the web in search of more material this is the place to start The Frequently Asked Questions page Should be useful in answering the common questions that come up while learning and using Also contains link to several online tutorials The Frequently Asked Questions page Should be useful in answering the common questions that come up while learning and using The Newsgroup Academic Integrity Students are allowed to collaborate on the homework to the extent of formulating ideas as group Each student is expected to write up the homework by himself or herself Students may not copy any part of someone else written homework or code	course	cornell
3763	 Server Date Sunday GMT Saturday GMT CS Home Page CS Software Engineering Technology and Techniques Computer Science Department Cornell University Fall Course Staff Samuel Weber Professor Upson weber Office Hours MF Ioi Lam TA Upson ioi Office Hours Vineet Buch TA Upson buch Office Hours Thursday Yaron Minsky TA Office Hours None Course Materials Course Overview Course Handouts Lecture Notes Recitation Notes Resources Assignment Grades and Remarks Other Stuff Frequently Asked Questions From Borland samuel Last modified Oct	course	cornell
3764	 Server Date Sunday GMT Monday GMT CS Fall CS Fall Professor Monika Rauch Henzinger Email mhr Course Information Homeworks Solutions Lectures Lecture Graph Exploration Lecture Greedy Algorithms Lecture Matroids Lecture Matroids Lecture Dijkstra Algorithm Lecture Algorithm Lecture Matrix Closure Lecture Binomial Heaps Lecture Binomial Heaps Lecture Fibonacci Heaps Lecture Treaps Lecture Randomized Search Trees Lecture Lecture Lecture Lecture MaxFlow Lecture MaxFlow MinCut Theorem Lecture MaxFlow Algorithms Lecture MaxFlow Lecture MaxFlow Preflow Push Lecture MaxFlow Preflow Push Lecture MaxFlow Dynamic Tree Implementations	course	cornell
3765	 Server Date Sunday GMT Saturday GMT Home Page Introduction to Natural Language Understanding Computer Science Department Cornell University Spring Welcome to Course Information for Course Materials for Code of Academic Integrity Please read Announcements Here is list of resources available in brill directory for the Brill part of speech tagger brown directory for the Brown corpus tagged directory for small corpus annotated with information text is from the corpus xwn executable for WordNet be sure to set the environment variable WNSEARCHDIR to before you run xwn Finally this site contains description of the contents of the Penn Treebank II collection of annotated text We have this here at Cornell You can use any part of it that you like for your projects Talk to Francis about how to access it Other useful information for the project Database of recent papers in Computational Linguistics and NLP AI Repository contains has pointers to code for various NLP system components Presentation Schedule What to Turn in for the Project Other CS course home pages CS Department home page	course	cornell
3766	 Server Date Sunday GMT Wednesday GMT Introduction to Scientific Computation Introduction to Scientific Computation Summer Class Information Syllabus Source Code Handouts Problem Sets An introduction to elementary numerical analysis and scientific computation Topics include interpolation quadrature linear and nonlinear equation solving fitting and ordinary differential equations The Matlab computing environment is used Vectorization efficiency reliability and stability are stressed Class Information Staff Nikos Pitsianis instructor Office Upson Hall nikos Office Hours and and any other time by appointment Ozan Hafizogullari teaching assistant Office Upson Hall ozan Office Hours and Th and any other time by appointment Lectures Class meets every day in Upson Hall Course Administration Laurie Buck Upson All the questions concerning grade recording accounts should be addressed to the course administrator Prerequisites CS and of Math or Math Course Materials Text Introduction to Scientific Computing Approach Using Matlab by Charles Van Loan It will be distributed in class Software MATLAB You can purchase Student Matlab for either the MacIntosh or the PC version though you do not have to Computer Labs This course has been designated to use the three computer labs Upson Sibley and Martha Van Rensselaer Problem Sets There will be assignments which will be handed out in lecture or from this page Extras will be available in rack outside Upson Assignments will be collected in class All the computing problems will be done in MATLAB Return of graded work will be handled in class An assignment is due at the beginning of the class on the due date Late assignments wo be accepted for credit The worst grade from the six assignments will be ignored for the final grade Each assignment can be done alone or with at most one partner Print your name one copy with both names if working in pairs on the first page and include your student ID No change or addition of partner names after an assignment has been handed in Exams There will be midterm and final exam Days and times are listed below Grading Your final total score will be computed as follows Best assignments Midterm Final Your final grade will be assigned according to your relative ranking in the class based on your final total scores June Introduction out June Programming in MATLAB June Errors June Floating Point Numbers Registration Deadline June Polynomial Interpolation July due out July Piecewise Interpolation July Hermite July No Class July Cubic Splines Add Course Deadline July Numerical Integration due out July July Composite Rules Change Deadline July Adaptive Quadrature July Review due Drop Course Deadline July Midterm Exam at the classroom out July Matrices and Operations July Linear Systems and LU July Least Squares July QR and Givens July Cholesky due out July Finding Roots July Minimize Function of One Variable July Minimize Multivariate Functions July Solve Systems July Initial Value Problems due out July Euler Euler July Methods Adam Methods due Review No Class Final Exam at the classroom Source Code Examples from Introduction to Scientific Computing At the Mac labs Upson Sibley and Martha van Rennselaer Hall the source code is located at the folders If you plan to work on your own stand alone computer or at lab other than the assigned ones here is the source code for the examples For Mac file For other systems or Unix You uncompress and untar with the unix command zcat tar xfv It is highly recommended you get and use zcat Or just browse through an FTP session You need postscript file viewer installed at your computer in order to see the files below Handouts grades randperm length grades ans Problem Sets Assignment Assignment Assignment and Assignment	course	cornell
3767	 Server Date Sunday GMT Tuesday GMT Home Page Systems Programming and Operating Systems Practicum in Operating System Kenneth Birman News Group Course Syllabus Lecture Notes Unix Filesystem Structure Linking Static and Dynamic Assignments Homework Homework Homework Homework Homework Assignment Solutions Solution Solution Solution Solution Prelim Solution TAs LiLi Upson Hall Phone lili Office Hours Wednesday and Friday Huang Upson Hall Phone ychuang Office Hours Tuesday and Thursday Mihai Budiu Upson Hall Phone budiu Office Hours Wednesday and Thursday Last modified Tue Nov	course	cornell
3768	 Server Date Sunday GMT Wednesday GMT Practical Distributed Systems Practical Distributed Systems Registration in is necessary for students taking General Information Course Overview and Logistics Readings Homeworks Homework Due Homework Due postscript Homework Due Examinations Midterm Examination Due postscript Final Examination Due postscript Annotated Bibliographies Selected annotated bibliographies prepared by class	course	cornell
3769	 Server Date Wednesday GMT Tuesday GMT CS Home Page Multimedia Systems Computer Science Department Cornell University Fall Course Staff Course Info Course Materials Students Web Pages Project Web Pages Some useful links Newsgroup Anouncements Newsgroup Access Rivl bug Comments or questions about this web page Send mail to janosi	course	cornell
3770	 Server Date Sunday GMT Friday GMT Home Page Foundations of Artificial Intelligence Computer Science Department Cornell University Fall Welcome to Course Information for and Course Materials for and Code of Academic Integrity Please read Announcements claire Final grades will be available sometime Saturday can send you your grade via if you request me to do so via claire Final exam is Dec Upson Alternate date is Dec Upson Other CS course home pages CS Department home page	course	cornell
3771	 Server Date Sunday GMT Sunday GMT CS Home Page Multimedia Systems Computer Science Department Cornell University Fall Final Project Presentation Schedule Course Staff Course Info Course Materials Students Web Pages Project Web Pages Some useful links Newsgroup Anouncements Newsgroup Access Rivl bug Comments or questions about this web page Send mail to janosi	course	cornell
3772	 Server Date Sunday GMT Friday GMT Home Page Spring Home Page Spring Message of the Day Welcome to the Home Page Remember to check here frequently for important information regarding the course Prelim is Tuesday April The review session will be held on Sunday April at in Baker Course Information Instructors Teaching Assistants Office Hours Getting course materials from the World Wide Web CodeWarrior on your personal Mac Programs Lecture Programs Program Program Program Program Program Program Exams Prelim Tues February Prelim Thur March Prelim Tues April Final Exam Mon May Last Updated April Spring pierce	course	cornell
3773	 Server Date Wednesday GMT Friday GMT Fall Home Page Fall Automata and Computability Theory Welcome to Click to see Course Information Lecture Notes Homework and Exams Study Guide Announcements Course notes available in hardcopy Do do the homework sets in the notes New TA office hours Incorrect due date Prelim Prelim Revised Homework Homework erratum Change of room for Nikolay office hours Code of Academic Integrity Please read Other CS courses CS Department	course	cornell
3774	 Server Date Wednesday GMT Monday GMT Home Page Structure and Interpretation of Computer Programs Computer Science Department Cornell University Fall Course Materials Access to course materials requires and password which you can request by attempting to access the materials Course Info Dylan Interpreter New window Dylan Interpreter This window Note some Web browsers including Netscape do not correctly check for changed Java class files Thus when NOODLLE is changed you may see inconsistent behavior Here how to fix it If you are working with parter link you directories with the PartnerJoin Utility Announcements	course	cornell
3775	 Server Date Sunday GMT Tuesday GMT CS Advanced Programming Languages Fall MWF Upson Instructor Tom Henzinger Upson tah Office hours after class and by appointment Teaching assistant Neal Glew Upson glew Office hours Tu Th and by appointment Handouts Handout September Course Information Handout September Getting Started with ML Handout October Homeworks Homework due September solutions Homework due September solutions Homework due October solutions Homework due October solutions Homework due November solutions Homeworks Gries Homework due November solutions Homework due December solutions Homework due December solutions Raw Notes Raw notes September Raw notes September Raw notes September Raw notes September Raw notes September Raw notes September Raw notes September Raw notes September Raw notes October Raw notes October Raw notes October Raw notes October Raw notes October Raw notes October Raw notes October Raw notes November Raw notes November Raw notes November Raw notes November Raw notes November Raw notes December Raw notes December Scribe Notes Lecture September Lecture September Lecture September Lecture September Lecture September Lecture September Lecture Introduction to ML Lecture September Lecture September Lecture September Lecture September Lecture September Lecture September Lecture October Lecture October Lecture October Lecture October Lecture October Lecture October Midterm October solutions Lecture October Lecture October Lectures Gries Lecture November Lecture November Lecture November Lecture November Lecture November Lecture November Lecture November Lecture November Lecture November Lecture December Lecture December Lecture December Lecture December	course	cornell
3776	 Server Date Wednesday GMT Monday GMT Fall Home Page Computers and Programming Computer Science Department Cornell University Fall Question and problems about this page should be emailed to Nawaaz Ahmed nawaaz You may have trouble viewing the tables if you using an early version of NetScape Changes to this document are logged Click here for the latest updates The order of the updates since November has been changed so that the latest updates are at the top of the page You can also post problems you have found solutions to them and any other related material to the newsgroup This is an experiment let me know if using the newsgroup link is problem on the macs Course description Course staff Updated with office hours information Additional References Lecture notes Handouts Assignments Code samples Exams and Solutions Course description COM Computers and Programming also ENGRD Fall spring summer credits Credit will not be granted for both COM and Prerequisite COM or equivalent programming experience Intermediate programming in language and introduction to computer science Topics include program development proofs of program correctness program structure recursion abstract data types programming data structures and analysis of algorithms Java is the principal programming language There will be two prelims and one final for this course Prelim October Prelim November Final December The exact location of the prelims will be announced later	course	cornell
3777	 Server Date Wednesday GMT Wednesday GMT Discrete Structures Discrete Structures Course Information Instructor Professor Sam Toueg Upson Tel sam Office Hours Monday Wednesday or by appointment Teaching Assistants Debra Goldberg Rhodes Theory Center Tel debra Office Hours Tuesday pm and Wednesday pm in Upson NOTE Next Tuesday the office hours will end at pm Athanasios Kyparlis Upson Tel kyparlis Office Hours Thursday pm and Friday am noon in Upson Newsflash November Prelim grades are posted in front of Upson October Additional Consulting Hours October Announcements Handouts Reading Assignments Homeworks Solutions Announcements Please remember to return your homework in the yellow campus mail envelope with your name written on it Handouts Course Information Questionnaire Reading Assignments Sections and Friday August Section Monday September Section Wednesday September Sections and Monday September Sections and Wednesday September Section Wednesday October Sections and Wednesday October Section Friday October Sections and Friday November Sections and Wednesday November Sections and Monday November Homeworks IMPORTANT Unless we specify otherwise in all homeworks and exams in you should justify your answers with clear and rigorous proofs Grading will be according to the following criteria correctness and completeness and clarity precision and conciseness Homework Homework Homework Homework Homework Homework Homework Homework Homework Homework Homework Solutions Solution of Homework Solution of Homework Solution of Homework Solution of Homework Solution of Homework Solution of Homework Solution of Prelim Solution of Homework Solution of Homework Solution of Homework Solution of Homework Last updated on November Please comment to	course	cornell
3778	 Server Date Sunday GMT Thursday GMT Home Page Systems Programming and Operating Systems Practicum in Operating Systems Selections that display this symbol correspond to postcript documents How to hand in phase of HOCA Course Information Course Schedule Last Changed Groups Handouts Handout GIF Format Postcript Format Penne ai Broccoli Questions and Answers Last Changed The CHIP Computer System Console Window Example Using CHIP Chip Console Tutorial Principles of Operation Configuration File The HOCA Operating System The HOCA Operating System Specifications This page is maintained by Lorenzo Alvisi	course	cornell
3779	 Server Date Wednesday GMT Tuesday GMT Fall Home Page CS Introduction to Computer Programming Computer Science Department Cornell University Fall This page is under construction Practice problems and solutions are now available Clarifications for Program are available The Program Solution is now available Course Description Grading Policies Exam Schedule Programming Assignments Academic Integrity please read it and remember it well Course Description Computer Science Introduction to Computer Programming Offered in Fall credits Prerequisites knowledge of continuous mathematics trigonometry and calculus Math or or equivalent An introduction to elementary computer programming concepts Emphasis is on techniques of problem analysis and the development of algorithms and programs The subject of the course is programming not particular programming language The principal programming language is The course does not presume previous programming experience Programming assignments are tested and run on interactive microcomputers Alternative version of COM emphasizing examples and applications involving continuous mathematics including trigonometry and calculus Computer Science basically teaches the same material as There are some differences though besides the last letter assumes the knowledge familiarity with continuous math as opposed to discrete one including trigonometry and calculus One might wonder what that means in programming course Well computer science and math interact in many ways and introduces one of them scientific computing This does not mean that is easier than It means that if you think you are comfortable with integrals derivatives will show you ways of applying your knowledge to computer programming The point of it is not necessarily to test that knowledge but rather expand it and apply it would like to encourage people who think they would qualify to take this course Continuous math might not sound that attractive but you can only benefit with this choice It is often hard to find good examples of real world problems in an intro course for CS but finds one If you are not sure whether you qualify please talk to the instructor Zabih and ask him for an opinion Besides that there is slight difference in the topics taught in and although for the most part they coincide one with another If you already know bit about will spend some more time on pointers and the model of the language itself If you do know what this means it does matter just disregard the last sentence Grading Policies Grades for will be computed as follows course grades Prelim Prelim Prelim Final Graded assignments and exams will be returned in sections You can pick up the unclaimed from consultant in Carpenter provided you have an ID with you Regrades If you feel an exam or program has been incorrectly graded fill out regrade request giving your reasons in writing attach the exam to it and give it to the consultant in the Carpenter lab regrade request can cause your grade to go up or down the paper will be regraded from scratch regrade must be submited within one week after the graded work has been returned Posted Grades Grades will be posted outside the Carpenter lab by either srudent ID or code that you give us It is your responibility to verify that our records are correct If you find an error please contact the course administrator Laurie Buck but please only during her office hours Note since an error in our records can occur you should probably keep your graded until you your grade with the posted one Exam Schedule Exam times ExamDateTimeLocation Prelim September Prelim October Prelim November Kimball Upson Final December Note will cover different material than Therefore the corresponding exams will be held in different rooms Lectures Time Tuesday Thursday or You can go to either lecture but for the sake of consistancy try to stick to only one Location First five lectures will be held together with in Olin Starting September Kimball Sections Sections begin Monday September This is their schedule CS Sections DayTimeRoom Sections are required part of the course used to clarify topics covered in lecture discuss programming problems and work additional problems and excercises Graded programs and exams are returned in sections Sample solutions and practice exams are handed out there All sections for CS each week will cover the same topics Therefore if you miss one you can substitute it with another one later that week However you will be registered for only one section and that will be the only one where you can pick up your graded work Also excersises might differ in different sections depending on the instructor and the interests of the students Obtaining the copies If you miss class or for some other reason not get handout there are always copies of them in the Carpenter lab If they run out please tell it to one of the consultants there and we will print more of them out COURSE NOTES Lecture Sorry about the special characters in the handout that look funky on the web working on improving it lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture lecture Programming Assignments Program four The files you need for Program are now available They are and You should only modify the type definition typedef of bigint in and should not modify at all Program was due November at The solution is available Program five Program was passed out in class on November Clarifications are available There are two instructor for They are Ramin Zabih Holds the lectures Lecture Czar Office Upson ph rdz Office Hours Held on the basis Leon Harkleroad Holds the sections Section Czar Office Upson ph leon Office Hours Thur There are also three TAs We are Adam Florence Writes and revises the homeworks also holds sections but he still remains The Homework Czar Office Upson ph aflorenc Office Hours WR and by appointment Lin Czarina Office Upson weiwei Office Hours by appointment rarely stay in my office so please email me before you go to my office You are more than welcome to talk to me and to ask me questions as long as do have class but make sure that you email me first Thanks Nikola Valerjev Maintains the web site Web Czar Office Upson nikola Office Hours Walk in basis If you have any questions grading syllabus course material completely lost just come to us and we try to put you back on track You can also ask consultants in Carpenter to tutor you during more quiet hours If you have any complaints about the course assignments are too hard or you just can not grasp of what in the world the instructor is talking about etc please tell us This will not affect your grade in any negative manner Academic Integrity You may work with one other person on the programming assignments Below group refers to either an individual or pair two of students working together on program The work you submit is CS must be the result of your group effort only The use of computer in no way modifies the standard academic integrity expected under the Cornell University code of conduct You may discuss work with students not in your group you may discuss general strategies However cooperation should NEVER involve one student possessing copy of all OR part of program written by student outside the group regardless of whether that copy is on paper or on disk In addition any output submitted with your program must have been produced by your program by running it as described in the assignment The penalty for violating the code can include failure in CS University disciplinary action and permanent mark on your transcript ASK FIRST if you have any questions about whether particular behavior violates our integrity expectations or the University Code This page is page is mantained by If you have any comments suggestions error reports complaints etc about this site please mail me at weiwei and will try to satisfy your needs as long as it does violate the University policies Last Updated Back to the computer science course page	course	cornell
3780	 Server Date Sunday GMT Monday GMT CS Home Page CS Home Page Brian Smith Your Tour Guide Course Information Homework Assignments Assignment Assignment Assignment Assignment Projects Project Project Spec Lectures Table of Contents postscript of slides are here Introduction to Computer Systems CPU Organization Programming Procedures Recursion and Stacks Assemblers Linkers and Loaders Interrupts and Introduction to Logic Design	course	cornell
3781	 Server Date Wednesday GMT Tuesday GMT Semantics of Programming Languages CS Semantics of Programming Languages Contents Description Texts and Prerequisites Handouts Scribed Lecture Notes Homework Assignments Contact Information Relevant Web Links Description Lectures MWF Upson Though is called Advanced Programming Languages in the course book it is better entitled Semantics of Programming Languages The goal of this course is not to conduct broad survey of programming languages like Java or SML nor to directly study implementation mechanisms for these languages compressed dispatch tables for multiple inheritance Rather the goal of this course is to study the principles of formal notation for describing computations and tools for analyzing and proving properties of computations These concerns subsume the study of specific programming languages or implementation mechanisms and hence lead to deeper understanding of programming specification logic mathematics and proof theory For example we will study notations for abstractly specifying how programs compute operational semantics as well as notations for describing what programs compute denotational semantics In turn the abstract but precise realization of these notations will allow us to study techniques induction logical relations for formally proving interesting and relevant properties of programming languages type safety or compiler correctness Ideally student coming out of this course will have learned something about how to make informal concepts and notation precise and how to manipulate the notation to demonstrate useful properties Textbooks Semantics of Programming Languages Carl Gunter ML for the Working Programmer Second Edition Larry Paulson Prerequisites On the programming side we assume experience with at least or language Preferably students will have some knowledge and experience working with functional language such as Scheme ML or Haskell On the theoretical side we assume basic proficiency in undergraduate mathematics logic and computer science basic knowledge of computability turing machines recursive functions and logic predicate calculus as well as some mathematical maturity is required This course is designed for PhD students in CS Math OR and EE It is not for MEng or undergraduate students If you are an MEng or undergraduate student you must talk to the instructor to find out if the course is suitable for you Contact Information Newsgroup Instructor Greg Morrisett Upson jgm Office Hours MF after class or by appointment Admin Assistant Linda Competillo Upson TA Erlingsson Upson ulfar Office Hours Tue Thu Relevant Web Links Mark Leone Resources for Programming Language Research Emacs mode for ML needed by The Fox project information about Standard ML Reference information for postscript User guide Description of the base environment Description of the system environment Library documentation Documentation of available tools Reference indexDocumentation of available tools gentle introduction to SML Andrew Cumming MIT info on	course	cornell
3782	 Server Date Sunday GMT Monday GMT Home Page CS Structure and Interpretation of Computer Programs Computer Science Department Cornell University Spring Course Staff Course Info Course Materials Announcements Emacs and MacMarlais demos Section Room Change Prelim Time and Place How to Make the Graders Happy Bug fix in PS General Exam Announcements Extension of due date Last Modified by JEH	course	cornell
3783	 Server Date Wednesday GMT Tuesday GMT CS Fall If you are running Netscape or IE click here Links to individual pages no frames Course general stuff section info Office hours MOTW downloads of homeworks info on class handouts course syllabus info on when exams will be Requirements and criteria for grading and homework schedule Other references on the web other goofy stuff Note The preceding pages contain tables If your browser is not able to handle tables then please email dwu Page last updated	course	cornell
3784	 Server Date Wednesday GMT Tuesday GMT The Design and Analysis of Algorithms Homepage Instructor Ronitt Rubinfeld TA Evan Moran Time MWF Location Upson Text Kozen The Design and Analysis of Algorithms Handouts Course announcement Syllabus Homeworks Homework last modified Homework last modified Homework last modified Homework last modified last modified Homework last modified last modified Homework see addendum see new copy of Homework last modified Homework last modified Solutions Solution Solution Solution Solution Solution Solution Solution Announcements There will be an exam on Thursday at in Upson Talk to me or Evan to reschedule if you can not make it at that time You may refer to the Kozen text an cheat sheet and your class Rajeev Motwani lecture notes on approximations PET paper	course	cornell
3785	 Server Date Sunday GMT Sunday GMT Summer Home Page Systems Programming and Operating Systems Prereq or permission of instructor Instructor Induprakas Kodukula prakas Teaching Assistant Nawaaz Ahmed nawaaz MOTD MOTD Archive Subject Description Prerequsites Course Outline Textbooks Course Schedule Quizzes Grading Policy Statement on Collaboration Office Hours Course Material Send Comments Subject Description Systems Programming and Operating Systems An introduction to the logical design of systems programs with emphasis on multiprogrammed operating systems Topics include process synchronization deadlock memory management methods information sharing protection and security and file systems The impact of network and distributed computing environments on operating systems is also discussed This is subject requiring constant attention Prerequsites Complete familiarity with the material of is assumed In particular knowledge of computer architecture assembly programming language and program structure is required cover some of the introductory material in class as required but the purpose of that will be to remind the audience of the material Course Outline The course will be organized roughly as follows say roughly because depending on the feedback from the class may change the order or the content of particular sections We start off with an overview of concurrency issues discuss synchronization issues in particular ensuring mutual exclusion deadlock detections and prevention algorithms discuss multiprocessor issues as well Next we go on to memory management Here we discuss virtual memory and various methods used to implement virtual memory such as paging and segmentation Next we cover file systems Finally we look at evolution of the traditional operating systems and look at If time permits we have few lectures on advanced topics such as multi threading and serverless file systems Textbooks The principal text book for the class is the Operating System Concepts book by Abraham Silberschatz and Peter Galvin also distribute class notes which will cover the material completely The class notes will also be available on the world wide web from the class home page at the end of each class Course Schedule We will meet Monday thru Thursday from during the weeks of There will be two quizzes The first will be on and the second will be on The final will be on In addition there will be weekly assignments for the first weeks of class These will be handed out on Thursday and will be due the following Thursday at the start of the class Quizzes Grading Each of the homeworks will carry weightage of for combined weightage of The final will be worth and there will be two midterms worth each There will also be surprise quizzes to determine the understanding of the course material by the class Policy Statement on Collaboration At most people can form group and collaborate on each homework Each such group will need to submit only one copy of the homework The quizzes and the final will be closed book and closed notes Office Hours Induprakas Kodukula Monday ETC Nawaaz Ahmed Tuesday Wednesday Thursday Upson Course Material Send Comments Maintained by Induprakas Kodukula	course	cornell
3786	 Server Date Sunday GMT Sunday GMT Spring Home Page Computers and Programming Computer Science Department Cornell University Spring Question and problems will this page should be emailed to Jeff Foster jfoster You may have trouble viewing the tables if you using an early version of NetScape The contest The first prelim will be on Thursday March We announce times and places soon Topics covered in the prelim The second prelim will be on Tuesday April The rooms were announced in lecture Topics covered in the second prelim The final exam will be on Monday May at noon in Olin last names and Olin last names The final exam will cover everything in the course Additional topics convered in the final Office hours DayWhenWhereWho session Consulting on Chris Jose Thanks to Chris and Jose for taking the time out of their studying to do this Course description Course staff lecture notes handouts code samples Gofer Enhance Other Web Servers Course description COM Computers and Programming also ENGRD Fall spring summer credits Credit will not be granted for both COM and Prerequisite COM or equivalent programming experience Intermediate programming in language and introduction to computer science Topics include program development proofs of program correctness program structure recursion abstract data types programming data structures and analysis of algorithms is the principal programming language Course staff and office hours Instructor Hal Perkins Upson Office hours Thursday and by appointment Email hal Teaching assistants Correction Office hours will be held in the TA office Jeff Foster Upson Office hours Tuesday Email jfoster Alan Kwan Upson Email kwan David Walker Upson Office hours Monday Email walker Sections Spring Sections DayTimeRoomInstructor Perkins Perkins Walker Walker Walker Foster Foster Consulting Consulting hours are in Upson The regular consulting schedule in effect until the last day of classes is and Friday Spring Consulting SundayMondayTuesdayWednesdayThursdayFriday None None None None None lecture notes Lecture notes are available in three formats MacBinary files that contain Microsoft Word files Rich text format files parseable by Microsoft Word and others Plain text The date listed next to the lecture is the date the lecture was posted not the date the lecture was given Macintosh BINHQX Lectures Preliminaries Lectures Basic Classes Lecture More Classes Lecture Pointers and Arrays Lecture Dynamic Storage Allocation Lectures Classes with Dynamic Data Lecture Fine Points of Classes Lecture Introduction to OOP Lecture Derived Classes Lecture Program Correctness Algorithmic Notation Lecture Triples and Assignments Lecture Assignments Conditionals and Loops Lecture Proving Loop Correct Lecture Functional Programming Lecture Types in Gofer Lecture Currying Map and Filter Lecture Recursion Iteration Lecture Application Architectures and Frameworks Lecture Linked Lists Lecture Algorithmic Analysis Lecture More Linked Lists Lecture Binary Trees Lecture Classes and Linked Data Structures Lecture Industrial Strength Lecture Java BINHQX files can be processed by Stuffit Expander If you have PC see the http address for Aladdin Systems to find Windows version Thanks to Armando Nunez for the tip Rich text Lectures Preliminaries Lectures Basic Classes Lecture More Classes Lecture Pointers and Arrays Lecture Dynamic Storage Allocation Lectures Classes with Dynamic Data Lecture Fine Points of Classes Lecture Introduction to OOP Lecture Derived Classes Lecture Program Correctness Algorithmic Notation Lecture Triples and Assignments Lecture Assignments Conditionals and Loops Lecture Proving Loop Correct Lecture Functional Programming Lecture Types in Gofer Lecture Currying Map and Filter Lecture Recursion Iteration Lecture Application Architectures and Frameworks Lecture Linked Lists Lecture Algorithmic Analysis Lecture More Linked Lists Lecture Binary Trees Lecture Classes and Linked Data Structures Lecture Industrial Strength Lecture Java Plain text Lectures Preliminaries Lectures Basic Classes Lecture More Classes Lecture Pointers and Arrays Lecture Dynamic Storage Allocation Lectures Classes with Dynamic Data Lecture Fine Points of Classes Lecture Introduction to OOP Lecture Derived Classes Lecture Program Correctness Algorithmic Notation Lecture Triples and Assignments Lecture Assignments Conditionals and Loops Lecture Proving Loop Correct Lecture Functional Programming Lecture Types in Gofer Lecture Currying Map and Filter Lecture Recursion Iteration Lecture Application Architectures and Frameworks Lecture Linked Lists Lecture Algorithmic Analysis Lecture More Linked Lists Lecture Binary Trees Lecture Classes and Linked Data Structures Lecture Industrial Strength Lecture Java handouts Handouts are in postscript format You can print them on almost any laser printer If you want to view them you need an application like Ghostview Handout Preliminaries Handout Assignment Handout CodeWarrior Intro section Handout Assignment Handout Assignment Handout Assignment Code samples Lecture Cell class Lecture Complex class Lecture Sets of characters Lectures Simple list class Lecture Dictionary class Gofer There are there flavors of Gofer available MacGofer is available in the public labs MacGofer PC Gofer UNIX Gofer The FTP site for Gofer is and the FTP site for MacGofer is Please do not ftp if you can help it If you find piece of Gofer you think is of general interest let me know and make it available from here MacGofer sources and manuals are available on the CS department ftp server Other Web Servers The final project for is available on the CS department ftp server Other Web Servers Computer Science Department CUINFO Metrowerks CodeWarrior homepage Aladdin Systems makers of Stuffit Expander home page Comments or suggestions Jeff Foster	course	cornell
3787	 Server Date Sunday GMT Monday GMT CS Machine Vision CS Machine Vision Course Staff Instructor Ramin Zabih Teaching Assistant Justin Miller Class Time and Place MWF Phillips Project Suggestions Problem Sets Problem Set Problem Set Course Class Notes How to Scribe Week January Regularization January Simulated Annealing February Computing Motion via Regularization February Calculus of Variations February Maximum Likelihood Estimation February Markov Random Fields February Snakes February Stereo and Motion February Introduction to Correlation February Mestimation March Methods March Guest Lecture March Transforms Cont March Correlation and Census Transform March No lecture Cont March Stereo Geometry Cont April Geometrical Transforms April Motion Segmentation April Tracking April Motion Tracking Cont April Edge Detection April Continuation of Model Based Vision April Hausdorff Distance April Guest Lecture Eigenhausdorff April Face Recognition Section Notes The Optical Flow Constraint Equation Other Sources Computer Vision Home Page History of Object Recognition	course	cornell
3788	 Date Tue Nov GMT Server Thu Aug GMT title page Operating System Principles Section this is not the Web page for Section Official entry from NCSU Graduate Catalog Course staff Instructor Edward Gehringer Daniels Hall efg Office hours PM MW Teaching assistant Carl Hobson cphobson Postscript of Course Handouts Solutions to Problem Set Solutions to Problem Set Solutions to Problem Set Solutions to Problem Set Solutions to Problem Set Solutions to Problem Set Answers to Test NCSU Computer Science Department Back to NCSU Electrical Computer Engineering Department efg Ed Gehringerupdated	course	misc
3789	 Date Wed Nov GMT Server Introduction to Robotics SPRING Introduction to Robotics SPRING Professor Jim Cremer Class hours MWF MacLean Hall Cremer office hours and by appointment MLH TA Dan Stevenson Stevenson office hours TTh robot lab Class mailing list robotics Index Policies and Grading Course Schedule Lab Assigments Homework Assignments Other Handouts Additional Sources of Information Textbook Introduction to Robotics Mechanics and Control by John Craig Second Edition Publishing Company Reading MA Tentative class schedule Week Course intro and lab intro Chapter course introduction Text Ch lab introduction in Introduction to use of Pumas Raven and Fish Demonstrations of past course projects Week Chapter Spatial descriptions and transformations Chap Spatial descriptions and transformations Text Chap continued Transformations varous orientation representations Text Lab exercise Week Chapter Kinematics Week Chapter Inverse Kinematics Week Chapter Jacobians velocity and static forces Week Chapter Dynamics Week Chapter Trajector generation Week Chapter Control Week buffer will really finish Ch here Field trips labs etc will stretch the schedule to here SPRING BREAK NO CLASS Week intro to specialized topics project discussion Week locomotion Week motion planning Week grasping Week robot programming languages planners Week and project presentations FINAL WWW and Internet Resources To be filled in	course	misc
3790	 Date Tue Nov GMT Server Wed Apr GMT Functional Programming Administrative Information Lecture Notes Programming Hints and Study Helps Homework Related Links Official Course Description from Undergraduate Brochure Instructor Teaching Assistants Andrew Lumsdaine Finger Yan Lin Finger James Regovich Finger Greg Sharek Finger Administrative Information Syllabus Policies and Procedures Instructional Objectives FAQ List The Six Scheme Mantras Homework Groups Lectures Introduction Functional Programming Introduction Recursion and Iteration Towers of Hanoi Higher Order Procedures product Programming with Abstract Data Abstract Data Cons Car Cdr and All That Symbols Pattern Matching Extended Example Solving Maze Extended Example Networks Extended Example Mergers Humorous Example Message Passing Run Amok Modularity Objects and State Local State flip The Environment Model of Evaluation Object Oriented Programming Mutable List Structures Streams Metalinguistic Abstraction The Metacircular Evaluator Programming Hints and Study Helps Code all of it from the text Scheme User Guide Scheme Reference Guide GNU Emacs Interface to Scheme Emacs Quick Reference Exams From Prior Years Exam Spring Exam Solutions Spring Exam Spring Exam Solutions Spring Final Exam Spring Final Exam Solutions Spring Problem Sets Problem Set Problem Set Solutions Problem Set Problem Set Solutions Problem Set Problem Set Solutions Problem Set Problem Set Solutions Problem Set Problem Set Problem Set Part One Problem Set Part Two Problem Set Links Scheme Home Page Internet Scheme Repository Home Page Lambda Humour Hal Abelson Home Page Gerry Sussman Home Page Hot Hot Hot Welcome Godiva Online Home Page	course	misc
3791	 Date Wed Nov GMT Server Tue Sep GMT Introduction to Computer Science Honors Section Introduction to Computer Science Honors Section Computer Science Times Not offered in the period from through Instructors Dist TAS Honors Section of Computer Science for students whose programming experience and ability enable them to proceed more rapidly than is possible in the regular sections and who are willing to devote correspondingly more work to the course Admission to this course will be through Final placement between this course and Computer Science will be decided during the first week of the term Back to Dartmouth CS Home Page	course	misc
3792	 Date Wed Nov GMT Server Mon Nov GMT CPS FALL CPS Fall Program Design and Analysis II Classes Assgnments Quiz Group Work Groups Grades Tests Review Session for Test is Monday Nov at in LSRC FINAL EXAM is scheduled for Saturday Sorry had nothing to do with this Send complaints to the registrar Course Materials and Handouts Check Teer and Carr cluster staffing schedule Course Syllabus Read the CPS Newsgroup Contacting Professors or TAs Is this the right CPS course for you Be UTA for CPS next semester Learn Unix commands postscript Here is some helpful unix commands for you to try To learn more try typing man command for any command Feel free to post questions on the newsgroup OIT online help page Some Classes Vector class to use type include Matrix class to use type include String class from CPS to use type include Assignments Assignment Getting Started html This is ready for use Assignment html Now due You can start the assignment now Necessary files have been setup You should take look at the Getting Started handout first It shows you how to setup your environment for this course This is just warmup programming assignment You should be able to do this assignment using Vector or array if you prefer You do not need to use Stacks Hash Tables Trees or other data structures you might know about We will be covering these structures and their implementation in later in the semester For this assignment am not looking for the best solution just solution Using these other data structures might make the assignment longer than intended Assignment html Now Due by Mon Sept earns bonus points Assignment hints Assignment sample solution Note this was thrown together quickly by jsr so it may not follow all the style rules you are suppose to follow it may have typos and it is not the only way to do this assignment Keep that in mind Assignment sample solution Note this was thrown together quickly by jsr so it may not follow all the style rules you are suppose to follow it may have typos and it is not the only way to do this assignment Keep that in mind Assignment html Note this assignment MUST be turned in on time Solutions will be handed out the same day Assignment hint Assignment Solutions Assignment Assignment html html html html html Assignment html Assignment hints text Lecture Notes Overview postscript Review Pointers postscript Linked Lists postscript and Classes More on Classes Analysis postscript templates postscript Stacks and Queues postscript Recursion postscript and Trees postscript and Binary Search Trees postscript Sorting postscript Trees notes not available online see Scot for handout Trees notes not available online see Scot for handout Random Quizzes Quiz Due Tues Solution Quiz Due Thurs Solution Quiz Due Tues Solution Quiz Due Tues Solution Quiz Due Tues Solution Quiz Due Tues Solution Quiz Due Tues Solution Quiz Due Thur Solution Group Work Group Project Current Groups Groups Grades current grades points per item Tests Tests from previous CPS or related courses NOTE These tests may contain material we have not covered CPS test Fall postscript and html and answers text CPS test Fall postscript and html and answers text Last modified August or later forget to update this by Susan Rodger rodger	course	misc
3793	 Date Tue Nov GMT Server Mon Oct GMT Introduction to Multimedia Center for Advanced Technology New York University Welcome to the Introduction To Multimedia web site The Lecture Slides and Notes for the Spring semester will be posted soon In the meantime the Spring information can be found below Lecture Slides and Notes Assignments and Due Dates	course	misc
3794	 Server Date Wednesday GMT Thursday GMT CSE Home Page Beginning of JavaScript Applet function seed var Under Construction var var out var if seed seed var seed else if seed seed for seed seed var seed else if seed if seed var seed else End of JavaScript code CSE Home Page Introduction to Parallel Processing Spring Under Construction News Group Lectures Exams Resources Midtermcanceled FinalThursday May of the grade HomeworksTBA of the grade LecturerVal Tannen val OfficeMoore Th Course AdministratorSusan Deysher Announcements am distributing another homework today Th in class It will be due on Tu	course	misc
3795	 Date Tue Nov GMT Server Mon Oct GMT Fall updated Sunday October Computers Organization New York University Fall Instructor Nathan Hull Phone Office Warren Weaver Hall Room Office Hours Email hull Syllabus Assignment due Tuesday October Assignment due Thursday October Chee Yap Class Note The following programs work ONLY on the Dewar Assembler not on the Turbo Assembler	course	misc
3796	 Date Wed Nov GMT Server CLA CS Introduction to Computer Science II CLA CS Introduction to Computer Science II Boston University Computer Department Department Syllabus Homework and Documentation Guidelines Homework Homework Homework Homework Homework	course	misc
3797	 Date Tue Nov GMT Server Mon Mar GMT CS Homepage CS Theory of Programming Languages Spring Computer Science Home Page Univ of Idaho Home Page Welcome to CS Theory of Programming Languages Home Page This page contains information related to the class such as the syllabus newsgroups and the assignments Please let me know if there anything can do to improve it It is very likely that this page and the information contained in it will change drastically during the semester Class Information Class Meets Tu and Th in JEB The class syllabus in Postscript or in MS Word format Course Overview in Postscript or as MS Word file Literature Review Guidelines in Postscript or as MS Word file Final Project Guidelines Lectures Homework Office Hours MW Other Office Hours by appointment Midterm Sample Problems handed out an old exam AND try out Program Sample Code Related Information You can read the following newsgroups for information on programming languages or check out the network sites listed at WWW Virtual Library in the or check out the network sites listed at Yahoo in the Languages Directory or list of programming language research pages can be found Here jimaf	course	misc
3798	 Date Wed Nov GMT Server Fri Oct GMT CIS Course materials for CIS Fall Syllabus Hypertext Postscript Homework due Hypertext Postscript Homework due corrected Hypertext Postscript due corrected as stated in class Hypertext Postscript Rod Howell howell	course	misc
3799	 Server Date Wednesday GMT Thursday GMT CS Home Page CS Design and Implementation of Programming Languages CS is one term course on compiler optimizations being taught at Caltech This year the course is being taught by Mary Hall visiting professor from Stanford The course will cover the basics of compiler construction with emphasis on optimization techniques and parallelizing compilers First Term California Institute of Technology Pasadena CA	course	misc
3800	 Date Tue Nov GMT Server Fri Sep GMT The CS and Math Homepage Harvey Mudd College CS and Math Theory of Computation Fall Interactive Automata Simulator Syllabus Homework Assignments Late Homework Policy Schedule and Office Hours Ran Homepage Fun and Useful Links Last modified August by hadas	course	misc
3801	 Date Wed Nov GMT Server BU CLA CS Concept in Programming Languages Page BU CLA CS Concept in Programming Languages Fall Home Page as of Syllabus and Schedule Project Descriptions HW Class meetings TueThu Instructor Marina Chen Office Hours Tue Wed Thur mcchen MCS Graders Natasha Tatarchuk natashat Arijit Sarcar asarcar Notes Slides Solutions Sample Midterm and Solution Midterm and Solution Marina Chen Created Last update	course	misc
3802	 Date Wed Nov GMT Server Thu Oct GMT CS Gonzalez CS Fall Added Sept at pm Instructor Teofilo Gonzalez Office Engineering Phone Office hours pm and Th pm teo cs Teaching Assistants Bogdan Cocosel Discussion Session Office Building trailer Room Office hours pm and pm bcocosel cs Huican Zhu Discussion Session Office Building trailer Room Office hours pm and pm hczhu cs Added October at pm The code we will review Thursday Oct is in file You may one to see the one used last year which does the same thing but in slightly different way That program is in file Copy them into your directory and type then type Sample input one number per line October pm You may use the listitarator class for the hw as long as it results in time efficient procedure as without it time efficient with respect to notation For problem two if you do insert insert insert results in very inefficient code So just implement the operation directly Remember we want time efficient code but do not try to optimize to the last bit do not try to reduce to the last bit the constant in the notation for the time complexity October pm Typo in Hw In the sorting algorithm problem replace if count by if count October pm Comments on the project Use Note that is either zero or it is positive integer Typos replace retured by returned replace occurence by occurance replace occurences by occurances replace ingnore by ignore replace clases by classes An example for the project is in Comments on the project The root node in both figures should have instead of an October pm Comments on the project The root node in both figures should have instead of an October pm Just called the RBR and they said the old midterms for are there If they are not listed then ask the person in the counter directly October pm As we said in the first handout you must work in the project and homeworks individually As said before in the project my member functions should not be your final memeber functions The purpose of the functions is to give examples on how to acceess the data However the data in the nodes should be left untouched In the project handout page say that is followed by CR should have said that is followed by CR or blank The same holds for string little program to read data is in file October pm In the project say that when ArrayTrieNode or LinkedTrieNode has count that becomes it should become TinyTrieNode That is INCORRECT sorry about that It becomes TinyTrieNode when in addition to the count being the StrEnds is TRUE October pm The homeworks have been graded You can pick them up during my office hours today from The solutions are in the RBR They are also in the file You can print that file or view it with ghostscript The press the left bottom on the dismiss sign if it appears Put the mouse insede the window and type CR to advance the page Additional information on ghostview appears when you type man In the hw it should say that Bogdan Cocosel is of the solutions October pm Oops forgot to add this But here it is In the file and the file you will find code to access and create the two examples in the project handout You can copy them into your directory compile it and run it October am As we say in the project description we are dealing with sets so we do not keep multiple copies of the same word in the same set Also the input is ERROR FREE But one might try to insert word in set that is already there or delete word that is not in set In the first case you must not insert the word and the count needs to remain unchanged In the second case the count must remain unchanged and nothing must be deleted Note that this is important to facilitate testing If you implement insert as in the class notes you will have to make to passes over the Trie in some cases Either to update the count when inserting new word or unupdating the count if it was updated incorrectly because the word was already there You can create member function whoami defined like GetNext to return the type of object you have for derived classes like TinyTrieNode October pm Remember that the final type of node DEPENDS on the NUMBER OF WORDS in that subtree It DOES NOT depend on the number of nodes or the number of nonnull pointers in that subtree October pm The Office hours of the TAs on Wednesday and Friday will be in CSIL from now till December If you would like CSIL to be open during the Thankgiving Holidays please send to humphrey cs It would be nice if you specify the times and days you want it be open and if you would like to babysit the machines Under Construction Current Weather Beginner Guide to HTML The Virtual Library DO NOT CLICK HERE	course	misc
3803	 Date Wed Nov GMT Server BU CLA CS Analysis of Algorithms Page BU CLA CS Analysis of Algorithms Assaf Kfoury Spring HOME PAGE Class Meetings Tu Th Instructor Assaf Kfoury Office Hours Tu Th Coordinates kfoury cs Grader Loredana Lo Conte Coordinates loredana cs Cummington Use before telephone Syllabus Course Policy Tests Grades use small font and wide window Handouts Problem Sets Selected Solutions Questions Solutions Questions Solutions Useful Pointers Short Bibliography Assaf Kfoury Created Modified	course	misc
3804	 Date Wed Nov GMT Server Wed Nov GMT Database Fundamentals Database Fundamentals Instructor David Spooner Fall Administrative Documents Course Introduction and Syllabus Unofficial lecture notes in HTML These lecture notes are under construction and in some cases even been proof read yet Use at your own risk Homework Assignments Homework Due Wednesday September Sample Solution Homework Due Wednesday September Sample Solution Homework Due Wednesday October Sample Solution Homework Due Wednesday November Sample Solution Homework Due Wednesday November Project Documents Project Team Assignments Project Home Pages Project Part Description Project Part Description Project Part Description Oracle Introduction to Oracle Lectures Lecture August Lecture August Lecture September Lecture September Lecture September Lecture September Lecture September Lecture September Lecture September Lecture October Lecture October Lecture October Lecture October Lecture October Lecture October Lecture November Lecture November Lecture November and November Lecture November and November Lecture December Database Fundamentals Fall David Spooner spoonerd	course	misc
3805	 Date Tue Nov GMT Server Home Page Elementary Programming Concepts is an introductory course in computer programming for Starting in the Fall semester we will use the programming language none Current Instructor Ann Ford arford Graduate Student Instructors Phillip Jewell pjewell Greg Lewis gregl Baheer Rajalingam baheer Christopher Wong chrisv This course is not intended for majors in Computer Science or Computer Engineering and as of Fall term will not serve as for Concentrators and those who wish to take must take as the More Information on General Course Information Office Hours Discussion Sections Lecture Notes Final Exam Information Information on the Computer Science Concentration Computer Science Engineering Home Page	course	misc
3806	 Date Wed Nov GMT Server Seminar in artificial intelligence Spring Seminar in artificial intelligence Spring Parallelization of deduction strategies Instructor Maria Paola Bonacina bonacina Class meetings TuTh in Gilmore Hall This course is an extension of the tutorial of the same title that the instructor gave at the Twelfth International Conference on Automated Deduction CADE in June Nancy France and its background may be found in the paper Parallelization of deduction strategies an analytical study Bonacina and Hsiang Journal of Automated Reasoning Vol Contents of the course The parallelization of deduction strategies is research topic which is becoming increasingly popular and important It combines knowledge from theorem proving distributed systems parallel programming and distributed algorithms This course provides systematic approach to this area at the of several fields The course is organized as follows Deduction strategies Basic definitions Survey of selected strategies as examples conceptual framework for parallel deduction Classification of deduction strategies from the point of view of parallelization Types of parallelism for deduction Presentation and discussion of relationships between classes of strategies and types of parallelism Survey and analysis of selected approaches to parallel deduction including Prolog technology parallel theorem provers Parallel theorem provers Parallel implementations of the Buchberger algorithm Parallel implementations of completion Parallel theorem provers Analysis of the problems suggestion and discussion of solutions What are the obstacles in effectively parallelizing deduction strategies How the choice of the deduction strategy the type of architecture and the type of parallel computation interact in determining the issues including size and degree of dynamicity of the data base of clauses shared memory versus distributed memory and conflicts between parallel inferences Focus on strategies Back to my teaching page This page was last updated on Monday CDT by Maria Paola Bonacina bonacina	course	misc
3807	 Date Wed Nov GMT Server BU CLA CS Introduction to Computer Graphics Page BU CLA CS Introduction to Computer Graphics Spring HOME PAGE Programming Assignments due due due due Homework Assignments due due due Solutions Final Exam May PM in MCS Class Meetings Mon Wed Fri Instructor Stan Sclaroff Room phone sclaroff cs Office Hours Grader John Isidoro jisidoro acs Course Description This is an introductory undergraduate course in computer graphics The course will focus primarily on the fundamentals of and graphics algorithms and geometry with some discussion of devices animation techniques and visual realism as time and class interest allows Syllabus Course Policy Tests Grading etc Stan Sclaroff Created January	course	misc
4319	 Server Date Wednesday GMT Friday GMT Ronitt Rubinfeld HomePage Ronitt Rubinfeld am an assistant professor at the Cornell Department of Computer Science Some recent papers and talks Courses Randomness and Computation Spring at MIT CS Fall Engineering Fall Graduate Students Funda Ergun Ravi Kumar cv Computer Science Fair homepage Hal Wasserman web page describing in the area of Address Ronitt Rubinfeld Computer Science Department Upson Hall Cornell University Ithaca New York telephone fax email ronitt Pictures of my new nephew Eitan Rubinfeld	faculty	cornell
4320	 Server Date Sunday GMT Wednesday GMT Gerard Salton Gerard Salton Professor gs Harvard University text processing is rapidly expanding field of research and development Large masses of text now exist that can be cheaply stored on optical storage media and rapidly retrieved on demand Furthermore sophisticated methods are available for analyzing document texts formulating appropriate user queries conducting rapid file searches and ranking the retrieved items in decreasing order of importance to the users At Cornell we design and operate large text processing environments where texts can be handled without restrictions as to size or subject matter In the absence of knowledge bases that would be useful for unrestricted text databases we use text analysis systems that determine the meaning of words and expressions by refined context analysis using statistical and probabilistic criteria Using the approaches we are able to determine text similarity with high degree of accuracy There are two main applications The automatic generation of structured text collections hypertext where semantically similar pieces of text are automatically linked Hypertext representations of large databases provide flexible browsing capabilities for text access The automatic retrieval of interesting text excerpts in response to available search queries We have done extensive work with an automated encyclopedia consisting of about encyclopedia articles the Funk and Wagnalls New Encyclopedia In addition we are also processing the TREC collection consisting of about documents covering number of different subject areas over gigabytes of text sophisticated search and retrieval service exists as well as text linking system capable of relating different text sections paragraphs and sentences The main test vehicle continues to be the current version of the Smart text analysis and retrieval system operating under UNIX on Sun Sparc Stations and terminal equipment University Activities Member Engineering College Library Committee Professional Activities Associate Editor ACM Transactions on Information Systems Program Committee SIGIR Seventeenth Int Conference on Research and Development in Information Retrieval Dublin Ireland EP Electronic Publishing Darmstadt Germany Information Retrieval and Genomics National Library of Medicine Bethesda Maryland May and Virtual Reality Moscow September Lectures Automatic Construction of Hypertext Links Federal Institute of Technology ETH Zurich Switzerland June Progress in Information Retrieval Research University of Konstanz Germany June Hypertext and Information Retrieval ASIS National Meeting Columbus Ohio October Automatic Text Utilization in Large Full Text Databases Computer Science Colloquium Ohio State University Columbus Ohio October Automatic Information Retrieval Lecture Course at Seattle Washington November Full Text Information Retrieval Microsoft Corporation Seattle Washington November Automatic Text Utilization Workshop on Information and Genomics National Library of Medicine Bethesda Maryland May Publications Approaches to Passage Retrieval in Information Systems Proceedings Annual National Conference on Research and Development in Information Retrieval Association for Computing Machinery New York with Allan and Buckley Selective Text Utilization and Text Traversal Proceedings Association for Computing Machinery New York November with Allan Automatic Structuring and Retrieval of Large Text Files Communications of the ACM February with Allan and Buckley Text Retrieval Using the Vector Processing Model Proceedings Third Annual Symposium of Document Analysis and Information Retrieval University of Nevada Las Vegas Nevada April with Allan Software The Smart text analysis and retrieval system is made available free of charge for research purposes Several hundred copies of Smart version have been distributed and are used around the world Return to List of Faculty Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4321	 Server Date Wednesday GMT Tuesday GMT Kenneth Birman Kenneth Birman Professor PhD Univ of California Berkeley My research is concerned with distributed computing and operating systems My focus is on using distributed programming model based upon virtual synchronous process groups to solve such problems as managing replicated data coordinating actions in distributed setting and performing dynamic reconfiguration This is done in way that provides although it is limited to certain classes of reasonably benign failures My effort has theoretical and practical side The practical work started in when we developed computing system called the Isis Toolkit Isis with software tools to support virtual synchrony and became widely popular We are now developing new system Horus which is intended to be more flexible than Isis and which addresses issues such as communication and security The most important feature of Horus is its extensive use of layering which permits it to be reconfigured for special purposes The basic idea is that Horus users should pay only for features that they actually use but should have available very broad collection of options Horus also seeks leverage from the emergence of ATM network technology and from communication techniques such as Active Messages which originated in work on parallel supercomputers Horus embodies an advanced security technology developed by graduate students Mike Reiter and David Cooper which is unusual in combining security privacy and high availability in single package On the more fundamental side of the effort the Horus group is looking at techniques for specifying and proving properties of structured systems We are using the ML language to develop executable of the major Horus layers with the goal of using Nuprl system to prove that the latter correctly implements the former We are also studying extensions of the virtual synchrony model notably in work by Roy Friedman on adding guarantees to Horus and in work by Mark Hayden on support for probabilistic broadcast primitives and programming tools Horus is very much collaboration The architecture and development side of the effort is headed by Robbert van Renesse Werner Vogels and Roy Friedman Six graduate students are working on aspects of the system including the development of programming tools for multimedia communication applications security and privacy protocols that exploit ATM and other problems We are also collaborating within the department notably with Thorsten von Eicken and Brian Smith University Activities Chair Engineering Policy Committee Acting Head Computer Science Department Master of Engineering Program Member Computer Science Department Faculty Recruiting Committee Member Cornell Academic Leadership Committee Professional Activities Editor in Chief ACM Transactions on Computing Systems Chief Scientist Isis Distributed Systems Inc Member ISAT study group on Robustness of Critical Elements of the National Information Infrastructure Publications The process group approach to reliable distributed computing Communications of the ACM December Integrating runtime consistency models for distributed computing Journal of Parallel and Distributed Computing Reliable distributed computing using the Isis toolkit eds Birman and van Renesse IEEE Computer Society Press Los Alamitos California Reliability through consistency IEEE Software May with Glade Distributed Software Horus system Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4322	 Server Date Wednesday GMT Thursday GMT Fred Schneider Fred Schneider Professor PhD State Univ of Stony Brook Techniques for understanding concurrent programs are becoming increasingly important as distributed computing systems become widespread in applications My research has focused on the development of these techniques have been heavily involved in applying assertional reasoning to the design of concurrent distributed and programs am completing textbook on this subject Along with David Gries continue investigations concerning our equational logic This past year we streamlined the inference rules and evaluated number of techniques for handling undefined terms and partial functions Thomas Bressoud and completed building and analyzing our implementation of replication management for HP architecture Our protocols ensure that the sequence of instructions executed by two virtual machines running on different physical processors are identical The protocols also coordinate issued by these virtual machines Use of hypervisor to implement replica coordination is attractive at least in theory When replica coordination is implemented in hypervisor it instantly becomes available to all hardware realizations of the given architecture including realizations that did not exist when the hypervisor was written Second when replica coordination is implemented in hypervisor single implementation suffices for every operating system that executes on that architecture Finally by implementing replica coordination in hypervisor the applications programmer is freed from this task Jointly with Dag Johansen University of Norway and Robbert van Renesse started the TACOMA project And COrnell Moving Agents to investigate support and use of mobile processes in building applications By structuring system in terms of agents applications can be constructed in which bandwidth is conserved Data may be accessed only by an agent executing at the same site as the data resides An agent typically will filter or otherwise reduce the data it reads carrying with it only the relevant information as it roams the network Two TACOMA prototypes have been completed and we are implementing third system based on our experiences Finally developed with Scott Stoller new algorithm for detecting whether particular computation of an asynchronous distributed system could have passed through global state satisfying some given state predicate The new algorithm allows more efficient detection than is possible with previous algorithms University Activities Sabbatical leave Professional Activities Distributed Computing Editor Information Processing Letters Editor IEEE Transactions on Software Engineering Editor High Integrity Systems Editor Annals of Software Engineering Editor ACM Computing Surveys Texts and Monographs in Computer Science Program Committee Member International School and Symposium on Formal Techniques in and Systems Program Committee Member International Conference on the Mathematics of Program Construction Program Committee Member International Workshop On Responsive Computer Systems Program Committee Member Workshop on Composability of Systems Program Committee Member Fifth IFIP Working Conference on Dependable Computing for Critical Applications Program Committee Member Sixteenth IEEE International Systems Symposium Program Committee Member DIMACS Workshop on Verification and Control of Hybrid Systems Steering committee Center for High Integrity Software Systems Assurance CHISSA National Institute of Standards and Technology Member ISAT Defensive Information Warfare Study Group Advanced Research Projects Agency Review committee Leibniz Center at Hebrew University Member IFIP Working Group Programming Methodology Awards Fellow American Association for Advancement of Science Fellow Association for Computing Machinery Lectures Proof outlines for programs lectures International Summer School Marktoberdorf Germany July On the origin of traditions Banquet speech International Summer School Marktoberdorf Germany July Reasoning about programs by exploiting the environment AFOSR Meeting In Software and Systems Washington Verifying hybrid systems by exploiting the environment Symposium on Formal Techniques in and Systems Lubeck Germany Panelist comparative merits of synchronous partially synchronous and asynchronous models for systems Symposium on Formal Techniques in and Systems Lubeck Germany Moderator issues in writing formal specifications Specification and Refinement of Reactive Systems International Conference and Research Center for Computer Science Dagstuhl Germany Merging policies Workshop on Computer Support for Policy Analysis and Design George Mason University Virginia Avoiding AAS mistakes Invited speaker Air Traffic Management Workshop NASA Ames Research Center Reasoning about programs by exploiting the environment Technical University of Munich Munich Germany Proof outlines of the past University of North Carolina Chapel Hill North Carolina March Adding virtually Distinguished Lecture Series University of North Carolina Chapel Hill North Carolina March Moderator and panel organizer teaching logic as tool SIGCSE Technical Symposium on Computer Science Education Nashville Tennessee March Proof outlines of the past Technion Haifa Israel March Adding virtually University of Norway April Concurrent programs from specifications University of Norway April Placing agents on airplanes view of AAS and its successor ARPA ISAT Defensive Information Warfare Study Group Meeting Washington June Publications Reasoning about programs by exploiting the environment Proceedings International Colloquium Jerusalem Israel July Lecture Notes in Computer Science New York with Fix Notes on proof outline logic Working Material International Summer School Marktoberdorf Germany July Research on and computing Software and Systems Program Summary Bolling Air Force Base Washington Air Force Office of Scientific Research Hybrid verification by exploiting the environment Formal Techniques in and Systems Lubeck Germany September Lecture Notes in Computer Science Volume New York with Limor Fix Equational propositional logic Information Processing Letters February with Gries Refinement for An aircraft protocol Foundations of Ultradependable Parallel and Distributed Computing Paradigms for Dependable Applications Kluwer Academic Publishers with Marzullo and Dehn Teaching logic as tool Proceedings SIGCSE Technical Symposium on Computer Science Education Nashville Tennessee March SIGCSE Bulletin with Gries Operating system support for mobile agents Proceedings Fifth Workshop on Hot Topics in Operating Systems Orcas Island Washington May with Dag Johansen and Robbert van Renesse Verifying programs that use Science of Computer Programming with Stoller On teaching proof Arts Sciences NewsLetter Spring with Gries new approach to discrete teaching mathematics Primus June with Gries Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4323	 Server Date Wednesday GMT Friday GMT Dan Huttenlocher Home Page Daniel Huttenlocher Associate Professordph fax Research My main area of research is visual matching and recognition My work in this area ranges from theoretical algorithms using techniques from computational geometry to applications of visual matching in systems for remote collaboration viewing document images over wide area networks video monitoring and target recognition am also interested in uses of new types of electronic documents for communication remote collaboration and education Algorithms for comparing geometric structures methods for visual matching and recognition implementation is available Fast indexing using an Eigenspace approximation to the Hausdorff fraction and Matlab implementation is available Performance evaluation and modeling of recognition methods Video monitoring object tracking and identification DigiPaper highly compact universally viewable document image format CoNote system for supporting collaboration with shared documents Teaching Brian Smith and are developing new course on authoring Web documents which will be offered for the first time in Spring also teach an introduction to computation and programming and course in computer vision Professional Activities work with Xerox PARC on electronic document image processing and am starting small group investigating these problems at Cornell am program of the IEEE conference on computer vision and pattern recognition which will be held in San Juan PR in June Other Interests Two of my favorite activities are snowboarding and mountain biking but without the stupid attitude Last Updated November	faculty	cornell
4324	 Server Date Sunday GMT Wednesday GMT Robert Constable Robert Constable Department rc University of Wisconsin Madison Research We are engaged in the study of computer systems that provide mechanical assistance in problem solving especially in programming and mathematics This involves long term study of ways to make the formalization of mathematics feasible and useful We have implemented three such systems in the past tne years PRL and Nuprl Our major experimentation is with Nuprl Lisp program that implements constructive theory of types Systems such as Nuprl are useful formalizations of mathematics because they can express wide variety of proof and methods as metalevel programs of the system These provide considerable theorem proving power Moreover Nuprl is especially useful because it can evaluate the computational content of theorems In principle Nuprl is both fomal system of mathematics and programming language We continue to improve Nuprl the current version used at Cornell is called Nuprl It differs from its predecessors in having new term editor designed by Stuart Allen and implemented by Richard Eaton Its internal structure is more modular making the system suitable for he definition of wide variety of logics beyond the constructive type theory Also the entire mechanism has been rebuilt and by Paul Jackson building on the work of Douglas Howe This contributes to the generic nature of Nuprl Finally this version of the system can refer to itself There is an internal description of the language and its logic built principally by William Aitken using the theory developed by Allen Howe and myself Richard Eaton designed link between the internal description of the logic and the logic itself which makes it possible to prove theorems about the process of proving theorems We are also engaged in three exciting joint ventures One is with Miriam Leeser of Electrical ENgineering and the other two are in Computer Science with David Gries on Polya and with Richard Zippel on Weyl With Lesser we are involved in hardware synthesis and verification Leeser and her student Mark Aagard have used Nuprl to prove the correctness of boolean circuit minimization package Pbs used by circuit designers This is component of Leeser Bedroc system it implements the weak division algorithm which is widely used in circuit design systems This major theorem proving effort taught us great deal about the effectiveness of our technology in the hands of expert users from an application domain The second joint venture involves building model of the Polya programming language and program refinement mechanism for it both designed by David Gries which will enable him to write his handbook of algorithms in the manner that he devised through years of study of the programming process Stuart Allen has givne formal definition of Polya We expect to be experimenting soon with transforms and trying to capture the programming style that Gries wants We have recently begun collaboration that we hope to relate to the Polya effort Conal Mannion has been exploring the possibility of using Nuprl in computational science We have been discussing problems with Richard Zippel and are hoping to connect symbolic algebra system Weyl with Nuprl in the near future This will be used to explore the development of scientific computing software using Weyl and Nuprl together with other tools that Zippel is building Professional Activities Editor Journal of Symbolic Computation Editor Academic Press Editor Journal of Logic and Computation Editor Oxford University Press General Chair LICS Program Committee North American Jumelage Program Committee Theoretical Aspects of Computer Software NSERC Canada NSF Theoretical Computer Science University Activities Chair Computer Science Recruiting Committee Computer Science Computing Facilities Committee Provost Study Committee on Mathematics Lectures Formal theories and software systems fundamental connections between computer science and logic INRIA Anniversary Celebration Paris France December The Nuprl software development system Computer Science Colloquium Ben Gurion University Ber Sheva Israel January Formal theories and software systems State of Israel Symposium Tel Aviv Israel January Association for Symbolic Logic Annual Meeting Notre Dame University Notre Dame Indiana March Metaprogramming in type theory State University of New York Buffalo New York March Formal explanations of software Formal Methods and Software Engineering Workshop University of Pennsylvania Philadelphia Pennsylvania May Publications Formal theories and software systems fundamental connections between computer science and logic In Future Tendencies in Computer Science Control and Applied Mathematics ed Bensoussan and Verjus Lecture Notes in Computer Science December Metalevel programming in constructive type theory In Programming and Mathematical Method ed Manfred Broy NATO ASI Series	faculty	cornell
4325	 Server Date Wednesday GMT Wednesday GMT Tim Teitelbaum Associate Professor Department of Computer Science Cornell University tt Research Interests Incremental Computation Transformational Programming Programming Environments Editors Compilers Attribute Grammars Ada Vita Last updated	faculty	cornell
4326	 Server Date Wednesday GMT Friday GMT Faculty Research Interests Sam Toueg Sam Toueg Professor Princeton University Research Interests My research interests include distributed computing and work on methodologies paradigms and algorithms for distributed systems in both and systems My goal is to bridge the gap between theoretical results and the need for efficient and practical solutions In collaboration with Tushar Chandra and Prasad Jayanti two Computer Science students we continued our work on unreliable failure detectors for systems and on objects for systems fundamental result of distributed computing states that the Consensus problem can not be solved with deterministic algorithm in asynchronous systems This impossibility result is due to the inherent difficulty of determining whether process has crashed or is merely very slow in such system In our work we were able to determine exactly how much information about failures is necessary and sufficient to solve Consensus We first showed one can use an unreliable failure detector that can make an infinite number of mistakes to solve Consensus in systems with majority of correct processes We then proved that to solve Consensus any failure detector has to provide at least as much information about failures as Thus is the weakest failure detector for solving Consensus in asynchronous systems with majority of correct processes We are now exploring the practicality of implementing and of applications that rely on for their correctness concurrent system consists of processes communicating via shared objects shared object is if each process that accesses this object is guaranteed to get response even if all the other processes crash We are now exploring hierarchies of object types where each object type is assigned to level that corresponds to its ability in implementing other objects In particular Prasad Jayanti has shown that hierarchy Herlihy is not robust Informally in this hierarchy there is an object at level that can be used to implement objects at any level We are now exploring the question of whether robust hierarchies exist Selected Publications Bracha and Toueg Asynchronous consensus and broadcast protocols Journal of the ACM vol Srikanth and Toueg Optimal clock synchronization Journal of the ACM vol El Abbadi and Toueg Maintaining availability in partitioned replicated databases ACM Transactions on Database Systems vol Neiger and Toueg Automatically increasing the of distributed algorithms Journal of Algorithms vol Chandra and Toueg Unreliable failure detectors for asynchronous systems Proceedings ACM Symposium on Principles of Distributed Computing August Montreal Canada Chandra Hadzilacos and Toueg The weakest failure detector for solving consensus Proceedings ACM Symposium on Principles of Distributed Computing August Vancouver Canada Jayanti Chandra and Toueg shared objects Proceedings IEEE Symposium on Foundations of Computer Science October Pittsburgh Pennsylvania Neiger and Toueg Simulating synchronized clocks and common knowledge in distributed systems Journal of the ACM vol	faculty	cornell
4327	 Server Date Wednesday GMT Tuesday GMT Claire Cardie Claire Cardie Assistant Professor Upson Hall Phone Fax Email cardie Click on these to see RESEARCH INTERESTS COURSES THAT TEACH SELECTED PUBLICATIONS NLP and ML Links My entry in the department annual report Amalgams softball stats Finger Lakes Tandem Tour with the Westys Research Interests Although my research spans number of subfields within artificial intelligence including machine learning reasoning and cognitive modeling the focus of my research is in the area of natural language understanding The NLP group at Cornell is primarily interested in investigating the use of machine learning techniques as tools for guiding natural language system development and for exploring the mechanisms that underly language acquisition Our work focuses on two related areas the design of systems that can efficiently and reliably extract the important information from document and the machine learning of natural language Information Extraction As part of Cornell CSTR project we are using information extraction techniques to support browsing of technical texts The Kenmore Project The focus of the Kenmore project is on developing techniques to automate the knowledge acquisition tasks that comprise the building of any NLP system Very generally Kenmore acquires linguistic knowledge using combination of symbolic machine learning techniques and robust sentence analysis It has been used with corpora from two domains to perform tagging semantic feature tagging and concept activation and to find the antecedents of relative pronouns In current work we are extending Kenmore to handle larger text corpora and additional disambiguation tasks In all of our work we evaluate the language learning components in the context of the larger NLP application in which it is embedded The goal of the project is to determine the conditions under which machine learning techniques can be expected to offer approach to knowledge acquisition for NLP systems Teaching Natural Language Understanding Spring Foundations of Artificial Intelligence and Practicum in Artificial Intelligence Fall Seminar in Natural Language Understanding Selected Publications Automating Feature Set Selection for Learning of Linguistic Knowledge Cardie Proceedings of the Conference on Empirical Methods in Natural Language Processing University of Pennsylvania Embedded Machine Learning Systems for Natural Language Processing General Framework Cardie In Wermter and Riloff and Scheler Gabriele eds Connectionist Statistical and Symbolic Approaches to Learning for Natural Language Processing Lecture Notes in Artificial Intelligence Springer Originally presented at the Workshop on New Approaches to Learning for Natural Language Processing International Joint Conference on Artificial Intelligence AAAI Press Chapter Introduction Thesis Cardie Knowledge Acquisition for Conceptual Sentence Analysis Thesis University of Massachusetts Amherst MA Note that this file contains just the introductory chapter of the thesis Knowledge Acquisition for Conceptual Sentence Analysis Cardie Thesis University of Massachusetts Amherst MA Available as University of Massachusetts CMPSCI Technical Report pages Approach to Knowledge Acquisition for Sentence Analysis Cardie Proceedings of the Eleventh National Conference on Artificial Intelligence Washington DC AAAI Press MIT Press Using Decision Trees to Improve Learning Cardie Proceedings of the Tenth International Conference on Machine Learning Amherst MA Morgan Kaufmann Acquisition of Relative Pronoun Disambiguation Heuristics Cardie Proceedings of the Annual Conference of the Association for Computational Linguistics Newark DE Association for Computational Linguistics Learning to Disambiguate Relative Pronouns Cardie Proceedings of the Tenth National Conference on Artificial Intelligence San Jose CA AAAI Press MIT Press Using Cognitive Biases to Guide Feature Set Selection Cardie Proceedings of the Fourteenth Annual Conference of the Cognitive Science Society Bloomington IN Lawrence Erlbaum Associates and Working Notes of the AAAI Workshop on Constraining Learning with Prior Knowledge San Jose CA Cognitively Plausible Approach to Understanding Complicated Syntax Cardie and Lehnert Proceedings of the Ninth National Conference on Artificial Intelligence Anaheim CA AAAI Press MIT Press Analyzing Research Papers Using Citation Sentences Lehnert Cardie and Riloff Proceedings of the Twelfth Annual Conference of the Cognitive Science Society Cambridge MA Lawrence Erlbaum Associates NLP and Machine Learning Links Computational Linguistics Archive database of recent CL papers ACL Special Interest Group on Natural Language Learning Machine Learning Digest Machine Learning Resources Researchers Machine Learning links to the home pages of ML researchers Penn Treebank II AI Repository contains has pointers to code for various NLP system components	faculty	cornell
4328	 Server Date Wednesday GMT Thursday GMT Keshav Pingali Keshav Pingali Associate Professor PhD MIT My research group works in the areas of programming languages and compilers for parallel architectures Our goal is to develop tools for generating parallel code for applications programs that deal with large sparse matrices Most scientific applications involve the numerical solution of partial differential equations The techniques used almost always produce system of algebraic equations that involve large sparse matrices Unfortunately existing compiler technology does poor job of parallelizing sparse matrix programs We take radically different approach to this problem Our compiler produces parallel programs from sequential programs using information from the user about the sparsity structure of matrices in the program This enables us to use tools from the restructuring compiler area Preliminary experiments with some Krylov space solvers show that the code produced by our compiler is competitive with code in libraries like Argonne PetSc library We will extend our approach to direct methods for solving linear systems and to applications that require adaptive mesh refinement This project builds on our earlier work on restructuring compilation techniques for dense matrix programs We have developed restructuring techniques for compiling programs to distributed memory and memory access NUMA architectures like the IBM and where processor can access local memory faster than memory To get good performance the compiler must not only parallelize but must also ensure locality of reference by matching code and data distribution when references must be made block transfers are preferable to many small messages We recently developed the best algorithm known for the automatic alignment of computation and data and are incorporating it into our compiler In earlier work we developed novel loop restructuring technique called access normalization which transforms loop nests for increased locality and potential for block transfers and implemented it in the LAMBDA loop transformation toolkit our paper summarizing these results won the best paper prize at ASPLOS We worked with to transfer this technology to HP FORTRAN compiler product line for uniprocessors and multiprocessors We have developed new frameworks for program analysis and optimization based on the dependence flow graph DFG The DFG knits together the data and control dependence information of program permitting the development of optimization algorithms that generate better code than is possible with competing approaches Our results are of independent interest for example we recently developed optimal algorithms for control dependence problems answering foundational question that had been open for almost decade This work led to the development of algorithm for computing the static single assignment SSA form of programs These results have been incorporated into number of compilers including those at IBM Microsoft HP and Flavors Professional Activities Panel member and organizer ACM Symposium on Principles and Practice of Parallel Programming Member NSF National Young Investigator NYI Awards Panel Consultant Hewlett Packard Labs Intel Corporation Army Ballistic Research Labs Odyssey Research Math Sciences Institute ACM TOPLAS IEEE Transactions on Computers Journal of Parallel and Distributed Computing Journal of Supercomputing IEEE Computer Editorial Board International Journal of Parallel Programming Awards National Science Foundation Presidential Young Investigator IBM Faculty Development Award Best paper prize ASPLOS Lectures Fast algorithms for control dependence problems Corporation Chelmsford Massachusetts January Computer Science Department Wayne State University Detroit Michigan February Rutgers University New Brunswick New Jersey May Microsoft Research Laboratories Redmond Washington June Publications Solving alignment using elementary linear algebra Proceedings of the Seventh Annual Workshop on Languages and Compilers for Parallel Computers LCPC Lecture Notes in Computer Science Ithaca NY August with David Bau Induprakas Kodukula Vladimir Kotlyar and Paul Stodghill APT data structure for optimal control dependence computation ACM SIGPLAN Conference on Programming Language Design and Implementation PLDI June with Gianfranco Bilardi Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4329	 Server Date Wednesday GMT Thursday GMT Donald Greenberg Donald Greenberg Jacob Gould Schurman of Computer Science Director NSF Science and Technology Center for Computer Graphics and Scientific Visualization PhD Cornell University For the past two decades our computer graphics activities have involved the development of wide range of graphic input and display techniques number of input methods have been implemented and progress has been made on large variety of display routines Graphics research topics previously investigated include polygon clipping hidden surface algorithms texturing spatial and temporal aliasing problems geometric modeling parametric surface descriptions and color science Our current focus of graphics research involves the modeling of very complex environments and algorithms for realistic image synthesis modular testbed that is sufficiently flexible to evaluate different modeling and image generation techniques has been created Laboratory research is now being conducted on light reflection models methods for determining the interaction between reflecting surfaces techniques for improving the computational efficiency of parallel processing strategies perceptual studies surface modeling motion control dynamics constraint modeling strategies and host of other topics related to complex modeling and realistic image displays New application research is being started in volume rendering and medical imaging digital photography animation and the development of generic tools for scientific visualization as well as core technologies for environments Most of the research is conducted within the facilities of the Program of Computer Graphics which is member of the new National Science Foundation Science and Technology Center for Computer Graphics and Scientific Visualization Other participating universities are Brown University California Institute of Technology University of North Carolina Chapel Hill and the University of Utah University Activities Director Program of Computer Graphics Director National Science Foundation Science and Technology Center for Computer Graphics and Scientific Visualization Professional Activities Editorial Board Computer Graphics Journal National Academy of Engineering Founding Fellow American Institute of Medical and Biological Engineering Fellow ACM Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4330	 Server Date Wednesday GMT Thursday GMT Tom Henzinger Thomas Henzinger HAVE MOVED Assistant Professor Computer Science Department Cornell University Ithaca NY Email tah Phone Fax Research Formal support for the development and analysis of concurrent and embedded systems Related research at Cornell and worldwide Resume Publications Reactive modules formal methodology for the analysis of concurrent systems logics and timed transition systems formal methodology for the analysis of systems Clock systems and timed automata more formal methodology for the analysis of systems Hybrid automata formal methodology for the analysis of embedded systems Bibliography bibtex list of publications Tools HyTech symbolic model checker for linear hybrid systems Courses CS Fall Advanced Programming Languages Conferences HYBRID Verification and Control of Hybrid Systems CAV Verification Last updated on September tah	faculty	cornell
4331	 Server Date Wednesday No match GMT Thursday GMT Jon Kleinberg Homepage Jon Kleinberg kleinber Assistant Professor of Computer Science Cornell University Ithaca NY My research interests are in algorithms and combinatorial optimization with an emphasis on approximation computational geometry network optimization and distributed computing and algorithms in molecular biology Recent work has included approximation algorithms for routing and disjoint paths problems in networks adversarial queueing theory an approach to analyzing the stability of network routing protocols without probabilistic assumptions geometric methods in combinatorial optimization particularly the use of positive programming and geometric algorithms for studying molecular conformation am spending the academic year visiting the IBM Almaden Research Center Click here to see Selected Publications Miscellaneous Links PAPERS Approximation Algorithms and Combinatorial Optimization Kleinberg unsplittable flow Proc IEEE Symposium on Foundations of Computer Science to appear Kleinberg Rubinfeld Short paths in expander graphs Proc IEEE Symposium on Foundations of Computer Science to appear Kleinberg Tardos Disjoint paths in densely embedded graphs Proc IEEE Symposium on Foundations of Computer Science Kleinberg Tardos Approximations for the disjoint paths problem in planar networks Proc ACM Symposium on Theory of Computing Aggarwal Kleinberg Williamson paths on the mesh and new in VLSI layout Proc ACM Symposium on Theory of Computing Goemans Kleinberg An improved approximation ratio for the minimum latency problem Proc Symposium on Discrete Algorithms Kleinberg Goemans The Lovasz theta function and programming relaxation of vertex cover To appear in SIAM Discrete Math Algorithms Kleinberg The localization problem for mobile robots Proc IEEE Symposium on Foundations of Computer Science Kleinberg search in simple polygon Proc Symposium on Discrete Algorithms Kleinberg lower bound for balancing algorithms Information Processing Letters Kleinberg Geometric algorithms Information Processing Letters Kleinberg algorithms for robot navigation and server problems Master Thesis Parallel and Distributed Computing Andrews Awerbuch Fernandez Kleinberg Leighton Liu Universal stability results for greedy protocols Proc IEEE Symposium on Foundations of Computer Science to appear Borodin Kleinberg Raghavan Sudan Williamson Adversarial queueing theory Proc ACM Symposium on Theory of Computing Kleinberg Attiya Lynch between message delivery and quiesce times in connection management protocols Proc Israel Symposium on Theory of Computing and Systems Kleinberg Mullainathan Resource bounds and combinations of consensus objects Proc ACM Symposium on Principles of Distributed Computing Geometric Algorithms Berger Kleinberg Leighton Reconstructing Model with Arbitrary Errors Proc ACM Symposium on Theory of Computing Huttenlocher Kleinberg Comparing point sets under projection Proc Symposium on Discrete Algorithms Huttenlocher Kedem Kleinberg On dynamic Voronoi diagrams and the minimum Hausdorff distance for point sets under Euclidean motion in the plane Proc ACM Symposium on Computational Geometry Huttenlocher Kleinberg Invariants of set of points or line segments under projection Cornell University Computer Science Technical Report TR July SOME LINKS Search Tools and Bibliographies AltaVista Infoseek Excite Yahoo NYNEX Yellow Pages Glimpse computer science bibliographies NCSTRL Networked Computer Science Technical Reports Library David Jones Hypertext Bibliography Project Academic Sites Cornell University Cornell Computer Science Cornell Operations Research MIT Lab for Computer Science MIT LCS Theory of Computation Group Stanford Computer Science Berkeley Computer Science Computing Research Association National Science Foundation Theory of Computing TCS Virtual Address Book Bibliographies on of Computer Science Compendium of NP Optimization Problems FOCS conference SODA conference STOC conference Computational Biology Computational Biology at USC CARB Biocomputing Resources SDSC List of Computational Biology Servers Computational Geometry David Eppstein Geometry Junkyard Jeff Erickson Computational Geometry Page Internet Security MITRE Security Information Resources Princeton Safe Internet Programming Group Ron Rivest Cryptography and Security Links Miscellaneous Netscape Intellicast CNN Interactive Tennis Association Chess Online Car Talk Jon Kleinberg Department of Computer Science Upson Hall Cornell University Ithaca NY kleinber	faculty	cornell
4332	 Server Date Wednesday GMT Thursday GMT Activities Tardos Tardos Associate Professor Department of Computer Science Upson Hall Cornell University Ithaca NY phone fax Email eva School of Operations Research and Industrial Engineering phone FAX eva Click here to see my daughter Rebecca Julia Shmoys Current Activities Current Research Recent Publications Current Research Broadly speaking my research interest is the theory of algorithms including many aspects of computational complexity theory am mostly working on combinatorial optimization problems in particular network problems approximation algorithms and linear and integer programming problems Recent Publications Research Papers Survey papers Research Papers Shmoys and Tardos An approximation algorithm for the generalized assignment problem Mathematical Programming Preliminary version has appeared in the proceeding of the Annual Symposium on Discrete Algorithms January Plotkin and Tardos Improved Bounds on the Ratio for Multicommodity Flows to appear in Combinatorica Preliminary version has appeared in the Proceedings of the Annual ACM Symposium on Theory of Computing pp ORIE Klein Plotkin Stein and Tardos Faster approximation algorithms for the unit capacity concurrent flow problem with applications to routing and finding sparse cuts SIAM Journal on Computing Preliminary version has appeared in the proceedings of the Annual ACM Symposium on the Theory of Computing Leighton Makedon Plotkin Stein Tardos Tragoudas Fast Approximation Algorithms for Multicommodity Flow Problems Journal of Computer and System Sciences special issue pp Preliminary version has appeared in the Proceedings of the Annual ACM Symposium on the Theory of Computing Plotkin Shmoys and Tardos Fast approximation algorithms for fractional packing and covering problems to appear in Mathematics of Operations Research ORIE Preliminary version has appeared in the Proceedings of the Annual IEEE Symposium on the Foundations of Computer Science Goemans Goldberg Plotkin Shmoys Tardos and Williamson Improved approximation algorithms for network design problems In the proceeding of the Annual Symposium on Discrete Algorithms January pp ORIE Hoppe and Tardos Polynomial Time Algorithms for Some Evacuation Problems In the proceeding of the Annual Symposium on Discrete Algorithms January pp ORIE Hoppe and Tardos The Quickest Transshipment Problem in the proceeding of the Annual Symposium on Discrete Algorithms pp ORIE Klein Plotkin Rao and Tardos Approximation Algorithms for Steiner and Directed Multicuts ORIE Kleinberg and Tardos Approximations for the Disjoint Paths Problem in Planar Networks in the Proceedings of the Annual ACM Symposium on Theory of Computing pp ORIE Kleinberg and Tardos Disjoint Paths in Densely Embedded Graphs in the Proceedings of the Annual IEEE Symposium on the Foundations of Computer Science pp new version of ORIE Rabani and Tardos Distributed Packet Switching in Arbitrary Networks in the ACM Symposium on Theory of Computing May pp ps version Fleischer and Tardos Separating Maximally Violated Comb Inequalities in Planar Graphs to appear in IPCO June ORIE Survey Papers Goldberg Tardos and Tarjan Network Flow Algorithms in Paths Flows and eds Korte Lovasz and Schrijver Tardos Strongly Polynomial and Combinatorial Algorithms in Optimization in the Proceedings of the International Congress of Mathematicians Kyoto Tokyo Shmoys and Tardos Computational complexity Handbook of Combinatorics eds Graham Grotschel and Lovasz North Holland to appear Lovasz Shmoys and Tardos Combinatorics in Computer Science to appear in the Handbook of Combinatorics eds Graham and Lovasz North Holland to appear Tardos Approximate Theorems and Fast Approximation Algorithms for Multicommodity Flow Problems annotated bibliography In Proc of the Summer School on Combinatorial Optimization in Maastricht The Netherlands Tardos Approximate Theorems and Fast Approximation Algorithms for Multicommodity Flow Problems In Proc Network Optimization Theory and Practice NETFLOW in San Miniato PI Italy	faculty	cornell
4333	 Server Date Wednesday GMT Thursday GMT Dean Krafft Selected URLs Dean Points of Interest Cornell Servers Cornell CS home page CUINFO Web Server Engineering Library page Cornell Legal Information Institute Cornell Directories Project public server page DIMUND Document Image Understanding and Character Recognition WWW Server SIAM gopher server CS Information Capture and Access Course Illinois Digital Library Stanford Digital Library Michigan Digital Library Berkeley Digital Library Search Tools The Lycos WWW Search Engine Veronica GOPHER Search Tool The Archie Gateway search Anonymous FTP sites The CMU CS Department has put together an excellent collection of search tools Network Information Scout Report at Internic Planet Earth and the Whole Internet Catalog which is part of the Global Network Navigator CERN WWW Reference Page All the FAQs Various Stuff Mailing List Pro Audio Gear FolkBook Folk Music Home Page Ithaca Weather Forecast and the weather elsewhere Security Reference Index	faculty	cornell
4334	 Server Date Wednesday GMT Thursday GMT John Hopcroft John Hopcroft Joseph Silbert Dean of Engineering Professor of Computer Science PhD Stanford University On January was appointed dean of the College of Engineering and now oversee the ten academic departments that comprise the college as well as various research units My involvement with the Computer Science Department continues through research on robust geometric algorithms modeling and simulation and information capture and access In collaboration with the Design Research Institute we are developing technologies to facilitate information capture and access within an engineering design environment Among the technologies being researched are distributed databases and persistent object storage document image processing and management multimedia and user interface technology information science for heterogeneous data knowledge representation and organization and remote collaboration technologies Professional Activities Member National Research Council Commission on Physical Sciences Mathematics and Applications Member National Science Board Member Scientific Advisory Board United States Air Force Member National Academy of Engineering Fellow American Academy of Arts and Sciences Fellow American Association for the Advancement of Science AAAS Fellow Institute of Electrical and Electronics Engineers IEEE Fellow Association for Computing Machinery Chairman SIAM Board of Trustees Member Scientific Advisory Committee for the David and Lucile Packard Foundation Member Sloan Research Fellowship Committee Advisory Board Supercomputing Research Center Institute for Defense Analysis Editor Oxford University Press International Series on Computer Science Algorithmica Discrete and Computational Geometry Associate Editor International Journal of Computational Geometry and Applications Journal of Computer and Systems Sciences Journal of Information Sciences Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4335	 Server Date Wednesday GMT Monday GMT Praveen Seshadri Home Page Praveen Seshadri Assistant Professor Computer Science Department Cornell University Upson Hall Ithaca NY USA Office FAX Advanced Database Systems CS Fall The PREDATOR DBMS Project End ADTs as we know them The Case for Enhanced Abstract Data Types SIGMOD submission Professional Publications The SEQ project time to put your database in order Management of Sequence Data postscript of my PhD thesis in page format Personal Warren Road Ithaca NY Ranjani Ramamurthy Green Bay Packers	faculty	cornell
4336	 Server Date Wednesday GMT Tuesday GMT David Gries Page David Gries William Lewis Professor of Engineering rer Munich Institute of Technology My interests are in programming methodology in particular the formal development of programs and in related areas such as programming languages programming language semantics and logic am as interested in the teaching of these topics as am in further research in them In fact understanding how logic and formalism can be taught as useful tool at the college level has been an overriding concern of mine in the Click on any of the following items for more information Teaching logic as tool Curriculum Vita Short biography Texts written by Gries The programming language Polya Announcement of DIMACS Symposium on teaching logic Links to papers for the symposium Cornell CS Department Home Page Computer Science Upson Hall Cornell University Ithaca NY gries Short biography of David Gries was born in Flushing New York and spent years there before escaped received Queens College in and went to work for the Naval Weapons laboratory as civilian as met my Elaine few months later and we were married in November We went to Illinois for more education received Masters degree in math from Illinois in My assistantship was to help two Germans Manfred Paul and Ruediger Wiehle write full Algol compiler for the IBM computer it was fun figuring out how to implement recursion efficiently before there were many papers on the topic This ended up in my wife and going to Munich for almost three years received my doctorate under Bauer and Joseph Stoer from MIT the Munich Institute of Technology Germany in June This was in math or numerical analysis since computer science theses were not yet kosher was an assistant professor of Computer Science at Stanford from to While at Stanford our twins Paul and Susan were born What made it more exciting than usual was that they were born on the birthday of myself and my twin April So when my twin is in town Elaine makes four birthday cakes We left Stanford because it had no weather We moved to Cornell which has weather in and have been snowed in ever since was Department Chair in and became the William Lewis Professor of Engineering in had Guggenheim Fellowship in Return to table of contents am better known for my text writing and my contributions to education than on the wonderfulness of my research Do what you are good at bloom where you are planted have received number of awards for contributions to education the IEEE Taylor Booth Award the ACM SIGCSE award in Cornell Outstanding Educator Award in the Clark Award from Cornell College of Arts Sciences in and the American Federation of Information Processing Societies AFIPS education award in am proud of all my advisees but two stand out Susan Owicki thesis laid the foundation for proofs of correctness of parallel programs with the notion of paper by us on the topic won the ACM Award for best paper in programming langauges and systems And thesis just won the ACM award for Raman designed and implemented system for speaking any document including technical articles and books The same document can be printed or spoken Being able to speak mathematics in an effective manner was an important goal of his work Reading for the Blind is already using his system to produce audio cassettes served as Chair of the Computing Research Association then the Computer Science Board in the late when it opened its office in Washington and began seriously to represent computing research interests also conducted the Taulbee Surveys in the period and am proud of obtaining essentially complete responses from computer science departments during that period No other comparable survey has had such response rate One year it required only telephone calls to get the departments to send in their questionnaires received the Computing Research Association Service Award for this work on the Surveys and for chairing the Association during its move toward respectability and responsibility am currently editor for IPL Acta Informatica Formal Aspects of Computing and Software Concepts and Tools This editing keeps me busy but enjoy it try to take an interest in individual papers when know the area and will suggest substantial rewrites myself when believe it will help Serve where you can best serve Fred Schneider and are of Springer Verlag Texts and Monographs in Computer Science What do do in my spare time It used to be sports like golf softball volleyball swimming and table tennis Once in China split my pants playing ping pong An hour later while giving lecture mentioned that the audience should not laugh when turned around and explained why The interpreter spoke and everyone laughed However do know whether he told the truth or just said Gries made joke also used to sing barbershop and Gilbert and Sullivan And working around the house carpentry wiring remodeling has taken lot of time and yielded considerable satisfaction Return to table of contents	faculty	cornell
4337	 Server Date Wednesday GMT Wednesday GMT Bruce Randall Donald Bruce Randall Donald Associate Professor brd MIT Weather in Palo Alto My Official Departmental Home Page Cornell Robotics and Vision Laboratory Dan Huttenlocher and founded the Cornell Robotics and Vision Laboratory in Research My interests include robotics microelectromechanical systems geometric algorithms and artificial intelligence Robotics is the science that seeks to forge an intelligent computational connection between perception and action Working with graduate student Jim Jennings research associate Daniela Rus graduate student Russell Brown and lab alumnus Jonathan Rees now at MIT we developed team of autonomous mobile robots that can perform sophisticated distributed manipulation tasks such as moving furniture The robots run robust SPMD protocols that are completely asynchronous and require no communication With grad student Karl and EE Professor Noel MacDonald we are building massively parallel array of microactuators in the Cornell National Nanofabrication Laboratory The array is SCREAM chip containing over actuators in square centemeter and can orient small parts without sensory feedback Our microfabricated actuator arrays could be used to construct programmable at any scale or to build IC walking VLSI chips Graduate student Amy Briggs worked with Dan Huttenlocher vision group to develop sensor planning and surveillance system for team of mobile robots The robots use vision to detect and intercept targets in the lab Demos Massively parallel actuator arrays MPEG video of Tommy chasing Lily Tommy and Lily are mobile robots we built Using algorithms developed by the vision group in our lab Lily can track Tommy and follow him using visual information alone This video shows Lily view of the chase Face Morphing Selected Recent Publications Donald and MacDonald Upper and Lower Bounds for Programmable Vector Fields with Applications to MEMS and Vibratory Parts Feeders International Workshop on the Algorithmic Foundations of Robotics Toulouse France Briggs and Donald Robust Geometric Algorithms for Sensor Planning International Workshop on the Algorithmic Foundations of Robotics Toulouse France Donald and MacDonald Silicon Actuator Arrays for Micro Manipulation Tasks IEEE Workshop on Micro Electro Mechanical Systems MEMS San Diego California February Donald and MacDonald Classification and Lower Bounds for MEMS Arrays and Vibratory Parts Feeders What Programmable Vector Fields Can and Can not Do Part IEEE International Conference on Robotics and Automation ICRA Minneapolis Minnesota April Donald and MacDonald New and Improved Manipulation Algorithms for MEMS Arrays and Vibratory Parts Feeders What Programmable Vector Fields Can and Can not Do Part II IEEE International Conference on Robotics and Automation ICRA Minneapolis Minnesota April Provably Good Approximation Algorithms for Optimal Kinodynamic Planning Robots with Decoupled Dynamics Bounds with Xavier Algorithmica Vol no pp Provably Good Approximation Algorithms for Optimal Kinodynamic Planning for Cartesian Robots and Open Chain Manipulators with Xavier Algorithmica Vol no pp Kinodynamic Motion Planning with Xavier Canny and Reif Journal of the ACM Vol No pp Information Invariants for Distributed Manipulation with Jennings and Rus in International Journal of Robotics Research in press Donald Jennings and Rus Minimalism Distribution Supermodularity Journal of Experimental and Theoretical Artificial Intelligence JETAI in press am writing book entitled Information Invariants in Robotics draft of the first quarter of this book appeared as paper in Artificial Intelligence Here it is Information Invariants in Robotics Revised MS based on the paper On Information Invariants in Robotics Artificial Intelligence Vol Jan pp Distributed Robotic Manipulation Experiments in Minimalism in International Symposium on Experimental Robotics ISER Stanford CA Moving Furniture with Teams of Automonous Mobile Robots with Jennings and Rus in Society of Japan International Workshop on Intelligent Robots and Systems IROS Pittsburgh PA Sensorless Manipulation Using Massively Parallel Actuator Arrays with Mihailovich and Noel MacDonald Proc IEEE International Conference on Robotics and Automation San Diego CA May demo and more detailed explanation Program Mobile Robots in Scheme with Rees Proc IEEE International Conference on Robotics and Automation Nice France May pp Information Invariants for Distributed Manipulation with Jennings and Rus in The First Workshop on the Algorithmic Foundations of Robotics Peters Boston MA ed Wilson and Automatic Sensor Configuration for Planning with Amy Briggs Proceedings IEEE International Conference on Robotics and Automation San Diego CA May Other Publications Recent Theses and Papers of PhD Students Patrick Xavier PhD Except for the thesis these TR are mostly superseded by three more recent journal papers listed starting here Amy Briggs PhD Her Papers and Thesis Russell Brown PhD His Papers and Thesis Jim Jennings Trained in Our Lab Daniela Rus Jonathan Rees Dinesh Pai More papers are avalable through the Cornell CS TR server Some other papers are listed here Cornell CS TR version of my Online Tech Reports Cornell Library Catalog CS TR index Obtaining Copies of Papers Copies of our papers are available via anonymous FTP Pictures We have developed team of small autonomous mobile robots that can move furniture around in our lab for group portrait of our robots Click here to see picture of Tommy and Lily mobot pushing couch Click here to see picture of Tommy and Lily rotating couch Click here to see picture of Tommy the mobile robot drawn by Loretta Pompilio Click here to see pictures of people and robots working in the lab Our lab was on The Discovery Channel Beyond and you can find out more about it here Fun Poem by Alfred the Mail Agent Family Pictures play in Harmful If Swallowed in Ithaca sometimes play with in California More Other people and robots in the Cornell Robotics and Vision Laboratory Cornell Robotics and Vision Laboratory home page Other people in the Cornell CS department Click here for search tools and information access stuff Return to Cornell CS Why say click here You will have the tallest darkest leading man in Hollywood Merian Cooper to Fay Wray	faculty	cornell
4338	 Server Date Wednesday GMT Thursday GMT Catherine Wagner Catherine Wagner Senior Lecturer PhD Cornell University My primary responsibilities in the Computer Science Department are in teaching am working with others in the department to revise the curriculum for our lower level courses am specifically interested in the development of course for students who are for our introductory course in programming University Activities Computer Science Undergraduate Curriculum Committee Professional Activities Association for Symbolic Logic Association for Computing Machinery Institute of Electrical and Electronics Engineers Association for Women in Mathematics Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4339	 Server Date Wednesday GMT Sunday GMT Stephen Vavasis Stephen Vavasis Associate Professor Department of Computer Science Rhodes Hall Cornell University Ithaca NY email vavasis phone fax During the period to am on sabbatical at MCS Division Bldg Argonne National Laboratory Cass Argonne IL email vavasis phone fax Note change in area code effective My research interest is numerical analysis You sure what numerical analysis is Please see the essay by my colleague Trefethen More specifically am interested in Numerical optimization and complexity issues Numerical methods for boundary value problems Geometric problems arising in scientific computing Sparse matrix computations have few recent manuscripts available Vavasis and Ye primal dual accelerated interior point method whose running time depends only on click here Hough and Vavasis Complete orthogonal decomposition for weighted least squares click here Mitchell and Vavasis An aspect ratio bound for triangulating cut by hyperplane click here Driscoll and Vavasis Numerical conformal mapping using and Delaunay triangulation click here The QMG package have recently completed software project on mesh generation for the finite element method in three dimensions The software package called QMG is available at the source code level by anonymous ftp With QMG you can construct polyhedral geometric objects with very complicated topology holes internal boundaries etc and automatically create an unstructured tetrahedral mesh for them The mesh generator is based on algorithmic work by Scott Mitchell and me You can also solve an elliptic boundary value problem div on your domain The package is written in and Matlab and is distributed for free at the level anonymous ftp distribution began QMG was released on November features many improvements over including faster mesh generation algorithm VRML graphics much cleaner code boundary mesh generation algorithm compatibility with Microsoft Windows NT as well as Unix and compatibility with as well as Matlab Please see the documentation Vavasis page from the annual report Back to CS home page	faculty	cornell
4340	 Server Date Wednesday GMT Sunday GMT Monika Henzinger Homepage Monika Rauch Henzinger Assistant Professor Computer Science Department Cornell University Ithaca NY Email mhr Phone Fax Currently on leave at Digital Equipment Corporation Systems Research Center Homepage Research Interests Combinatorial and Graph Algorithms especially Dynamic Graph Algorithms and Randomized Data Structures Graph Theory Data Structures Lower Bounds Recent Publications Dynamic Graph Algorithms Project Page Program Committees Homepage of CS Fall	faculty	cornell
4341	 Server Date Wednesday GMT Thursday GMT Charles Van Loan Charles Van Loan Professor PhD University of Michigan We continue to develop new methods for various Kronecker product computations In particular we have method for solving the nearest Kronecker product problem when the factor matrices are subjected to inhomogeneous constraints Some applications in signal processing and Markov processes are solved as result Kronecker product descriptions for various fast wavelet transforms have also been derived Our aim is to proceed by analogy to the FFT where such descriptions have played an important role in the development of algorithms Both undergraduate texts on computational science that have been working on for the last four years are now in production One is currently being translated into in anticipation of the fall semester University Activities Computer Science Department Undergraduate Curriculum Committee Department Representative Arts and Sciences Chairs Meeting Freshman Admissions Reader Arts and Sciences Professional Activities Editor SIAM Journal of Matrix Analysis Member Wilkinson Prize Committee SIAM Member DiPrima Prize Committee SIAM Member Organizing Committee Householder Conference Member Householder Prize Committee Lectures Applications of the Kronecker product Linkoping University Sweden January Umea University Sweden January Building intuition for computational science Umea University Sweden January Applications of the Kronecker product Ohio State University April Building intuition for computational science Ohio State University April Publications Optimizing closed loop adaptive optics performance with use of multiple control bandwidths Journal of the Optical Society of America with Ellerbroek Pitsianis and Plemmons Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4342	 Server Date Wednesday GMT Thursday GMT Faculty Research Interests Dexter Kozen Dexter Kozen Joseph Newton Pew Jr Professor in Engineering PhD Cornell University Research Interests My research interests include algorithms and complexity especially complexity of decision problems in logic and algebra and logics and semantics of programming languages Papers Available Online Kleene algebra set constraints type inference computational algebra automata theory algorithms and complexity logic Bibliography list of all publications Cornell technical reports Course Notes Structure and Interpretation of Computer Programs Automata and Computability Theory Fun Stuff Family pictures Rugby The Effect Computer Science Department Upson Hall Cornell University Ithaca New York USA kozen work home fax	faculty	cornell
4343	 Server Date Wednesday GMT Thursday GMT Juris Hartmanis Juris Hartmanis Walter Read Professor of Engineering PhD California Institute of Technology The strategic goal of our research is to contribute to the development of comprehensive theory of computational complexity Computational complexity is the study of the quantitative laws that govern computation and it is an essential part of the science base needed to guide harness and exploit the explosively growing computer technology Computational complexity classifies problems by the amounts of various computational resources needed to solve them This classification yields complexity classes each of which consists of all problems that can be solved within given computational resource bound To gain deeper understanding of what makes problems hard to compute we explore various complexity classes relations between these classes and the internal structure of these classes We also study the between different computational resources in problem solving with particular attention to memory requirements randomness as computational resource and interactive computing University Activities Member Faculty Council of Representatives Chair Computer Science Department Recruiting Committee Honors ACM Turing Award with Member National Academy of Engineering Foreign Member Latvian Academy of Sciences Fellow American Academy of Arts and Sciences Fellow New York State Academy of Sciences Fellow American Association for the Advancement of Science AAAS Charter Fellow of the ACM Professional Activities Editor Lecture Notes in Computer Science SIAM Journal of Computing Journal of Computer and Systems Sciences Advisory Board for EATCS Monographs in Theoretical Computer Science Board of Directors Computing Research Association IFIP Technical Committee for Foundations of Computer Science Advisory Council George Brown School of Engineering Rice University Houston Texas National Academy of Engineering Peer Committee for Computer Science and Engineering Visiting Committee to the Physical Sciences Division University of Chicago EATCS Council Board of Advisors International Journal for the Foundations of Computer Science World Scientific Press Editorial Board Chicago Journal of Theoretical Computer Science Electronic Journal for the Foundation of Computer Science MIT Press Foundations Editor Electronic Journal for Universal Computer Science Goedel Prize Committee Member Computer Science and Telecommunications Board of the National Research Awards Honorary doctoral degree University of Dortmund Lectures Some observations about computer science Banquet speech International Logic Programming Symposium Cornell University November Computational complexity its scope nature and future Distinguished Lecture Series University of Virginia February Distinguished Lecture Series University of Tennessee April Publications On computational complexity and the nature of computer science Turing Award Lecture Communications of the ACM October The random Oracle hypothesis is false Journal of Computer and System Sciences August with Richard Chang Benny Chor Oded Goldreich Johan Hastad Desh Ranjan and Pankaj Rohatgi On Hausdorff and topological dimension of the Kolmogorov Complexity of the real line Journal of Computer and System Sciences December with Cai On the weight of computations EATCS Bulletin February Return to Annual Report Home Page Departmental Home Page If you have questions or comments please contact www Last modified November by Denise Moore denise	faculty	cornell
4344	 Server Date Wednesday GMT Wednesday GMT Ramin Zabih Home Page Ramin Zabih Assistant Professorrdz fax ResearchMy research interests lie in Computer Vision and Multimedia am currently interested in constructing search engine for images using some new methods we have developed recently been thinking about the economic impact of freely available pricing information on the Web My essay on this subject appeared in Phil Agre electronic newsletter The Network Observer in March StudentsI work with PhD students Jing Huang Vera Kettnaker and Olga Veksler also spend fair amount of time with various undergraduates principally Greg Pass and Justin Voskuhl Other undergraduates include Scott Cytacki Justin Miller and Rob Szewczyk PublicationsMost of these publications are available in postscript or in PDF acrobat format Free PDF readers for variety of different architectures are available from Adobe Histogram Refinement for Image Retrieval Greg Pass and Ramin Zabih IEEE Workshop on Applications of Computer Vision Sarasota Florida December Comparing Images Using Color Coherence Vectors Greg Pass Ramin Zabih and Justin Miller Fourth ACM Conference on Multimedia Boston Massachusetts November Algorithms for Detecting and Classifying Scene Breaks Ramin Zabih Justin Miller and Kevin Mai Third ACM Conference on Multimedia San Francisco California November Local Transforms for Computing Visual Correspondence Ramin Zabih and John Woodfill Third European Conference on Computer Vision Stockholm Sweden May TeachingI am currently teaching an introduction to computer programming In the Spring will teach course in computer vision If you are interested in that course there are scribe notes from my lectures available on the web page have also taught an introduction to computation and programming Professional ActivitiesI am on the program comittee for the IEEE conference on computer vision and pattern recognition which will be held in San Juan PR in June am also on the organizing committee for the IEEE Workshop on access of Image and Video Libraries to be held in conjunction with AcknowledgementsThis web page design is courtesy of Dan Huttenlocher Last Updated November	faculty	cornell
4345	 Server Date Wednesday GMT Tuesday GMT Faculty Research Interests Greg Morrisett Greg Morrisett jgm Assistant Professor of Computer Science Cornell University Ithaca NY Office Upson Hall Office phone Table of Contents Research Interests Teaching Selected Papers Related Research Links Personal Information Research Interests My primary research interests are in the development and use of advanced programming languages am particularly interested in the use of languages such as Standard ML for building systems software including systems operating systems and distributed systems Lately have focused on the implementation issues that have kept safe languages from being used in the construction of systems software To this end my research has concentrated on producing code for languages that is faster consumes less memory and supports hacking with the bits am also interested in bringing powerful tools from programming language theory such as compilation partial evaluation abstract interpretation and code generation into the design specification and construction of real systems software Teaching CS Semantics of Programming Languages Fall CS Advanced Language Implementation Spring Selected Papers Semantics of Memory Management for Polymorphic Languages Greg Morrisett and Robert Harper CMU Technical Report Also appears as September Compiling with Types Greg Morrisett gzipped postscript Thesis Published as CMU Technical Report December TIL Optimizing Compiler for ML Tarditi Morrisett Cheng Stone Harper Lee SIGPLAN Conference on Programming Language Design and Implementation The Compiler Performance and Safety Through Types Morrisett Tarditi Cheng Stone Harper Lee Workshop on Compiler Support for Systems Software Typed Closure Conversion Yasuhiko Minamide Greg Morrisett and Robert Harper To appear in the Symposium on Principles of Programming Languages Extended version published as CMU Technical Report July Abstract Models of Memory Management dvi version Greg Morrisett Matthias Felleisen and Robert Harper Conf on Functional Programming Languages and Computer Architecture Extended version published as CMU Technical Report dvi version also as CMU Fox Note Compiling Polymorphism Using Intensional Type Analysis Robert Harper and Greg Morrisett Proc of the Annual ACM Symposium on Principles of Programming Languages San Francisco January Optimistic Parallelization Greg Morrisett and Maurice Herlihy October Refining Stores Gregory Morrisett Proceedings of the ACM SIGPLAN Workshop on State in Programming Languages Copenhagen Denmark June Procs and Locks Portable Multiprocessing Platform for Standard ML of New Jersey Gregory Morrisett and Andrew Tolmach Proceedings of the Fourth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming San Diego May Portable Multiprocessing Interface for Standard ML of New Jersey Gregory Morrisett and Andrew Tolmach June Also appears as Princeton TR Adding Threads to Standard ML Eric Cooper and Gregory Morrisett December Related Research Links Mark Leone Resources for Programming Language Research used to be member of the Fox Project at Carnegie Mellon information about Standard ML Home pages of researchers in programming languages Home pages of research projects in programming languages oriented bibliographies Cornell Department of Computer Science Personal Information Home Address Warren Road Ithaca NY phone	faculty	cornell
4346	 Server Date Wednesday GMT Friday GMT Faculty Research Interests Brian Smith Brian Smith bsmith Xerox Professor of Computer Science University Of California at Berkeley Office Upson Hall Office phone Office hours this semester Tues Thurs to Research Interests Teaching Selected Publications Research Talks Misc Links Research Interests My research goal is to make video first class data type in our computing environment To this end my research group Project Zeno is building technologies supporting the storage communication and processing of continuous media data In contrast to other commercial and research approaches which require specialized hardware operating systems or networks to be usable all of these technologies we are designing fit into the current research environment Our premise is that the current hardware software and communication infrastructure is sufficient to support research into continuous media systems and applications We are verifying this hypothesis by building working systems Our research on storage systems is directed towards building the Zeno distributed video file server The Zeno architecture uses network of workstations connected by generic local area network an ethernet common environment in computing research laboratories Each workstation can act simultaneously as both client and server of continuous media data As client workstation plays video stored on one or more servers As server workstation is file server for video data Each client can receive video stored at several servers and each server can service several clients Compared with large centralized servers the advantages of this design are Scalability As new clients are added new servers are automatically added Load balancing The load generated by serving videos is distributed both across machines and across networks in the case where the servers are located on different networks Low initial investment By utilizing existing infrastructure the Zeno architecture promotes early adoption in research environments with almost no initial investment Our research on communication systems is centered around best effort delivery protocols Such protocols are built on existing network protocols and in contrast to many other research efforts do not need to reserve network resources to establish connection Resource reservation protocols are well suited to the national communication infrastructure where users can be charged on per call basis for bandwidth and connections but are poorly suited to network environments where the network is shared resource equally accessible by all researchers Our approach is appropriate for the latter environments commonly found in research laboratories The communication protocol we have developed called is built on top of the UDP datagram protocol and is designed to transport audio and video data in playback applications in local metropolitan and wide area networks is used by the Zeno file server to deliver audio and video data to clients paper describing cyclic UDP is available online as well as the slides from research talk Our research on processing video data has been First we are developing algorithms to process video data in the compressed representation Processing video without decompression leads to dramatic in processing performance since it both removes the processes of compression and decompression and reduces the amount of data that must be processed Experiments with an implementation of these ideas on JPEG compressed image data indicates that the data can be processed one to two orders of magnitude faster than what was possible with previous approaches We are currently extending these ideas by parallelizing the algorithms using networks of workstations and by developing method for transcoding video in software In video transcoding video is translated from one compression format to another useful operation for video file servers that must service heterogeneous clients paper describing compressed domain processing is available online Our research on video processing is also exploring methods to simplify experimentation with video processing by developing programming language where video is first class data type This language called Rivl pronounced rival allows video processing effects to be specified independent of the resolution and format of the source material The language does for video what Postscript did for text and graphics it provides resolution independent method for specifying video processing Thus the same program can process low quality QuickTime video very quickly while editing decisions are made and then be used to format high quality finished product in much the same way that Postscript can be previewed on workstation at low quality then sent to dpi printer for camera ready copy paper describing RVL is available online talk that reviews our research on video processing both compressed domain processing and Rivl is available online The common theme of all these efforts is to provide tools to make video usable in our research environment talk that reviews this research is also available online Teaching At Cornell University teach an undergraduate course CS on computer architecture and graduate course CS on multimedia systems Selected Publications Jonathan Swartz Brian Smith Resolution Independent Video Language Proc of the Third ACM International Conference on Multimedia San Francisco CA November An HTML version is also available Asif Ghias Jonathan Logan David Chamberlin Brian Smith Query By Humming Large Musical Information Retrieval in An Audio Database Proc of the Third ACM International Conference on Multimedia San Francisco CA November An HTML version is also available Peter Liu Brian Smith Lawrence Rowe Name Server Proc of the Workshop Toronto Ontario Canada July Brian Smith Brian Smith Fast Software Processing of Motion JPEG Video Proc of the Second ACM International Conference on Multimedia San Francisco CA October Lawrence Ketan Patel Brian Smith MPEG video in software representation transmission and playback IS Symposium on Electronic Imaging Science Technology San Jose California February Brian Smith Lawrence Rowe Stephen Yen Tcl Distributed Programming Proc of the Workshop Berkeley CA June Ketan Patel Brian Smith and Lawrence Rowe Performance of Software MPEG Video Decoder Proc of the First ACM International Conference on Multimedia Anaheim CA August pp Brian Smith Lawrence Rowe New Family of Algorithms for Manipulating Compressed Images IEEE Computer Graphics and Applications September Lawrence Rowe Brian Smith Continuous Media Player Third International Workshop on Network and Operating Systems Support for Digital Audio and Video San Diego CA Selected Research Talks Distributed Multimedia System Research at Cornell My most recent research Resolution Independent Video Language Talk at Xerox Webster Research Center June Transmission Protocol for Continuous Media Data Computing with Video Xerox Site Review Nov University of Minnesota Colloquium Talk Feb Misc Links Multimedia Courses on the Web The Art Work of Annette Hanna Manual Electronic Proceedings CMT Documentation The PriceWeb	faculty	cornell
4347	 Server Date Wednesday GMT Sunday GMT Lloyd Trefethen Lloyd Trefethen Professor LNT My appointment at Cornell is in the Computer Science Department am also affiliated with the Center for Applied Mathematics the Department of Mathematics and the Cornell Theory Center My field is numerical analysis scientific computing have personal view of what this means Specific interests include numerical linear algebra numerical solution of PDE numerical conformal mapping approximation theory and fluid mechanics In recent years much of my work has been related to matrices and operators that is matrices and operators whose eigenvectors are not orthogonal and applications Textbooks Finite Difference and Spectral Methods textbook Numerical Linear Algebra textbook by Trefethen and Bau SIAM Recent papers MultiMATLAB MATLAB on multiple processors Matrix iterations the six gaps between potential theory and convergence Pseudospectra of linear operators Some other recent papers Other items Classic papers of numerical analysis Curriculum vitae Pseudospectra bibliography bet with Peter Alfeld Current PhD students at Cornell Vicki Howle Yohan Kim Divakar Viswanath Previous PhD students at MIT and Cornell Jeff Baggett Toby Driscoll Alan Edelman Louis Howell Walter Mascarenhas Noel Nachtigal Satish Reddy Toh Some other colleagues Jim Demmel Anne Greenbaum Martin Gutknecht Des and Nick Higham Anne Trefethen Andre Weideman	faculty	cornell
4348	 Server Date Wednesday GMT Wednesday GMT Thorsten von Eicken Thorsten von Eicken Assistant Professor Upson Hall Phone Fax Email tve Projects The architecture provides network interface for clusters of workstations It offers and communication over LANs The current implementation uses Sun Workstations interconnected by ATM Active Messages Several projects are porting Active Messages to new platforms including the ATM cluster and the IBM and extending the model to programs is simple extension to for parallel computing has been ported to several new platforms including shared memory multprocessors running and the IBM Courses Introduction to Digital Systems and Computer Organization Fall Computer Architecture Spring Frontiers of Parallel Systems Fall User Level Network Architecture Guest Lecture May Departmental Talks Reports Departemental Annual Report entry Fall Forum talk slides Departemental Annual Report entry Fall Forum talk slides Personal Web pages TvE pond with real water fish and plants Tired of the firewall Try my MacPPP which generates the password automatically without you ever having to think about it well after few months your passwords suddenly run out and you have to run to and installation instructions Selected Publications Network Interface for Parallel and Distributed Computing Thorsten von Eicken Anindya Basu Vineet Buch Werner Vogels to appear June Communication over ATM Networks using Active Messages von Eicken Avula Basu Buch Presented at Hot Interconnects II Aug Palo Alto CA An abridged version of this paper appears in IEEE Micro Magazine Active Messages Mechanism for Integrated Communication and Computation von Eicken Culler Goldstein and Schauser Proceedings of the Int Symp on Computer Architecture May Gold Coast Australia Active Messages an Efficient Communication Architecture for Multiprocessors von Eicken Thesis November University of California at Berkeley Papers published at UC Berkeley The links lead to postscript versions of the papers Parallel Programming in Culler Dusseau Goldstein Krishnamurthy Lumetta von Eicken Yelick Proceedings of Supercomputing November TAM Compiler Controlled Threaded Abstract Machine Culler Goldstein Schauser von Eicken Journal of Parallel and Distributed Computing Special Issue on Dataflow June Evaluation of Mechanisms for Parallel Programs in the and the Spertus Goldstein Schauser von Eicken Culler and Dally Proc of the Int Symp on Computer Architecture San Diego CA May LogP Towards Realistic Model of Parallel Computation Culler Karp Patterson Sahay Schauser Santos Subramonian von Eicken Proc of Fourth ACM SIGPLAN Symp on Principles and Practice of Parallel Programming San Diego CA May Two Fundamental Limits on Dataflow Multiprocessing Culler Schauser von Eicken Proceedings of the IFIP WG Working Conf on Architectures and Compilation Techniques for Fine and Medium Grain Parallelism Orlando FL Jan Active Messages Mechanism for Integrated Communication and Computation von Eicken Culler Goldstein and Schauser Proc of the Int Symposium on Computer Architecture Gold Coast Australia May Multithreading for Lenient Parallel Languages Schauser Culler and von Eicken Proceedings of the Conference on Functional Programming Languages and Computer Architecture Cambridge MA August Parallelism with Minimal Hardware Support Threaded Abstract Machine Culler Sah Schauser von Eicken and Wawrzynek Proc of Int Conf on Architectural Support for Programming Languages and Operating Systems CA April Analysis of Multithreaded Architectures for Parallel Computing Culler and von Eicken Proceedings of the Annual Symp on Parallel Algorithms and Architectures Crete Greece July That it	faculty	cornell
4349	 Server Date Wednesday GMT Thursday GMT Thomas Coleman Thomas Coleman Cornell University am Professcp No match Computer Science Department and the Center for Applied Mathematics also have strong affiliation with the Theory Center where am Director of group the Advanced Computing Research Institute Finally am member of the Cornell Computational Optimization Project CCOP group of Cornell faculty and researchers interested in the broad field of computational optimization discrete and continuous Research Program My research program is concerned with the design and understanding of practical and efficient numerical algorithms for continuous optimization problems My primary interest is the development of computational methods and tools for problems Projects Automatic Differentiation Image Imaging Parallel Linear Programming Minimization with Linear Inequalities Nonlinear Equality Constraints Students Postdocs and Professional Activities Recent Papers Books Current and Former PhD Students Research Associates and Postdocs Software Computational Mathematics Links Curriculum Vitae The Best Thomas Coleman Rhodes Hall Cornell University Ithaca New York coleman	faculty	cornell
4350	 Date Mon Nov GMT Server Fri Nov GMT Samiha Mourad Samiha Mourad Associate Dean Professor Ain Shams University Egypt Polytechnic University New York North Carolina State University She is the director of the VLSI Design Laboratory and Digital Systems Laboratory Research Interests Fault Detection and Diagnosis Design for Testability VLSI Design Go back to Faculty page smourad	faculty	misc
4351	 Date Wed Nov GMT Server Sat May GMT Richard LeBlanc Information Page Richard LeBlanc Richard LeBlanc received the degree in physics from Louisiana State University in and the and degrees in computer sciences from the University of Wisconsin Madison in and respectively He is Professor and the Associate Dean of the College of Computing of the Georgia Institute of Technology where he has been faculty member since January LeBlanc research interests include software engineering programming language design and implementation and programming environments Most of his research work particularly that associated with the Clouds Project has involved application of these interests in distributed computing systems He is also interested in software development methodologies and tools LeBlanc has served as technical consultant to industry on the Ada language and Ada compilation techniques He has done consulting work with the Lockheed Aeronautical Systems Company on the development of methodology for producing highly reliable digital flight control software and has served as consultant on software reliability and fault tolerance to corporations in the computing and telecommunications industries He has published successful textbook on compiler construction Crafting Compiler and Crafting Compiler with that has been adopted at over colleges and universities LeBlanc is member of the Association for Computing Machinery the IEEE Computer Society and Sigma Xi Contact information At Georgia Tech College of Computing Atlantic Drive Georgia Institute of Technology Atlanta Georgia rich Last Modified August by Eugene Liang eugene	faculty	misc
4352	 Date Mon Nov GMT Server Fri Nov GMT Samuel Marateck marateck Publications Books Selected Journal Articles The plot Course Homepages Introduction to Computer Science Fall Department of Computer Science Courant Institute of Mathematical Sciences New York University Mail Address room Mercer New York NY Phones voice fax Email marateck NYU Tech Reportshypertext	faculty	misc
4353	 Server Date Thursday GMT Thursday GMT Lewis Johnson Lewis Johnson Research Interests Interests center around the use of artificial intelligence and interaction in education and lifelong learning He leads several projects in this area The Intelligent Documentation project is developing system that dynamically generates descriptions and explanations of software systems to this effort called will integrate graphical media into these explanations and explore the use of design rationales in explanation of software The Virtual Environments for Training VET is developing autonomous pedagogical agents to increase the effectiveness of virtual environments for training purposes The PROBES project is developing tools for analyzing explaining and critiquing behavior in training simulations This builds on earlier work on debriefable agents and plan recognition The Automated Distance Education ADE project is developing multimedia distance education software incorporating automated student assessment and curriculum sequencing Biography Johnson is Project Leader of the Educational Technology Group at the USC Information Sciences Institute and Research Associate Professor of Computer Science at the University of Southern California USC Lewis Johnson received his degree in Linguistics in from Princeton University and his and degrees in Computer Science from Yale University in and respectively He is of the journal Automated Software Engineering He is member of the Steering Committee of the Software Engineering Conference member of the Executive Committee of the Artificial Intelligence in Education Society of the First Autonomous Agents Conference and Chair of SIGART When not working with computers Lewis sings professionally in concert and on stage He is member of the American Guild of Musical Artists and the American Federation of Television and Radio Artists Contact Information University of Southern California Information Sciences Institute Admiralty Way Marina del Rey CA Tel Fax johnson	faculty	misc
4354	 Server Date Thursday GMT Friday GMT Dipak Ghosal Field of Interest UC Davis Department of Computer Science Dipak Ghosal Assistant Professor Professor Ghosal primary interests are in the areas of networks and wireless communication systems with particular emphasis on the impact of these new technologies on the network and higher layer protocols and applications He has worked extensively on various protocol and architectural issues of the existing telephone network Professor Ghosal is also interested in the application of parallel architectures and distributed computing principles for protocol processing in networks Office Engineering II Phone ghosal Last modified August	faculty	misc
4355	 Date Mon Nov GMT Server Fri Oct GMT Michael Fitzpatrick Homepage	faculty	misc
4356	 Date Thu Nov GMT Server Fri Aug GMT Richard Newton Richard Newton University of California at Berkeley Professor newton Holmes McDonald Distinguished Teaching Award Eta Kappa Nu Society Best Paper Award Design Automation Conference Best Paper IEEE Design of Integrated Circuits and Systems Best Paper Award IEEE International Conference on Computer Design Best Paper Award Design Automation Conference Best Paper Award European Circuit Conference Distinguished Lecturer IEEE Circuits and Systems Society Committees General Chair Design Automation Conference Member Technical Advisory Board CAD Framework Initiative CFI Organizer ACM Workshop on Synthesis Simulation and Physical Design Leningrad USSR Associate Editor IEEE Transactions on Design Member Technical Program Committee IEEE International Conference on Computer Aided Design Member Technical Program Committee IEEE International Conference on Computer Aided Design Selected Publications Test Generation and Verification for Highly Sequential Circuits with Ghosh and Devadas IEEE Trans Design Vol No May pp Exact Algorithms for Output Encoding State Assignment and Boolean Minimization with Devadas IEEE Trans Design Vol No January pp Law MOSFET Model and Its Applications to CMOS Inverter Delay and Other Formulas with Sakurai IEEE Circuits Vol No April pp Electronic CAD Frameworks with Harrison Spickelmier and Barnes Proc IEEE Vol No February pp invited Synthesis and Optimization Procedure for Fully and Easily Testable Sequential Machines with Devadas Ma and IEEE Trans Design Vol No October pp	faculty	misc
4357	 Date Thu Nov GMT Server Thu Aug GMT Elwyn Berlekamp Elwyn Berlekamp Massachusetts Institute of Technology Professor berlek IEEE Richard Hamming Medal IEEE Koji Kobayashi Computer and Communications Award IEEE Centennial Medal Member National Academy of Engineering Fellow IEEE Miller Research Professor Chair Computer Science Division Selected Publications Algebraic Coding Theory Aegean Park Press Blockbusting and Domineering Combinatorial Theory Series Vol No September pp Encoders IEEE Trans Information Theory Vol pp Factoring Polynomials over Large Finite Fields Mathematics of Computation Vol pp patents	faculty	misc
4358	 Date Thu Nov GMT Server Wed Jun GMT Faiman Michael Michael Faiman Areas of research interest Communication Networks Design Management Routing Flow Control Design of Digital Systems Logic Computer Architecture Systems Micropro cessors Distributed Systems Networks Microproc essors Research Group Administrative help Julie Thomas Digital Computer Laboratory West Springfield Avenue Urbana IL fax faiman Go back to Faculty Index	faculty	misc
4359	 Date Mon Nov GMT Server Wed Sep GMT Home Page for Eric Allender Eric Allender Associate Professor Department of Computer Science Rutgers University PO Box Piscataway NJ USA Phone FAX Email allender Office Hill My research centers on questions in complexity theory including circuit complexity Kolmogorov complexity measure theory and properties of complexity classes Professional Activities Electronic Colloquium on Computational Complexity DIMACS Special Year on Logic and Algorithms Dagstuhl Seminar on Structure and Complexity IEEE Conference on Computational Complexity formerly known as the Structure in Complexity Theory Conference Chicago Journal of Theoretical Computer Science Complexity Theory Lecture Notes Selected Publications Classes Office Hours Advising Etc the chair of the Undergraduate Advising Committee Click here for information concerning advising Click here for current Office Hours Related Links at Rutgers Department of Mathematics DIMACS Rutgers Info System Search Facility test	faculty	misc
4360	 Date Mon Nov GMT Server Fri Feb GMT Hassan Hassan Foundation implementation and application of programming languages for Intelligent Software email hak titles Professor of Computing Science MPR Teltech NSERC Industrial Senior Chair in Intelligent Software Systems Education Grenoble France Computer Science Univ of Pennsylvania Philadelphia PA Computer Science Univ of Pennsylvania Philadelphia PA Habilitation agrave diriger des recherches Informatique Universit eacute de Paris France Laboratory Affiliations Intelligent Software Group director Intelligent Systems Lab associate Logic Programming Lab associate Graduate Students Current Research Recent Funding Selected Publications Back to Faculty Home Page	faculty	misc
4361	 Date Monday GMT Server Jone home page Warren Jones Professor and Department Chairman Schedule Research Interests Internet Information Filtering Research and Tool Development The exponential growth of information available of the Internet together with the accompanying increase in the complexity of the Internet itself requires the development of more effective tools for accessing this environment The goal of this research is to make contributions to the basic understanding of both the structure and dynamics of information processing in the Internet and to develop both extensions to existing filtering tools which improve their effectiveness and new approaches to the filtering process Methodologies which will be used include neural networks natural language understanding and genetic algorithms research group called Studies in Information Filtering Technology for Electronic Resources SIFTER has been formed to pursue these investigations The primary application of this research is to healthcare delivery systems Education Georgia Institute of Technology Selected Publications	faculty	misc
4362	 Date Mon Nov GMT Server Elke Rundensteiner homepage Elke Rundensteiner Assistant Professor Contact Info University of Michigan Dept of Electrical Engineering and Computer Science Beal Avenue Ann Arbor MI rundenst Tel Fax Office EECS Research Interests Database Systems and Databases Engineering and Scientific Databases Digital Libraries Research Projects Project Descriptions Project Descriptions File postscript Members of Research Group Students in Research Group University of Michigan Database Group UMDG UMDG Research Papers and Reports Listing of all papers Publications Biographical Information Vitae of Rundensteiner Teaching Winter Course Information	faculty	misc
4363	 Date Thursday GMT Server Wednesday GMT Jerry Potter Previous Hassan Peyravi Up Computer Science Faculty Next Michael Rothstein Jerry Potter Professor Jerry Potter received his Bachelors degree from the University of Iowa his Masters from Stevens Institute and his from the University of Wisconsin Madison He has worked at IDA Supercomputing Research Center Goodyear Aerospace Xerox Research and Bell Telephone Laboratories He is Professor of Computer Science at Kent State University While at Goodyear he was involved in software development for the STARAN ASPRO and MPP SIMD computers While at the Supercomputing Research Center he performed research on the Connection Machine for and years He has been funded by the Naval Ocean Systems Center NOSC the Office of Naval Research ONR the Naval Surface Weapon Center NSWC NASA Langley NASA Lewis and an Ohio Edison Innovative Research Grant His research interests include the continuing development of the associative computing paradigm the integration of associative SIMD computers with other architectures in heterogeneous supercomputer environment the development of techniques for compilation on massively parallel SIMD computers natural language and artificial intelligence processing on SIMD computers and the development of techniques for the introduction of parallel programming at the high school level Selected Research Accomplishments Over the last years Potter has developed and implemented the Associative Computing Paradigm as general purpose approach to parallel computing His research has resulted in an associative language ASC incorporating constructs to exploit associative search and memory allocation for scalable parallel computing He has recently published Frontiers of Computer Science research monograph ASSOCIATIVE COMPUTING Plenum Publishers February on his work in associative computing He was awarded an Ohio Innovator Award in for his research on parallel and associative computing He has supervised Ph students MS students and refereed for numerous conferences and journals He is also an area editor for the Journal of Parallel and Distributed Computing He has had support from NOSC and NASA for the investigation of Heterogeneous Associative Computing Ph Students Asthagiri An Associative Parallel Compiler for an Associative Computing language July Leangsuksun Practical Task Mapping Strattegies for Heterogeneous Computing Environments May Scott Heterogeneous Associative Computing In progress DeLozier Natural Language Operating System In progress Students Graduated Four recent graduates below DeLozier Image Processing Algorithms for Radiographic Analysis Fall Miles Parallel Algorithms for Global Optimization Fall Haverstock New Assembler for the STARAN Spring Kotran Dynamic Dump Debugger for ASC Fall Selected Research Funding and Awards Robot Environment Expert System NASA Langley Ohio Edison Innovative Research Award State of Ohio Associative Heterogeneous Computing NRAD Programming Techniques for SIMD Computers ONR Miscellaneous Research Activities Area Editor Journal of Parallel and Distributed Computing Outstanding Reviewer Award from COMPUTER Associative Processing Invited presentation to ONR Invited presentation to USC Invited presentation to SUNY Albany Robot Vision and SIMD Computers Invited presentation to George Mason University Selected Research Publications THE MASSIVELY PARALLEL PROCESSOR MIT Press An Associative Model of Computation Proceedings of the Second International Conference on Supercomputing Volume III May pp Data Structures for Associative Computers in Proceedings of the Symposium on the Frontiers of Massively Parallel Computation George Mason University Fairfax Array Processor Supercomputers with Meilander Proceedings of the IEEE Vol No December pp Exploiting Data Parallelism for Efficient Execution of Logic Programs with Large Knowledge Bases with Bansal Proc of the International Conference of Tools for Artificial Intelligence Washington USA November pp Parallel Associative Lexing with Asthagiri in Proceedings of the International Parallel Processing Symposium pp Associative Computing Research Monograph Plenum Publishing February Associative Prolog with Bansal Associative Computing by Potter Plenum Publishers February An Associative Model to Minimize Matching and Backtracking Overhead in Logic Programs with Large Knowledge Bases with Bansal The International Journal for Engineering Applications of Artificial Intelligence Pergamon Press Volume Number pp Data Parallel Shell for Large Knowledge bases with Bansal in Advanced Research Series in Knowledge Base Shells World Scientific Publishers Heterogeneous Associative Computing Keynote Speech in Proceedings of the Workshop on Heterogeneous Processing New Port Beach Calif April pp ASC An Associative Computing Paradigm in COMPUTER November pp with Baker et farrell	faculty	misc
4364	 Date Thu Nov GMT Server Fri Oct GMT Joseph Flaherty Joseph Flaherty flaherje Amos Eaton Polytechnic Institute of BrooklynNumerical Analysis Scientific Computation and Adaptive Methods Flaherty came to Rensselaer from New York University in Since his arrival he has been studying scientific computation and is currently investigating adaptive methods for differential equations He has recently become interested in developing versions of these methods that will run on variety of parallel computers His goal is developing automatic systems for solving partial differential equations These systems will allow scientists and engineers to describe problems in natural way automatically select appropriate numerical techniques solve the equations to prescribed level of accuracy and display the results His software is adaptive It can automatically change numerical methods and can move create or destroy finite difference or finite element meshes while the system is solving the equations and learning more about their properties techniques are general and thus capable of helping engineers confront and describe phenomena such as stresses in metals aerodynamics pollution dispersion in lakes and temperatures in nuclear reactor vessels These problems are typical of many practical situations where small scale structures form evolve propagate and decay during the course of calculating the solution Reliable robust and efficient software that automatically captures and resolves the phenomena as they appear would be very useful to scientists and engineers who may not know the nature or location of the situation beforehand His major successes have been in and transient systems His work relies heavily on the use of computer graphics so that scientists and engineers can easily specify their problems and visualize their results He and fellow researchers are starting to investigate adaptive methods for problems and procedures that are suitable for parallel computers Embedded data structures within the adaptive procedures can be exploited to develop efficient parallel strategies Faculty and Their Research	faculty	misc
4365	 Date Mon Nov GMT Server Tue Apr GMT Faculty Profile Saab Youssef Saab Assistant Professor PhD Computer Science University of Illinois Urbana office Math Science Bldg phone email saab Research interests Combinatorial Optimization Design Automation Graph and Geometric Algorithms Stochastic Algorithms Teaching CS CS CS Return to Faculty	faculty	misc
4366	 Jack Minker Options Comments System Administration Jack Minker Email minker Current Position Professor Department of Computer Science UMIACS University of Maryland Research Interests Artificial intelligence Logic Programming Research group PRISM Current Research Projects Combining Knowledge Bases Cooperative Answering Disjunctive Deductive Databases Null Values Understanding negation Courses Artificial Intelligence Spring Database Design Fall Discrete Structures Fall Additional information Electronic Sally Minker Electronic Art Gallery Vita with publication list DVI Papers available Carolina Ruiz and Jack Minker Combining Closed World Assumptions with Stable Negation To appear in Fundamenta Informaticae Jack Minker Logic and Databases Year Retrospective Invited Keynote Address Workshop on Logic in Databases San Miniato Italy July Jack Minker and Carolina Ruiz Mixing Default Rule with Stable Negation Proc of the Fourth International Symposium on Artificial Intelligence and Mathematics Fort Lauderdale Florida pages Parke Godfrey Jarek Gryz and Jack Minker Semantic Query Optimization for Evaluation In the Proceedings of the International Symposium on Methodologies for Intelligent Systems ISMIS Zakopane Poland June Dietmar Seipel Jack Minker and Carolina Ruiz Model Generation and State Generation for Disjunctive Logic Programs To appear in the Journal of Logic Programming Jose Alberto Fernandez Jarek Gryz and Jack Minker Disjunctive Deductive Databases Semantics Updates and Architecture Invited Paper at BISFAI Carolina Ruiz and Jack Minker Computing Stable and Partial Stable Models of Extended Disjunctive Logic Programs in Nonmonotonic Extensions of Logic Programming edited by Dix Pereira and Przymusinski Lecture Notes in Computer Science pages Fernandez Minker and Yahya Computing Perfect and Stable Models Using Ordered Model Trees Computational Intelligence Jack Minker and Carolina Ruiz Semantics for Disjunctive Logic Programs with Explicit and Default Negation Fundamenta Informaticae Anniversary Issue edited by Rasiowa volume number pages Parke Godfrey Jack Minker and Lev Novik An Architecture for Cooperative Database System Proceedings of the International Conference on Applications of Databases Lecture Notes in Computer Science Springer Verlag Vadstena Sweden June Invited paper Adnan Yahya and Jack Minker Representations for Disjunctive Deductive Databases Jack Minker An Overview of Nonmonotonic Reasoning and Logic Programming Workshop on Logic Programming and Reasoning Jack Minker and Carolina Ruiz On Extended Disjunctive Logic Programs Proceedings of the Seventh International Symposium on Methodologies for Intelligent Systems Invited Paper Edited by Komorowski and Ras Lecture Notes in Artifical Intelligence pages June Grant Horty Lobo Minker View Updates in Stratified Disjunctive Databases Journal Automated Reasoning Vol March pp Jose Alberto Fernandez and Jack Minker Computation of Perfect Models for Disjunctive Theories Journal of Logic Programming Submitted Preliminary version presented at the Workshop on Disjunctive Logic Programs International Logic Programming Symposium San Diego California Jose Alberto Fernandez Jorge Lobo Jack Minker and Subrahmanian Disjunctive LP Integrity Constraints Stable Model Semantics Annals of Mathematics and Artificial Intelligence Adnan Yahya Jose Alberto Fernandez and Jack Minker Ordered Model Trees normal Form for Disjunctive Deductive Databases Technical Report and University of Maryland Institute for Advance Computer Studies College Park MD July Submitted to the Journal of Automated Reasoning Terry Gaasterland Mark Giuliano Anne Litcher Yuan Liu and Jack Minker Using Integrity Constraints to Control Search in Knowledge Base Systems International Journal of Expert Systems pp Volume Number Shekhar Pradhan Jack Minker and Subrahmanian Combining Databases with Prioritized Information Computer Science Technical Report Series University of Maryland at College Park and August Terry Gaasterland Parke Godfrey Jack Minker and Lev Novik Cooperative Answering System Proceedings of the Logic Programming and Automated Reasoning Conference edited by Andrei Voronkov Lecture Notes in Artificial Intelligence Petersburg Russia pages July Jose Alberto Fernandez and Jack Minker Disjunctive Deductive Databases Proceedings of the Logic Programming and Automated Reasoning Conference Terry Gaasterland Parke Godfrey Jack Minker and Lev Novik Cooperative Answers in Database Systems Proceedings of the Space Operations Applications and Research Conference Houston Texas August Jose Alberto Fernandez and Jack Minker Semantics of Disjunctive Databases International Conference on Data Technologies Terry Gaasterland Parke Godfrey and Jack Minker Relaxation as platform for cooperative answering Journal of Intelligent Information Systems Terry Gaasterland Parke Godfrey and Jack Minker An Overview of Cooperative Answering Journal of Intelligent Information Systems Kluwer Academic Publishers vol no pp Invited paper Also appears as Terry Gaasterland Parke Godfrey and Jack Minker An Overview of Cooperative Answering Nonstandard Queries and Nonstandard Answers edited by Robert Demolombe and Tomasz Imielinski in series Studies in Logic and Computation Clarendon Press Oxford pp Zahidul Khandaker Jose Alberto Fernandez and Jack Minker Tractable Class of Disjunctive Deductive Databases Workshop on Deductive Databases International Conference on Logic Programming Jack Minker Toward Foundation of Disjunctive Logic Programming Proceedings of the National Conference on Logic Programming invited paper Donald Perlis and Jack Minker Completeness Results for Circumscription Journal of Artificial Intelligence Jack Minker and Donald Perlis Computing Protected Circumscription Journal of Logic Programming Last modified Fri Aug	faculty	misc
4367	 Date Wed Nov GMT Server Fri Oct GMT Mark Guzdial Information Page Graphics Visualization and Usability Center Mark Guzdial Mark Guzdial is an Assistant Professor in the College of Computing at Georgia Institute of Technology He received his in education and computer science joint degree at the University of Michigan in where he developed Emile an environment for high school science learners programming multimedia demonstrations and physics simulations He is also the designer of MediaText multimedia composition environment used in elementary and high school classrooms Mark is member of the GVU Center the Cognitive Science program and the EduTech Institute Mark recently workshop with Rick Weingarten of Computing Research Association for the National Science Foundation The charge of the workshop was to set research agenda for Computer Science in Educational Technology The draft report from that workshop is available Current Areas of Interest Educational computing scaffolding construction and design environments for students constructionism collaboration support log file analysis and visualization computational science computer modeling simulation and visualization for students Mark Guzdial current research centers on facilitating student learning through student design construction and analysis of artifacts Philosophically he is constructivist even constructionist but he sees need for support to enable and facilitate student construction of artifacts and knowledge His goal is to provide to students similar kinds of opportunities that professional scientists and engineergs have for learning and exploring through computation He has developed simulation environments for learning science through construction and is now exploring visualization and collaboration environments to facilitate science and engineering learning To evaluate the usability and learnability of the environments he creates Mark is developing techniques for analysis of user event traces log files Recent Classes with Interesting Home Pages CS Modeling and Design Winter which is where WebCaMILE was first used in CS CS Modeling and Design Spring where STABLE was first used CS Design and Evaluation of Educational Software CS Modeling and Design Fall Current Research Projects NSF Multimedia Courseware Project With John Stasko and Jim Foley am working on creating effective multimedia courseware for Computer Science courses using WWW Scaffolding and Design The design of Emile revolved around providing of what educators called scaffolding support which enables students to perform activities and to learn through those activities In collaboration with Elliot Soloway Kenneth Hay and Yasmin Kafai an interface design emphasis on design is evolving part of which is scaffolding CaMILE Collaborative and Multimedia Interactive Learning Environment is new learning environment designed to support students in collaboration with multimedia annotations CaMILE can be seen as MediaText on network DEVICE Dynamic Environment for Visualization in Chemical Engineering DEVICE is an environment in which Chemical Engineering students learn through process of design in simulated world DEVICE is being developed by Noel Rappin The eventual goal is to merge simulation support with collaboration tools to create support for learning in Chemical Engineering SCOPE Scaffolded and COntextualized Programming Environments for Engineering Education This project is sponsored by the National Science Foundation Log file analyses and visualizations are used to understand the effectiveness of the supports provided in these environments Cognitive Multimedia project with John Stasko Richard Catrambone Ashwin Ram and Mike Byrne sponsored by ONR focuses on trying to understand the most effective ways to construct interactive multimedia Generalized Scaffolding STABLE is first attempt at creating generalized scaffolding not modifying the environment but providing scaffolding multiple representations generic plan libraries la GPCeditor or Emile and collaborative environments in support of an existing work environment VisualWorks Smalltalk STABLE is being tested in CS during Spring Instructions on how to create STABLE cases are available Research Projects from the University of Michigan Working with Elliot Soloway and Elliot Highly Interactive Computing Environments group Mark was primarily involved in three projects at the University of Michigan GPCeditor Goal Plan Code Editor is Pascal programming environment that provides explicit supports for student design MediaText is multimedia composition environment for grades students Mark designed MediaText with Elliot and MediaText is now commercial product developed by Constructive Instruments and distributed by Apple Computer and Wings for Learning Emile is programming environment for science students exploring physics by creating simulations Emile was Mark dissertation work Emile implements scaffolding which provides adaptable levels of support Copies of recent AERA papers are available in WWW formats Contact information Ma rk Guzdial Graphics Visualization Usability Center College of Computing Atlantic Drive Georgia Institute of Technology Atlanta GA guzdial My family album Updated October	faculty	misc
4368	 Date Monday GMT Server Sprague home page Alan Sprague Associate Professor Schedule Research Interests Parallel Graph Algorithm and Computational Geometry The parallel graph algorithm research centers on algorithms for special classes of graphs such as chordal graphs Similar techniques and concepts lead to algorithms for certain computational geometry problems such as parallel algorithm to construct the constraint graph used in compaction of VLSI circuits Parallel Tree Search Algorithms Tree searching methods are used in artificial intelligence AI and optimization plus various other areas Branch and bound is one tree search method This research centers on how to partition the task for multiprocessor and how to partition the data structures used both for shared memory and distributed memory systems Other research addresses different search strategies including minimax and to name few The issues being addressed include distributing the coach among either shared memory multiprocessors or distributed memory multiprocessors and interprocessor communication to maximize search efficiency by letting each processor show search information Education Ohio State University Selected Publications	faculty	misc
4842	 Server Date Wednesday GMT Wednesday GMT Cornell Modeling and Simulation Project Home Page Cornell Modeling and Simulation Project Enormous effort is currently expended in creating scientific software particularly for simulating physical systems defined on complex geometries and when using advanced computing hardware The goal of the SimLab project is to reduce this effort by bringing together technologies such as geometric modeling symbolic mathematics numerical analysis generation and formal methods to create tools that raise the semantic level at which it is possible to create scientific software Overview of the Project The SimLab Software Package Selected Research Activities Collaborative Mathematics Environments research proposal postscript version Mesh Generation Microstorage Architecture The Weyl computer algebra substrate SPL programming language for synthesizing scientific software The Chains Programming Language Selected Presentations The SimLab Component of the MADEFAST Collaborative Design and Manufacturing Exercise longer version New Directions in Systems Research Richard Zippel presentation on some new ideas on how systems research should proceed Includes brief discussions of communications microstorage architecture and the use of program transformations The Chains Programming Language language for computing with complex topological systems such as engineering models numerical algorithms etc Rick Palmer People Selected Publications and Reports Paul Chew chew	project	cornell
4843	 Server Date Sunday GMT Monday GMT SEQ Home Page The SEQ Project Querying Sequence Data Document under construction Time to put Order in the Database Order Time put in the Database Time to put the Database in Order Document Contents Project Objectives Current Status Motivating Example SEQ Data Model Sequin Query Language Optimization Techniques SEQ System Development Publications Related Work Contact Information Project Objectives number of important database applications require the processing of large amounts of ordered sequence data The domains of these applications include financial management historical analysis economic and social sciences metereology medical sciences and biological sciences Existing relational databases are inadequate in this regard data collections are treated as sets not sequences Consequently expressing sequence queries is tedious and evaluating them is inefficient Databases should model the data using the abstraction of sequences allow data sequences to be queried in declarative manner utilizing the ordered semantics take advantage of the unique opportunities available for query optimization and evaluation integrate sequence data with relational data so that users can store and query combination of relation and sequences These requirements serve as the goals of the SEQ project Various kinds of sequences need to be supported temporal sequences being the most important kind Queries should be expressible using notions like next and previous which are natural when considering sequences These queries should be optimized so that they can be evaluated efficiently These issues need to be studied in theory and then database system needs to be built that demonstrates the feasibility of the theoretical ideas Project Status The current status of the project is We have defined the SEQ data model that can support most important kinds of sequence data We have also defined algebraic query operators that can be composed to form sequence queries analogous to the composition of relational algebra operators to form relation queries We have described how sequence queries can be efficiently processed and have identified various optimization techniques We use sequence query language Sequin that can declaratively express queries over sequences Sequin query can include embedded expressions in relational query language like SQL or We are building database system to demonstrate the feasibility of our proposals The system implements the SEQ model using nested complex object architecture It is built over the SHORE storage manager and can process several megabytes of data Relations and sequences are supported in an integrated and extensible manner Motivating Example of Sequence Query weather monitoring system records information about various meteorological phenomena There is sequentiality in the occurrence of these phenomena the various meteorological events are sequenced by the time at which they are recorded scientist asks the query For which volcano eruptions did the most recent earthquake have strength greater than on the Richter scale If this query is to be expressed in relational query language like SQL complex features like groupby clauses correlated subqueries and aggregate functions are required Further conventional relational query optimizer would not find an efficient query execution plan even given the knowledge that the Earthquakes and Volcano relations are sorted by time However very efficient plan exists if one models the data as sequences ordered by time The two sequences can be scanned in lock step similar to sort merge join The most recent earthquake record scanned can be stored in temporary buffer Whenever volcano record is processed the value of the most recent earthquake record stored in the buffer is checked to see if its strength was greater than possibly generating an answer This query can therefore be processed with single scan of the two sequences and using very little memory The key to such optimization is the sequentiality of the data and the query Data Model The details of the SEQ data model are described in published paper click here for postscript version Here we present the gist of it The basic model of sequence is set of records mapped to an ordered domain of positions This relationship between records and positions can be viewed in two dual but distinct ways as set of records mapped to each position or as set of positions mapped to each record These two views are called Positional and respectively and each gives rise to set of query operators based on that view Queries on sequences could require operators of either or both flavors The operators are similar to relational operators and include various kinds of joins overlap containment etc and aggregates Such operators have been extensively explored by researchers in the temporal database community The Positional operators include Next Previous Offset Moving Aggregates etc Further operators allow zooming operations on sequences by means of collapsing and expanding the ordering domains associated with the sequence For instance daily sequence could be zoomed out to weekly sequence or zoomed in expanded to an hourly sequence The last part of the model deals with operations on groups sets of sequences The advantage is that this makes it easy to model queries involving sequence collections which is the case in many situations All the sequence operators are extended to work with groups of similar sequences instead of with single sequences This extension of the SEQ model indicates that practical implementation of SEQ would probably involve nested complex object system Sequin Query Language We have devised query language called Sequin using which declarative sequence queries can be specified The language is similar in flavor to SQL except that the inputs to queries as well as the results of queries are sequences Click here for description of the Sequin language with examples Optimization Techniques We have proposed new optimization techniques for sequence queries involving Positional operators There are existing techniques that have been proposed for queries with operators Our optimizations use query transformations meta data and caching of intermediate results to efficiently evaluate query An optimal query evaluation plan can be generated using an algorithm that relies on cost estimates One of the important observations is that accessing sequence data in single stream is probably very efficient and evaluation strategies should take this into account The details of the optimization techniques are described in published paper click here for postscript version System Development The SEQ database system has architecture supporting multiple clients via server The server is built on top of the SHORE storage manager Both Sequin and subset of SQL are supported as query languages which can be embedded inside each other The data model is nested complex object model that allows arbitrary levels of nesting of relations inside sequences and vice versa The system is also extensible providing support for new data types new ordering domains functions new storage implementations and new query languages For more details on the SEQ system click here Publications Sequence Query Processing Praveen Seshadri Miron Livny and Raghu Ramakrishnan Proceedings of the ACM SIGMOD Conference on Data Management May SEQ Framework for Sequence Data Praveen Seshadri Miron Livny and Raghu Ramakrishnan Proceedings of the IEEE Conference on Data Engineering March The Design and Implementation of Sequence Database System Praveen Seshadri Miron Livny and Raghu Ramakrishnan Submitted to VLDB What Next Sequence Queries Raghu Ramakrishnan Michael Cheng Miron Livny and Praveen Seshadri In Proceedings of the International Conference on the Management of Data COMAD December Related Work The DEVise project is complementary to SEQ It provides visualization environment that can be used to explore sequence data DEVise can act as through which queries can be posed against SEQ database server and the answers can be examined graphically Also see SHORE Project Storage Manager used for SEQ People working on SEQ and related projects Database Research Group CS Department Server Contact Information For more information contact Praveen Seshadri praveen Raghu Ramakrishnan raghu Miron Livny miron Computer Sciences Department University of Wisconsin Street Madison WI Last modified Fri Sep by Praveen Seshadri Praveen Seshadri praveen	project	cornell
4844	 Server Date Sunday GMT Friday GMT WELCOME TO PREMA PARALLEL RUNTIME SUPPORT SYSTEM PREMA Portable Runtime Environment for Multicomputer Architectures PREMA Portable Runtime Environment for Multicomputer Architectures Advanced Computing Research Institute Cornell Theory Center Cornell University Overview Prema is runtime support system for parallel compilers and problem solving environments that target scientific computing applications Prema is build on top of PORTS Cornell implementation and is designed to run on variety of MPP and SMP computers PREMA suppots global address space memory model data and task parallel programming models style of execution automatic mechanism dynamic load balancing Papers Multithreaded model for dynamic load balancing parallel adaptive PDE computations Nikos Chrisochoides Journal of Applied Numerical Mathematics pp Related Research PORTS Portable Runtime Systems Group PCRC Parallel Compiler Runtime Consortium Copyright copy Nikos Chrisochoides nikosc	project	cornell
4845	 Server Date Wednesday GMT Friday GMT Mathematics For Computer Generated Spoken Documents Title in audio ASTER Demonstration is dedicated to my AsTeR Audio System For Technical Readings is computing system for rendering technical documents in audio AsTeR was developed by me for my PhD pages An audio formatted version of the thesis approximately hours produced by AsTeR is being made available by RFB Recordings For the Blind as the first computer generated talking book Here is the abstract in print and here is an audio formatted version This hypertext document demonstrates the audio renderings generated by AsTeR Here is an enhanced demo using inline images Each example is made up of three components The original LaTeX input The audio formatted output produced by AsTeR The speech is produced by Dectalk and has been digitized at mulaw AsTeR uses stereo to render tables an effect that is not conveyed by the mono encoding The visually formatted version produced by LaTeX and DVIPS How to use this demo The examples in this demonstration get progressively difficult suggest you go through the initial sections sequentially For short demos typically show people the first three sections and round it off with the continuous fraction in section and quick overview of Faa De Bruno formula Here is the Postscript file containing all the examples in case you want to look over them first am not placing single file containing all of the audio examples since this would be about Section simple fractions and expressions This set of examples demonstrates the use of voice inflection and pauses to convey grouping of succinctly audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Audio state varied along dimension in audio space before rendering Section superscripts and subscripts To convey subscripts superscripts and other visual attributes vary audio state along dimension that is orthogonal to independent of the dimension used to convey This will allow the nesting of these mutually independent concepts audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Knuth examples of fractions and exponents These examples are taken verbatim from the TeX Book by Donald Knuth They are used in the TeX Book to demonstrate the power of the TeX layout operators Notice that all of these examples comprise of the same symbols but are very different AsTeR can render these as unambiguously as TeX can audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section continued fraction Moving along dimension in audio space defines perceptibly monotonic change This notion of perceptible monotonicity is vital in conveying nesting audio LaTeX Postscript Section Simple School algebra audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section square roots Notice the choice of unambiguous renderings for the following expressions audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Trigonometric identities Written mathematical notation can be ambiguous and hard to recognize Notice the complete absence of parenthesis in some of the examples below AsTeR uses several heuristics to construct the correct tree structure for these expressions audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Logarithms Notice the rendering when speaking the base of the logarithm The renderings are chosen to reduce cognitive load log base of as opposed to log of to the base audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Series rendering rules allow AsTeR to interpret the superscripts as exponents Such interpretation is not into the renderings it is fully customizable by the user audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Integrals The first of these examples probably the most innocuous is also the most difficult to recognize it is impossible to determine the variable of integration Notice that AsTeR interprets triple integrals as the nested application of the integral operator user can browse the triple integral and listen to its The integrals shown in examples and can trick the most experienced of human readers into an error audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Summations Notice that the same expression can be written in more than one way audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Limits audio LaTeX Postscript audio LaTeX Postscript Section Cross referenced equations The following section is meant to illustrate AsTeR rendering of and is most effective when AsTeR is used interactively AsTeR enables the listener to give meaningful names to objects and uses these names when referring to such objects in later audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section Distance formula Notice that AsTeR produces good intonational structure when speaking text that is intermixed with mathematics audio LaTeX Postscript Section Quantified expression The quantifiers present an interesting challenge to AsTeR recognizer audio LaTeX Postscript Section Exponentiation Once again perceptible monotonicity allows AsTeR to convey the following deeply nested expressions succinctly These examples were produced with the Emacs Calculator symbolic algebra system AsTeR interfaces directly with this calculator and renders the output just as well as it can render any document audio LaTeX Postscript audio LaTeX Postscript audio LaTeX Postscript Section generic matrix AsTeR uses stereo effects to convey the structure of the matrix Rendering commences on the left and moves progressively right as each element of any row is spoken audio LaTeX Postscript Section Faa de Bruno formula This section presents Faa De Bruno formula taken from Knuth Art Of Computer Programming Vol first heard it spoken by RFB reader on talking book it took seconds to speak Since the renderings produced by AsTeR utilize features of the audio space not available to human reader still have not met reader who can change the size and shape of her head as she talks the rendering takes under seconds As you will hear soon even this is too long you forget the beginning by the time you hear the end Later we present rendering using variable substitution powerful technique for conveying structure of complex expressions Notice the proper intonational structure produced for text intermixed with mathematics audio LaTeX Postscript audio LaTeX Postscript Here is Faa De Bruno formula in all its glory Audio seconds LaTeX Postscript AsTeR can process complex expressions like the above and upon request replace complex with meaningful identifiers Such renderings convey structure the listener can then listen to the separately Since this substitution process is performed by AsTeR there is no LaTeX or Postscript equivalent for the audio output in this case The formula audio seconds Lower constraint audio seconds Numerator audio seconds Denominator audio seconds Raman raman Last modified Fri Aug	project	cornell
4846	 Server Date Wednesday GMT Friday GMT Information Capture and Access project Information Capture and Access The information capture and access research group works on ways that computers can locate information in the ever increasing volume of online data determine its structure and extract the information for human users The group was founded by John Hopcroft and Jim Davis in Current areas of research Extracting structured material from online documents when the structure is not explicit in the document extracting information presented in tabular form into relational database Constructing summaries and overviews of collections of texts Construction of nationwide library of computer science technical reports We have begun digitizing the Cornell Computer Science technical report collection in order to make the work more accessible on the Internet The collection is available through WWW server In addition to its utility to the general CS research community We use this document collection as test material for our research in information access The group consists of Cornell researchers Dean Krafft and visiting scientist Jim Davis as well as number of graduate and undergraduate students Fall The project is not active any longer JRD Publications James Allan et al Information Agents for Building Hyperlinks Proceedings of the Conference on Information and Knowledge Management	project	cornell
4847	 Server Date Wednesday GMT Wednesday GMT HORUS DISTRIBUTED COMPUTING ENVIRONMENT HORUS DISTRIBUTED COMPUTING ENVIRONMENT Kenneth Birman ken Robbert van Renesse rvr Horus effort has developed programming environment for reliable distributed computing During the last year Horus was used to demonstrate groupware and over high performance networks and was found to offer higher performance than other similar systems Novel features of Horus are its flexible software architecture in which applications pay only for features that they use and support for virtually synchronous process groups technology that we developed in our prior work on the Isis Toolkit which has become significant commercial success Horus also offers security and privacy technology which we view as an important research advance During we will be extending Horus to provide extremely low latency high performance capabilities Our approach combines elements of communication technology called Active Messages with playback system called Continuous Media By the end of the year we expect to demonstrate high speed interactive applications with remote multimedia servers such as might be used in remote telemedicine applications or video on demand systems All of this will retain the existing and security options of Horus and its virtual synchrony programming model Prior work on Isis has created substantial user base and we expect rapid uptake of Horus within this community as it matures Isis users span wide range of industries including telecommunications systems financial trading systems stock market automation process control for discrete electronic component manufacture air traffic control and communications system management and control Applications of Isis are being explored in several branches of the military as well as the NSA and other government branches Among the more visible military efforts is the Naval project which is exploring the use of Isis in new system that prototypes technologies for future enhancements of the AEGIS battle radar system The more demanding applications in this user base would benefit from access to Horus and our initial plan is to make it possible to migrate Isis applications to Horus with few changes thus benefiting this community in direct way Technology transition has occured through licensing agreements with Isis Distributed Systems subsidiary of Stratus Computers However all of our Cornell work is also available to researchers at no fee and is described through detailed publications and programming manuals Looking to the future we hope that mixture of Isis and Horus technologies will permit us to develop some of the very demanding applications that will be seen in groupware and planning systems The illustration below shows such an application military mission control and planning system that integrates data from variety of space air and ground resources and uses this to coordinate actions of various theatre assets Systems of this sort will demand the utmost in performance reliability and security while also tolerating failures and rapidly reconfiguring to respond to changing demands Success in our project will thus impact wide range of both civilian and military technology efforts Dept of Computer Science Cornell University ken	project	cornell
4848	 Server Date Sunday GMT Sunday GMT Cachet Related Project Efficient Incremental Computation Deriving Incremental Programs general systematic transformational approach to improving the efficiency of computation Theme Program analysis and transformations for incrementalization Cachet An interactive system that uses systematic program analysis and transformation techniques to derive incremental programs written in functional language Selected Publications Liu and Teitelbaum Systematic derivation of incremental programs Science of Computer Programming February Liu and Teitelbaum Caching intermediate results for program improvement In Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Program Manipulation pages La Jolla California June Liu Stoller and Teitelbaum Discovering auxiliary information for incremental computation In Proceedings of the Annual ACM Symposium on Principles of Programming Languages Petersburg Beach Florida January Liu CACHET An interactive program transformation system for deriving incremental programs In Proceedings of the Software Engineering Conference Boston Massachusetts November IEEE Computer Society Press Liu Principled strength reduction July People Annie Liu Tim Teitelbaum Keywords incremental computation incremental programs efficiency improvement optimization program analysis program transformation Cachet Annie Liu yanhong Last updated	project	cornell
4849	 Server Date Wednesday GMT Tuesday GMT Cornell Nuprl Automated Reasoning Project Nuprl Project Introduction to Nuprl Nuprl Browser Designed and written by Rob Vaughn Nuprl theories and articles Some of Nuprl theories and articles Nuprl User Documentation Related Publications and WWW Links class notes How to run Nuprl under Linux and GCL Announcements Suggestions and Feedback Help with Browser Main Index Nuprl Project nuprl Curious how many links to this page are out there Just ask AltaVista	project	cornell
4850	 Server Date Wednesday GMT Friday GMT Zeno Research Group Zeno Cornell Multimedia Research Group The People The Mission The Projects The Papers The Software Multimedia Curricula Development Potpourri Directions	project	cornell
4851	 Server Date Wednesday GMT Monday GMT QMG project QMG mesh generation and related software The QMG package does finite element mesh generation in two and three dimensions The package includes geometric modeling software the mesh generator itself and finite element solver It is free software downloadable from the Web runs under Unix and Windows NT There are now two releases of QMG released May and released November Other useful websites for mesh generation and geometric software are Robert Schneiders mesh generation home page Ian McPhedran page of finite element resources on the Web The University of Minnesota Geometry Center list of software for computational geometry Jonathan Shewchuk Triangle package Back to Vavasis home page Stephen Vavasis Computer Science Department Cornell University Ithaca NY vavasis	project	cornell
4852	 Server Date Wednesday GMT Thursday GMT Tom Henzinger HyTech HyTech The HYbrid TECHnology Tool We have moved	project	cornell
4853	 Server Date Wednesday GMT Friday GMT Cornell CSRVL Cornell Robotics and Vision Laboratory Welcome to the Web niche of the Cornell Robotics and Vision Laboratory cp No match match rrently under development please don your hard hat Questions and comments should be directed to mdw Thanks About the CSRVL The Cornell Computer Science Robotics and Vision Laboratory is located at Cornell University in Ithaca We have three main areas of research Computer vision Daniel Huttenlocher Multimedia applications of computer vision Ramin Zabih Robotics including distributed manipulation and mechanical systems MEMS Bruce Donald Here is pictoral tour of the CSRVL Current Projects The following projects are active at the CSRVL They are supervised by Ramin Zabih Automatic Detection and Classification of Scene Breaks in Digital Video MPEG Browser allowing scene break and global queries ATM Video Source transmission of video over ATM for parallel computation on platforms such as the ATM Cluster number of projects involving imaging applications These include parallel implementations in for and symmetric multiprocessors We have list of potential projects maintained by Justin Miller Most of our work has been done under Unix but we are currently considering move to WindowsNT There is discussion of some of the issues here We are hopeful that this move will be supported by Microsoft Selected Publications The following is list of selected papers of research done at the CSRVL Many of these papers are available via anonymous FTP Many publications from the Cornell Robotics and Vision Laboratory are available from the Cornell CS server See below Only those papers not available from the server are listed here Program Mobile Robots in Scheme Donald and Rees Proc IEEE International Conference on Robotics and Automation Nice France May pp On the Complexity of Computing the Homology Type of Triangulation Donald and Chang Revised MS based on the paper IEEE Symposium on the Foundations of Computer Science San Juan October pp Information Invariants for Distributed Manipulation Donald Jennings and Rus in The First Workshop on the Algorithmic Foundations of Robotics Peters Boston MA ed Wilson and Information Invariants in Robotics Donald Revised MS based on paper submitted to Artificial Intelligence Automatic Sensor Configuration for Planning Donald Briggs Proceedings IEEE International Conference on Robotics and Automation San Diego CA May Sensorless Manipulation Using Massively Parallel Microfabricated Actuator Arrays Donald Mihailovich and MacDonald Proc IEEE International Conference on Robotics and Automation San Diego CA May Theory of Manipulation and Control for Microfabricated Actuator Arrays Donald Mihailovich and MacDonald Proceedings of the IEEE Workshop on Micro Electro Mechanical Systems Oiso Japan January Computational Approach to the Design of Micromechanical Hinged Structures extended abstract Proceedings of the Symposium on Solid Modeling and Applications Canada May Some other papers are listed here Technical Reports by Author These lists are generated dynamically by the Cornell Server Here is the server index where you can search for technical reports by author title and keyword Karl Briggs Amy Brown Russell Donald Bruce Huttenlocher Daniel Jennings Jim Leventon Michael Rucklidge William Rus Daniela People at the CSRVL Karl Scott Cytacki Bruce Donald associate professor Pedro Felzenszwalb Daniel Huttenlocher associate professor Ryan Lilien Michel Maharbiz Justin Miller Greg Pass Daniel Scharstein Aaron Stump Rob Szewczyk Fernando Joe Viton Justin Voskuhl Ed Wayt Matt Welsh Greg Whelan Ramin Zabih assistant professor	project	cornell
4854	 Server Date Tuesday GMT Tuesday GMT Computational Geometry Lab at McGill The Computational Geometry Lab at McGill Welcome to the slightly refurbished web page of the computational geometry lab at McGill We are part of the School of Computer Science here at McGill Some things you might be looking for How to reach us Faculty Visitors and Postdoctoral Researchers Students and alumni Some information about our research The computational geometry bibliography Cryptography related files How reach us By mail or courier Computational Geometry Laboratory School of Computer Science McGill University University Street Suite Montreal Quebec CANADA By Electronic Mail By phone Faculty Professor David Avis Professor Luc Devroye Professor Godfried Toussaint Professor Sue Whitesides Visitors and Postdoctoral Researchers Sylvain Lazard Naixun Pei Suneeta Ramaswami Stephen Wismath Students and Alumni David Bremner Min Kong Alain Turki	project	misc
4855	 Date Mon Nov GMT Server Fri Nov GMT Memoria The Memoria Project Principal Investigators Steve Carr Philip Sweany Current Graduate Students Raelyn Crowell Chen Ding Qunyan Wu Current Undergraduate Students Don Darling Denise Wieber Description The goals of the Memoria project are to use analysis to improve the memory performance of advanced microprocessors Current research efforts include algorithms for combining software prefetching and automatic optimization of linear algebra codes optimizing loop order for cache performance and using analysis in code generation This project is intimately entwined with the Rocket project Publications Carr Combining Optimization for Cache and Parallelism To appear in PACT Boston MA Michigan Technological University Department of Computer Science Technical Report McKinley Carr and Tseng Improving Data Locality with Loop Transformations To appear in ACM Transaction on Programming Languages and Systems Michigan Technological University Department of Computer Science Technical Report Carr Ding and Sweany Improving Software Pipelining with In Proceedings of the Annual Hawaii International Conference on System Sciences Carr and Lehoucq Compiler Blockable Algorithm for QR Decomposition Proceedings of the Seventh SIAM Conference on Parallel Processing for Scientific Computing Carr McKinley and Tseng Compiler Optimizations for Improving Data Locality Proceedings of the Sixth International Conference on Architectural Support for Programming Languages and Operating Systems Carr and Kennedy Improving the Ratio of Memory Operations to Operations in Loops ACM Transactions on Programming Languages and Systems November Carr and Kennedy Scalar Replacement in the Presence of Conditional Control Flow Software Practice Experience January Carr and Kennedy Compiler Blockability of Numerical Algorithms Proceedings of Supercomputing Callahan Carr and Kennedy Improving Register Allocation for Subscripted for Subscripted Proceedings of the SIGPLAN Conference on Programming Language Design and Implementation Invited Publications Carr and Kennedy Compiling Scientific Code for Complex Memory Hierarchies Proceedings of Hawaii International Conference on System Sciences Carr and Kennedy Blocking Linear Algebra Codes for Memory Hierarchies Proceedings of SIAM Conference on Parallel Processing for Scientific Computing Technical Reports Carr and Wu Scalar Replacment and the Law of Diminishing Returns Michigan Technological University Department of Computer Science Technical Report Submitted to the Journal of Programming Languages Carr and Lehoucq Compiler Blockability of Dense Matrix Factorizations Michigan Technological University Department of Computer Science Technical Report Submitted to ACM Transactions on Mathematical Software Carr and Wu An Analysis of on the HP Michigan Technological University Department of Computer Science Technical Report Carr and Wu An Analysis of Loop Permutation on the HP Michigan Technological University Department of Computer Science Technical Report Carr and Wu The Performance of Scalar Replacement on the HP Michigan Technological University Department of Computer Science Technical Report Research Grants Hiding the Latency Between and Cache on the Alpha Digital Equipment Corporation Improving the Cache Performance of Scientific Applications NSF with in matching funds Improving the Memory Performance of the HP Company Loop Unrollilng Company PhD Dissertations Carr Memory Hierarchy Management Rice University Department of Computer Science September Masters Theses Guan Guided by Model Michigan Technological University Department of Computer Science December Ding Improving Software Pipelining with and Analysis Michigan Technological University Department of Computer Science June	project	misc
4856	 Date Tue Nov GMT Server Wed Sep GMT Sound Probabilistic Reasoning Project SPR Primary Investigator Eric Neufeld The SPR project considers probabilistic approaches to variety of AI problems traditionally handled by logics grammars or heuristics Students in the past have look at approximate reasoning natural language reasoning about time and classification of data Logic programming Working jointly with Tony Kusalik some students are investigating problems in logic programming including abstract interpretation and visual unification	project	misc
4857	 Date Tue Nov GMT Server Thu Mar GMT SFU Programming Languages Group SFU Programming Languages Group Computer Languages and Software Systems CLASS Lab The faculty is widely involved in research into programming language design and implementation Design interests include language features to support functional logic programming styles as well as facilities for parallelism distributed computing and Implementation interests include language processors support program manipulation tools and software engineering environments Faculty Stella Atkins Warren Burton Robert Cameron Veronica Dahl James Weinkam To the top Visit Computing Science or Simon Fraser University	project	misc
4858	 Date Wednesday GMT Server Thursday GMT ANDS Home Page Advanced Networking and Distributed Systems ANDS Principal Investigator Leonard Kleinrock This project investigates the architecture and the fundamental behavior of distributed computer communication systems from an analytical as well as from simulation point of view the emphasis being on analytical In addition this project implements the understanding of these systems Areas of Research Gigabit Networks Fast Packet Switching Using Multistage Interconnection Networks Analysis of Competing Lightwave Networks Performance of Boolean Interconnection Networks Distributed Simulation New Model of Load Sharing Genetic Algorithms Shared Memory Cache Behavior Fast Packet Switching Using ATM Distributed Control Using Simple Automata Collective Behavior of Mobile Robots Related Links ANDS Status Report ANDS People and their pictures The Tradeoff presentation by Leonard Kleinrock Page Manager Webmaster jshort	project	misc
4859	 Date Wed Nov GMT Server Mon Nov GMT Collaboration Bus Collaboration Bus Sponsors DARPA Information Technology Office Faculty Prasun Dewan Hussein Siddhartha Chatterjee Kevin Jeffay John McHugh Lars Nyland Jan Prins John Smith Dave Stotts Students Michele Clark Mike Meehan Emad Eldin Mohamed Jon Munson Peter Nee Vassil Roussev Anshu Sharma Description In this project we will address the problem of composing new collaborative systems from existing and collaborative systems We propose to develop new software abstraction called the collaboration bus that makes it easy to compose collaborative systems The collaboration bus will be an extensible infrastructure that provides general definitions of collaboration services default implementations of these services rules for interconnecting these services and mechanisms for extending the set of supported services The set of generic services supported by the bus will include data model for defining shared workspaces consisting of structured objects user interface model that allows shared objects to be manipulated using user interfaces that support text graphics audio video and virtual reality coupling model that enables users in joint session to share data and objects and controls their interactions to ensure security and consistency contraints are not violated migration and replication mechanisms that ensure that the bus does not become bottleneck and services consisting of scheduling algorithms and network protocols for ensuring coupling among the collaborators collaborative session and making users in session aware of the Previous work has addressed the heterogeneity problem in other domains such as software engineering operating systems and database systems Our project will extend this research by providing an interconnection technology for the collaboration domain It will offer two forms of interoperability interoperability which will allow existing implementations of different collaboration services such as and services to be combined in new collaborative systems and interoperability which will resolve inconsistencies among different competing instances of the same service such as explicit and implicit schemes for creating joint sessions provided by different existing systems that need to interoperate with each other The following diagram illustrates the capabilities of the collaboration bus Click on the picture to see bigger version The concept of collaboration bus requires general abstraction that covers the functionality of existing collaborative systems In particular the bus must define reference model that captures similarities and differences among multiple solutions to problem In addition it must provide when possible semantic translation to allow dissimilar solutions to the same problem to coexist It must also define composition functions that allow service to be composed with other collaboration services Finally the bus must not become bottleneck that significantly increases the response times of users The following approach will be used in designing implementing and evaluating the bus Identify the services that collaborative application requires Identify reference model for each of these services Identify semantics translations and composition functions for each of these services Incorporate into the bus default implementation of the service and the associated semantic translations and composition functions Develop mechanisms and policies for replicating and migrating parts of the bus Develop mechanisms for protecting the operations on the bus Carry out interoperability experiments involving each of these services using existing software Our plans for the next year are to Identify potential clients of the collaboration bus and scenarios of how these clients would interoperate with each other Characterize requirements of collaborative virtual environments based on initial experiments Design version of the collaboration bus which will include reference models semantic translations and composition functions for session management coupling and virtual environments Start implementation of version of the bus Other Project Information IC Meeting Talk Postscript one slide per page works with gv IC Meeting Talk Postscript slides on one page does not work with gv use gs or print it Quad Chart Postscript Project Summary Related Links UNC Collaboration Projects DARPA Intelligent Visualization and Collaboration IC Projects Last revised Mon Nov EST by dewan	project	misc
4860	 Date Wed Nov GMT Server Tue Aug GMT Numerical Computation Research Group Computer Science Department University of Colorado at Boulder Academic Year Numerical Computation Research Group Faculty Liz Bradley Richard Byrd Cai Liz Jessup Oliver McBryan Bobby Schnabel Research Interests The numerical computation research group is concerned with developing analyzing implementing and testing methods for solving mathematical problems on computers It is also concerned with applications of numerical methods to scientific and engineering applications and with languages and tools for numerical computation There is considerable emphasis on the development of methods for parallel computers Specific areas of emphasis within the group include optimization and nonlinear equations Byrd Schnabel partial differential equations Cai McBryan eigenvalue problems Jessup and languages and tools for parallel computation Jessup Schnabel Currently there is also considerable emphasis on applications from molecular chemistry Byrd Schnabel astrophysics McBryan space structures McBryan and combustion and chaotic systems Bradley Courses and textbook in	project	misc
4861	 Date Wednesday GMT Server Friday GMT Performance Prediction Measurement and Prediction of Parallel Program Performance NSF CISE grant Faculty Tom LeBlanc leblanc in collaboration with Mark Crovella crovella Graduate Students Wagner Meira meira Alex Poulos poulos Nikolaos Hardavellas nikolaos Project Summary Carnival is tool designed to automate the process of understanding the performance of parallel programs It supports performance measurement modeling tuning and visualization Carnival measurements are based on predicate profiling which quantifies the time spent in each category of overhead during execution Our first implementation of predicate profiling was implemented on the We now have implementations for the SGI Challenge multiprocessor the IBM network of SUN workstations running PVM and cluster of Alpha workstations Carnival is novel attempt to automate the inference process for performance phenomena In particular Carnival currently supports waiting time analysis an automatic inference process that explains each source of waiting time in terms of the underlying causes instead of simply identifying where it occurs We are now developing similar technique to explain the causes of communication Our ultimate goal is to combine the accuracy of empirical performance measurement with the predictive power of analytic performance modeling Towards that end Carnival supports lost cycles analysis which uses priori knowledge of the sources and characteristics of the overhead categories in parallel systems to guide and constrain the modeling process The Lost Cycles Toolkit which we are integrating within Carnival combines empirical techniques from statistics with measurement and modeling techniques for parallel programs Carnival is also visualization tool that provides link between performance measurements and the source code The interface presents the original source code in window Along the left hand side of the source is scroll bar that indicates the amount of time spent in each portion of the source code summed across all processors Along the right hand side of the source code are color bars that indicate the percent of time spent in each overhead category by that section of source code again summed across all processors windows are used during modeling and waiting time analysis The Carnival implementation comprises about lines of and source code It has been installed at the Cornell Theory Center and we plan to make it more widely available soon We are currently porting the instrumentation library the only portion of the tool to clusters of DEC Alphas connected by the DEC Memory Channel Related Publications Crovella Bianchini LeBlanc Markatos and Wisniewski Using Ratio in Parallel Program Design and Performance Prediction In Proc IEEE Symposium on Parallel and Distributed Processing Dallas Texas December pp Crovella and LeBlanc Performance Debugging Using Parallel Performance Predicates In Workshop on Parallel and Distributed Debugging pp May Crovella and LeBlanc The Search for Lost Cycles New Approach to Performance Tuning of Parallel Programs In Proc Supercomputing Washington November pp Also available as Technical Report Computer Science Univ of Rochester December Crowl Crovella LeBlanc and Scott The Advantages of Multiple Parallelizations in Combinatorial Search of Parallel and Distributed Computing April pp Also available as Technical Report Computer Science Univ of Rochester April Crovella Performance Prediction and Tuning of Parallel Programs Dissertation TR Computer Science Department University of Rochester August Mark Crovella Thomas LeBlanc Wagner Meira Parallel Performance Prediction Using the Lost Cycles Toolkit TR Computer Science Department University of Rochester May Wagner Meira Modeling Performance of Parallel Programs TR Computer Science Department University of Rochester June Wagner Meira Thomas LeBlanc and Alexandros Poulos Performance Visualization and Tuning with Carnival ACM SIGMETRICS Symp on Parallel and Distributed Tools May pp Related Projects AIMS NASA Ames Pablo University of Illinois Paradyn University of Wisconsin Poirot University of Oregon TASS Georgia Tech TAU University of Oregon Other Information There is new symposium on parallel and distributed tools sponsored by ACM SIGMETRICS The symposium has home page and was held May as part of the ACM Federated Conference in Philadelphia See the proceedings of that symposium for papers on the latest work in this area The Parallel Tools Consortium was formed to help coordinate tool development in the parallel processing community See their home page for list of projects approved by the consortium as well as comprehensive list of research projects on parallel tools The Cornell Theory Center maintains list of parallel tools including Forge ParaGraph ParaScope and upshot and associated documentation For an introduction to parallel computing and discussion of related performance issues see Ian Foster text Designing and Building Parallel Programs last modified June Tom LeBlanc leblanc	project	misc
4862	 Date Wed Nov GMT Server Fri Nov GMT Flux Project Home Page The Flux Operating System Project The Fluke Nested Process Architecture The Flux Project objectives are to provide infrastructure the flux for highly efficient systems with flexible degrees of trust initially oriented to protection ii to provide transparent and flexible control of all the resources used by arbitrary subsystems and iii to distribute free and usable versions of the developed software We have recently developed an entirely new kernel and OS structure on which future work will be based new paper Microkernels Meet Recursive Virtual Machines describes how this system efficiently supports recursive virtual machines That paper as well as paper on CPU Inheritance Scheduling appeared at OSDI The draft API for Fluke the new kernel is available in html format postscript and postscript Beware it currently pages long but mostly white space design and rationale document will be forthcoming later this year One of the design features which should provide large performance gains is safely storing portions of normal kernel objects in user space as outlined in these slides from talk at December SOSP This avoids kernel in many common cases Artist renditions of the Fluke Nested Process Architecture and of the Fluke OS providing encapsulated environments for untrusted applications Project Members Papers Core papers Module papers papers Available Software Flux OS Toolkit toolkit to provide infrastructure for constructing operating systems Mach kernel major component of the overall project is an improved kernel Kernel development has moved to Fluke major work on the Mach kernel has stopped Lites Unix server we distribute version of the Lites server PA system snapshot of freely distributable source and binaries in the form of bootable Lites and system for the Quarks an Alpha release of portable and reasonably efficient distributed shared memory system MOSS highly functional DOS extender based on part of the Flux OS toolkit before it was completely modularized Goofie developed by the Mach Shared Objects project goofie creates portable object descriptions from class declarations In the future Goofie may be used by the Flux project to enable polymorphic functions GNU tools we used to maintain the GNU language tools for HP architecture and still provide recent versions in both source and binary forms Related Utah Projects Computing Resources Support The group research in operating systems and related language work is sponsored by grants from ARPA NSF and IBM The Center for Software Science is Utah State Center for Excellence Job Openings Research staff Student fellowships and research assistantships Directions and Hotel Information Directions from the Salt Lake Airport to the Computer Science Department at the University and information on Salt Lake Hotels University of Utah Department of Computer Science home page lepreau Last modified on Fri Nov	project	misc
4863	 Date Wed Nov GMT Server Wed Nov GMT Minimalist Robotics Minimalist Robotics Description Minimalist robotics uses large numbers of simple inexpensive robots to study emergent computation in systems of interacting agents At Indiana University we are using the hexapod Stiquito robot that was invented here in to create Stiquito colony new project involves large numbers of robot bacteria called Robozoa to study field computation with physical agents Associated Faculty Jonathan Mills Gregory Rawlins Associated Graduate Students David Braun Jay Kasberger Gary Parker Students who want to do research in this area should send mail to Jonathan Mills Affiliated Projects NitleMite James Conrad North Carolina State University Scorpio John Estelle University of Toledo Support NSF Graduate Research Traineeship Program Award NSF Incubator Laboratory Grant For more information Minimalist Robotics Related Projects Analog VLSI and Robotics Laboratory Return to Computer Science Research Page	project	misc
4864	 Date Wed Nov GMT Server Fri Mar GMT Communications Research Group Department of Computer Science Michigan State University The Communications Research Group CRG at Michigan State University addresses efficient communication for parallel and distributed computing Specific research topics include communication architectures protocols network interface software communication libraries and the communication aspects of parallel and distributed applications The members of the group include Philip McKinley and approximately graduate and undergraduate students CRG research and equipment is presently funded by the National Science Foundation the Department of Energy HPCC program Ameritech Corporation and the AT Foundation Department of Computer Science Michigan State University Description People Papers Research Projects and Associated Publications CRG Public Domain Software Packages Laboratory Facilities CRG ftp site Michigan State University MSU Department of Computer Science For further information contact Philip McKinley Dept of Computer Science Wells Hall Michigan State University East Lansing MI Telephone FAX Email mckinley	project	misc
4865	 Date Wed Nov GMT Server Mon Dec GMT Computing Theory Computing Theory Description am interested in the logical foundations of computing theory and of constructive mathematics My recent work has been in relations of logic to computational complexity These relations are manifested in proof principles computation principles data structures and programming language types characterizations of computational complexity lend credence to the importance of the classes considered provide insight into their nature relate them to programming methodology suggest new tools for separating them and offer generalizations to computing over arbitrary structures and to computing in higher types also have ongoing interests in reasoning about programs My work in this area has mainly been about logics of programs and their relations to reasoning about programs using higher order methods Associated faculty Dirk Van Gucht Associated Graduate Students Normal Danner Research Support NSF Return to Computer Science Research Page	project	misc
4866	 Date Tue Jan GMT Server Wed Dec GMT The Sundance Sentence Analyzer of CS University of Utah Department of Computer Science Sundance Faculty Ellen Riloff Project Description Sundance Sentence UNDerstanding ANd Concept Extraction is our new conceptual sentence analyzer that is currently under construction Stay tuned for more information here as it develops Mail riloff for more information Last modified Wed Nov	project	misc
